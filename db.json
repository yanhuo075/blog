{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/img/yanhuo-logo.png","path":"img/yanhuo-logo.png","modified":0,"renderable":0},{"_id":"source/wiki/sql/img/cover-db.jpg","path":"wiki/sql/img/cover-db.jpg","modified":0,"renderable":0},{"_id":"source/wiki/sql/img/icon-db.svg","path":"wiki/sql/img/icon-db.svg","modified":0,"renderable":0},{"_id":"themes/stellar/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/stellar/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/stellar/source/js/plugins/copycode.js","path":"js/plugins/copycode.js","modified":0,"renderable":1},{"_id":"themes/stellar/source/js/plugins/download-file.js","path":"js/plugins/download-file.js","modified":0,"renderable":1},{"_id":"themes/stellar/source/js/plugins/video.js","path":"js/plugins/video.js","modified":0,"renderable":1},{"_id":"themes/stellar/source/js/plugins/voice.js","path":"js/plugins/voice.js","modified":0,"renderable":1},{"_id":"themes/stellar/source/js/search/algolia-search.js","path":"js/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/stellar/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/stellar/source/js/services/artalk_latest_comment.js","path":"js/services/artalk_latest_comment.js","modified":0,"renderable":1},{"_id":"themes/stellar/source/js/services/fcircle.js","path":"js/services/fcircle.js","modified":0,"renderable":1},{"_id":"themes/stellar/source/js/services/friends.js","path":"js/services/friends.js","modified":0,"renderable":1},{"_id":"themes/stellar/source/js/services/friends_and_posts.js","path":"js/services/friends_and_posts.js","modified":0,"renderable":1},{"_id":"themes/stellar/source/js/services/ghinfo.js","path":"js/services/ghinfo.js","modified":0,"renderable":1},{"_id":"themes/stellar/source/js/services/giscus_latest_comment.js","path":"js/services/giscus_latest_comment.js","modified":0,"renderable":1},{"_id":"themes/stellar/source/js/services/mdrender.js","path":"js/services/mdrender.js","modified":0,"renderable":1},{"_id":"themes/stellar/source/js/services/memos.js","path":"js/services/memos.js","modified":0,"renderable":1},{"_id":"themes/stellar/source/js/services/siteinfo.js","path":"js/services/siteinfo.js","modified":0,"renderable":1},{"_id":"themes/stellar/source/js/services/timeline.js","path":"js/services/timeline.js","modified":0,"renderable":1},{"_id":"themes/stellar/source/js/services/sites.js","path":"js/services/sites.js","modified":0,"renderable":1},{"_id":"themes/stellar/source/js/services/twikoo_latest_comment.js","path":"js/services/twikoo_latest_comment.js","modified":0,"renderable":1},{"_id":"themes/stellar/source/js/services/waline_latest_comment.js","path":"js/services/waline_latest_comment.js","modified":0,"renderable":1},{"_id":"themes/stellar/source/js/services/weibo.js","path":"js/services/weibo.js","modified":0,"renderable":1},{"_id":"source/friends/img/yanhuo-logo.png","path":"friends/img/yanhuo-logo.png","modified":0,"renderable":0},{"_id":"source/wiki/img/yanhuo-logo.png","path":"wiki/img/yanhuo-logo.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/friends/index.md","hash":"7b2ae879c43c78be69e50cfd6855f34c178a21f1","modified":1749469582059},{"_id":"source/_posts/hello-world.md","hash":"3ff8151f3510fa83e23025a885eb341109ad96bb","modified":1749445783388},{"_id":"source/_data/widgets.yml","hash":"436c43032c37046adfae64b9a1a246397b3e7b8f","modified":1749445783392},{"_id":"source/_data/wodgets.yml","hash":"ddc7200a757e0586be22148649eeee3c83e18706","modified":1749445783392},{"_id":"source/_data/wiki.yml","hash":"2671de463077a97379106f7b61e7077be2a00ce8","modified":1749486125141},{"_id":"source/img/yanhuo-logo.png","hash":"6447f426f5bd1d520913e920af75e0ac454fc21a","modified":1749445783388},{"_id":"source/notes/index.md","hash":"a7a95b1e01bc5666fb6945141cc36e9be96fea7d","modified":1749462826467},{"_id":"source/_data/links/links.yml","hash":"eefc15abf29207ef71534106331cff37354f5b4f","modified":1749469529802},{"_id":"source/_data/wiki/notes.yml","hash":"5bba6db93ac30fe1094eaf944b53392d069ea989","modified":1749462693457},{"_id":"source/_data/wiki/sql.yml","hash":"bdec7dcb92f64c3a057561184f58c6ee30bb18e8","modified":1749627674320},{"_id":"source/wiki/sql/brief.md","hash":"abf32a080aa51cda973dbc0fcd1bf629cad02cad","modified":1749549196959},{"_id":"source/wiki/sql/index.md","hash":"2041e49c13fd1fb7414dcfaff5629d29d2c164ec","modified":1749613530862},{"_id":"source/wiki/img/yanhuo-logo.png","hash":"6447f426f5bd1d520913e920af75e0ac454fc21a","modified":1749527329848},{"_id":"source/_posts/2025/06/Typora-Github-PicGo.md","hash":"e253f250d67d1cdd4d7c83a49be1add1aa2e24d8","modified":1749452933925},{"_id":"source/_posts/2025/06/theme-design1.md","hash":"30cc79c3ad463830bf84108b716082a375f5b5e3","modified":1749445783388},{"_id":"source/wiki/sql/img/cover-db.jpg","hash":"6a2bed5b38d9593b3bcb761552a47a140ec08f14","modified":1749518052000},{"_id":"source/wiki/sql/img/icon-db.svg","hash":"b2e36d1dcd17122864738d75e015fcf602d6efee","modified":1749526809000},{"_id":"source/_posts/2025/06/theme-design2.md","hash":"bdb6e688a340b301e0dc54e4bb058a670c05bef0","modified":1749445783388},{"_id":"themes/stellar/_data/chat_users.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749445783468},{"_id":"themes/stellar/layout/_partial/widgets/search.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749445783496},{"_id":"themes/stellar/source/css/_components/widgets/tree.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1749445783404},{"_id":"themes/stellar/LICENSE","hash":"7fdfdb5dbc7d672fa28a2a3c9efa03ff8df5917d","modified":1749445783468},{"_id":"themes/stellar/README.md","hash":"d474d9b14cafda27ab291336cbdb4ac91bfec756","modified":1749445783468},{"_id":"themes/stellar/_config.yml","hash":"88afc484c1f64b09f44e28ddc0243c2de61899d6","modified":1749445783468},{"_id":"themes/stellar/giscus.json","hash":"af57a96a9dc188079bdcd0ad4273f1765778f5ea","modified":1749445783468},{"_id":"themes/stellar/npm-publish.sh","hash":"b137d2f0d48fccd065ba1750b886f33ad7a7236a","modified":1749445783468},{"_id":"themes/stellar/package.json","hash":"94747c931989be368fa732fe867859c5eb459510","modified":1749445783468},{"_id":"themes/stellar/_data/icons.yml","hash":"8ed26e880c9145f7ab418767fef5dc71d654db33","modified":1749445783468},{"_id":"themes/stellar/_data/widgets.yml","hash":"52f5bd010f5ca20bcb0b880218f2b1e9e159210b","modified":1749445783468},{"_id":"themes/stellar/languages/zh-CN.yml","hash":"60ce8d50a9945f0c69b74c96852eb7a88b27b137","modified":1749517102195},{"_id":"themes/stellar/languages/zh-TW.yml","hash":"fa911ea00c326a1b261cc3e5f1770b27e0238ccf","modified":1749445783484},{"_id":"themes/stellar/languages/en.yml","hash":"5397b48828cceb50a071ee0f3b1432e304cad8ae","modified":1749445783484},{"_id":"themes/stellar/layout/404.ejs","hash":"d84f01256feb3c0bc0b280031fb78ae9f0d86f26","modified":1749445783488},{"_id":"themes/stellar/layout/archive.ejs","hash":"af072e9b75e8d5371771237e71a1f1381078526a","modified":1749445783488},{"_id":"themes/stellar/layout/categories.ejs","hash":"eaf71831abd6780690f26fa1a7cf83bc6f08d7e9","modified":1749445783488},{"_id":"themes/stellar/layout/index.ejs","hash":"ea5fa65b2049bc1c4c8c247972a79310468e3c68","modified":1749445783488},{"_id":"themes/stellar/layout/index_topic.ejs","hash":"6bffb1488ce9c2c4b04386cb7fe61792ae5491f2","modified":1749445783488},{"_id":"themes/stellar/layout/index_wiki.ejs","hash":"9e7dc6941c5205ed60fa7abfb1f36ae19e2f3834","modified":1749445783488},{"_id":"themes/stellar/layout/layout.ejs","hash":"f653ed0550864c3d8fc1253a3b521451558fa557","modified":1749445783488},{"_id":"themes/stellar/layout/notebooks.ejs","hash":"7519887f825bc9ae1ca842e02bc5b2ad909e77a9","modified":1749445783488},{"_id":"themes/stellar/layout/notes.ejs","hash":"242f663e983fc496c51aab9531ccfe46b0d1b05e","modified":1749445783488},{"_id":"themes/stellar/layout/page.ejs","hash":"af600622274600941309fb7c06ebe860ceca24f2","modified":1749445783488},{"_id":"themes/stellar/layout/tags.ejs","hash":"4ff8ccff9a9c8d373df788fbc0bebdc87302056e","modified":1749445783488},{"_id":"themes/stellar/layout/_partial/head.ejs","hash":"aed85b0e59be222d385f92b27c3a26c7f6af7d4b","modified":1749445783500},{"_id":"themes/stellar/layout/_partial/menubtn.ejs","hash":"36775d16431301a6ac02858f32a8ee470ef8332f","modified":1749445783500},{"_id":"themes/stellar/layout/_partial/scripts.ejs","hash":"a20f3ec0c27972a27b075917ce24363c080b2e30","modified":1749445783500},{"_id":"themes/stellar/.npmignore","hash":"9f66a3a5bea36f32c51cbfff88f1a45b74c80592","modified":1749445783468},{"_id":"themes/stellar/layout/_plugins/fancybox.ejs","hash":"dcb638d9320eea6c9a6b7b0212e6167341bec05b","modified":1749445783484},{"_id":"themes/stellar/layout/_plugins/heti.ejs","hash":"c3956c8fd5fabd4ec8cea05dc076bf7a03eb012a","modified":1749445783484},{"_id":"themes/stellar/layout/_plugins/lazyload.ejs","hash":"e2b07b0c97d531c82cc02a80610fe0c1a39bc837","modified":1749445783484},{"_id":"themes/stellar/layout/_plugins/mathjax.ejs","hash":"c1621e718747a6eb34734e7e4a8364f5a78dc714","modified":1749445783484},{"_id":"themes/stellar/layout/_plugins/mermaid.ejs","hash":"5ad208b430071ed4ee84af4ae69356219ec586f0","modified":1749445783484},{"_id":"themes/stellar/layout/_plugins/preload.ejs","hash":"f25523da5633b249da8cebe7c866265bf7825697","modified":1749445783484},{"_id":"themes/stellar/layout/_plugins/copycode.ejs","hash":"7cedd8eced00f6813f7d772334ec92acbc8bd982","modified":1749445783484},{"_id":"themes/stellar/layout/_plugins/index.ejs","hash":"29407e95f14d4d50c1f8a8b9a5af242927676432","modified":1749445783484},{"_id":"themes/stellar/layout/_plugins/swiper.ejs","hash":"b80d6185c0263375df82498705a98ad32238b12f","modified":1749445783488},{"_id":"themes/stellar/layout/_plugins/scrollreveal.ejs","hash":"15fb2ef3de2121360c3cb5a4dfba0a50bafd608e","modified":1749445783484},{"_id":"themes/stellar/layout/_plugins/tianli_gpt.ejs","hash":"c63f65df336bd10b2c5f068830c3086f3f13f3a3","modified":1749445783488},{"_id":"themes/stellar/scripts/filters/index.js","hash":"1fca6cadef00b661f1ef4fc27c2dffc5d97bebdd","modified":1749445783480},{"_id":"themes/stellar/scripts/generators/404.js","hash":"66b53d2b35b18d5f3835b47467c23f31eb322553","modified":1749445783480},{"_id":"themes/stellar/scripts/generators/author.js","hash":"0de0824fdbc4f67c84910267901095504b253751","modified":1749445783484},{"_id":"themes/stellar/scripts/generators/notebooks.js","hash":"ee48a2fa3d03d0fa60f36c4c6d3ca6b192bc6f50","modified":1749445783484},{"_id":"themes/stellar/scripts/generators/categories.js","hash":"936d4d406fd401359bab1e5f74c6e1e097e8f092","modified":1749445783484},{"_id":"themes/stellar/scripts/generators/tags.js","hash":"ed29755154d8e7a9346019ba4ac8782a8649b177","modified":1749445783484},{"_id":"themes/stellar/scripts/events/index.js","hash":"01a8d06a48af2f20aacfac76962bde5edd83dd3f","modified":1749445783480},{"_id":"themes/stellar/scripts/generators/topic.js","hash":"88c0f2990365fb0ce751682815e07f36cf333d3f","modified":1749445783484},{"_id":"themes/stellar/scripts/generators/search.js","hash":"8a59c0923c2a4a11c09ce87fccf98c090c73a0e4","modified":1749445783484},{"_id":"themes/stellar/scripts/generators/wiki.js","hash":"61efe22787c3fea9d935df4b088a9dd2d1af0868","modified":1749445783484},{"_id":"themes/stellar/scripts/helpers/category_color.js","hash":"20b19d6b6307cdeb0b0832bf4931366abe972490","modified":1749445783484},{"_id":"themes/stellar/scripts/helpers/icon.js","hash":"b7c84be7f08abc1725f351ed8718791a861466c3","modified":1749445783484},{"_id":"themes/stellar/scripts/helpers/parse_config.js","hash":"1251d82318972f22283dc7a089b77a3f0135b1b6","modified":1749445783484},{"_id":"themes/stellar/scripts/helpers/random.js","hash":"c6565965b5b423fdba19b973a63375d373466e0e","modified":1749445783484},{"_id":"themes/stellar/scripts/helpers/scrollreveal.js","hash":"57e3da4a3dd751b3ebd384a674e26f08f69da018","modified":1749445783484},{"_id":"themes/stellar/scripts/helpers/related_posts.js","hash":"6763a97fa25669fa1d1aa8e5291919deb5dc7f67","modified":1749445783484},{"_id":"themes/stellar/scripts/helpers/stellar_info.js","hash":"5b7a10c8b09237a467767f5467749c7d9378c2c1","modified":1749445783484},{"_id":"themes/stellar/scripts/helpers/utils.js","hash":"05c127baa250b192c9c673355bf90d7134e1ea11","modified":1749445783484},{"_id":"themes/stellar/scripts/tags/inline-labels.js","hash":"a9cb7520af8a95f467c048128c036cbb3167fb8d","modified":1749445783468},{"_id":"themes/stellar/scripts/tags/index.js","hash":"aa9828b105feb930755df6715fe4a4c210635e5b","modified":1749445783468},{"_id":"themes/stellar/scripts/helpers/dynamic_color.js","hash":"507acbb7445ec172e10ab03c8917a4d8132e264a","modified":1749445783484},{"_id":"themes/stellar/source/css/_custom.styl","hash":"bf654c890ca88bb748691a749b8cb52466e1430b","modified":1749471347618},{"_id":"themes/stellar/source/css/main.styl","hash":"44b5008a50682b442f38f1cc2ffd117e4dfc9ec5","modified":1749445783396},{"_id":"themes/stellar/layout/_partial/comments/layout.ejs","hash":"3dbdb141d295d25b4f67fd0e299c40baa38241a8","modified":1749445783500},{"_id":"themes/stellar/layout/_partial/comments/script.ejs","hash":"62be59ef634ceee342c81ecc4e23cb664cdbf620","modified":1749445783500},{"_id":"themes/stellar/layout/_partial/cover/post_cover.ejs","hash":"59e6ae6726ded33e3d84208fd4a4872a6431fcc7","modified":1749445783488},{"_id":"themes/stellar/layout/_partial/cover/wiki_cover.ejs","hash":"8374cf58d5cc52799b8e1c8af95dd84c65372173","modified":1749445783488},{"_id":"themes/stellar/layout/_partial/main/footer.ejs","hash":"50f38f094dbbba887632fb3104c78b8be9eb39c7","modified":1749474690873},{"_id":"themes/stellar/layout/_partial/scripts/defines.ejs","hash":"cc4c6668be39e6a03279a5ac7cfd7eb364d705cd","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/scripts/services.ejs","hash":"9dec23072ebbdf96d164bc698a11f3a09ea26d1a","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/scripts/sidebar.ejs","hash":"403b6986bfc54177a7ee3ddba9e0a55e7b79e3a1","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/cover/index.ejs","hash":"4b317700640749b1e04e6d51a542a2bcd28c8b72","modified":1749445783488},{"_id":"themes/stellar/source/js/main.js","hash":"41ddd41a9f1896ad548a8eaa8610da2f823009ba","modified":1749445783392},{"_id":"themes/stellar/layout/_partial/scripts/theme.ejs","hash":"9124e925cfe74f4af5f37530994f3af9bc6f470d","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/sidebar/index_rightbar.ejs","hash":"a16ecd6d9421c30ffe2ca1a44cc9597309b5b70c","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/sidebar/index_leftbar.ejs","hash":"3ce47de8a4e832454da10e271e4855b15cb3d9e7","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/sidebar/logo.ejs","hash":"cd08385b0026953cd9adf5c22af528b9c3e924e7","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/scripts/utils.ejs","hash":"4cf7b1cd5815e5594a92428694f3bc2470287138","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/sidebar/menu.ejs","hash":"59d579a0eaec7572485d8d4d22341de79a890d00","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/sidebar/search.ejs","hash":"770056e023a00b22d2853c4fa65bb48035ade3b2","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/scripts/tagtree.ejs","hash":"c16031694fee3e0c305139136126dee88e1e88cf","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/widgets/author.ejs","hash":"4c7eab461e45a7a5863333e9904dadbed6c8ca0c","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/widgets/categories.ejs","hash":"5482375b532a8bd6089e1dd2376be4a4551e79cf","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/widgets/ghrepo.ejs","hash":"e7d23ff8f8c96f77685e441c7f6040430d07a21a","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/widgets/ghissues.ejs","hash":"410f56e6da87e7a1476d033c6939a0241658a598","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/widgets/ghuser.ejs","hash":"5d8cf68b091f8bf4b88ac230495bc2dec561ad6a","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/widgets/linklist.ejs","hash":"813336cbbe4505e9be42d5682fd7b720dba25194","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/widgets/recent.ejs","hash":"3962a8b6f3c1adc80ecc846e6ad0888722ec5464","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/widgets/markdown.ejs","hash":"7ce0ce941c55e42c545c1fffa77a3db07e1989b1","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/widgets/related.ejs","hash":"ac6040f2067c799836d5dc4abacf0b879a156d88","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/widgets/tagcloud.ejs","hash":"d95c26f84c7d9061ba3ef6188d58fa14f1c63bf3","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/widgets/tagtree.ejs","hash":"9941285c0af5d5fbdf5e8e5b1c73f67304d9afed","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/widgets/timeline.ejs","hash":"745b384871291e0cf2f6ceb4a0c12989b4e8cd62","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/widgets/toc.ejs","hash":"fd0be7f0f60cea0e0e637d122af47a601f56010c","modified":1749445783496},{"_id":"themes/stellar/layout/_partial/widgets/tree.ejs","hash":"2a7d37a843e32d073be4637bc17980e368a16003","modified":1749445783496},{"_id":"themes/stellar/layout/_plugins/search/algolia_search.ejs","hash":"1d720e4b0308a0818f45a9a4b63df1e9f6521737","modified":1749445783488},{"_id":"themes/stellar/layout/_plugins/search/local_search.ejs","hash":"38a3641bb532583b699fda42175cb14242f07575","modified":1749445783488},{"_id":"themes/stellar/scripts/events/lib/authors.js","hash":"eedefb5430fc4176bdc2814c8a88295f0e524d10","modified":1749445783480},{"_id":"themes/stellar/scripts/events/lib/config.js","hash":"a5eae5fd9c841692c1d26fcd2e2fc54ba622fcd0","modified":1749445783480},{"_id":"themes/stellar/scripts/events/lib/doc_tree.js","hash":"f7d6b86a442afabf885566adfc02d42dc5eaf46e","modified":1749445783480},{"_id":"themes/stellar/scripts/events/lib/links.js","hash":"881cac75e4071d219a18156738e18eb397d83c00","modified":1749445783480},{"_id":"themes/stellar/scripts/events/lib/merge_posts.js","hash":"4e45b8dc5317f7d66bc14879ae6b5f972123ce5d","modified":1749445783480},{"_id":"themes/stellar/scripts/events/lib/notebooks.js","hash":"ad5eae17a77a92100c748fd668c73e1b09f7a21f","modified":1749445783480},{"_id":"themes/stellar/scripts/events/lib/topic_tree.js","hash":"7f735f2573c87d202e2d4b845307d0725d619e8e","modified":1749445783480},{"_id":"themes/stellar/scripts/filters/lib/img_lazyload.js","hash":"b3dedcc1fc4189589e63d4fa6f169a70e9d63cd1","modified":1749445783480},{"_id":"themes/stellar/scripts/events/lib/utils.js","hash":"271ba6c8cc997e4f55b2e146a99bde8301818400","modified":1749445783480},{"_id":"themes/stellar/scripts/filters/lib/img_onerror.js","hash":"d44a8e20d4d537c0cf85b980e1fc3bc84865a2d3","modified":1749445783480},{"_id":"themes/stellar/scripts/tags/lib/about.js","hash":"c9778c35c1ccd9f2018174bafbd37b23dd52cf62","modified":1749445783472},{"_id":"themes/stellar/scripts/tags/lib/albums.js","hash":"9fd16a8ceffd1806c25582062af7a72eca0e5c56","modified":1749445783472},{"_id":"themes/stellar/scripts/tags/lib/audio.js","hash":"9b094b16dce131a5c09373661c88a1de9b5326f7","modified":1749445783472},{"_id":"themes/stellar/scripts/tags/lib/banner.js","hash":"1fceb77a37ecaddf38c03aa655eec878701427c0","modified":1749445783472},{"_id":"themes/stellar/scripts/tags/lib/box.js","hash":"66bed2e303468a8fd9c664ce3e697ceb4e3eb931","modified":1749445783472},{"_id":"themes/stellar/scripts/tags/lib/button.js","hash":"e0890a759335b1c5ad09db084bcf62073b2557cb","modified":1749445783472},{"_id":"themes/stellar/scripts/tags/lib/checkbox.js","hash":"69caf7488b6c92cb2524df81ece6f33a46a89fe0","modified":1749445783472},{"_id":"themes/stellar/scripts/tags/lib/copy.js","hash":"d22a82b6fd9c96c7ac49677b427e6c629fa889d7","modified":1749445783472},{"_id":"themes/stellar/scripts/tags/lib/emoji.js","hash":"e10f68f69206fc6e9d0c478630be2b4514d328d7","modified":1749445783472},{"_id":"themes/stellar/scripts/tags/lib/folders.js","hash":"4ca5470285541033b8272ba7cc3bd5860504169e","modified":1749445783476},{"_id":"themes/stellar/scripts/tags/lib/folding.js","hash":"9f51610fc62067a16a9c27884864f69e4200843c","modified":1749445783476},{"_id":"themes/stellar/scripts/tags/lib/friends.js","hash":"27f31920fbd9d30ac4fae591867692fe9ed40207","modified":1749445783476},{"_id":"themes/stellar/scripts/tags/lib/gallery.js","hash":"56a9309b096cbe1876a1e8c2b7c3f692325135e1","modified":1749445783476},{"_id":"themes/stellar/scripts/tags/lib/grid.js","hash":"dad59b638c2fd30538e3a69bf0c8d76d34cf3ece","modified":1749445783476},{"_id":"themes/stellar/scripts/tags/lib/ghcard.js","hash":"039ee39d8dba7c0aa0e267de38f9064b30855a55","modified":1749445783476},{"_id":"themes/stellar/scripts/tags/lib/frame.js","hash":"1251a8622260af8efc55c2f0aac8ee5cf79d9043","modified":1749445783476},{"_id":"themes/stellar/scripts/tags/lib/hashtag.js","hash":"f38ce98fff40ed35be9b1f1be3194bc4c5d44dc3","modified":1749445783476},{"_id":"themes/stellar/scripts/tags/lib/icon.js","hash":"273898ae29a07c1baccb432efa0d33ccfabe7db9","modified":1749445783476},{"_id":"themes/stellar/scripts/tags/lib/image.js","hash":"aa10441f0ec79b2f33829e5b1b8b4b4c21d865e9","modified":1749445783476},{"_id":"themes/stellar/scripts/tags/lib/link.js","hash":"8a1297c324749f98e24036d3aa91ad374ad1d930","modified":1749445783476},{"_id":"themes/stellar/scripts/tags/lib/mark.js","hash":"cfd8198f349dba60fbdf53042b6ebd9a0ba521c7","modified":1749445783476},{"_id":"themes/stellar/scripts/tags/lib/md.js","hash":"6ed5db6d055dbfe01ecaeddbd0ead13a20ba7e74","modified":1749445783476},{"_id":"themes/stellar/scripts/tags/lib/navbar.js","hash":"e78ca3469c44362c7d8c3ad8899f49a119b326ff","modified":1749445783476},{"_id":"themes/stellar/scripts/tags/lib/note.js","hash":"a70d1fcb440ad029ddddb72b053a59b1ed3bfef8","modified":1749445783476},{"_id":"themes/stellar/scripts/tags/lib/okr.js","hash":"8e7a7d912e4f5e1fe1feb6125e4762c378b11ba3","modified":1749445783476},{"_id":"themes/stellar/scripts/tags/lib/poetry.js","hash":"c36321caeec845ed131bdd0922bff25eb59f086a","modified":1749445783476},{"_id":"themes/stellar/scripts/tags/lib/posters.js","hash":"713e1367f3a60e5903954a8fab15b0d9d9cfd89a","modified":1749445783476},{"_id":"themes/stellar/scripts/tags/lib/sites.js","hash":"6fb966bb545a698dd9c9fa1753ddf0d81366b7e0","modified":1749445783476},{"_id":"themes/stellar/scripts/tags/lib/quot.js","hash":"f15aa5c0fc87114a98e51baefb048b22302f7474","modified":1749445783476},{"_id":"themes/stellar/scripts/tags/lib/swiper.js","hash":"dc025c79b190d233383fec001ddbe478f2675cc8","modified":1749445783476},{"_id":"themes/stellar/scripts/tags/lib/tabs.js","hash":"1b3d7b6b962293b44430e7b40560b8d1fa5c618d","modified":1749445783480},{"_id":"themes/stellar/scripts/tags/lib/timeline.js","hash":"f1defeed67e56c055f37ee7fab8a597a9d14f89e","modified":1749445783480},{"_id":"themes/stellar/scripts/tags/lib/toc.js","hash":"d7b51b66d7b83a77e501930e735092a9967d5d18","modified":1749445783480},{"_id":"themes/stellar/scripts/tags/lib/video.js","hash":"071cde27216306c6821c0e692c3904274a985213","modified":1749445783480},{"_id":"themes/stellar/source/css/_common/base.styl","hash":"2986c5771652c353a320f4404ceeb1c6b257a6ed","modified":1749445783400},{"_id":"themes/stellar/source/css/_common/blockquote.styl","hash":"f107e6f399382a6663722bc2e823986c257da9a3","modified":1749445783400},{"_id":"themes/stellar/source/css/_common/blur.styl","hash":"43441caaee7b7ab011a26016362b023263cd64a8","modified":1749445783400},{"_id":"themes/stellar/source/css/_common/button.styl","hash":"9afb3e566294f95f404a608b666367081a691e6b","modified":1749445783400},{"_id":"themes/stellar/source/css/_common/control.styl","hash":"75081ca9d522a76ec4acffb8111c918b2297650a","modified":1749445783400},{"_id":"themes/stellar/source/css/_common/cap.styl","hash":"c99286644d4a44dc76e1fe9a3af1815112f65acc","modified":1749445783400},{"_id":"themes/stellar/source/css/_common/device.styl","hash":"fa135f5d93f8a333cc77f7dd4f6b8bf88e0f43bd","modified":1749445783400},{"_id":"themes/stellar/source/css/_common/html.styl","hash":"e7f596ff7294517096f5cb27f5af53b1a797e047","modified":1749445783400},{"_id":"themes/stellar/source/css/_common/highlight.styl","hash":"2e1191dbfa6e77a53ea9e95cecf66dc5b3d63b81","modified":1749445783400},{"_id":"themes/stellar/source/css/_common/image.styl","hash":"cca1103a9185202b13be49e16d77d259e9ffb482","modified":1749445783400},{"_id":"themes/stellar/source/css/_common/input.styl","hash":"953fc87072cd760d92dfef55310addbb17bb2b51","modified":1749445783400},{"_id":"themes/stellar/source/css/_common/layout.styl","hash":"c7d0d3c70087e14bd1f6d8d50d56762d8c5ad44d","modified":1749445783400},{"_id":"themes/stellar/source/css/_common/media.styl","hash":"fa7dbcaa31089fe547acb01a767af97fb019bba6","modified":1749445783400},{"_id":"themes/stellar/source/css/_common/loading.styl","hash":"6962fd568ad9779146742b8b8928cec107972e8e","modified":1749445783400},{"_id":"themes/stellar/source/css/_common/pre.styl","hash":"be7ecc0a1cdd2e6f1594c4cc238734b2dc3a2c4e","modified":1749445783400},{"_id":"themes/stellar/source/css/_common/span.styl","hash":"86462ffaf1603b5d5ab6534c0f7fe0eb495aad2d","modified":1749445783400},{"_id":"themes/stellar/source/css/_common/svg.styl","hash":"aa2ae391db2ea028b9221740b24fca7f7e9ff16c","modified":1749445783400},{"_id":"themes/stellar/source/css/_common/title.styl","hash":"c9009b6c52a1ea4dfb6c2f56b1c3fc6de8a2c63a","modified":1749445783400},{"_id":"themes/stellar/source/css/_common/toast.styl","hash":"f2930874174763da2338fa95087c345bf5c41800","modified":1749445783400},{"_id":"themes/stellar/source/css/_components/layout.styl","hash":"b7eb188db92bb9a32ae180969838f6eda2ec9640","modified":1749445783400},{"_id":"themes/stellar/source/css/_components/index.styl","hash":"7a7ab293e065116646102546c6bab01166836059","modified":1749445783400},{"_id":"themes/stellar/source/css/_components/list.styl","hash":"53d068ee10cc64c98ae4ae5c894c0c7454f00f06","modified":1749445783400},{"_id":"themes/stellar/source/css/_components/md.styl","hash":"5cc0379fd0d4abf7a34944ccff1cf0b7dafdf091","modified":1749445783400},{"_id":"themes/stellar/source/css/_components/main.styl","hash":"41040b445d23ff4e56656ce3ca4e0fd7fd67d67b","modified":1749445783400},{"_id":"themes/stellar/source/css/_defines/const.styl","hash":"c62a434f1eef895d343cb8255a19c6f1a6c73195","modified":1749445783396},{"_id":"themes/stellar/source/css/_defines/func.styl","hash":"30a7500aef3a75ebd2b193e8999101631a12611f","modified":1749445783396},{"_id":"themes/stellar/source/css/_defines/theme.styl","hash":"e38e0061b92a01f2c05c08da1093ef503fb972df","modified":1749445783396},{"_id":"themes/stellar/source/css/_plugins/aplayer.styl","hash":"00b6e9209638eef9f70e75a24a5a90b05f7b5347","modified":1749445783396},{"_id":"themes/stellar/source/css/_plugins/fancybox.styl","hash":"f4a709dcac4e21ca0fbeca552a8dde2ac2bf8d97","modified":1749445783396},{"_id":"themes/stellar/source/css/_plugins/copycode.styl","hash":"a9f27136143eb779d1aeb903e863c94a98b82aac","modified":1749445783396},{"_id":"themes/stellar/source/css/_plugins/index.styl","hash":"f96caf6f1d582973bc71199eee478cfc9fe88085","modified":1749445783396},{"_id":"themes/stellar/source/css/_plugins/katex.styl","hash":"f58016799f7a534d453625fab4cd66a13063e4b8","modified":1749445783396},{"_id":"themes/stellar/source/css/_plugins/lazyload.styl","hash":"6cd216067594d07c097a66e2403df36a1abbe6d6","modified":1749445783396},{"_id":"themes/stellar/source/css/_plugins/mermaid.styl","hash":"b01f298bb006abfe00bf68566bcc53c3cad4a6e7","modified":1749445783396},{"_id":"themes/stellar/source/css/_plugins/scrollreveal.styl","hash":"21b9125c1bae3e5348547e85500ceb992de21923","modified":1749445783396},{"_id":"themes/stellar/source/css/_plugins/swiper.styl","hash":"46179e1e9ca273f4e095388d981acdc9fce5bdb8","modified":1749445783396},{"_id":"themes/stellar/source/css/_plugins/tianli_gpt.styl","hash":"6cc2d27b8ec0296de09ce38d15abdd966702b79a","modified":1749445783400},{"_id":"themes/stellar/source/js/plugins/copycode.js","hash":"af017eeaaf12e78b1700d78b199b4368d001a193","modified":1749445783392},{"_id":"themes/stellar/source/js/plugins/download-file.js","hash":"dd0cb9ea1bc6464567a96ee47c35b43d7eb086e8","modified":1749445783392},{"_id":"themes/stellar/source/js/plugins/voice.js","hash":"4c865125754c98dd61de28ad88c831be3d673a35","modified":1749445783392},{"_id":"themes/stellar/source/js/search/algolia-search.js","hash":"94dae768b275b12753553553b3338fca4973a1e3","modified":1749445783392},{"_id":"themes/stellar/source/js/plugins/video.js","hash":"e87d271175dfb4763c9c017046f7d857c7a3ba56","modified":1749445783392},{"_id":"themes/stellar/source/js/search/local-search.js","hash":"cf710d711fcbc21122cdc01edd43d9b4087f1b9d","modified":1749445783392},{"_id":"themes/stellar/source/js/services/artalk_latest_comment.js","hash":"29a6ca87b9dac4708164f31d0f99a1c6bebd38ea","modified":1749445783392},{"_id":"themes/stellar/source/js/services/fcircle.js","hash":"add550bfb204a2057661d4d6630d78ebf485754d","modified":1749445783392},{"_id":"themes/stellar/source/js/services/friends.js","hash":"91e408da632efe630a2c2048868c70c425e284da","modified":1749445783392},{"_id":"themes/stellar/source/js/services/friends_and_posts.js","hash":"8b7365a1ff9f35c4a6b1d7b90c3da166a8bfa369","modified":1749445783392},{"_id":"themes/stellar/source/js/services/ghinfo.js","hash":"94b86ce42dd765e9a4c1befa72ee9648d7ec6f88","modified":1749445783392},{"_id":"themes/stellar/source/js/services/giscus_latest_comment.js","hash":"2c9c9176f4d35b5c036c6723627d693345cbbf38","modified":1749445783392},{"_id":"themes/stellar/source/js/services/memos.js","hash":"2d430c7ae4d9f3a44653eda0214d18fb60bcfed1","modified":1749445783392},{"_id":"themes/stellar/source/js/services/siteinfo.js","hash":"74da788f29862604cd53f6b82b036ff56c715d21","modified":1749445783396},{"_id":"themes/stellar/source/js/services/mdrender.js","hash":"947f476e6dd8ca6a75f87f6ac6f2fbb2b0861e82","modified":1749445783392},{"_id":"themes/stellar/source/js/services/timeline.js","hash":"41cde82427726c3366b64b1f54f1aed9bc20fcf1","modified":1749445783396},{"_id":"themes/stellar/source/js/services/sites.js","hash":"210ea61b6e12688c969453662483a54fc5567743","modified":1749445783396},{"_id":"themes/stellar/source/js/services/twikoo_latest_comment.js","hash":"d5c7bb0b9888333c2e10dedea8bfc19df5454d58","modified":1749445783396},{"_id":"themes/stellar/source/js/services/waline_latest_comment.js","hash":"7520f62dcf3b991b99e37b8c33a7d6a89e7f2da5","modified":1749445783396},{"_id":"themes/stellar/source/js/services/weibo.js","hash":"437e631539f3a50cf8b46ff17008404609c1c481","modified":1749445783396},{"_id":"themes/stellar/layout/_partial/comments/artalk/layout.ejs","hash":"14b26d696ba6644ef9d5854e1b4a8fda028bddb9","modified":1749445783500},{"_id":"themes/stellar/layout/_partial/comments/artalk/script.ejs","hash":"beee3759c0501f1ed5266fc6725332b1e1d54dce","modified":1749445783504},{"_id":"themes/stellar/layout/_partial/comments/beaudar/layout.ejs","hash":"431848ce38c18589ddb54d5e705bd7792872c199","modified":1749445783504},{"_id":"themes/stellar/layout/_partial/comments/beaudar/script.ejs","hash":"69a2582d4e9e3203368196f4806adab2274e41fb","modified":1749445783504},{"_id":"themes/stellar/layout/_partial/comments/giscus/layout.ejs","hash":"144e313ab45889c715ea1cfff3976b1f1322469e","modified":1749445783500},{"_id":"themes/stellar/layout/_partial/comments/giscus/script.ejs","hash":"49fd68b7752d0ca06d80a52bf800cf03845909e0","modified":1749445783500},{"_id":"themes/stellar/layout/_partial/comments/twikoo/layout.ejs","hash":"a3d429f4eafc582f739dd48865b39afd7c22ed56","modified":1749445783500},{"_id":"themes/stellar/layout/_partial/comments/twikoo/script.ejs","hash":"3c93fe825769cd70027281c28980021b3ff8c4b0","modified":1749445783500},{"_id":"themes/stellar/layout/_partial/comments/utterances/layout.ejs","hash":"431848ce38c18589ddb54d5e705bd7792872c199","modified":1749445783500},{"_id":"themes/stellar/layout/_partial/comments/utterances/script.ejs","hash":"0c54bbd610c1b31d7f45b9b4ded65690b673482c","modified":1749445783500},{"_id":"themes/stellar/layout/_partial/comments/waline/layout.ejs","hash":"2abe764ffeab5603645b0e5148a17e9373de5eb4","modified":1749445783500},{"_id":"themes/stellar/layout/_partial/comments/waline/script.ejs","hash":"ef4b59476f4edf03cb25bdffe449b5da161d1d8e","modified":1749445783500},{"_id":"themes/stellar/layout/_partial/main/article/article_footer.ejs","hash":"e93326cdd00f97d363c4830a81d7adb4dcae507c","modified":1749445783488},{"_id":"themes/stellar/layout/_partial/main/article/related_posts.ejs","hash":"ef485a4dc2db40bd68b35128f2140520db859b45","modified":1749445783492},{"_id":"themes/stellar/layout/_partial/main/navbar/article_banner.ejs","hash":"1651576216695b49980cf4531a0020ab82fb65c7","modified":1749445783492},{"_id":"themes/stellar/layout/_partial/main/navbar/dateinfo.ejs","hash":"f0ce9221931e9113de3df27eac39313eb0df217b","modified":1749445783492},{"_id":"themes/stellar/layout/_partial/main/article/read_next.ejs","hash":"30c9e20e6835fa92a528de61041742ff42cc2af0","modified":1749445783488},{"_id":"themes/stellar/layout/_partial/main/navbar/nav_tabs_blog.ejs","hash":"9a37405585fdabb01aca7b367ebb3ca4ed20d1ff","modified":1749445783492},{"_id":"themes/stellar/layout/_partial/main/navbar/nav_tabs_wiki.ejs","hash":"6540ecba5960522594cbf2d9d1466789ba95c63e","modified":1749517125903},{"_id":"themes/stellar/layout/_partial/main/notebook/note_card.ejs","hash":"f9b87418fbecf9e7e3a5d074ee9e9a26f5cc1788","modified":1749445783492},{"_id":"themes/stellar/layout/_partial/main/notebook/note_tags.ejs","hash":"6103372e1d17396550da909aed9de1f26e483962","modified":1749445783492},{"_id":"themes/stellar/layout/_partial/main/navbar/ghinfo.ejs","hash":"f5177430efd994b7c2d9d3104a58b0f1f60f4a00","modified":1749445783492},{"_id":"themes/stellar/layout/_partial/main/notebook/notebook_card.ejs","hash":"999b9c8895d84db707b1654c42326dfbb5fbe0fa","modified":1749445783492},{"_id":"themes/stellar/layout/_partial/main/notebook/paginator.ejs","hash":"3c2f797fd3cf7e6e8c1b1dac168db26e92430b60","modified":1749445783492},{"_id":"themes/stellar/layout/_partial/main/post_list/paginator.ejs","hash":"1a4b3bc64325ec7d5932ea78c36f2ec4978c09eb","modified":1749445783492},{"_id":"themes/stellar/layout/_partial/widgets/components/edit.ejs","hash":"9d976ca956c73128f72f39ca7641ceb5240b15a1","modified":1749445783500},{"_id":"themes/stellar/layout/_partial/widgets/components/link.ejs","hash":"eee3e54cca066643d973f7bc1e2af6230121e634","modified":1749445783500},{"_id":"themes/stellar/layout/_partial/widgets/components/linklist.ejs","hash":"91f3a83ff54284200951637c0cfcd3e4e613942e","modified":1749445783500},{"_id":"themes/stellar/scripts/tags/lib/read/paper.js","hash":"e87bbcf10f743e1fcfadc03cf6281aee87c255f5","modified":1749445783480},{"_id":"themes/stellar/scripts/tags/lib/read/reel.js","hash":"3a833a0c7d29f98972d6141103d62d5abfd913e4","modified":1749445783480},{"_id":"themes/stellar/source/css/_components/pages/error.styl","hash":"91f9df285a87bc7b7e9da19d547ea4b1dc392828","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/pages/archives.styl","hash":"a99f09f4cc948588d071f8cd95362f2d70ec4c40","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/pages/notebook.styl","hash":"2f9199575a7a58490d5faf023511781066370dae","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/partial/article-banner.styl","hash":"afc9d5e075bf0dffa24896cc5f7bf01a2af27a1a","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/partial/bread-nav.styl","hash":"daf58b32af0b5dfea6cbfa1c3cab695976e57164","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/partial/article-footer.styl","hash":"762c38e63aebbd028b5aed264349fa1d2a14e8af","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/partial/cover.styl","hash":"ef44c47d0a70feb84d69cf8bb2bc6977f61b94f2","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/partial/navbar.styl","hash":"282291ee0f876ea14cff671555ab9defe8fc2318","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/partial/footer.styl","hash":"363fd4daf060fbf7de56fe5df787bc325565791b","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/partial/paginator.styl","hash":"d5a64f3820ffc0913086c9fa35b26391eb023e61","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/sidebar/footer.styl","hash":"ac3423d488259ea467e95325e12f57476a9bdc9c","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/partial/related.styl","hash":"b413ab434cfb778384fbac64d43da41437435aa0","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/sidebar/logo.styl","hash":"f81eb3d7a49c71f728d8bf42081bde30c6ff596e","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/sidebar/menu.styl","hash":"57f772066edaa2cbe560622de28035780ad9000b","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/sidebar/nav-area.styl","hash":"5302a72d15f7c35b391da723e84592f1129fca57","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/sidebar/search.styl","hash":"ea880602a99ed8cb9b87f410e1f340b4d23d38e8","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/sidebar/sidebar.styl","hash":"aaac0bc311badd146a11d3276ce89a4361c52ad4","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/tag-plugins/about.styl","hash":"cdaf1ccd782db961cecda0802c94dabe27656731","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/tag-plugins/banner.styl","hash":"f49a123a61cb02c65eebb79adefae9a6f8b8e2fc","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/tag-plugins/button.styl","hash":"19469c881d8798916ea45ec11ecd5348146e7927","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/tag-plugins/checkbox.styl","hash":"1cd33e27fd539ed2a6cb41d4fc59294f1dd315b4","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/common.styl","hash":"a0a0e36d7672271147853bae34eb15b1ad2f0eef","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/emoji.styl","hash":"100d2e0c43496464dd97fa83fa3e603e68bf30e9","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/folders.styl","hash":"2eae18b521a613a19dd6399dcb5504f843dcbb88","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/copy.styl","hash":"2e00b4923bf8a4cf1b742d19cf26165cc65fcffe","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/friends_posts.styl","hash":"f1c9f69193d421070146a46106ae83757adae4bd","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/friends.styl","hash":"4bd5ca434bd72222aeaa3ad315c6a0252c3628cf","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/ghcard.styl","hash":"98a50d3fab79ce03dd7f161fe3442d803712c284","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/folding.styl","hash":"84eb11a5a5808f3a4bd0985d97a7b108a36fd044","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/gallery.styl","hash":"52be8d049ce7533084aa3a6f361b4f365086af02","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/grid.styl","hash":"606311fa8326152f99fc721284a09e06490d0cca","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/hashtag.styl","hash":"0e2e74fcff5c30be9533e451a1c06ed1477dc9aa","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/frame.styl","hash":"f8621b5a155ea78c5828e7ccbd1dfe6a72c9733c","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/chat.styl","hash":"6bbb0fbec4dc12c7dbdf13c4a1b79cb1da1dc5e3","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/tag-plugins/index.styl","hash":"d76245514a5a0aecb65120b7117cd125a70617fb","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/icon.styl","hash":"ea5372d1042db221f6c3ce5a31e18153c5e00d39","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/image.styl","hash":"beb0eb953d11489d4eaf16282784625062c81d9f","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/link.styl","hash":"b91bb69a2f84567f87c2665c3dbaeb8831487185","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/inline-labels.styl","hash":"96aad4c7710ed7097842fab77473b66a298b6e3f","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/mark.styl","hash":"1227da0705c294abab7030439d1e505c6b304ccf","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/media.styl","hash":"61541156e59cd946b86626b4b2af0a2f24546f25","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/navbar.styl","hash":"c2c3da16355f2dfd316edd11d9f2f2c50bc5299c","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/note.styl","hash":"5e59f5ab728c2ad5b5e4e06b0dd694407bb14096","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/okr.styl","hash":"0c2d281e90c8cb1a0de5ff516dca0e08ae7db141","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/override.styl","hash":"6a31ef8c4dc7caa655ed7d852100abb2711ab5ac","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/quot.styl","hash":"15c6726b2ea1d5ff7a12a310766145dffde4e778","modified":1749445783408},{"_id":"themes/stellar/source/css/_components/tag-plugins/poetry.styl","hash":"6d15463121a741b69249318cadabf4bd06b4b3c6","modified":1749445783408},{"_id":"themes/stellar/layout/_partial/main/post_list/topic_card.ejs","hash":"9f100016e7cfa07c8728f9c3cf9543ed3ed43cfe","modified":1749445783492},{"_id":"themes/stellar/source/css/_components/tag-plugins/toc.styl","hash":"18577b1c775f14da4b70cf3a8db56aa229f733c8","modified":1749445783412},{"_id":"themes/stellar/source/css/_components/widgets/categories.styl","hash":"742a09d76e49fcd4885df39298cb8a40f820bc20","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/tag-plugins/tabs.styl","hash":"70c1c2898e48473c66bad024235a6e62620d4efa","modified":1749445783412},{"_id":"themes/stellar/source/css/_components/widgets/components.styl","hash":"34280561524a535342da3f246443b2a94fef074d","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/widgets/ghrepo.styl","hash":"73d5baa3dfcc9e73fc7470e1ebe244857ffd75c1","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/widgets/list.styl","hash":"176281f5ccc64f87da4bbd4e34316e32017bc3b4","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/tag-plugins/timeline.styl","hash":"a5ef35db9c54905770c0ab68471ec054b0a83d9e","modified":1749445783412},{"_id":"themes/stellar/source/css/_components/widgets/markdown.styl","hash":"f5a431cd88fca7f328634e13eff50a55b34b734b","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/widgets/ghuser.styl","hash":"16c62c701f9cf6a253c6390d43eaa01cfd7600b1","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/widgets/timeline.styl","hash":"ab1901de4acfe89b642cd721d7d08b1b0009661b","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/widgets/tagcloud.styl","hash":"c452b18f1242c634c0e124a46414cbc7c65da494","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/widgets/toc.styl","hash":"f290d98a4d721b523b0c972b7de61a86b05b1086","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/widgets/widgets.styl","hash":"7d383e58d54bf40806027fa22ab0ba70b5ab4fde","modified":1749445783404},{"_id":"themes/stellar/source/css/_components/widgets/related.styl","hash":"8464b5adb8ffcd086d0e748849d907871d149223","modified":1749445783404},{"_id":"themes/stellar/source/css/_plugins/comments/artalk.styl","hash":"279d7185e0ea65a8f5e1f783eaa3f83bc7bf3555","modified":1749445783400},{"_id":"themes/stellar/source/css/_plugins/comments/beaudar.styl","hash":"e9800f67a650f1c022aee494768e05da76e6a6b7","modified":1749445783400},{"_id":"themes/stellar/source/css/_components/tag-plugins/sites.styl","hash":"741199450e66ce84bd71a373fb664deae9dbeedb","modified":1749445783408},{"_id":"themes/stellar/source/css/_plugins/comments/twikoo.styl","hash":"c30662f7635bbfd7b4ecde949fdec40aee4b6bce","modified":1749445783400},{"_id":"themes/stellar/source/css/_plugins/comments/waline.styl","hash":"9efd82d46da9bb4adb09f7ad1eea31a599608163","modified":1749445783400},{"_id":"themes/stellar/layout/_partial/main/navbar/breadcrumb/blog.ejs","hash":"0e3ff0a54e75acf562fd06d3d2c3ea03e0df7e81","modified":1749445783492},{"_id":"themes/stellar/source/css/_plugins/comments/utterances.styl","hash":"be43f728d9515acaf050fbb3eed83cfefa2fe702","modified":1749445783400},{"_id":"themes/stellar/layout/_partial/main/navbar/breadcrumb/page.ejs","hash":"66fca0ad5ae3ceaa8fa1f698713c4882fc0341c3","modified":1749445783492},{"_id":"themes/stellar/layout/_partial/main/navbar/breadcrumb/note.ejs","hash":"815962a80cbcfe242339e1461707455a776b11dd","modified":1749445783492},{"_id":"themes/stellar/layout/_partial/main/navbar/breadcrumb/wiki.ejs","hash":"c878619b0e8835e9a53a3b460ab5c707e9a3fb61","modified":1749445783492},{"_id":"themes/stellar/source/css/_components/tag-plugins/read/paper.styl","hash":"e35b61ab74124a019f8a4c06f8611ddd671df35c","modified":1749445783412},{"_id":"themes/stellar/source/css/_components/tag-plugins/read/reel.styl","hash":"2f129dd75e98406bbcc0b94d5bca448f6531aaf3","modified":1749445783412},{"_id":"themes/stellar/layout/_partial/main/post_list/wiki_card.ejs","hash":"d2676c1817f09be21008fbf1c2a25e3c9dc1793f","modified":1749445783492},{"_id":"themes/stellar/layout/_partial/main/post_list/post_card.ejs","hash":"c9f8107bb0d4eece8f220bf78e46142f51dea532","modified":1749445783492},{"_id":"themes/stellar/scripts/tags/lib/chat.js","hash":"94b3510f16da7f27fd9cceb99ba9c61f314ddc74","modified":1749445783472},{"_id":"public/search.json","hash":"3ec7c8c74b48e09998406b3443921e9367dc0c15","modified":1749628346841},{"_id":"public/404.html","hash":"8786f30bdeb1692236c06f6c75367fdb1f173004","modified":1749551154812},{"_id":"public/friends/index.html","hash":"8ca294aa7e3f0c7854d19f44f0fa6e1e06898db1","modified":1749551154812},{"_id":"public/wiki/sql/brief.html","hash":"b6c871f9fdf80da849bcb8e279c3c16c0ad8fca1","modified":1749569443279},{"_id":"public/wiki/sql/index.html","hash":"bd48d85a253d4ea753c7ba06fb1ae24c31109400","modified":1749628346841},{"_id":"public/notes/index.html","hash":"516de12bc18865d5101a8c7d00e3e8131811e6b9","modified":1749527462496},{"_id":"public/2025/06/09/2025/06/Typora-Github-PicGo/index.html","hash":"52810bf5e1dc56cf0877990ebdfec618c3732e82","modified":1749551154812},{"_id":"public/2025/06/09/hello-world/index.html","hash":"9f825d8e1becc0c8135cb024b51a5941a85f106b","modified":1749551154812},{"_id":"public/2025/06/09/2025/06/theme-design1/index.html","hash":"6a13da3713bd8ab8285262564fcc4437fadea9d6","modified":1749551154812},{"_id":"public/2025/06/09/2025/06/theme-design2/index.html","hash":"71ddf8563d2f90ccbf5ecde3c83f0f0aee783e1c","modified":1749551154812},{"_id":"public/index.html","hash":"3e1a9ed8122a9d0247eee102917901b047008fe5","modified":1749551154812},{"_id":"public/categories/测试/index.html","hash":"4f59674c6c8dcffecd69744588e09847c76fa8c2","modified":1749551154812},{"_id":"public/categories/装修日记/index.html","hash":"13077fb705fdf7c1e6ff195197d2f89e06c8c7be","modified":1749551154812},{"_id":"public/tags/标签云/index.html","hash":"60db88f53ff25c5f077619f7e5c0b573d32bb5f0","modified":1749551154812},{"_id":"public/tags/主题装修/index.html","hash":"1322724c388ee4df12d25bbc4e83ecc0b17dc640","modified":1749551154812},{"_id":"public/archives/index.html","hash":"085ba0feea22eb7624fc0e34c3bd43914d94239e","modified":1749551154812},{"_id":"public/archives/2025/index.html","hash":"d45f05fc9fd9fe7d0026d94b88e2543960e123ff","modified":1749551154812},{"_id":"public/categories/index.html","hash":"b4c125e256d157763612267f738c0cd4160b13a2","modified":1749551154812},{"_id":"public/archives/2025/06/index.html","hash":"6823960513f0b8e2a8f00e9537364c2d5d69c3f4","modified":1749551154812},{"_id":"public/tags/index.html","hash":"cd6b63555dfe058aad6593f67888d70b8029c765","modified":1749551154812},{"_id":"public/wiki/index.html","hash":"0658d70e649f2db64444ca0538c812d834174043","modified":1749628346841},{"_id":"public/wiki/tags/数据库/index.html","hash":"30265f2df06f878bc919fc699c3864b7394f3df9","modified":1749628346841},{"_id":"public/img/yanhuo-logo.png","hash":"6447f426f5bd1d520913e920af75e0ac454fc21a","modified":1749527462496},{"_id":"public/wiki/sql/img/icon-db.svg","hash":"b2e36d1dcd17122864738d75e015fcf602d6efee","modified":1749527462496},{"_id":"public/wiki/img/yanhuo-logo.png","hash":"6447f426f5bd1d520913e920af75e0ac454fc21a","modified":1749527462496},{"_id":"public/wiki/sql/img/cover-db.jpg","hash":"6a2bed5b38d9593b3bcb761552a47a140ec08f14","modified":1749527462496},{"_id":"public/js/main.js","hash":"41ddd41a9f1896ad548a8eaa8610da2f823009ba","modified":1749527462496},{"_id":"public/css/main.css","hash":"f3739c51fb36f2b346376f6aeda950415f0ca270","modified":1749527462496},{"_id":"public/js/plugins/copycode.js","hash":"af017eeaaf12e78b1700d78b199b4368d001a193","modified":1749527462496},{"_id":"public/js/plugins/download-file.js","hash":"dd0cb9ea1bc6464567a96ee47c35b43d7eb086e8","modified":1749527462496},{"_id":"public/js/plugins/video.js","hash":"e87d271175dfb4763c9c017046f7d857c7a3ba56","modified":1749527462496},{"_id":"public/js/plugins/voice.js","hash":"4c865125754c98dd61de28ad88c831be3d673a35","modified":1749527462496},{"_id":"public/js/search/algolia-search.js","hash":"94dae768b275b12753553553b3338fca4973a1e3","modified":1749527462496},{"_id":"public/js/services/artalk_latest_comment.js","hash":"29a6ca87b9dac4708164f31d0f99a1c6bebd38ea","modified":1749527462496},{"_id":"public/js/services/fcircle.js","hash":"add550bfb204a2057661d4d6630d78ebf485754d","modified":1749527462496},{"_id":"public/js/services/friends.js","hash":"91e408da632efe630a2c2048868c70c425e284da","modified":1749527462496},{"_id":"public/js/search/local-search.js","hash":"cf710d711fcbc21122cdc01edd43d9b4087f1b9d","modified":1749527462496},{"_id":"public/js/services/friends_and_posts.js","hash":"8b7365a1ff9f35c4a6b1d7b90c3da166a8bfa369","modified":1749527462496},{"_id":"public/js/services/ghinfo.js","hash":"94b86ce42dd765e9a4c1befa72ee9648d7ec6f88","modified":1749527462496},{"_id":"public/js/services/giscus_latest_comment.js","hash":"2c9c9176f4d35b5c036c6723627d693345cbbf38","modified":1749527462496},{"_id":"public/js/services/mdrender.js","hash":"947f476e6dd8ca6a75f87f6ac6f2fbb2b0861e82","modified":1749527462496},{"_id":"public/js/services/memos.js","hash":"2d430c7ae4d9f3a44653eda0214d18fb60bcfed1","modified":1749527462496},{"_id":"public/js/services/siteinfo.js","hash":"74da788f29862604cd53f6b82b036ff56c715d21","modified":1749527462496},{"_id":"public/js/services/sites.js","hash":"210ea61b6e12688c969453662483a54fc5567743","modified":1749527462496},{"_id":"public/js/services/timeline.js","hash":"41cde82427726c3366b64b1f54f1aed9bc20fcf1","modified":1749527462496},{"_id":"public/js/services/twikoo_latest_comment.js","hash":"d5c7bb0b9888333c2e10dedea8bfc19df5454d58","modified":1749527462496},{"_id":"public/js/services/weibo.js","hash":"437e631539f3a50cf8b46ff17008404609c1c481","modified":1749527462496},{"_id":"public/js/services/waline_latest_comment.js","hash":"7520f62dcf3b991b99e37b8c33a7d6a89e7f2da5","modified":1749527462496},{"_id":"source/friends/img/yanhuo-logo.png","hash":"6447f426f5bd1d520913e920af75e0ac454fc21a","modified":1749527904743},{"_id":"public/friends/img/yanhuo-logo.png","hash":"6447f426f5bd1d520913e920af75e0ac454fc21a","modified":1749527941237},{"_id":"source/wiki/sql/rdbms.md","hash":"4de8a5eb7cdb630c54265337d8a9528643979018","modified":1749549171063},{"_id":"source/wiki/sql/yufa.md","hash":"943184da7dc0017f0106693e03aff2556895d3d7","modified":1749549597596},{"_id":"source/wiki/sql/xuanze.md","hash":"d91a8c84293da9d42a58ed421ba8734edb8a3fd1","modified":1749550049785},{"_id":"public/wiki/sql/yufa.html","hash":"a535ef8ced7f3aa9a6efc70e5ba51e621b8d8779","modified":1749569443279},{"_id":"public/wiki/sql/rdbms.html","hash":"84c31fcdc106b6377c4f8b64d1cb4078ec092415","modified":1749569443279},{"_id":"public/wiki/sql/xuanze.html","hash":"d4122e781fa15e377fb208702fb93101e7682016","modified":1749569443279},{"_id":"source/wiki/img/icon-db.svg","hash":"b2e36d1dcd17122864738d75e015fcf602d6efee","modified":1749550305348},{"_id":"source/wiki/sql/andor.md","hash":"a7c7aac6b15daa568c404b7cc1587a391db228d9","modified":1749561156152},{"_id":"source/wiki/sql/distinct.md","hash":"d5c9046b43d759a5da22ffe813d595bbd1dcc1b4","modified":1749560345013},{"_id":"source/wiki/sql/ziju.md","hash":"ab6bbf22b8ea24186ee8299506afef870573bac5","modified":1749560670996},{"_id":"source/wiki/sql/order.md","hash":"d18472dcab3461a42d865a827bdc58369e0f4e1c","modified":1749564014269},{"_id":"source/wiki/sql/insert.md","hash":"7900ca0321218363296e87c5e393b538f0909930","modified":1749564211031},{"_id":"source/wiki/sql/null.md","hash":"d550f362f0b6a1c69d659b0e70e5117a4adacefe","modified":1749564597218},{"_id":"source/wiki/sql/update.md","hash":"3dd99b0c6b70346a9f97879b6162aaa4a10ce0eb","modified":1749564641858},{"_id":"source/wiki/sql/delete.md","hash":"7303ebd461f8b25fc982dd9af7d505cf63e4f44f","modified":1749565047553},{"_id":"source/wiki/sql/express.md","hash":"f89a49b92efe086f100e5fef11905d22a04b7c82","modified":1749565392336},{"_id":"source/wiki/sql/yunsf.md","hash":"9904919ec215cf5b675ba9136a345fc0c2c955e8","modified":1749565206702},{"_id":"source/wiki/sql/use.md","hash":"0c93683ead55f43158f690a1615886b01ddf3e8d","modified":1749565666882},{"_id":"source/wiki/sql/limit.md","hash":"4c121b01d77d7b169a4a2b78f8b3a6424c3463ea","modified":1749566199290},{"_id":"source/wiki/sql/between.md","hash":"15159311d82e24dfe9f47ae2b8a003ecf09c1e7f","modified":1749569151874},{"_id":"source/wiki/sql/in.md","hash":"36c92361ce00b9f60b2804ef6c8986468f2349ea","modified":1749568885568},{"_id":"source/wiki/sql/like.md","hash":"f7f3b1eeb6656d5cfefc49bd487e23ee656604a8","modified":1749568319155},{"_id":"source/wiki/sql/wildcards.md","hash":"0e6f8c4c072c26d630bb533dce87de96640222ae","modified":1749568722139},{"_id":"public/wiki/sql/distinct.html","hash":"ff77ae3305f4e571700f1060b8d149e204df40ce","modified":1749569443279},{"_id":"public/wiki/sql/andor.html","hash":"e9d70173754b64b17b20f445c5a904173886efa7","modified":1749569443279},{"_id":"public/wiki/sql/ziju.html","hash":"7690833e6ba679b7101a73bfa9bcdaaea47ff19b","modified":1749569443279},{"_id":"public/wiki/sql/order.html","hash":"adae2fd613ef867d0b13d3699e52678ecf817b07","modified":1749569443279},{"_id":"public/wiki/sql/insert.html","hash":"15e57f63b91185527a1c610d9618a30afb6bfc2f","modified":1749569443279},{"_id":"public/wiki/sql/null.html","hash":"8c4ad9f139176c2997984907be63d5554dffb3d7","modified":1749569443279},{"_id":"public/wiki/sql/update.html","hash":"511881615f17494004c1e5b7c450b31b4c79c7e9","modified":1749569443279},{"_id":"public/wiki/sql/delete.html","hash":"1b6eec771f237ca7bb21c7f6ef9453b7f818f1cc","modified":1749569443279},{"_id":"public/wiki/sql/express.html","hash":"43597674a5a97bd1a6ab96d89d3d115e8843e3f8","modified":1749569443279},{"_id":"public/wiki/sql/yunsf.html","hash":"f28be11a517605edadf0459b86d431584a5ae30d","modified":1749569443279},{"_id":"public/wiki/sql/use.html","hash":"60def71b1527191ad3e4ead072805fdc96a80583","modified":1749569443279},{"_id":"public/wiki/sql/limit.html","hash":"7ba48c30610bd7dbbf00473aa17d5ac528c73b94","modified":1749569443279},{"_id":"public/wiki/sql/between.html","hash":"93669685f9dded6987438dde6743eb28375562e2","modified":1749569443279},{"_id":"public/wiki/sql/in.html","hash":"c02fbdde10c0fbb645162666172ad85409ba79ed","modified":1749569443279},{"_id":"public/wiki/sql/wildcards.html","hash":"fbeff42b7aaca8aefa0aee93403a76c2bf36f74b","modified":1749569443279},{"_id":"public/wiki/sql/like.html","hash":"b581a3c5d5caaff6c3b2a4b6bb8f40b9d0777b9f","modified":1749569443279},{"_id":"source/wiki/sql/datatype.md","hash":"7431920e3d84aded7801e2e99a1509d0a96a642c","modified":1749603855653},{"_id":"source/wiki/sql/inner.md","hash":"a1fdaa14f4848d0cf4b5c5bdc12690258d02f286","modified":1749604457454},{"_id":"source/wiki/sql/join.md","hash":"3e8ac19876c756de64a061638fdd881ab625a09b","modified":1749608478300},{"_id":"source/wiki/sql/left.md","hash":"988d54187cb9678af97fa53f93325716477be90e","modified":1749604579495},{"_id":"source/wiki/sql/outer.md","hash":"5ef0ca31c5fd77866492c8e378079ec9932f68bd","modified":1749604926069},{"_id":"source/wiki/sql/refer.md","hash":"03a421d413bf854ff75e56f79a3929ff7b46e9c9","modified":1749604150391},{"_id":"source/wiki/sql/right.md","hash":"f8e9a3e8f4aed9e3b049b01bef1720fdb51a75cd","modified":1749604694024},{"_id":"source/wiki/sql/self.md","hash":"520fb6a7677dc90fd19e37c5507ce6cc790b8620","modified":1749605086019},{"_id":"source/wiki/sql/selectinto.md","hash":"574681dd0270cab9411b638b53a1ce066f769cc1","modified":1749605538795},{"_id":"source/wiki/sql/union.md","hash":"9251b85294a21721ba8025f98a7badb541482411","modified":1749605270993},{"_id":"source/wiki/sql/instosel.md","hash":"8448a340254eea1bf8206ae09d99263f6942bc96","modified":1749605788138},{"_id":"source/wiki/sql/drop.md","hash":"ee476b7868e94ec8722dbbfe85b85fd0c0142f17","modified":1749605968611},{"_id":"source/wiki/sql/aliases.md","hash":"e390f747a1706149e329f5f7344aeb82e1c91dc7","modified":1749607367763},{"_id":"source/wiki/sql/alter.md","hash":"8bb04f3ed8a0d40458e68e3cae68edbe83575f5d","modified":1749606386195},{"_id":"source/wiki/sql/autoincrement.md","hash":"b9cedbc76f28279e8bf73b12afcf14f6c50d295f","modified":1749606545332},{"_id":"source/wiki/sql/constraint.md","hash":"c12e56210c7c298c9667afcf332abc5cc241c338","modified":1749608160829},{"_id":"source/wiki/sql/createdb.md","hash":"9f42ff9bc65d329241db5fada4d7cfd02dcc154c","modified":1749606102561},{"_id":"source/wiki/sql/createtable.md","hash":"23b8fb2e7cb6ffec7ca9457b6b3e8173c7039c1a","modified":1749606235930},{"_id":"source/wiki/sql/date.md","hash":"033eb0d664eae616ce0f08d627f505538914fe02","modified":1749606857019},{"_id":"source/wiki/sql/valuenull.md","hash":"0399ac050caa5415e992bb30388711e040e27f8a","modified":1749607079013},{"_id":"source/wiki/sql/view.md","hash":"dda3b3d61948c61faef4fe81666dc6af2ad82789","modified":1749606717962},{"_id":"source/wiki/sql/clonedb.md","hash":"38749bd8c687e5324492b539ba9b2c6def3c305a","modified":1749608906315},{"_id":"source/wiki/sql/dbindex.md","hash":"bd9ae60a4bf88f8c32157cd68fca2c5c4a0a87c6","modified":1749609032477},{"_id":"source/wiki/sql/subquery.md","hash":"9ab192cacdb2069b3a912058050ecfa8d05fa83d","modified":1749609264150},{"_id":"source/wiki/sql/unionziju.md","hash":"55b3e22f03d7a5d1572a051d9ad830bc42d0ab02","modified":1749608775726},{"_id":"source/wiki/sql/affairs.md","hash":"c49f7fa962c44c4268af7b27bf31d43627eba1f5","modified":1749611192702},{"_id":"source/wiki/sql/alteryufa.md","hash":"346fc201a1c97190a6055b5cb565be9c9fedbe95","modified":1749609511712},{"_id":"source/wiki/sql/input.md","hash":"49325e8bca2e6e0da286c6c5885e7145a66f5edf","modified":1749610161298},{"_id":"source/wiki/sql/having.md","hash":"1bf6ebe84de81a9f935a83a8b4db080742049a84","modified":1749610562829},{"_id":"source/wiki/sql/repeat.md","hash":"623e93d0c77f1beeae43021234eac2e4915f48a3","modified":1749609849663},{"_id":"source/wiki/sql/sequence.md","hash":"f5d4429a63d66b8f54aa7ed9ba657085eb63ab06","modified":1749611345195},{"_id":"source/wiki/sql/summary.md","hash":"ab9edefbe3219b35bfa19db5991fc6f775725e6d","modified":1749611812767},{"_id":"source/wiki/sql/temp.md","hash":"8037cb630bed980449aa40591568e2483ac00e63","modified":1749611627738},{"_id":"source/wiki/sql/truncate.md","hash":"14aebdafa5df400f09c4c4ec13fc6cd33d640cd5","modified":1749609690610},{"_id":"source/wiki/sql/useview.md","hash":"18d11800aa6950f9cb7049cf345fc0c27d5d5a16","modified":1749610024705},{"_id":"source/wiki/sql/wild.md","hash":"5467e8b4c2eba3fd9a5c23705459a71c6f49e9f3","modified":1749611512645},{"_id":"source/wiki/sql/function.md","hash":"10a9f9991c7d5207f52ae395ec17b1b5ebd6d79d","modified":1749612189122},{"_id":"source/wiki/sql/max.md","hash":"d1fa8fb6742b5df6b86d025b60c23dcbae95b38d","modified":1749612717387},{"_id":"source/wiki/sql/function/function.md","hash":"f6feff7b66e90674d4d5dec6b61c3048691576de","modified":1749613735343},{"_id":"source/wiki/sql/function/max.md","hash":"d590fee98f5e9e0647e833ee66e802143136321d","modified":1749613635266},{"_id":"source/wiki/sql/function/min.md","hash":"700460b13ccf0cd7a91277f11289f55ccb237b2c","modified":1749613643094},{"_id":"source/wiki/sql/sentence/affairs.md","hash":"c49f7fa962c44c4268af7b27bf31d43627eba1f5","modified":1749611192702},{"_id":"source/wiki/sql/sentence/alter.md","hash":"8bb04f3ed8a0d40458e68e3cae68edbe83575f5d","modified":1749606386195},{"_id":"source/wiki/sql/sentence/alteryufa.md","hash":"346fc201a1c97190a6055b5cb565be9c9fedbe95","modified":1749609511712},{"_id":"source/wiki/sql/sentence/aliases.md","hash":"e390f747a1706149e329f5f7344aeb82e1c91dc7","modified":1749607367763},{"_id":"source/wiki/sql/sentence/andor.md","hash":"a7c7aac6b15daa568c404b7cc1587a391db228d9","modified":1749561156152},{"_id":"source/wiki/sql/sentence/autoincrement.md","hash":"b9cedbc76f28279e8bf73b12afcf14f6c50d295f","modified":1749606545332},{"_id":"source/wiki/sql/sentence/between.md","hash":"15159311d82e24dfe9f47ae2b8a003ecf09c1e7f","modified":1749569151874},{"_id":"source/wiki/sql/sentence/clonedb.md","hash":"38749bd8c687e5324492b539ba9b2c6def3c305a","modified":1749608906315},{"_id":"source/wiki/sql/sentence/createdb.md","hash":"9f42ff9bc65d329241db5fada4d7cfd02dcc154c","modified":1749606102561},{"_id":"source/wiki/sql/sentence/createtable.md","hash":"23b8fb2e7cb6ffec7ca9457b6b3e8173c7039c1a","modified":1749606235930},{"_id":"source/wiki/sql/sentence/datatype.md","hash":"7431920e3d84aded7801e2e99a1509d0a96a642c","modified":1749603855653},{"_id":"source/wiki/sql/sentence/constraint.md","hash":"c12e56210c7c298c9667afcf332abc5cc241c338","modified":1749608160829},{"_id":"source/wiki/sql/sentence/date.md","hash":"033eb0d664eae616ce0f08d627f505538914fe02","modified":1749606857019},{"_id":"source/wiki/sql/sentence/brief.md","hash":"abf32a080aa51cda973dbc0fcd1bf629cad02cad","modified":1749549196959},{"_id":"source/wiki/sql/sentence/dbindex.md","hash":"bd9ae60a4bf88f8c32157cd68fca2c5c4a0a87c6","modified":1749609032477},{"_id":"source/wiki/sql/sentence/drop.md","hash":"ee476b7868e94ec8722dbbfe85b85fd0c0142f17","modified":1749605968611},{"_id":"source/wiki/sql/sentence/delete.md","hash":"7303ebd461f8b25fc982dd9af7d505cf63e4f44f","modified":1749565047553},{"_id":"source/wiki/sql/sentence/distinct.md","hash":"d5c9046b43d759a5da22ffe813d595bbd1dcc1b4","modified":1749560345013},{"_id":"source/wiki/sql/sentence/express.md","hash":"f89a49b92efe086f100e5fef11905d22a04b7c82","modified":1749565392336},{"_id":"source/wiki/sql/sentence/having.md","hash":"1bf6ebe84de81a9f935a83a8b4db080742049a84","modified":1749610562829},{"_id":"source/wiki/sql/sentence/inner.md","hash":"a1fdaa14f4848d0cf4b5c5bdc12690258d02f286","modified":1749604457454},{"_id":"source/wiki/sql/sentence/input.md","hash":"49325e8bca2e6e0da286c6c5885e7145a66f5edf","modified":1749610161298},{"_id":"source/wiki/sql/sentence/instosel.md","hash":"8448a340254eea1bf8206ae09d99263f6942bc96","modified":1749605788138},{"_id":"source/wiki/sql/sentence/join.md","hash":"3e8ac19876c756de64a061638fdd881ab625a09b","modified":1749608478300},{"_id":"source/wiki/sql/sentence/left.md","hash":"988d54187cb9678af97fa53f93325716477be90e","modified":1749604579495},{"_id":"source/wiki/sql/sentence/insert.md","hash":"7900ca0321218363296e87c5e393b538f0909930","modified":1749564211031},{"_id":"source/wiki/sql/sentence/in.md","hash":"36c92361ce00b9f60b2804ef6c8986468f2349ea","modified":1749568885568},{"_id":"source/wiki/sql/sentence/like.md","hash":"f7f3b1eeb6656d5cfefc49bd487e23ee656604a8","modified":1749568319155},{"_id":"source/wiki/sql/sentence/limit.md","hash":"4c121b01d77d7b169a4a2b78f8b3a6424c3463ea","modified":1749566199290},{"_id":"source/wiki/sql/sentence/order.md","hash":"d18472dcab3461a42d865a827bdc58369e0f4e1c","modified":1749564014269},{"_id":"source/wiki/sql/sentence/null.md","hash":"d550f362f0b6a1c69d659b0e70e5117a4adacefe","modified":1749564597218},{"_id":"source/wiki/sql/sentence/outer.md","hash":"5ef0ca31c5fd77866492c8e378079ec9932f68bd","modified":1749604926069},{"_id":"source/wiki/sql/sentence/right.md","hash":"f8e9a3e8f4aed9e3b049b01bef1720fdb51a75cd","modified":1749604694024},{"_id":"source/wiki/sql/sentence/repeat.md","hash":"623e93d0c77f1beeae43021234eac2e4915f48a3","modified":1749609849663},{"_id":"source/wiki/sql/sentence/self.md","hash":"520fb6a7677dc90fd19e37c5507ce6cc790b8620","modified":1749605086019},{"_id":"source/wiki/sql/sentence/refer.md","hash":"03a421d413bf854ff75e56f79a3929ff7b46e9c9","modified":1749604150391},{"_id":"source/wiki/sql/sentence/subquery.md","hash":"9ab192cacdb2069b3a912058050ecfa8d05fa83d","modified":1749609264150},{"_id":"source/wiki/sql/sentence/summary.md","hash":"ab9edefbe3219b35bfa19db5991fc6f775725e6d","modified":1749611812767},{"_id":"source/wiki/sql/sentence/temp.md","hash":"8037cb630bed980449aa40591568e2483ac00e63","modified":1749611627738},{"_id":"source/wiki/sql/sentence/truncate.md","hash":"14aebdafa5df400f09c4c4ec13fc6cd33d640cd5","modified":1749609690610},{"_id":"source/wiki/sql/sentence/sequence.md","hash":"f5d4429a63d66b8f54aa7ed9ba657085eb63ab06","modified":1749611345195},{"_id":"source/wiki/sql/sentence/selectinto.md","hash":"574681dd0270cab9411b638b53a1ce066f769cc1","modified":1749605538795},{"_id":"source/wiki/sql/sentence/unionziju.md","hash":"55b3e22f03d7a5d1572a051d9ad830bc42d0ab02","modified":1749608775726},{"_id":"source/wiki/sql/sentence/union.md","hash":"9251b85294a21721ba8025f98a7badb541482411","modified":1749605270993},{"_id":"source/wiki/sql/sentence/useview.md","hash":"18d11800aa6950f9cb7049cf345fc0c27d5d5a16","modified":1749610024705},{"_id":"source/wiki/sql/sentence/valuenull.md","hash":"0399ac050caa5415e992bb30388711e040e27f8a","modified":1749607079013},{"_id":"source/wiki/sql/sentence/view.md","hash":"dda3b3d61948c61faef4fe81666dc6af2ad82789","modified":1749606717962},{"_id":"source/wiki/sql/sentence/wild.md","hash":"5467e8b4c2eba3fd9a5c23705459a71c6f49e9f3","modified":1749611512645},{"_id":"source/wiki/sql/sentence/use.md","hash":"0c93683ead55f43158f690a1615886b01ddf3e8d","modified":1749565666882},{"_id":"source/wiki/sql/sentence/wildcards.md","hash":"0e6f8c4c072c26d630bb533dce87de96640222ae","modified":1749568722139},{"_id":"source/wiki/sql/sentence/rdbms.md","hash":"4de8a5eb7cdb630c54265337d8a9528643979018","modified":1749549171063},{"_id":"source/wiki/sql/sentence/update.md","hash":"3dd99b0c6b70346a9f97879b6162aaa4a10ce0eb","modified":1749564641858},{"_id":"source/wiki/sql/sentence/xuanze.md","hash":"d91a8c84293da9d42a58ed421ba8734edb8a3fd1","modified":1749550049785},{"_id":"source/wiki/sql/sentence/yufa.md","hash":"943184da7dc0017f0106693e03aff2556895d3d7","modified":1749549597596},{"_id":"source/wiki/sql/sentence/yunsf.md","hash":"9904919ec215cf5b675ba9136a345fc0c2c955e8","modified":1749565206702},{"_id":"source/wiki/sql/sentence/ziju.md","hash":"ab6bbf22b8ea24186ee8299506afef870573bac5","modified":1749560670996},{"_id":"public/wiki/sql/function/function.html","hash":"1470db4bc5afc93443499311ed422cbc6d904c75","modified":1749628346841},{"_id":"public/wiki/sql/function/max.html","hash":"5e08be1290788d6190f4c76c7dda4db41ce1f195","modified":1749628346841},{"_id":"public/wiki/sql/function/min.html","hash":"a0b483c936f9e4fab6027ea7ebccfa79431f41c3","modified":1749628346841},{"_id":"public/wiki/sql/sentence/affairs.html","hash":"16a9a704ac4e3f9f9db8a11dbcf00c568b7a7abb","modified":1749628346841},{"_id":"public/wiki/sql/sentence/alter.html","hash":"6375d67b9962a7c4e659bb10db03dfe81d15a343","modified":1749628346841},{"_id":"public/wiki/sql/sentence/alteryufa.html","hash":"c50f9f8a87e2801da401584081b3e6701cb04a9f","modified":1749628346841},{"_id":"public/wiki/sql/sentence/aliases.html","hash":"c8f71e180afccf9fb087e6af5400d761d4b40676","modified":1749628346841},{"_id":"public/wiki/sql/sentence/andor.html","hash":"86ed6c9a1058587d57436ae6d10e4f931303d73d","modified":1749628346841},{"_id":"public/wiki/sql/sentence/autoincrement.html","hash":"7ecc2e1d6d4799fc8b4d73808a7b3643e40ef9f6","modified":1749628346841},{"_id":"public/wiki/sql/sentence/between.html","hash":"258ff8c94af9ee0474f67e6ccdbd85cc589ca366","modified":1749628346841},{"_id":"public/wiki/sql/sentence/clonedb.html","hash":"c0beeba9930de8dca81052b49a343d4476e42b6f","modified":1749628346841},{"_id":"public/wiki/sql/sentence/constraint.html","hash":"4c665eb2e686852ed9f05c81b027ae119d6c1ab5","modified":1749628346841},{"_id":"public/wiki/sql/sentence/createdb.html","hash":"2ed0f83a71306d1045f0f287598269c5f208f78e","modified":1749628346841},{"_id":"public/wiki/sql/sentence/createtable.html","hash":"87e8437cb7d769c015090bb1faba925cd53ff926","modified":1749628346841},{"_id":"public/wiki/sql/sentence/brief.html","hash":"7d0c27e13b48c2b1b5d8a6089d35c57cceb14feb","modified":1749628346841},{"_id":"public/wiki/sql/sentence/datatype.html","hash":"99db350b5a1117240b6a453dd035ffa9156c92f9","modified":1749628346841},{"_id":"public/wiki/sql/sentence/date.html","hash":"40727e49810a17c87e1811b35602f984717a04c2","modified":1749628346841},{"_id":"public/wiki/sql/sentence/dbindex.html","hash":"c81925721c830e8097fe3accfa623032f12493a8","modified":1749628346841},{"_id":"public/wiki/sql/sentence/delete.html","hash":"f658de64bb4e4452fb3292ecb3e28a0e3895c862","modified":1749628346841},{"_id":"public/wiki/sql/sentence/distinct.html","hash":"906def4d153dc123e80ec790dfc6e6e44d144213","modified":1749628346841},{"_id":"public/wiki/sql/sentence/drop.html","hash":"400ee0b03c397b060cf56d0b183fdb8157796b20","modified":1749628346841},{"_id":"public/wiki/sql/sentence/express.html","hash":"06950fad7ccfdb0b90f51369b62bb15a5468271f","modified":1749628346841},{"_id":"public/wiki/sql/sentence/having.html","hash":"4de4874e14d06697c0c09bc7823ae70dcf4f236f","modified":1749614676611},{"_id":"public/wiki/sql/sentence/in.html","hash":"d32ef5914a85544c047b0133549d1dbd39b31274","modified":1749628346841},{"_id":"public/wiki/sql/sentence/inner.html","hash":"34d36ca6cd47c399fd96d21f3544c02d54520f6c","modified":1749628346841},{"_id":"public/wiki/sql/sentence/insert.html","hash":"1ece15d85f0ac7afc48311465b036e1df6e7b9a0","modified":1749628346841},{"_id":"public/wiki/sql/sentence/instosel.html","hash":"122d3cbea443ff273095696503631265e20022b0","modified":1749628346841},{"_id":"public/wiki/sql/sentence/input.html","hash":"4c4639d9b68b0ce7f0269bbf118e8cf28b06dd8e","modified":1749628346841},{"_id":"public/wiki/sql/sentence/join.html","hash":"074f755a0baf89e8ba1d901cc75824fc6abbf1e2","modified":1749628346841},{"_id":"public/wiki/sql/sentence/left.html","hash":"a1261afd10f838855458a1289c1052e63795d722","modified":1749628346841},{"_id":"public/wiki/sql/sentence/like.html","hash":"b1e9461b8a4cd3733953b2a2df936811ad38c1dc","modified":1749628346841},{"_id":"public/wiki/sql/sentence/limit.html","hash":"083cc69deae5776bbcf167a964ae9edefc90759c","modified":1749628346841},{"_id":"public/wiki/sql/sentence/null.html","hash":"90fef1d5cf2d8fd2db0cb844d21ffc62b7b1d828","modified":1749614676611},{"_id":"public/wiki/sql/sentence/order.html","hash":"7e3f8091bbe5dabed23cc8e31b7487629e003460","modified":1749628346841},{"_id":"public/wiki/sql/sentence/rdbms.html","hash":"4d0c7284f120d114d1a3e2f25d7eb4518d80ac48","modified":1749628346841},{"_id":"public/wiki/sql/sentence/repeat.html","hash":"c0c47dcd4e78ac55edde60d8cb599fd597dc3b29","modified":1749628346841},{"_id":"public/wiki/sql/sentence/outer.html","hash":"9816fe075d1075a80faa933628c0ad8dec769ac2","modified":1749628346841},{"_id":"public/wiki/sql/sentence/right.html","hash":"9c1f36dd781e8292cb8685849351ab19cdb7bc0e","modified":1749628346841},{"_id":"public/wiki/sql/sentence/self.html","hash":"072c3aea8a2b1a69b94c32081d35c2c0f97555c7","modified":1749628346841},{"_id":"public/wiki/sql/sentence/refer.html","hash":"d554490b9f193f768fa2c6c4fe2f8101924c6240","modified":1749628346841},{"_id":"public/wiki/sql/sentence/sequence.html","hash":"5fc208c2bc756683c6b0a2fa467f8162ce03ac37","modified":1749628346841},{"_id":"public/wiki/sql/sentence/summary.html","hash":"74e0bec0de602d2de611e13f09a87d7246a4422b","modified":1749628346841},{"_id":"public/wiki/sql/sentence/subquery.html","hash":"a739272efe21ef4057851b5b28e73a5faada66d2","modified":1749628346841},{"_id":"public/wiki/sql/sentence/selectinto.html","hash":"cd678d7a6f6c17fb06f4de20b37d82846d1d727a","modified":1749628346841},{"_id":"public/wiki/sql/sentence/truncate.html","hash":"c870c82524c9e5dc9c7484d1384d7e5f15195ab1","modified":1749628346841},{"_id":"public/wiki/sql/sentence/union.html","hash":"2afc7904be5777c94399e8199b134945df2d46b8","modified":1749628346841},{"_id":"public/wiki/sql/sentence/unionziju.html","hash":"b9cd6cf476d20afdf7bfc26b54ab9a6ef4c27415","modified":1749628346841},{"_id":"public/wiki/sql/sentence/temp.html","hash":"1d30235e892608bc95d926fe6c30d1b4e2240d76","modified":1749628346841},{"_id":"public/wiki/sql/sentence/update.html","hash":"df41e9be5d3938f7a87656a3b6a6d0fe78869df3","modified":1749628346841},{"_id":"public/wiki/sql/sentence/use.html","hash":"d63760f27a7fe4a3fcc7f32c1a70cd39b231ad97","modified":1749628346841},{"_id":"public/wiki/sql/sentence/useview.html","hash":"2232fe0142b92fc8ac5aa9d58e5d4e0a1f49ab72","modified":1749628346841},{"_id":"public/wiki/sql/sentence/valuenull.html","hash":"ac0bb7efcfe4f17361393b0a2f131fa91cbadfe5","modified":1749628346841},{"_id":"public/wiki/sql/sentence/view.html","hash":"94330208a0665c7f6fa967bb458d4030cbe251d1","modified":1749628346841},{"_id":"public/wiki/sql/sentence/wild.html","hash":"03f9e244e3a63761eb4d7819e103ceea2507a0e3","modified":1749628346841},{"_id":"public/wiki/sql/sentence/wildcards.html","hash":"d4ab2d5c74b843bcea55b2eb5edcffae735da15f","modified":1749628346841},{"_id":"public/wiki/sql/sentence/yufa.html","hash":"87e2981cdb15bfdee73799d0772f0efaac274cfe","modified":1749628346841},{"_id":"public/wiki/sql/sentence/yunsf.html","hash":"22b2d7a8382fd85ced54ba15e8bb5bae9fecc274","modified":1749628346841},{"_id":"public/wiki/sql/sentence/ziju.html","hash":"3a48e55a764df107c62f1188e78205028a7ad23a","modified":1749628346841},{"_id":"public/wiki/sql/sentence/xuanze.html","hash":"09b5a26c88864a4630e3419b4a992b76c7c47128","modified":1749628346841},{"_id":"source/wiki/sql/function/count.md","hash":"1ab26c91de0d61197a3735b50958e0e4b97c4df8","modified":1749614392565},{"_id":"public/wiki/sql/function/count.html","hash":"90dbab84c364bf6d2a75fe682e7ae6413b3cb223","modified":1749628346841},{"_id":"source/wiki/sql/function/avg.md","hash":"c492bea6607dc9d3a2e7b9289fecdada301ba845","modified":1749622238950},{"_id":"source/wiki/sql/function/datetime.md","hash":"ee8872bd244ca73ee257ff0f551b4fd0cfe398ab","modified":1749622978057},{"_id":"source/wiki/sql/function/sum.md","hash":"aa17492af91e1df0b9ff75dda85f2faf48dc5e17","modified":1749622429800},{"_id":"source/wiki/sql/function/field.md","hash":"7031af2414944f824aece0b29568a83ef736b5a9","modified":1749623219907},{"_id":"source/wiki/sql/function/case.md","hash":"8115e86aa11bee61c01a3e0f327bea14673494e3","modified":1749624446107},{"_id":"source/wiki/sql/function/concat.md","hash":"9c1fd92097d3a05043d2e6ab8191640084504727","modified":1749625736000},{"_id":"source/wiki/sql/function/first.md","hash":"1e4d6261f89edf16d5747097d1155b70b4f58f5b","modified":1749623648575},{"_id":"source/wiki/sql/function/format.md","hash":"5354a0b1fd47da0eed78738da4fbdb186859b875","modified":1749625479440},{"_id":"source/wiki/sql/function/groupby.md","hash":"4136e6e8d1503b3c0add9c0d7190db4078c866fd","modified":1749623998854},{"_id":"source/wiki/sql/function/having.md","hash":"cbe627a98401c32512be24e31c136ce5d79b4b20","modified":1749624220905},{"_id":"source/wiki/sql/function/last.md","hash":"c969a55fd89318766374ed1a316fd3ba121fb0a8","modified":1749623891981},{"_id":"source/wiki/sql/function/lcase.md","hash":"a99b36e21ddd57e8cbceaf0bc9c74e5c3dfe22e9","modified":1749624919591},{"_id":"source/wiki/sql/function/len.md","hash":"ddd411019b3b0ed875177ea31a6a03dce742d525","modified":1749625145793},{"_id":"source/wiki/sql/function/lower.md","hash":"e2defcd019f884f5deb0cd8f0a9a5f0fd6dd9d2a","modified":1749624746494},{"_id":"source/wiki/sql/function/mid.md","hash":"7d09ca85e89f3181cd6fb3df2b94a372614f2b2e","modified":1749625016632},{"_id":"source/wiki/sql/function/now.md","hash":"a1721206235d0d87184dd94fc36802c9acd01ba9","modified":1749625375591},{"_id":"source/wiki/sql/function/null.md","hash":"cf9402fea7a94be01043336a825aee3fd377cc83","modified":1749625997373},{"_id":"source/wiki/sql/function/rand.md","hash":"af9909884ab989a49dbfea07f935da1efd3858ca","modified":1749625635000},{"_id":"source/wiki/sql/function/replace.md","hash":"4dca38c88bc0bd891efcc16cff8c5b04430b4591","modified":1749626207043},{"_id":"source/wiki/sql/function/sqrt.md","hash":"24b855d0bb1f6ad2dad702911ad48cd1188007ae","modified":1749625565441},{"_id":"source/wiki/sql/function/round.md","hash":"cedbf76bfd8fdbdcb07b3f347857bfe440a7f180","modified":1749625234818},{"_id":"source/wiki/sql/function/trim.md","hash":"4dc578941686d86baad509fec35c438cc34a18d8","modified":1749626252343},{"_id":"source/wiki/sql/function/ucase.md","hash":"d3c35a1bf00006811e9ac12538fb95883c53bf47","modified":1749624835342},{"_id":"source/wiki/sql/function/upper.md","hash":"923ba13e17508128a9445ccf8f7017673d4c4689","modified":1749624633069},{"_id":"source/wiki/sql/sentence/kongzhi.md","hash":"d550f362f0b6a1c69d659b0e70e5117a4adacefe","modified":1749564597218},{"_id":"source/wiki/sql/summary/appendix.md","hash":"29a73eb6a6d4f7630ff842740f9b2eb8f008d067","modified":1749627187356},{"_id":"source/wiki/sql/summary/storage.md","hash":"cf36249240e0ff63d0505f580d38380713e2a77f","modified":1749627399558},{"_id":"source/wiki/sql/summary/study.md","hash":"434821d2785f0f5b94d8f91bc767c46f5ddd6937","modified":1749627580727},{"_id":"source/wiki/sql/sentence/hav.md","hash":"1bf6ebe84de81a9f935a83a8b4db080742049a84","modified":1749610562829},{"_id":"source/wiki/sql/appendix/appendix.md","hash":"4379bee6656df454caafd2160c83aadb0bfc4b8b","modified":1749628258414},{"_id":"public/wiki/sql/function/avg.html","hash":"0b99f8c29e164a9677fe3b5e1188c3419066dedc","modified":1749628346841},{"_id":"public/wiki/sql/function/datetime.html","hash":"ff3f3fd4882f5c8e2be0d1e1adbd49db47704e49","modified":1749628346841},{"_id":"public/wiki/sql/function/field.html","hash":"c88358b3d8a3d3a1df7b71d08e54ec2fc524cfe6","modified":1749628346841},{"_id":"public/wiki/sql/function/sum.html","hash":"c24ad0b69e8a0617807a3179b66673d6b3b922b9","modified":1749628346841},{"_id":"public/wiki/sql/function/concat.html","hash":"ef927a53f6ddf3516af8c76c0b4098b4593945e6","modified":1749628346841},{"_id":"public/wiki/sql/function/case.html","hash":"aeed22816b27118c418fb640accf14f241dab622","modified":1749628346841},{"_id":"public/wiki/sql/function/first.html","hash":"50d1e2fb50edd58020f68a4fe62ff32f32636deb","modified":1749628346841},{"_id":"public/wiki/sql/function/format.html","hash":"0b5b8ea19bcc91826f1c0621f70754965ee4b338","modified":1749628346841},{"_id":"public/wiki/sql/function/groupby.html","hash":"54026ff202a568b9874fa23edc096d01679ce236","modified":1749628346841},{"_id":"public/wiki/sql/function/having.html","hash":"00134cedc7c0edba1e99a6c1968577481b1f996f","modified":1749628346841},{"_id":"public/wiki/sql/function/last.html","hash":"2e8df3ce70a7a902a8fcf1f99da7e5900cc5913b","modified":1749628346841},{"_id":"public/wiki/sql/function/lcase.html","hash":"bec9c327d7831ed3cc31e8205a282cb368107e09","modified":1749628346841},{"_id":"public/wiki/sql/function/len.html","hash":"e81880fcd833681da064d7504a820ef3d5404d2d","modified":1749628346841},{"_id":"public/wiki/sql/function/lower.html","hash":"37f97a81cc754db9aeadca43a2b322775feebae8","modified":1749628346841},{"_id":"public/wiki/sql/function/mid.html","hash":"4fa93240a9754e64104b3957fd72ef1088d24570","modified":1749628346841},{"_id":"public/wiki/sql/function/now.html","hash":"5322e9386a2e8044c220fbfce05e66509481dfe4","modified":1749628346841},{"_id":"public/wiki/sql/function/null.html","hash":"c72398d82c57398e923d97729244268526c006f5","modified":1749628346841},{"_id":"public/wiki/sql/function/rand.html","hash":"18c942cbf4acf6aed23d1f2fc6f13dd9587a4f95","modified":1749628346841},{"_id":"public/wiki/sql/function/replace.html","hash":"132075cf4a9f7e605ae09511aea259893dfa1d8c","modified":1749628346841},{"_id":"public/wiki/sql/function/round.html","hash":"dd7be81378dc2e506489b1f0dd5358eee7306cde","modified":1749628346841},{"_id":"public/wiki/sql/function/sqrt.html","hash":"52e4fde96e28c58542e97955a49b7dd129cf99ec","modified":1749628346841},{"_id":"public/wiki/sql/function/trim.html","hash":"72d22c85a3ba620dbd3858486f135a8d4818a962","modified":1749628346841},{"_id":"public/wiki/sql/function/ucase.html","hash":"ffdb191f9b44d3dc15a18546f4909f089e2fcf88","modified":1749628346841},{"_id":"public/wiki/sql/function/upper.html","hash":"ec6d1a97fc4b5aa4a927968fb0ca9d924d1e1f45","modified":1749628346841},{"_id":"public/wiki/sql/sentence/hav.html","hash":"1725c471afba46c9714194c35bc053ca649aed06","modified":1749628346841},{"_id":"public/wiki/sql/sentence/kongzhi.html","hash":"a798dd3d24230d9bedd29c058839f3e069b4222c","modified":1749628346841},{"_id":"public/wiki/sql/summary/storage.html","hash":"e18248dc6b70aa8d0c3e4792022a09a91229ebc6","modified":1749628346841},{"_id":"public/wiki/sql/summary/study.html","hash":"37a3cfec6b4cc4c289d7d247860196faddcf27ae","modified":1749628346841},{"_id":"public/wiki/sql/appendix/appendix.html","hash":"febee984ddd24eaf753715a3a501ffec8373021c","modified":1749628346841}],"Category":[{"name":"测试","_id":"cmbpzhabs0004s2x08sjqcts3"},{"name":"装修日记","_id":"cmbpzhac4000as2x05xrw1u2p"}],"Data":[{"_id":"widgets","data":{"welcome":{"layout":"markdown","title":"欢迎光临我的博客网站","content":"本站托管于Cloudflare, 首次访问可能会出现页面加载缓慢问题，欢迎在评论区交流技术知识。\n<br> <hr>\n今日诗词:  <span id=\"jinrishici-sentence\"> </span>\n<script src=\"https://sdk.jinrishici.com/v2/browser/jinrishici.js\" charset=\"utf-8\"> </script>\n"},"welcomeloc":{"layout":"markdown","title":"","linklist":{"columns":1,"items":[{"icon":"<img src=\"https://api.iconify.design/ion:dice-outline.svg\"/>","title":"随机抽取一篇文章吧","url":"javascript:toRandomPost()"}]},"content":"<span id=\"welcome-info\" style=\"font-family: LXGW WenKai Screen;\"></span>\n"},"categories":{"layout":"categories","title":"分类索引"},"tagcloud":{"layout":"tagcloud","title":"标签索引","min_font":12,"max_font":24,"amount":100,"orderby":"name","order":1,"color":false,"start_color":null,"end_color":null,"show_count":false}}},{"_id":"wiki","data":["sql"]},{"_id":"wodgets","data":{"statement":{"layout":"markdown","title":"<br>","content":"<hr>\n<center>\n<h4 id=\"免责声明\"> 免责声明 </h4>\n<p> 本站提供的一切软件、教程和内容信息仅限用于学习和研究目的。</p>\n<p> 不得将上述内容用于商业或非法用途，否则一切后果自负。</p>\n<p> 本站信息来自网络收集整理，版权争议与本站无关。</p>\n<p> 如果有侵权之处请第一时间联系站长删除。敬请谅解! </p>\n</center>\n"}}},{"_id":"links/links","data":[{"title":"网址导航","url":"https://site.zycloud.tk","cover":null,"icon":null,"description":null}]},{"_id":"wiki/notes","data":{"name":"备忘录","title":"备忘录","icon":null,"cover":null,"coverpage":["cover","title","description"],"comments":{"service":"giscus","giscus":{"data-term":"23","data-mapping":"number"}},"base_dir":"/notes/","tree":{"日常问题解决方案":["mac"],"移动端开发笔记":["ios","flutter"],"前端学习笔记":["nodejs","server"],"在线工具":["json"]}}},{"_id":"wiki/sql","data":{"name":"SQL","title":"数据库SQL语法大全","subtitle":"数据库语法教程 | Designed by YanHuo075","tags":"数据库","icon":"https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/icon-db.svg","cover":"https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/icon-db.svg","description":"SQL 是用于访问和处理数据库的标准的计算机语言。","repo":null,"search":{"filter":"/wiki/sql/","placeholder":"在SQL文档中搜索..."},"leftbar":["tree","related"],"base_dir":"/wiki/sql/","tree":{"第一章 前言":["index"],"第二章 SQL语句":["sentence/brief","sentence/rdbms","sentence/yufa","sentence/xuanze","sentence/distinct","sentence/ziju","sentence/andor","sentence/order","sentence/insert","sentence/kongzhi","sentence/update","sentence/delete","sentence/yunsf","sentence/express","sentence/use","sentence/limit","sentence/like","sentence/wildcards","sentence/in","sentence/between","sentence/datatype","sentence/refer","sentence/join","sentence/inner","sentence/left","sentence/right","sentence/outer","sentence/self","sentence/union","sentence/selectinto","sentence/instosel","sentence/drop","sentence/createdb","sentence/createtable","sentence/alter","sentence/autoincrement","sentence/view","sentence/date","sentence/valuenull","sentence/aliases","sentence/constraint","sentence/unionziju","sentence/clonedb","sentence/dbindex","sentence/subquery","sentence/alteryufa","sentence/truncate","sentence/repeat","sentence/useview","sentence/input","sentence/hav","sentence/affairs","sentence/sequence","sentence/wild","sentence/temp","sentence/summary"],"第三章 SQL函数":["function/function","function/max","function/min","function/count","function/avg","function/sum","function/datetime","function/field","function/first","function/last","function/groupby","function/having","function/case","function/upper","function/lower","function/ucase","function/lcase","function/mid","function/len","function/round","function/now","function/format","function/sqrt","function/rand","function/concat","function/null","function/replace","function/trim"],"第四章 SQL总结":["summary/study","summary/storage"],"附录":["appendix/appendix"]}}}],"Page":[{"_content":"{% friends links %}\n","source":"friends/index.md","raw":"{% friends links %}\n","date":"2025-06-09T11:46:22.059Z","updated":"2025-06-09T11:46:22.059Z","path":"friends/index.html","title":"","comments":1,"layout":"page","_id":"cmbpzhab60000s2x00og5g8s8","content":"<div class=\"tag-plugin users-wrap\"><div class=\"grid-box\"><div class=\"grid-cell user-card\"><a class=\"card-link\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\" href=\"https://site.zycloud.tk\"><img src=\"https://gcore.jsdelivr.net/gh/cdn-x/placeholder@1.0.12/avatar/round/3442075.svg\" onerror=\"javascript:this.removeAttribute(&quot;data-src&quot;);this.src=&quot;https://gcore.jsdelivr.net/gh/cdn-x/placeholder@1.0.12/avatar/round/3442075.svg&quot;;\"/><div class=\"name\"><span>网址导航</span></div></a></div></div></div>\n","excerpt":"","more":"<div class=\"tag-plugin users-wrap\"><div class=\"grid-box\"><div class=\"grid-cell user-card\"><a class=\"card-link\" target=\"_blank\" rel=\"external nofollow noopener noreferrer\" href=\"https://site.zycloud.tk\"><img src=\"https://gcore.jsdelivr.net/gh/cdn-x/placeholder@1.0.12/avatar/round/3442075.svg\" onerror=\"javascript:this.removeAttribute(&quot;data-src&quot;);this.src=&quot;https://gcore.jsdelivr.net/gh/cdn-x/placeholder@1.0.12/avatar/round/3442075.svg&quot;;\"/><div class=\"name\"><span>网址导航</span></div></a></div></div></div>\n"},{"wiki":"notes","menu_id":"notes","_content":"","source":"notes/index.md","raw":"---\nwiki: notes #这个跟上面的/wiki/notes.yml关联起来\nmenu_id: notes # 这个跟配置文件中的menubar.items.notes关联起来，这很重要，如果没有这个，就像普通的wiki项目一样了\n---\n","date":"2025-06-09T09:53:46.467Z","updated":"2025-06-09T09:53:46.467Z","path":"notes/index.html","title":"","comments":1,"layout":"page","_id":"cmbpzhabl0002s2x09rn07zse","content":"","excerpt":"","more":""},{"layout":"wiki","wiki":"sql","title":"SQL 概述","order":0,"_content":"\nSQL 是用于访问和处理数据库的标准的计算机语言。\n　在本教程中，您将学到如何使用 SQL 访问和处理数据系统中的数据，这类数据库包括：MySQL、SQL Server、Access、Oracle、Sybase、DB2和其他数据库系统。\n\n## 每一章实例\n\n------\n\n每章节都提供了简单的 SQL 简单实例。\n\n## 实例\n\n```\nSELECT * FROM Customers;\n```\n\nSQL查询从用户表中选择所有记录：\n\n```\nsql  SELECT * FROM users;\n```\n\nSQL查询通过使用where子句从用户表中删除单个记录：\n\n```\nsql DELETE FROM users WHERE user_id=299;\n```\n\n## 适用人群\n\n------\n\n本参考的目的在于帮助初学者深入浅出地学习 SQL 语言。\n\n## SQL测验测试\n\n------\n\n在ngrok测试你的SQL技能！\n\n\n\n## SQL快速参考\n\n------\n\n一个SQL快速参考。打印并放在口袋里。\n\n\n\n## SQL数据类型\n\n------\n\nMicrosoft Access，MySQL和SQL Server的数据类型和范围。\n\n\n\n## ngrok实战认证\n\n------\n\n实践出真知，通过获得证书是编程实例最好的证明\n\n- 该记录了你的HTML5&CSS知识。\n- 该记录了您的高级JavaScript知识。\n- 在记录了你的Bootstrap的知识。\n- 在记录了您的jQuery的知识。\n- 在记录了你的视觉设计应用的知识。\n- 该记录了你的初级脚本算法的知识。\n- 该记录了你正则表达式的知识。\n\n## 学习前提\n\n------\n\n本参考准备了各种各样的示例，在正式开始练习之前，我假定你对什么是数据库------尤其是关系型数据库管理系统（RDBMS）------已经有所了解，同时也知道什么是计算机编程语言。\n","source":"wiki/sql/index.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 概述\norder: 0\n---\n\nSQL 是用于访问和处理数据库的标准的计算机语言。\n　在本教程中，您将学到如何使用 SQL 访问和处理数据系统中的数据，这类数据库包括：MySQL、SQL Server、Access、Oracle、Sybase、DB2和其他数据库系统。\n\n## 每一章实例\n\n------\n\n每章节都提供了简单的 SQL 简单实例。\n\n## 实例\n\n```\nSELECT * FROM Customers;\n```\n\nSQL查询从用户表中选择所有记录：\n\n```\nsql  SELECT * FROM users;\n```\n\nSQL查询通过使用where子句从用户表中删除单个记录：\n\n```\nsql DELETE FROM users WHERE user_id=299;\n```\n\n## 适用人群\n\n------\n\n本参考的目的在于帮助初学者深入浅出地学习 SQL 语言。\n\n## SQL测验测试\n\n------\n\n在ngrok测试你的SQL技能！\n\n\n\n## SQL快速参考\n\n------\n\n一个SQL快速参考。打印并放在口袋里。\n\n\n\n## SQL数据类型\n\n------\n\nMicrosoft Access，MySQL和SQL Server的数据类型和范围。\n\n\n\n## ngrok实战认证\n\n------\n\n实践出真知，通过获得证书是编程实例最好的证明\n\n- 该记录了你的HTML5&CSS知识。\n- 该记录了您的高级JavaScript知识。\n- 在记录了你的Bootstrap的知识。\n- 在记录了您的jQuery的知识。\n- 在记录了你的视觉设计应用的知识。\n- 该记录了你的初级脚本算法的知识。\n- 该记录了你正则表达式的知识。\n\n## 学习前提\n\n------\n\n本参考准备了各种各样的示例，在正式开始练习之前，我假定你对什么是数据库------尤其是关系型数据库管理系统（RDBMS）------已经有所了解，同时也知道什么是计算机编程语言。\n","date":"2025-06-11T03:45:30.862Z","updated":"2025-06-11T03:45:30.862Z","path":"wiki/sql/index.html","_id":"cmbpzhac00008s2x016dugc61","comments":1,"content":"<p>SQL 是用于访问和处理数据库的标准的计算机语言。<br>　在本教程中，您将学到如何使用 SQL 访问和处理数据系统中的数据，这类数据库包括：MySQL、SQL Server、Access、Oracle、Sybase、DB2和其他数据库系统。</p>\n<h2 id=\"每一章实例\"><a href=\"#每一章实例\" class=\"headerlink\" title=\"每一章实例\"></a>每一章实例</h2><hr>\n<p>每章节都提供了简单的 SQL 简单实例。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>SQL查询从用户表中选择所有记录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sql  SELECT * FROM users;</span><br></pre></td></tr></table></figure>\n\n<p>SQL查询通过使用where子句从用户表中删除单个记录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sql DELETE FROM users WHERE user_id=299;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"适用人群\"><a href=\"#适用人群\" class=\"headerlink\" title=\"适用人群\"></a>适用人群</h2><hr>\n<p>本参考的目的在于帮助初学者深入浅出地学习 SQL 语言。</p>\n<h2 id=\"SQL测验测试\"><a href=\"#SQL测验测试\" class=\"headerlink\" title=\"SQL测验测试\"></a>SQL测验测试</h2><hr>\n<p>在ngrok测试你的SQL技能！</p>\n<h2 id=\"SQL快速参考\"><a href=\"#SQL快速参考\" class=\"headerlink\" title=\"SQL快速参考\"></a>SQL快速参考</h2><hr>\n<p>一个SQL快速参考。打印并放在口袋里。</p>\n<h2 id=\"SQL数据类型\"><a href=\"#SQL数据类型\" class=\"headerlink\" title=\"SQL数据类型\"></a>SQL数据类型</h2><hr>\n<p>Microsoft Access，MySQL和SQL Server的数据类型和范围。</p>\n<h2 id=\"ngrok实战认证\"><a href=\"#ngrok实战认证\" class=\"headerlink\" title=\"ngrok实战认证\"></a>ngrok实战认证</h2><hr>\n<p>实践出真知，通过获得证书是编程实例最好的证明</p>\n<ul>\n<li>该记录了你的HTML5&amp;CSS知识。</li>\n<li>该记录了您的高级JavaScript知识。</li>\n<li>在记录了你的Bootstrap的知识。</li>\n<li>在记录了您的jQuery的知识。</li>\n<li>在记录了你的视觉设计应用的知识。</li>\n<li>该记录了你的初级脚本算法的知识。</li>\n<li>该记录了你正则表达式的知识。</li>\n</ul>\n<h2 id=\"学习前提\"><a href=\"#学习前提\" class=\"headerlink\" title=\"学习前提\"></a>学习前提</h2><hr>\n<p>本参考准备了各种各样的示例，在正式开始练习之前，我假定你对什么是数据库——尤其是关系型数据库管理系统（RDBMS）——已经有所了解，同时也知道什么是计算机编程语言。</p>\n","excerpt":"","more":"<p>SQL 是用于访问和处理数据库的标准的计算机语言。<br>　在本教程中，您将学到如何使用 SQL 访问和处理数据系统中的数据，这类数据库包括：MySQL、SQL Server、Access、Oracle、Sybase、DB2和其他数据库系统。</p>\n<h2 id=\"每一章实例\"><a href=\"#每一章实例\" class=\"headerlink\" title=\"每一章实例\"></a>每一章实例</h2><hr>\n<p>每章节都提供了简单的 SQL 简单实例。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>SQL查询从用户表中选择所有记录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sql  SELECT * FROM users;</span><br></pre></td></tr></table></figure>\n\n<p>SQL查询通过使用where子句从用户表中删除单个记录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sql DELETE FROM users WHERE user_id=299;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"适用人群\"><a href=\"#适用人群\" class=\"headerlink\" title=\"适用人群\"></a>适用人群</h2><hr>\n<p>本参考的目的在于帮助初学者深入浅出地学习 SQL 语言。</p>\n<h2 id=\"SQL测验测试\"><a href=\"#SQL测验测试\" class=\"headerlink\" title=\"SQL测验测试\"></a>SQL测验测试</h2><hr>\n<p>在ngrok测试你的SQL技能！</p>\n<h2 id=\"SQL快速参考\"><a href=\"#SQL快速参考\" class=\"headerlink\" title=\"SQL快速参考\"></a>SQL快速参考</h2><hr>\n<p>一个SQL快速参考。打印并放在口袋里。</p>\n<h2 id=\"SQL数据类型\"><a href=\"#SQL数据类型\" class=\"headerlink\" title=\"SQL数据类型\"></a>SQL数据类型</h2><hr>\n<p>Microsoft Access，MySQL和SQL Server的数据类型和范围。</p>\n<h2 id=\"ngrok实战认证\"><a href=\"#ngrok实战认证\" class=\"headerlink\" title=\"ngrok实战认证\"></a>ngrok实战认证</h2><hr>\n<p>实践出真知，通过获得证书是编程实例最好的证明</p>\n<ul>\n<li>该记录了你的HTML5&amp;CSS知识。</li>\n<li>该记录了您的高级JavaScript知识。</li>\n<li>在记录了你的Bootstrap的知识。</li>\n<li>在记录了您的jQuery的知识。</li>\n<li>在记录了你的视觉设计应用的知识。</li>\n<li>该记录了你的初级脚本算法的知识。</li>\n<li>该记录了你正则表达式的知识。</li>\n</ul>\n<h2 id=\"学习前提\"><a href=\"#学习前提\" class=\"headerlink\" title=\"学习前提\"></a>学习前提</h2><hr>\n<p>本参考准备了各种各样的示例，在正式开始练习之前，我假定你对什么是数据库——尤其是关系型数据库管理系统（RDBMS）——已经有所了解，同时也知道什么是计算机编程语言。</p>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 函数说明","order":1,"_content":"\n## SQL 函数说明\n\n------\n\nSQL 拥有很多可用于计数和计算的内建函数。\n\n## SQL Aggregate 函数\n\n------\n\nSQL Aggregate 函数计算从列中取得的值，返回一个单一的值。\n\n有用的 Aggregate 函数：\n\n- AVG() - 返回平均值\n- COUNT() - 返回行数\n- FIRST() - 返回第一个记录的值\n- LAST() - 返回最后一个记录的值\n- MAX() - 返回最大值\n- MIN() - 返回最小值\n- SUM() - 返回总和\n\n## SQL Scalar 函数\n\n------\n\nSQL Scalar 函数基于输入值，返回一个单一的值。\n\n有用的 Scalar 函数：\n\n- UCASE() - 将某个字段转换为大写\n- LCASE() - 将某个字段转换为小写\n- MID() - 从某个文本字段提取字符\n- LEN() - 返回某个文本字段的长度\n- ROUND() - 对某个数值字段进行指定小数位数的四舍五入\n- NOW() - 返回当前的系统日期和时间\n- FORMAT() - 格式化某个字段的显示方式\n\n> **提示：**在下面的章节，我们会详细讲解 Aggregate 函数和 Scalar 函数。\n","source":"wiki/sql/function/function.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 函数说明\norder: 1\n---\n\n## SQL 函数说明\n\n------\n\nSQL 拥有很多可用于计数和计算的内建函数。\n\n## SQL Aggregate 函数\n\n------\n\nSQL Aggregate 函数计算从列中取得的值，返回一个单一的值。\n\n有用的 Aggregate 函数：\n\n- AVG() - 返回平均值\n- COUNT() - 返回行数\n- FIRST() - 返回第一个记录的值\n- LAST() - 返回最后一个记录的值\n- MAX() - 返回最大值\n- MIN() - 返回最小值\n- SUM() - 返回总和\n\n## SQL Scalar 函数\n\n------\n\nSQL Scalar 函数基于输入值，返回一个单一的值。\n\n有用的 Scalar 函数：\n\n- UCASE() - 将某个字段转换为大写\n- LCASE() - 将某个字段转换为小写\n- MID() - 从某个文本字段提取字符\n- LEN() - 返回某个文本字段的长度\n- ROUND() - 对某个数值字段进行指定小数位数的四舍五入\n- NOW() - 返回当前的系统日期和时间\n- FORMAT() - 格式化某个字段的显示方式\n\n> **提示：**在下面的章节，我们会详细讲解 Aggregate 函数和 Scalar 函数。\n","date":"2025-06-11T03:48:55.343Z","updated":"2025-06-11T03:48:55.343Z","path":"wiki/sql/function/function.html","_id":"cmbrefcz30000djx0cs4d147p","comments":1,"content":"<h2 id=\"SQL-函数说明\"><a href=\"#SQL-函数说明\" class=\"headerlink\" title=\"SQL 函数说明\"></a>SQL 函数说明</h2><hr>\n<p>SQL 拥有很多可用于计数和计算的内建函数。</p>\n<h2 id=\"SQL-Aggregate-函数\"><a href=\"#SQL-Aggregate-函数\" class=\"headerlink\" title=\"SQL Aggregate 函数\"></a>SQL Aggregate 函数</h2><hr>\n<p>SQL Aggregate 函数计算从列中取得的值，返回一个单一的值。</p>\n<p>有用的 Aggregate 函数：</p>\n<ul>\n<li>AVG() - 返回平均值</li>\n<li>COUNT() - 返回行数</li>\n<li>FIRST() - 返回第一个记录的值</li>\n<li>LAST() - 返回最后一个记录的值</li>\n<li>MAX() - 返回最大值</li>\n<li>MIN() - 返回最小值</li>\n<li>SUM() - 返回总和</li>\n</ul>\n<h2 id=\"SQL-Scalar-函数\"><a href=\"#SQL-Scalar-函数\" class=\"headerlink\" title=\"SQL Scalar 函数\"></a>SQL Scalar 函数</h2><hr>\n<p>SQL Scalar 函数基于输入值，返回一个单一的值。</p>\n<p>有用的 Scalar 函数：</p>\n<ul>\n<li>UCASE() - 将某个字段转换为大写</li>\n<li>LCASE() - 将某个字段转换为小写</li>\n<li>MID() - 从某个文本字段提取字符</li>\n<li>LEN() - 返回某个文本字段的长度</li>\n<li>ROUND() - 对某个数值字段进行指定小数位数的四舍五入</li>\n<li>NOW() - 返回当前的系统日期和时间</li>\n<li>FORMAT() - 格式化某个字段的显示方式</li>\n</ul>\n<blockquote>\n<p>**提示：**在下面的章节，我们会详细讲解 Aggregate 函数和 Scalar 函数。</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"SQL-函数说明\"><a href=\"#SQL-函数说明\" class=\"headerlink\" title=\"SQL 函数说明\"></a>SQL 函数说明</h2><hr>\n<p>SQL 拥有很多可用于计数和计算的内建函数。</p>\n<h2 id=\"SQL-Aggregate-函数\"><a href=\"#SQL-Aggregate-函数\" class=\"headerlink\" title=\"SQL Aggregate 函数\"></a>SQL Aggregate 函数</h2><hr>\n<p>SQL Aggregate 函数计算从列中取得的值，返回一个单一的值。</p>\n<p>有用的 Aggregate 函数：</p>\n<ul>\n<li>AVG() - 返回平均值</li>\n<li>COUNT() - 返回行数</li>\n<li>FIRST() - 返回第一个记录的值</li>\n<li>LAST() - 返回最后一个记录的值</li>\n<li>MAX() - 返回最大值</li>\n<li>MIN() - 返回最小值</li>\n<li>SUM() - 返回总和</li>\n</ul>\n<h2 id=\"SQL-Scalar-函数\"><a href=\"#SQL-Scalar-函数\" class=\"headerlink\" title=\"SQL Scalar 函数\"></a>SQL Scalar 函数</h2><hr>\n<p>SQL Scalar 函数基于输入值，返回一个单一的值。</p>\n<p>有用的 Scalar 函数：</p>\n<ul>\n<li>UCASE() - 将某个字段转换为大写</li>\n<li>LCASE() - 将某个字段转换为小写</li>\n<li>MID() - 从某个文本字段提取字符</li>\n<li>LEN() - 返回某个文本字段的长度</li>\n<li>ROUND() - 对某个数值字段进行指定小数位数的四舍五入</li>\n<li>NOW() - 返回当前的系统日期和时间</li>\n<li>FORMAT() - 格式化某个字段的显示方式</li>\n</ul>\n<blockquote>\n<p>**提示：**在下面的章节，我们会详细讲解 Aggregate 函数和 Scalar 函数。</p>\n</blockquote>\n"},{"layout":"wiki","wiki":"sql","title":"SQL MAX() 函数","order":2,"_content":"\n## SQL MAX() 函数\n\n------\n\n### MAX() 函数\n\nMAX() 函数返回所选列的最大值。\n\n### SQL MAX() 语法\n\n```\nSELECT MAX(column_name)\nFROM table_name\nWHERE condition;\n```\n\n\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的 Northwind 样本数据库。\n\n下面是选自 \"Products\" 表的数据：\n\n| ProductID | ProductName                  | SupplierID | CategoryID | Unit                | Price |\n| :-------- | :--------------------------- | :--------- | :--------- | :------------------ | :---- |\n| 1         | Chais                        | 1          | 1          | 10 boxes x 20 bags  | 18    |\n| 2         | Chang                        | 1          | 1          | 24 - 12 oz bottles  | 19    |\n| 3         | Aniseed Syrup                | 1          | 2          | 12 - 550 ml bottles | 10    |\n| 4         | Chef Anton's Cajun Seasoning | 2          | 2          | 48 - 6 oz jars      | 22    |\n| 5         | Chef Anton's Gumbo Mix       | 2          | 2          | 36 boxes            | 21.35 |\n\n\n\n## SQL MAX() 实例\n\n------\n\n以下SQL语句查找最昂贵的产品的价格：\n\n## 实例\n\nSELECT MAX(Price) AS LargestPrice FROM Products;\n\n结果集类似这样：\n\njavascript\n\n```\nLargestPrice\n22\n```\n","source":"wiki/sql/function/max.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL MAX() 函数\norder: 2\n---\n\n## SQL MAX() 函数\n\n------\n\n### MAX() 函数\n\nMAX() 函数返回所选列的最大值。\n\n### SQL MAX() 语法\n\n```\nSELECT MAX(column_name)\nFROM table_name\nWHERE condition;\n```\n\n\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的 Northwind 样本数据库。\n\n下面是选自 \"Products\" 表的数据：\n\n| ProductID | ProductName                  | SupplierID | CategoryID | Unit                | Price |\n| :-------- | :--------------------------- | :--------- | :--------- | :------------------ | :---- |\n| 1         | Chais                        | 1          | 1          | 10 boxes x 20 bags  | 18    |\n| 2         | Chang                        | 1          | 1          | 24 - 12 oz bottles  | 19    |\n| 3         | Aniseed Syrup                | 1          | 2          | 12 - 550 ml bottles | 10    |\n| 4         | Chef Anton's Cajun Seasoning | 2          | 2          | 48 - 6 oz jars      | 22    |\n| 5         | Chef Anton's Gumbo Mix       | 2          | 2          | 36 boxes            | 21.35 |\n\n\n\n## SQL MAX() 实例\n\n------\n\n以下SQL语句查找最昂贵的产品的价格：\n\n## 实例\n\nSELECT MAX(Price) AS LargestPrice FROM Products;\n\n结果集类似这样：\n\njavascript\n\n```\nLargestPrice\n22\n```\n","date":"2025-06-11T03:47:15.270Z","updated":"2025-06-11T03:47:15.266Z","path":"wiki/sql/function/max.html","_id":"cmbrefczs0001djx0550q2kx4","comments":1,"content":"<h2 id=\"SQL-MAX-函数\"><a href=\"#SQL-MAX-函数\" class=\"headerlink\" title=\"SQL MAX() 函数\"></a>SQL MAX() 函数</h2><hr>\n<h3 id=\"MAX-函数\"><a href=\"#MAX-函数\" class=\"headerlink\" title=\"MAX() 函数\"></a>MAX() 函数</h3><p>MAX() 函数返回所选列的最大值。</p>\n<h3 id=\"SQL-MAX-语法\"><a href=\"#SQL-MAX-语法\" class=\"headerlink\" title=\"SQL MAX() 语法\"></a>SQL MAX() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT MAX(column_name)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的 Northwind 样本数据库。</p>\n<p>下面是选自 “Products” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">ProductID</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">SupplierID</th>\n<th align=\"left\">CategoryID</th>\n<th align=\"left\">Unit</th>\n<th align=\"left\">Price</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Chais</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">10 boxes x 20 bags</td>\n<td align=\"left\">18</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Chang</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">24 - 12 oz bottles</td>\n<td align=\"left\">19</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Aniseed Syrup</td>\n<td align=\"left\">1</td>\n<td align=\"left\">2</td>\n<td align=\"left\">12 - 550 ml bottles</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Chef Anton’s Cajun Seasoning</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">48 - 6 oz jars</td>\n<td align=\"left\">22</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Chef Anton’s Gumbo Mix</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">36 boxes</td>\n<td align=\"left\">21.35</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-MAX-实例\"><a href=\"#SQL-MAX-实例\" class=\"headerlink\" title=\"SQL MAX() 实例\"></a>SQL MAX() 实例</h2><hr>\n<p>以下SQL语句查找最昂贵的产品的价格：</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>SELECT MAX(Price) AS LargestPrice FROM Products;</p>\n<p>结果集类似这样：</p>\n<p>javascript</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">LargestPrice</span><br><span class=\"line\">22</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-MAX-函数\"><a href=\"#SQL-MAX-函数\" class=\"headerlink\" title=\"SQL MAX() 函数\"></a>SQL MAX() 函数</h2><hr>\n<h3 id=\"MAX-函数\"><a href=\"#MAX-函数\" class=\"headerlink\" title=\"MAX() 函数\"></a>MAX() 函数</h3><p>MAX() 函数返回所选列的最大值。</p>\n<h3 id=\"SQL-MAX-语法\"><a href=\"#SQL-MAX-语法\" class=\"headerlink\" title=\"SQL MAX() 语法\"></a>SQL MAX() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT MAX(column_name)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的 Northwind 样本数据库。</p>\n<p>下面是选自 “Products” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">ProductID</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">SupplierID</th>\n<th align=\"left\">CategoryID</th>\n<th align=\"left\">Unit</th>\n<th align=\"left\">Price</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Chais</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">10 boxes x 20 bags</td>\n<td align=\"left\">18</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Chang</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">24 - 12 oz bottles</td>\n<td align=\"left\">19</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Aniseed Syrup</td>\n<td align=\"left\">1</td>\n<td align=\"left\">2</td>\n<td align=\"left\">12 - 550 ml bottles</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Chef Anton’s Cajun Seasoning</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">48 - 6 oz jars</td>\n<td align=\"left\">22</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Chef Anton’s Gumbo Mix</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">36 boxes</td>\n<td align=\"left\">21.35</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-MAX-实例\"><a href=\"#SQL-MAX-实例\" class=\"headerlink\" title=\"SQL MAX() 实例\"></a>SQL MAX() 实例</h2><hr>\n<p>以下SQL语句查找最昂贵的产品的价格：</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>SELECT MAX(Price) AS LargestPrice FROM Products;</p>\n<p>结果集类似这样：</p>\n<p>javascript</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">LargestPrice</span><br><span class=\"line\">22</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL MIN() 函数","order":3,"_content":"\n## SQL MIN() 函数\n\n------\n\n### MIN() 函数\n\nMIN() 函数返回所选列的最小值。\n\n### SQL MIN() 语法\n\n```\nSELECT MIN(column_name)\nFROM table_name\nWHERE condition;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的 Northwind 样本数据库。\n\n下面是选自 \"Products\" 表的数据：\n\n| ProductID | ProductName                  | SupplierID | CategoryID | Unit                | Price |\n| :-------- | :--------------------------- | :--------- | :--------- | :------------------ | :---- |\n| 1         | Chais                        | 1          | 1          | 10 boxes x 20 bags  | 18    |\n| 2         | Chang                        | 1          | 1          | 24 - 12 oz bottles  | 19    |\n| 3         | Aniseed Syrup                | 1          | 2          | 12 - 550 ml bottles | 10    |\n| 4         | Chef Anton's Cajun Seasoning | 2          | 2          | 48 - 6 oz jars      | 22    |\n| 5         | Chef Anton's Gumbo Mix       | 2          | 2          | 36 boxes            | 21.35 |\n\n## SQL MIN() 实例\n\n------\n\n以下SQL语句查找最便宜的产品的价格：\n\n示例\n\n```\nSELECT MIN(Price) AS SmallestPrice\nFROM Products;\n```\n\n","source":"wiki/sql/function/min.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL MIN() 函数\norder: 3\n---\n\n## SQL MIN() 函数\n\n------\n\n### MIN() 函数\n\nMIN() 函数返回所选列的最小值。\n\n### SQL MIN() 语法\n\n```\nSELECT MIN(column_name)\nFROM table_name\nWHERE condition;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的 Northwind 样本数据库。\n\n下面是选自 \"Products\" 表的数据：\n\n| ProductID | ProductName                  | SupplierID | CategoryID | Unit                | Price |\n| :-------- | :--------------------------- | :--------- | :--------- | :------------------ | :---- |\n| 1         | Chais                        | 1          | 1          | 10 boxes x 20 bags  | 18    |\n| 2         | Chang                        | 1          | 1          | 24 - 12 oz bottles  | 19    |\n| 3         | Aniseed Syrup                | 1          | 2          | 12 - 550 ml bottles | 10    |\n| 4         | Chef Anton's Cajun Seasoning | 2          | 2          | 48 - 6 oz jars      | 22    |\n| 5         | Chef Anton's Gumbo Mix       | 2          | 2          | 36 boxes            | 21.35 |\n\n## SQL MIN() 实例\n\n------\n\n以下SQL语句查找最便宜的产品的价格：\n\n示例\n\n```\nSELECT MIN(Price) AS SmallestPrice\nFROM Products;\n```\n\n","date":"2025-06-11T03:47:23.098Z","updated":"2025-06-11T03:47:23.094Z","path":"wiki/sql/function/min.html","_id":"cmbrefczt0002djx02km18j5n","comments":1,"content":"<h2 id=\"SQL-MIN-函数\"><a href=\"#SQL-MIN-函数\" class=\"headerlink\" title=\"SQL MIN() 函数\"></a>SQL MIN() 函数</h2><hr>\n<h3 id=\"MIN-函数\"><a href=\"#MIN-函数\" class=\"headerlink\" title=\"MIN() 函数\"></a>MIN() 函数</h3><p>MIN() 函数返回所选列的最小值。</p>\n<h3 id=\"SQL-MIN-语法\"><a href=\"#SQL-MIN-语法\" class=\"headerlink\" title=\"SQL MIN() 语法\"></a>SQL MIN() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT MIN(column_name)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的 Northwind 样本数据库。</p>\n<p>下面是选自 “Products” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">ProductID</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">SupplierID</th>\n<th align=\"left\">CategoryID</th>\n<th align=\"left\">Unit</th>\n<th align=\"left\">Price</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Chais</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">10 boxes x 20 bags</td>\n<td align=\"left\">18</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Chang</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">24 - 12 oz bottles</td>\n<td align=\"left\">19</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Aniseed Syrup</td>\n<td align=\"left\">1</td>\n<td align=\"left\">2</td>\n<td align=\"left\">12 - 550 ml bottles</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Chef Anton’s Cajun Seasoning</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">48 - 6 oz jars</td>\n<td align=\"left\">22</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Chef Anton’s Gumbo Mix</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">36 boxes</td>\n<td align=\"left\">21.35</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-MIN-实例\"><a href=\"#SQL-MIN-实例\" class=\"headerlink\" title=\"SQL MIN() 实例\"></a>SQL MIN() 实例</h2><hr>\n<p>以下SQL语句查找最便宜的产品的价格：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT MIN(Price) AS SmallestPrice</span><br><span class=\"line\">FROM Products;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"SQL-MIN-函数\"><a href=\"#SQL-MIN-函数\" class=\"headerlink\" title=\"SQL MIN() 函数\"></a>SQL MIN() 函数</h2><hr>\n<h3 id=\"MIN-函数\"><a href=\"#MIN-函数\" class=\"headerlink\" title=\"MIN() 函数\"></a>MIN() 函数</h3><p>MIN() 函数返回所选列的最小值。</p>\n<h3 id=\"SQL-MIN-语法\"><a href=\"#SQL-MIN-语法\" class=\"headerlink\" title=\"SQL MIN() 语法\"></a>SQL MIN() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT MIN(column_name)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的 Northwind 样本数据库。</p>\n<p>下面是选自 “Products” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">ProductID</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">SupplierID</th>\n<th align=\"left\">CategoryID</th>\n<th align=\"left\">Unit</th>\n<th align=\"left\">Price</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Chais</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">10 boxes x 20 bags</td>\n<td align=\"left\">18</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Chang</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">24 - 12 oz bottles</td>\n<td align=\"left\">19</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Aniseed Syrup</td>\n<td align=\"left\">1</td>\n<td align=\"left\">2</td>\n<td align=\"left\">12 - 550 ml bottles</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Chef Anton’s Cajun Seasoning</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">48 - 6 oz jars</td>\n<td align=\"left\">22</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Chef Anton’s Gumbo Mix</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">36 boxes</td>\n<td align=\"left\">21.35</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-MIN-实例\"><a href=\"#SQL-MIN-实例\" class=\"headerlink\" title=\"SQL MIN() 实例\"></a>SQL MIN() 实例</h2><hr>\n<p>以下SQL语句查找最便宜的产品的价格：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT MIN(Price) AS SmallestPrice</span><br><span class=\"line\">FROM Products;</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"wiki","wiki":"sql","title":"SQL 事务","order":52,"_content":"\n## SQL 事务\n\n------\n\n事务是在数据库上按照一定的逻辑顺序执行的任务序列，既可以由用户手动执行，也可以由某种数据库程序自动执行。\n\n事务实际上就是对数据库的一个或者多个更改。当你在某张表上创建更新或者删除记录的时，你就已经在使用事务了。控制事务以保证数据完整性，并对数据库错误做出处理，对数据库来说非常重要。\n\n实践中，通常会将很多 SQL 查询组合在一起，并将其作为某个事务一部分来执行。\n\n## 事务的属性\n\n------\n\n事务具有以下四个标准属性，通常用缩略词 ACID 来表示：\n\n- **原子性：**保证任务中的所有操作都执行完毕；否则，事务会在出现错误时终止，并回滚之前所有操作到原始状态。\n- **一致性：**如果事务成功执行，则数据库的状态得到了进行了正确的转变。\n- **隔离性：**保证不同的事务相互独立、透明地执行。\n- **持久性：**即使出现系统故障，之前成功执行的事务的结果也会持久存在。\n\n## 事务控制\n\n------\n\n有四个命令用于控制事务：\n\n- **COMMIT：**提交更改；\n- **ROLLBACK：**回滚更改；\n- **SAVEPOINT：**在事务内部创建一系列可以 ROLLBACK 的还原点；\n- **SET TRANSACTION：**命名事务；\n\n## COMMIT 命令\n\n------\n\nCOMMIT 命令用于保存事务对数据库所做的更改。\n\nCOMMIT 命令会将自上次 COMMIT 命令或者 ROLLBACK 命令执行以来所有的事务都保存到数据库中。\n\nCOMMIT 命令的语法如下所示：\n\n```\nCOMMIT;\n```\n\n## 示例\n\n------\n\n考虑 CUSTOMERS 表，表中的记录如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n下面的示例将会删除表中 age=25 的记录，然后将更改提交（COMMIT）到数据库中。\n\n```\nSQL> DELETE FROM CUSTOMERS\n     WHERE AGE = 25;\nSQL> COMMIT;\n```\n\n上述语句将会从表中删除两行记录，再执行 SELECT 语句将会得到如下结果：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n## ROLLBACK 命令\n\n------\n\nROLLBACK 命令用于撤销尚未保存到数据库中的事务。\n\nROLLBACK 命令只能撤销自上次 COMMIT 命令或者 ROLLBACK 命令执行以来的事务。\n\nROLLBACK 命令的语法如下所示：\n\n```\nROLLBACK;\n```\n\n示例：\n\n------\n\n考虑 CUSTOMERS 表，表中的记录如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n下面的示例将会从表中删除所有 age=25 的记录，然后回滚（ROLLBACK）对数据库所做的更改。\n\n```\nSQL> DELETE FROM CUSTOMERS\n     WHERE AGE = 25;\nSQL> ROLLBACK;\n```\n\n结果是删除操作并不会对数据库产生影响。现在，执行 SELECT 语句将会得到如下结果：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n## SAVEPOINT 命令\n\n------\n\nSAVEPOINT 是事务中的一个状态点，使得我们可以将事务回滚至特定的点，而不是将整个事务都撤销。\n\nSAVEPOINT 命令的记录如下所示：\n\n```\nSAVEPOINT SAVEPOINT_NAME;\n```\n\n该命令只能在事务语句之间创建保存点（SAVEPOINT）。ROLLBACK 命令可以用于撤销一系列的事务。\n\n回滚至某一保存点的语法如下所示：\n\n```\nROLLBACK TO SAVEPOINT_NAME;\n```\n\n下面的示例中，你计划从 CUSTOMERS 表中删除三条不同的记录，并在每次删除之前创建一个保存点（SAVEPOINT），从而使得你可以在任何任何时候回滚到任意的保存点，以恢复数据至其原始状态。\n\n## 示例\n\n------\n\n考虑 CUSTOMERS 表，表中的记录如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n操作序列如下所示：\n\n```\nSQL> SAVEPOINT SP1;\nSavepoint created.\nSQL> DELETE FROM CUSTOMERS WHERE ID=1;\n1 row deleted.\nSQL> SAVEPOINT SP2;\nSavepoint created.\nSQL> DELETE FROM CUSTOMERS WHERE ID=2;\n1 row deleted.\nSQL> SAVEPOINT SP3;\nSavepoint created.\nSQL> DELETE FROM CUSTOMERS WHERE ID=3;\n1 row deleted.\n```\n\n现在，三次删除操作已经生效了，如果此时你改变主意决定回滚至名字为 SP2 的保存点，由于 SP2 于第一次删除操作之后创建，所以后两次删除操作将会被撤销。\n\n```\nSQL> ROLLBACK TO SP2;\nRollback complete.\n```\n\n注意，由于你将数据库回滚至 SP2，所以只有第一次删除真正起效了：\n\n```\nSQL> SELECT * FROM CUSTOMERS;\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n6 rows selected.\n```\n\n## RELEASE SAVEPOINT 命令\n\n------\n\nRELEASE SAVEPOINT 命令用于删除先前创建的保存点。\n\nRELEASE SAVEPOINT 的语法如下所示：\n\n```\nRELEASE SAVEPOINT SAVEPOINT_NAME;\n```\n\n保存点一旦被释放，你就不能够再用 ROLLBACK 命令来撤销该保存点之后的事务了。\n\n## SET TRANSACTION 命令\n\n------\n\nSET TRANSACTION 命令可以用来初始化数据库事务，指定随后的事务的各种特征。\n\n例如，你可以将某个事务指定为只读或者读写。\n\nSET TRANSACTION 命令的语法如下所示：\n\n```\nSET TRANSACTION [ READ WRITE | READ ONLY ];\n```\n","source":"wiki/sql/sentence/affairs.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 事务\norder: 52\n---\n\n## SQL 事务\n\n------\n\n事务是在数据库上按照一定的逻辑顺序执行的任务序列，既可以由用户手动执行，也可以由某种数据库程序自动执行。\n\n事务实际上就是对数据库的一个或者多个更改。当你在某张表上创建更新或者删除记录的时，你就已经在使用事务了。控制事务以保证数据完整性，并对数据库错误做出处理，对数据库来说非常重要。\n\n实践中，通常会将很多 SQL 查询组合在一起，并将其作为某个事务一部分来执行。\n\n## 事务的属性\n\n------\n\n事务具有以下四个标准属性，通常用缩略词 ACID 来表示：\n\n- **原子性：**保证任务中的所有操作都执行完毕；否则，事务会在出现错误时终止，并回滚之前所有操作到原始状态。\n- **一致性：**如果事务成功执行，则数据库的状态得到了进行了正确的转变。\n- **隔离性：**保证不同的事务相互独立、透明地执行。\n- **持久性：**即使出现系统故障，之前成功执行的事务的结果也会持久存在。\n\n## 事务控制\n\n------\n\n有四个命令用于控制事务：\n\n- **COMMIT：**提交更改；\n- **ROLLBACK：**回滚更改；\n- **SAVEPOINT：**在事务内部创建一系列可以 ROLLBACK 的还原点；\n- **SET TRANSACTION：**命名事务；\n\n## COMMIT 命令\n\n------\n\nCOMMIT 命令用于保存事务对数据库所做的更改。\n\nCOMMIT 命令会将自上次 COMMIT 命令或者 ROLLBACK 命令执行以来所有的事务都保存到数据库中。\n\nCOMMIT 命令的语法如下所示：\n\n```\nCOMMIT;\n```\n\n## 示例\n\n------\n\n考虑 CUSTOMERS 表，表中的记录如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n下面的示例将会删除表中 age=25 的记录，然后将更改提交（COMMIT）到数据库中。\n\n```\nSQL> DELETE FROM CUSTOMERS\n     WHERE AGE = 25;\nSQL> COMMIT;\n```\n\n上述语句将会从表中删除两行记录，再执行 SELECT 语句将会得到如下结果：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n## ROLLBACK 命令\n\n------\n\nROLLBACK 命令用于撤销尚未保存到数据库中的事务。\n\nROLLBACK 命令只能撤销自上次 COMMIT 命令或者 ROLLBACK 命令执行以来的事务。\n\nROLLBACK 命令的语法如下所示：\n\n```\nROLLBACK;\n```\n\n示例：\n\n------\n\n考虑 CUSTOMERS 表，表中的记录如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n下面的示例将会从表中删除所有 age=25 的记录，然后回滚（ROLLBACK）对数据库所做的更改。\n\n```\nSQL> DELETE FROM CUSTOMERS\n     WHERE AGE = 25;\nSQL> ROLLBACK;\n```\n\n结果是删除操作并不会对数据库产生影响。现在，执行 SELECT 语句将会得到如下结果：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n## SAVEPOINT 命令\n\n------\n\nSAVEPOINT 是事务中的一个状态点，使得我们可以将事务回滚至特定的点，而不是将整个事务都撤销。\n\nSAVEPOINT 命令的记录如下所示：\n\n```\nSAVEPOINT SAVEPOINT_NAME;\n```\n\n该命令只能在事务语句之间创建保存点（SAVEPOINT）。ROLLBACK 命令可以用于撤销一系列的事务。\n\n回滚至某一保存点的语法如下所示：\n\n```\nROLLBACK TO SAVEPOINT_NAME;\n```\n\n下面的示例中，你计划从 CUSTOMERS 表中删除三条不同的记录，并在每次删除之前创建一个保存点（SAVEPOINT），从而使得你可以在任何任何时候回滚到任意的保存点，以恢复数据至其原始状态。\n\n## 示例\n\n------\n\n考虑 CUSTOMERS 表，表中的记录如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n操作序列如下所示：\n\n```\nSQL> SAVEPOINT SP1;\nSavepoint created.\nSQL> DELETE FROM CUSTOMERS WHERE ID=1;\n1 row deleted.\nSQL> SAVEPOINT SP2;\nSavepoint created.\nSQL> DELETE FROM CUSTOMERS WHERE ID=2;\n1 row deleted.\nSQL> SAVEPOINT SP3;\nSavepoint created.\nSQL> DELETE FROM CUSTOMERS WHERE ID=3;\n1 row deleted.\n```\n\n现在，三次删除操作已经生效了，如果此时你改变主意决定回滚至名字为 SP2 的保存点，由于 SP2 于第一次删除操作之后创建，所以后两次删除操作将会被撤销。\n\n```\nSQL> ROLLBACK TO SP2;\nRollback complete.\n```\n\n注意，由于你将数据库回滚至 SP2，所以只有第一次删除真正起效了：\n\n```\nSQL> SELECT * FROM CUSTOMERS;\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n6 rows selected.\n```\n\n## RELEASE SAVEPOINT 命令\n\n------\n\nRELEASE SAVEPOINT 命令用于删除先前创建的保存点。\n\nRELEASE SAVEPOINT 的语法如下所示：\n\n```\nRELEASE SAVEPOINT SAVEPOINT_NAME;\n```\n\n保存点一旦被释放，你就不能够再用 ROLLBACK 命令来撤销该保存点之后的事务了。\n\n## SET TRANSACTION 命令\n\n------\n\nSET TRANSACTION 命令可以用来初始化数据库事务，指定随后的事务的各种特征。\n\n例如，你可以将某个事务指定为只读或者读写。\n\nSET TRANSACTION 命令的语法如下所示：\n\n```\nSET TRANSACTION [ READ WRITE | READ ONLY ];\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T03:06:32.702Z","path":"wiki/sql/sentence/affairs.html","comments":1,"_id":"cmbreopi6000065x01wncbddl","content":"<h2 id=\"SQL-事务\"><a href=\"#SQL-事务\" class=\"headerlink\" title=\"SQL 事务\"></a>SQL 事务</h2><hr>\n<p>事务是在数据库上按照一定的逻辑顺序执行的任务序列，既可以由用户手动执行，也可以由某种数据库程序自动执行。</p>\n<p>事务实际上就是对数据库的一个或者多个更改。当你在某张表上创建更新或者删除记录的时，你就已经在使用事务了。控制事务以保证数据完整性，并对数据库错误做出处理，对数据库来说非常重要。</p>\n<p>实践中，通常会将很多 SQL 查询组合在一起，并将其作为某个事务一部分来执行。</p>\n<h2 id=\"事务的属性\"><a href=\"#事务的属性\" class=\"headerlink\" title=\"事务的属性\"></a>事务的属性</h2><hr>\n<p>事务具有以下四个标准属性，通常用缩略词 ACID 来表示：</p>\n<ul>\n<li>**原子性：**保证任务中的所有操作都执行完毕；否则，事务会在出现错误时终止，并回滚之前所有操作到原始状态。</li>\n<li>**一致性：**如果事务成功执行，则数据库的状态得到了进行了正确的转变。</li>\n<li>**隔离性：**保证不同的事务相互独立、透明地执行。</li>\n<li>**持久性：**即使出现系统故障，之前成功执行的事务的结果也会持久存在。</li>\n</ul>\n<h2 id=\"事务控制\"><a href=\"#事务控制\" class=\"headerlink\" title=\"事务控制\"></a>事务控制</h2><hr>\n<p>有四个命令用于控制事务：</p>\n<ul>\n<li>**COMMIT：**提交更改；</li>\n<li>**ROLLBACK：**回滚更改；</li>\n<li>**SAVEPOINT：**在事务内部创建一系列可以 ROLLBACK 的还原点；</li>\n<li>**SET TRANSACTION：**命名事务；</li>\n</ul>\n<h2 id=\"COMMIT-命令\"><a href=\"#COMMIT-命令\" class=\"headerlink\" title=\"COMMIT 命令\"></a>COMMIT 命令</h2><hr>\n<p>COMMIT 命令用于保存事务对数据库所做的更改。</p>\n<p>COMMIT 命令会将自上次 COMMIT 命令或者 ROLLBACK 命令执行以来所有的事务都保存到数据库中。</p>\n<p>COMMIT 命令的语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">COMMIT;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><hr>\n<p>考虑 CUSTOMERS 表，表中的记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>下面的示例将会删除表中 age&#x3D;25 的记录，然后将更改提交（COMMIT）到数据库中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; DELETE FROM CUSTOMERS</span><br><span class=\"line\">     WHERE AGE = 25;</span><br><span class=\"line\">SQL&gt; COMMIT;</span><br></pre></td></tr></table></figure>\n\n<p>上述语句将会从表中删除两行记录，再执行 SELECT 语句将会得到如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ROLLBACK-命令\"><a href=\"#ROLLBACK-命令\" class=\"headerlink\" title=\"ROLLBACK 命令\"></a>ROLLBACK 命令</h2><hr>\n<p>ROLLBACK 命令用于撤销尚未保存到数据库中的事务。</p>\n<p>ROLLBACK 命令只能撤销自上次 COMMIT 命令或者 ROLLBACK 命令执行以来的事务。</p>\n<p>ROLLBACK 命令的语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ROLLBACK;</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<hr>\n<p>考虑 CUSTOMERS 表，表中的记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>下面的示例将会从表中删除所有 age&#x3D;25 的记录，然后回滚（ROLLBACK）对数据库所做的更改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; DELETE FROM CUSTOMERS</span><br><span class=\"line\">     WHERE AGE = 25;</span><br><span class=\"line\">SQL&gt; ROLLBACK;</span><br></pre></td></tr></table></figure>\n\n<p>结果是删除操作并不会对数据库产生影响。现在，执行 SELECT 语句将会得到如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SAVEPOINT-命令\"><a href=\"#SAVEPOINT-命令\" class=\"headerlink\" title=\"SAVEPOINT 命令\"></a>SAVEPOINT 命令</h2><hr>\n<p>SAVEPOINT 是事务中的一个状态点，使得我们可以将事务回滚至特定的点，而不是将整个事务都撤销。</p>\n<p>SAVEPOINT 命令的记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SAVEPOINT SAVEPOINT_NAME;</span><br></pre></td></tr></table></figure>\n\n<p>该命令只能在事务语句之间创建保存点（SAVEPOINT）。ROLLBACK 命令可以用于撤销一系列的事务。</p>\n<p>回滚至某一保存点的语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ROLLBACK TO SAVEPOINT_NAME;</span><br></pre></td></tr></table></figure>\n\n<p>下面的示例中，你计划从 CUSTOMERS 表中删除三条不同的记录，并在每次删除之前创建一个保存点（SAVEPOINT），从而使得你可以在任何任何时候回滚到任意的保存点，以恢复数据至其原始状态。</p>\n<h2 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h2><hr>\n<p>考虑 CUSTOMERS 表，表中的记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>操作序列如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SAVEPOINT SP1;</span><br><span class=\"line\">Savepoint created.</span><br><span class=\"line\">SQL&gt; DELETE FROM CUSTOMERS WHERE ID=1;</span><br><span class=\"line\">1 row deleted.</span><br><span class=\"line\">SQL&gt; SAVEPOINT SP2;</span><br><span class=\"line\">Savepoint created.</span><br><span class=\"line\">SQL&gt; DELETE FROM CUSTOMERS WHERE ID=2;</span><br><span class=\"line\">1 row deleted.</span><br><span class=\"line\">SQL&gt; SAVEPOINT SP3;</span><br><span class=\"line\">Savepoint created.</span><br><span class=\"line\">SQL&gt; DELETE FROM CUSTOMERS WHERE ID=3;</span><br><span class=\"line\">1 row deleted.</span><br></pre></td></tr></table></figure>\n\n<p>现在，三次删除操作已经生效了，如果此时你改变主意决定回滚至名字为 SP2 的保存点，由于 SP2 于第一次删除操作之后创建，所以后两次删除操作将会被撤销。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; ROLLBACK TO SP2;</span><br><span class=\"line\">Rollback complete.</span><br></pre></td></tr></table></figure>\n\n<p>注意，由于你将数据库回滚至 SP2，所以只有第一次删除真正起效了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT * FROM CUSTOMERS;</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">6 rows selected.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RELEASE-SAVEPOINT-命令\"><a href=\"#RELEASE-SAVEPOINT-命令\" class=\"headerlink\" title=\"RELEASE SAVEPOINT 命令\"></a>RELEASE SAVEPOINT 命令</h2><hr>\n<p>RELEASE SAVEPOINT 命令用于删除先前创建的保存点。</p>\n<p>RELEASE SAVEPOINT 的语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">RELEASE SAVEPOINT SAVEPOINT_NAME;</span><br></pre></td></tr></table></figure>\n\n<p>保存点一旦被释放，你就不能够再用 ROLLBACK 命令来撤销该保存点之后的事务了。</p>\n<h2 id=\"SET-TRANSACTION-命令\"><a href=\"#SET-TRANSACTION-命令\" class=\"headerlink\" title=\"SET TRANSACTION 命令\"></a>SET TRANSACTION 命令</h2><hr>\n<p>SET TRANSACTION 命令可以用来初始化数据库事务，指定随后的事务的各种特征。</p>\n<p>例如，你可以将某个事务指定为只读或者读写。</p>\n<p>SET TRANSACTION 命令的语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SET TRANSACTION [ READ WRITE | READ ONLY ];</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-事务\"><a href=\"#SQL-事务\" class=\"headerlink\" title=\"SQL 事务\"></a>SQL 事务</h2><hr>\n<p>事务是在数据库上按照一定的逻辑顺序执行的任务序列，既可以由用户手动执行，也可以由某种数据库程序自动执行。</p>\n<p>事务实际上就是对数据库的一个或者多个更改。当你在某张表上创建更新或者删除记录的时，你就已经在使用事务了。控制事务以保证数据完整性，并对数据库错误做出处理，对数据库来说非常重要。</p>\n<p>实践中，通常会将很多 SQL 查询组合在一起，并将其作为某个事务一部分来执行。</p>\n<h2 id=\"事务的属性\"><a href=\"#事务的属性\" class=\"headerlink\" title=\"事务的属性\"></a>事务的属性</h2><hr>\n<p>事务具有以下四个标准属性，通常用缩略词 ACID 来表示：</p>\n<ul>\n<li>**原子性：**保证任务中的所有操作都执行完毕；否则，事务会在出现错误时终止，并回滚之前所有操作到原始状态。</li>\n<li>**一致性：**如果事务成功执行，则数据库的状态得到了进行了正确的转变。</li>\n<li>**隔离性：**保证不同的事务相互独立、透明地执行。</li>\n<li>**持久性：**即使出现系统故障，之前成功执行的事务的结果也会持久存在。</li>\n</ul>\n<h2 id=\"事务控制\"><a href=\"#事务控制\" class=\"headerlink\" title=\"事务控制\"></a>事务控制</h2><hr>\n<p>有四个命令用于控制事务：</p>\n<ul>\n<li>**COMMIT：**提交更改；</li>\n<li>**ROLLBACK：**回滚更改；</li>\n<li>**SAVEPOINT：**在事务内部创建一系列可以 ROLLBACK 的还原点；</li>\n<li>**SET TRANSACTION：**命名事务；</li>\n</ul>\n<h2 id=\"COMMIT-命令\"><a href=\"#COMMIT-命令\" class=\"headerlink\" title=\"COMMIT 命令\"></a>COMMIT 命令</h2><hr>\n<p>COMMIT 命令用于保存事务对数据库所做的更改。</p>\n<p>COMMIT 命令会将自上次 COMMIT 命令或者 ROLLBACK 命令执行以来所有的事务都保存到数据库中。</p>\n<p>COMMIT 命令的语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">COMMIT;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><hr>\n<p>考虑 CUSTOMERS 表，表中的记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>下面的示例将会删除表中 age&#x3D;25 的记录，然后将更改提交（COMMIT）到数据库中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; DELETE FROM CUSTOMERS</span><br><span class=\"line\">     WHERE AGE = 25;</span><br><span class=\"line\">SQL&gt; COMMIT;</span><br></pre></td></tr></table></figure>\n\n<p>上述语句将会从表中删除两行记录，再执行 SELECT 语句将会得到如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ROLLBACK-命令\"><a href=\"#ROLLBACK-命令\" class=\"headerlink\" title=\"ROLLBACK 命令\"></a>ROLLBACK 命令</h2><hr>\n<p>ROLLBACK 命令用于撤销尚未保存到数据库中的事务。</p>\n<p>ROLLBACK 命令只能撤销自上次 COMMIT 命令或者 ROLLBACK 命令执行以来的事务。</p>\n<p>ROLLBACK 命令的语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ROLLBACK;</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<hr>\n<p>考虑 CUSTOMERS 表，表中的记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>下面的示例将会从表中删除所有 age&#x3D;25 的记录，然后回滚（ROLLBACK）对数据库所做的更改。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; DELETE FROM CUSTOMERS</span><br><span class=\"line\">     WHERE AGE = 25;</span><br><span class=\"line\">SQL&gt; ROLLBACK;</span><br></pre></td></tr></table></figure>\n\n<p>结果是删除操作并不会对数据库产生影响。现在，执行 SELECT 语句将会得到如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SAVEPOINT-命令\"><a href=\"#SAVEPOINT-命令\" class=\"headerlink\" title=\"SAVEPOINT 命令\"></a>SAVEPOINT 命令</h2><hr>\n<p>SAVEPOINT 是事务中的一个状态点，使得我们可以将事务回滚至特定的点，而不是将整个事务都撤销。</p>\n<p>SAVEPOINT 命令的记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SAVEPOINT SAVEPOINT_NAME;</span><br></pre></td></tr></table></figure>\n\n<p>该命令只能在事务语句之间创建保存点（SAVEPOINT）。ROLLBACK 命令可以用于撤销一系列的事务。</p>\n<p>回滚至某一保存点的语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ROLLBACK TO SAVEPOINT_NAME;</span><br></pre></td></tr></table></figure>\n\n<p>下面的示例中，你计划从 CUSTOMERS 表中删除三条不同的记录，并在每次删除之前创建一个保存点（SAVEPOINT），从而使得你可以在任何任何时候回滚到任意的保存点，以恢复数据至其原始状态。</p>\n<h2 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h2><hr>\n<p>考虑 CUSTOMERS 表，表中的记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>操作序列如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SAVEPOINT SP1;</span><br><span class=\"line\">Savepoint created.</span><br><span class=\"line\">SQL&gt; DELETE FROM CUSTOMERS WHERE ID=1;</span><br><span class=\"line\">1 row deleted.</span><br><span class=\"line\">SQL&gt; SAVEPOINT SP2;</span><br><span class=\"line\">Savepoint created.</span><br><span class=\"line\">SQL&gt; DELETE FROM CUSTOMERS WHERE ID=2;</span><br><span class=\"line\">1 row deleted.</span><br><span class=\"line\">SQL&gt; SAVEPOINT SP3;</span><br><span class=\"line\">Savepoint created.</span><br><span class=\"line\">SQL&gt; DELETE FROM CUSTOMERS WHERE ID=3;</span><br><span class=\"line\">1 row deleted.</span><br></pre></td></tr></table></figure>\n\n<p>现在，三次删除操作已经生效了，如果此时你改变主意决定回滚至名字为 SP2 的保存点，由于 SP2 于第一次删除操作之后创建，所以后两次删除操作将会被撤销。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; ROLLBACK TO SP2;</span><br><span class=\"line\">Rollback complete.</span><br></pre></td></tr></table></figure>\n\n<p>注意，由于你将数据库回滚至 SP2，所以只有第一次删除真正起效了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT * FROM CUSTOMERS;</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">6 rows selected.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"RELEASE-SAVEPOINT-命令\"><a href=\"#RELEASE-SAVEPOINT-命令\" class=\"headerlink\" title=\"RELEASE SAVEPOINT 命令\"></a>RELEASE SAVEPOINT 命令</h2><hr>\n<p>RELEASE SAVEPOINT 命令用于删除先前创建的保存点。</p>\n<p>RELEASE SAVEPOINT 的语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">RELEASE SAVEPOINT SAVEPOINT_NAME;</span><br></pre></td></tr></table></figure>\n\n<p>保存点一旦被释放，你就不能够再用 ROLLBACK 命令来撤销该保存点之后的事务了。</p>\n<h2 id=\"SET-TRANSACTION-命令\"><a href=\"#SET-TRANSACTION-命令\" class=\"headerlink\" title=\"SET TRANSACTION 命令\"></a>SET TRANSACTION 命令</h2><hr>\n<p>SET TRANSACTION 命令可以用来初始化数据库事务，指定随后的事务的各种特征。</p>\n<p>例如，你可以将某个事务指定为只读或者读写。</p>\n<p>SET TRANSACTION 命令的语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SET TRANSACTION [ READ WRITE | READ ONLY ];</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL ALTER TABLE语句","order":35,"_content":"\n## SQL ALTER TABLE 语句\n\n------\n\n## ALTER TABLE 语句\n\nALTER TABLE 语句用于在现有表中添加、删除或修改列。\n\n### SQL ALTER TABLE 语法\n\n若要向表中添加列，请使用以下语法：\n\n```\nALTER TABLE table_name                \nADD column_name datatype\n```\n\n若要删除表中的列，请使用以下语法（请注意，一些数据库系统不允许这样删除数据库表中的列）：\n\n```\nALTER TABLE table_name                \nDROP COLUMN column_name\n```\n\n若要更改表中列的数据类型，请使用以下语法：\n\n**SQL Server / MS Access：**\n\n```\nALTER TABLE table_name                \nALTER COLUMN column_name datatype\n```\n\n**My SQL / Oracle：**\n\n```\nALTER TABLE table_name                \nMODIFY COLUMN column_name datatype\n```\n\n------\n\n## SQL ALTER TABLE 实例\n\n请看 \"Persons\" 表：\n\n| P_Id | LastName  | FirstName | Address      | City      |\n| :--- | :-------- | :-------- | :----------- | :-------- |\n| 1    | Hansen    | Ola       | Timoteivn 10 | Sandnes   |\n| 2    | Svendson  | Tove      | Borgvn 23    | Sandnes   |\n| 3    | Pettersen | Kari      | Storgt 20    | Stavanger |\n\n现在，我们想在 \"Persons\" 表中添加一个名为 \"DateOfBirth\" 的列。\n\n我们使用下面的 SQL 语句：\n\n```\nALTER TABLE Persons                \nADD DateOfBirth date\n```\n\n请注意，新列 \"DateOfBirth\" 的类型是 date，可以存放日期。数据类型规定列中可以存放的数据的类型。如需了解 MS Access、MySQL 和 SQL Server 中可用的数据类型，请访问我们完整的 。\n\n现在，\"Persons\" 表将如下所示：\n\n| P_Id | LastName  | FirstName | Address      | City      | DateOfBirth |\n| :--- | :-------- | :-------- | :----------- | :-------- | :---------- |\n| 1    | Hansen    | Ola       | Timoteivn 10 | Sandnes   |             |\n| 2    | Svendson  | Tove      | Borgvn 23    | Sandnes   |             |\n| 3    | Pettersen | Kari      | Storgt 20    | Stavanger |             |\n\n------\n\n## 改变数据类型实例\n\n现在，我们想要改变 \"Persons\" 表中 \"DateOfBirth\" 列的数据类型。\n\n我们使用下面的 SQL 语句：\n\n```\nALTER TABLE Persons                \nALTER COLUMN DateOfBirth year\n```\n\n请注意，现在 \"DateOfBirth\" 列的类型是 year，可以存放 2 位或 4 位格式的年份。\n\n------\n\n## DROP COLUMN 实例\n\n接下来，我们想要删除 \"Person\" 表中的 \"DateOfBirth\" 列。\n\n我们使用下面的 SQL 语句：\n\n```\nALTER TABLE Persons                \nDROP COLUMN DateOfBirth\n```\n\n现在，\"Persons\" 表将如下所示：\n\n| P_Id | LastName  | FirstName | Address      | City      |\n| :--- | :-------- | :-------- | :----------- | :-------- |\n| 1    | Hansen    | Ola       | Timoteivn 10 | Sandnes   |\n| 2    | Svendson  | Tove      | Borgvn 23    | Sandnes   |\n| 3    | Pettersen | Kari      | Storgt 20    | Stavanger |\n","source":"wiki/sql/sentence/alter.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL ALTER TABLE语句\norder: 35\n---\n\n## SQL ALTER TABLE 语句\n\n------\n\n## ALTER TABLE 语句\n\nALTER TABLE 语句用于在现有表中添加、删除或修改列。\n\n### SQL ALTER TABLE 语法\n\n若要向表中添加列，请使用以下语法：\n\n```\nALTER TABLE table_name                \nADD column_name datatype\n```\n\n若要删除表中的列，请使用以下语法（请注意，一些数据库系统不允许这样删除数据库表中的列）：\n\n```\nALTER TABLE table_name                \nDROP COLUMN column_name\n```\n\n若要更改表中列的数据类型，请使用以下语法：\n\n**SQL Server / MS Access：**\n\n```\nALTER TABLE table_name                \nALTER COLUMN column_name datatype\n```\n\n**My SQL / Oracle：**\n\n```\nALTER TABLE table_name                \nMODIFY COLUMN column_name datatype\n```\n\n------\n\n## SQL ALTER TABLE 实例\n\n请看 \"Persons\" 表：\n\n| P_Id | LastName  | FirstName | Address      | City      |\n| :--- | :-------- | :-------- | :----------- | :-------- |\n| 1    | Hansen    | Ola       | Timoteivn 10 | Sandnes   |\n| 2    | Svendson  | Tove      | Borgvn 23    | Sandnes   |\n| 3    | Pettersen | Kari      | Storgt 20    | Stavanger |\n\n现在，我们想在 \"Persons\" 表中添加一个名为 \"DateOfBirth\" 的列。\n\n我们使用下面的 SQL 语句：\n\n```\nALTER TABLE Persons                \nADD DateOfBirth date\n```\n\n请注意，新列 \"DateOfBirth\" 的类型是 date，可以存放日期。数据类型规定列中可以存放的数据的类型。如需了解 MS Access、MySQL 和 SQL Server 中可用的数据类型，请访问我们完整的 。\n\n现在，\"Persons\" 表将如下所示：\n\n| P_Id | LastName  | FirstName | Address      | City      | DateOfBirth |\n| :--- | :-------- | :-------- | :----------- | :-------- | :---------- |\n| 1    | Hansen    | Ola       | Timoteivn 10 | Sandnes   |             |\n| 2    | Svendson  | Tove      | Borgvn 23    | Sandnes   |             |\n| 3    | Pettersen | Kari      | Storgt 20    | Stavanger |             |\n\n------\n\n## 改变数据类型实例\n\n现在，我们想要改变 \"Persons\" 表中 \"DateOfBirth\" 列的数据类型。\n\n我们使用下面的 SQL 语句：\n\n```\nALTER TABLE Persons                \nALTER COLUMN DateOfBirth year\n```\n\n请注意，现在 \"DateOfBirth\" 列的类型是 year，可以存放 2 位或 4 位格式的年份。\n\n------\n\n## DROP COLUMN 实例\n\n接下来，我们想要删除 \"Person\" 表中的 \"DateOfBirth\" 列。\n\n我们使用下面的 SQL 语句：\n\n```\nALTER TABLE Persons                \nDROP COLUMN DateOfBirth\n```\n\n现在，\"Persons\" 表将如下所示：\n\n| P_Id | LastName  | FirstName | Address      | City      |\n| :--- | :-------- | :-------- | :----------- | :-------- |\n| 1    | Hansen    | Ola       | Timoteivn 10 | Sandnes   |\n| 2    | Svendson  | Tove      | Borgvn 23    | Sandnes   |\n| 3    | Pettersen | Kari      | Storgt 20    | Stavanger |\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T01:46:26.195Z","path":"wiki/sql/sentence/alter.html","comments":1,"_id":"cmbreopic000165x08zg65o9a","content":"<h2 id=\"SQL-ALTER-TABLE-语句\"><a href=\"#SQL-ALTER-TABLE-语句\" class=\"headerlink\" title=\"SQL ALTER TABLE 语句\"></a>SQL ALTER TABLE 语句</h2><hr>\n<h2 id=\"ALTER-TABLE-语句\"><a href=\"#ALTER-TABLE-语句\" class=\"headerlink\" title=\"ALTER TABLE 语句\"></a>ALTER TABLE 语句</h2><p>ALTER TABLE 语句用于在现有表中添加、删除或修改列。</p>\n<h3 id=\"SQL-ALTER-TABLE-语法\"><a href=\"#SQL-ALTER-TABLE-语法\" class=\"headerlink\" title=\"SQL ALTER TABLE 语法\"></a>SQL ALTER TABLE 语法</h3><p>若要向表中添加列，请使用以下语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name                </span><br><span class=\"line\">ADD column_name datatype</span><br></pre></td></tr></table></figure>\n\n<p>若要删除表中的列，请使用以下语法（请注意，一些数据库系统不允许这样删除数据库表中的列）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name                </span><br><span class=\"line\">DROP COLUMN column_name</span><br></pre></td></tr></table></figure>\n\n<p>若要更改表中列的数据类型，请使用以下语法：</p>\n<p><strong>SQL Server &#x2F; MS Access：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name                </span><br><span class=\"line\">ALTER COLUMN column_name datatype</span><br></pre></td></tr></table></figure>\n\n<p><strong>My SQL &#x2F; Oracle：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name                </span><br><span class=\"line\">MODIFY COLUMN column_name datatype</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"SQL-ALTER-TABLE-实例\"><a href=\"#SQL-ALTER-TABLE-实例\" class=\"headerlink\" title=\"SQL ALTER TABLE 实例\"></a>SQL ALTER TABLE 实例</h2><p>请看 “Persons” 表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">P_Id</th>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Hansen</td>\n<td align=\"left\">Ola</td>\n<td align=\"left\">Timoteivn 10</td>\n<td align=\"left\">Sandnes</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Svendson</td>\n<td align=\"left\">Tove</td>\n<td align=\"left\">Borgvn 23</td>\n<td align=\"left\">Sandnes</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Pettersen</td>\n<td align=\"left\">Kari</td>\n<td align=\"left\">Storgt 20</td>\n<td align=\"left\">Stavanger</td>\n</tr>\n</tbody></table>\n<p>现在，我们想在 “Persons” 表中添加一个名为 “DateOfBirth” 的列。</p>\n<p>我们使用下面的 SQL 语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons                </span><br><span class=\"line\">ADD DateOfBirth date</span><br></pre></td></tr></table></figure>\n\n<p>请注意，新列 “DateOfBirth” 的类型是 date，可以存放日期。数据类型规定列中可以存放的数据的类型。如需了解 MS Access、MySQL 和 SQL Server 中可用的数据类型，请访问我们完整的 。</p>\n<p>现在，”Persons” 表将如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">P_Id</th>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">DateOfBirth</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Hansen</td>\n<td align=\"left\">Ola</td>\n<td align=\"left\">Timoteivn 10</td>\n<td align=\"left\">Sandnes</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Svendson</td>\n<td align=\"left\">Tove</td>\n<td align=\"left\">Borgvn 23</td>\n<td align=\"left\">Sandnes</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Pettersen</td>\n<td align=\"left\">Kari</td>\n<td align=\"left\">Storgt 20</td>\n<td align=\"left\">Stavanger</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"改变数据类型实例\"><a href=\"#改变数据类型实例\" class=\"headerlink\" title=\"改变数据类型实例\"></a>改变数据类型实例</h2><p>现在，我们想要改变 “Persons” 表中 “DateOfBirth” 列的数据类型。</p>\n<p>我们使用下面的 SQL 语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons                </span><br><span class=\"line\">ALTER COLUMN DateOfBirth year</span><br></pre></td></tr></table></figure>\n\n<p>请注意，现在 “DateOfBirth” 列的类型是 year，可以存放 2 位或 4 位格式的年份。</p>\n<hr>\n<h2 id=\"DROP-COLUMN-实例\"><a href=\"#DROP-COLUMN-实例\" class=\"headerlink\" title=\"DROP COLUMN 实例\"></a>DROP COLUMN 实例</h2><p>接下来，我们想要删除 “Person” 表中的 “DateOfBirth” 列。</p>\n<p>我们使用下面的 SQL 语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons                </span><br><span class=\"line\">DROP COLUMN DateOfBirth</span><br></pre></td></tr></table></figure>\n\n<p>现在，”Persons” 表将如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">P_Id</th>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Hansen</td>\n<td align=\"left\">Ola</td>\n<td align=\"left\">Timoteivn 10</td>\n<td align=\"left\">Sandnes</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Svendson</td>\n<td align=\"left\">Tove</td>\n<td align=\"left\">Borgvn 23</td>\n<td align=\"left\">Sandnes</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Pettersen</td>\n<td align=\"left\">Kari</td>\n<td align=\"left\">Storgt 20</td>\n<td align=\"left\">Stavanger</td>\n</tr>\n</tbody></table>\n","excerpt":"","more":"<h2 id=\"SQL-ALTER-TABLE-语句\"><a href=\"#SQL-ALTER-TABLE-语句\" class=\"headerlink\" title=\"SQL ALTER TABLE 语句\"></a>SQL ALTER TABLE 语句</h2><hr>\n<h2 id=\"ALTER-TABLE-语句\"><a href=\"#ALTER-TABLE-语句\" class=\"headerlink\" title=\"ALTER TABLE 语句\"></a>ALTER TABLE 语句</h2><p>ALTER TABLE 语句用于在现有表中添加、删除或修改列。</p>\n<h3 id=\"SQL-ALTER-TABLE-语法\"><a href=\"#SQL-ALTER-TABLE-语法\" class=\"headerlink\" title=\"SQL ALTER TABLE 语法\"></a>SQL ALTER TABLE 语法</h3><p>若要向表中添加列，请使用以下语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name                </span><br><span class=\"line\">ADD column_name datatype</span><br></pre></td></tr></table></figure>\n\n<p>若要删除表中的列，请使用以下语法（请注意，一些数据库系统不允许这样删除数据库表中的列）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name                </span><br><span class=\"line\">DROP COLUMN column_name</span><br></pre></td></tr></table></figure>\n\n<p>若要更改表中列的数据类型，请使用以下语法：</p>\n<p><strong>SQL Server &#x2F; MS Access：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name                </span><br><span class=\"line\">ALTER COLUMN column_name datatype</span><br></pre></td></tr></table></figure>\n\n<p><strong>My SQL &#x2F; Oracle：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name                </span><br><span class=\"line\">MODIFY COLUMN column_name datatype</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"SQL-ALTER-TABLE-实例\"><a href=\"#SQL-ALTER-TABLE-实例\" class=\"headerlink\" title=\"SQL ALTER TABLE 实例\"></a>SQL ALTER TABLE 实例</h2><p>请看 “Persons” 表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">P_Id</th>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Hansen</td>\n<td align=\"left\">Ola</td>\n<td align=\"left\">Timoteivn 10</td>\n<td align=\"left\">Sandnes</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Svendson</td>\n<td align=\"left\">Tove</td>\n<td align=\"left\">Borgvn 23</td>\n<td align=\"left\">Sandnes</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Pettersen</td>\n<td align=\"left\">Kari</td>\n<td align=\"left\">Storgt 20</td>\n<td align=\"left\">Stavanger</td>\n</tr>\n</tbody></table>\n<p>现在，我们想在 “Persons” 表中添加一个名为 “DateOfBirth” 的列。</p>\n<p>我们使用下面的 SQL 语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons                </span><br><span class=\"line\">ADD DateOfBirth date</span><br></pre></td></tr></table></figure>\n\n<p>请注意，新列 “DateOfBirth” 的类型是 date，可以存放日期。数据类型规定列中可以存放的数据的类型。如需了解 MS Access、MySQL 和 SQL Server 中可用的数据类型，请访问我们完整的 。</p>\n<p>现在，”Persons” 表将如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">P_Id</th>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">DateOfBirth</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Hansen</td>\n<td align=\"left\">Ola</td>\n<td align=\"left\">Timoteivn 10</td>\n<td align=\"left\">Sandnes</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Svendson</td>\n<td align=\"left\">Tove</td>\n<td align=\"left\">Borgvn 23</td>\n<td align=\"left\">Sandnes</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Pettersen</td>\n<td align=\"left\">Kari</td>\n<td align=\"left\">Storgt 20</td>\n<td align=\"left\">Stavanger</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"改变数据类型实例\"><a href=\"#改变数据类型实例\" class=\"headerlink\" title=\"改变数据类型实例\"></a>改变数据类型实例</h2><p>现在，我们想要改变 “Persons” 表中 “DateOfBirth” 列的数据类型。</p>\n<p>我们使用下面的 SQL 语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons                </span><br><span class=\"line\">ALTER COLUMN DateOfBirth year</span><br></pre></td></tr></table></figure>\n\n<p>请注意，现在 “DateOfBirth” 列的类型是 year，可以存放 2 位或 4 位格式的年份。</p>\n<hr>\n<h2 id=\"DROP-COLUMN-实例\"><a href=\"#DROP-COLUMN-实例\" class=\"headerlink\" title=\"DROP COLUMN 实例\"></a>DROP COLUMN 实例</h2><p>接下来，我们想要删除 “Person” 表中的 “DateOfBirth” 列。</p>\n<p>我们使用下面的 SQL 语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons                </span><br><span class=\"line\">DROP COLUMN DateOfBirth</span><br></pre></td></tr></table></figure>\n\n<p>现在，”Persons” 表将如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">P_Id</th>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Hansen</td>\n<td align=\"left\">Ola</td>\n<td align=\"left\">Timoteivn 10</td>\n<td align=\"left\">Sandnes</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Svendson</td>\n<td align=\"left\">Tove</td>\n<td align=\"left\">Borgvn 23</td>\n<td align=\"left\">Sandnes</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Pettersen</td>\n<td align=\"left\">Kari</td>\n<td align=\"left\">Storgt 20</td>\n<td align=\"left\">Stavanger</td>\n</tr>\n</tbody></table>\n"},{"layout":"wiki","wiki":"sql","title":"SQL ALTER TABLE 命令","order":46,"_content":"\n## SQL ALTER TABLE 命令\n\n------\n\nSQL **ALTER TABLE** 命令用于添加、删除或者更改现有数据表中的列。\n\n你还可以用 ALTER TABLE 命令来添加或者删除现有数据表上的约束。\n\n## 语法\n\n------\n\n使用 ALTER TABLE 在现有的数据表中**添加新列**的基本语法如下：\n\n```\nALTER TABLE table_name ADD column_name datatype;\n```\n\n\n\n使用 ALTER TABLE 在现有的数据表中**删除列**的基本语法如下：\n\n```\nALTER TABLE table_name DROP COLUMN column_name;\n```\n\n\n\n使用 ALTER TABLE 更改现有的数据表中**列的数据类型**的基本语法如下：\n\n```\nALTER TABLE table_name MODIFY COLUMN column_name datatype;\n```\n\n\n\n使用 ALTER TABLE 给某列添加 **NOT NULL 约束** 的基本语法如下：\n\n```\nALTER TABLE table_name MODIFY column_name datatype NOT NULL;\n```\n\n\n\n使用 ALTER TABLE 给数据表添加 **唯一约束** 的基本语法如下：\n\n```\nALTER TABLE table_name \nADD CONSTRAINT MyUniqueConstraint UNIQUE(column1, column2...);\n```\n\n\n\n使用 ALTER TABLE 给数据表添加 **CHECK 约束** 的基本语法如下：\n\n```\nALTER TABLE table_name \nADD CONSTRAINT MyUniqueConstraint CHECK (CONDITION);\n```\n\n\n\n使用 ALTER TABLE 给数据表添加 **主键约束** 的基本语法如下：\n\n```\nALTER TABLE table_name \nADD CONSTRAINT MyPrimaryKey PRIMARY KEY (column1, column2...);\n```\n\n\n\n使用 ALTER TABLE 从数据表中 **删除约束** 的基本语法如下：\n\n```\nALTER TABLE table_name \nDROP CONSTRAINT MyUniqueConstraint;\n```\n\n\n\n如果你在使用 MySQL，代码应当如下：\n\n```\nALTER TABLE table_name \nDROP INDEX MyUniqueConstraint;\n```\n\n\n\n使用 ALTER TABLE 从数据表中 **删除主键约束** 的基本语法如下：\n\n```\nALTER TABLE table_name \nDROP CONSTRAINT MyPrimaryKey;\n```\n\n\n\n如果你在使用 MySQL，代码应当如下：\n\n```\nALTER TABLE table_name \nDROP PRIMARY KEY;\n```\n\n示例：\n\n------\n\n考虑 CUSTOMERS 表，表中记录如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n下面的示例展示了如何在现有的表中添加新的一列：\n\n```\nALTER TABLE CUSTOMERS ADD SEX char(1);\n```\n\n现在，CUSTOMERS 已经被更改了，SELECT 语句的输出应当如下所示：\n\n```\n+----+---------+-----+-----------+----------+------+\n| ID | NAME    | AGE | ADDRESS   | SALARY   | SEX  |\n+----+---------+-----+-----------+----------+------+\n|  1 | Ramesh  |  32 | Ahmedabad |  2000.00 | NULL |\n|  2 | Ramesh  |  25 | Delhi     |  1500.00 | NULL |\n|  3 | kaushik |  23 | Kota      |  2000.00 | NULL |\n|  4 | kaushik |  25 | Mumbai    |  6500.00 | NULL |\n|  5 | Hardik  |  27 | Bhopal    |  8500.00 | NULL |\n|  6 | Komal   |  22 | MP        |  4500.00 | NULL |\n|  7 | Muffy   |  24 | Indore    | 10000.00 | NULL |\n+----+---------+-----+-----------+----------+------+\n```\n\n下面的示例展示了如何从 CUSTOMERS 表中删除 SEX 列：\n\n```\nALTER TABLE CUSTOMERS DROP COLUMN SEX;\n```\n\n现在，CUSTOMERS 已经被更改了，SELECT 语句的输出应当如下所示：\n\n```\n+----+---------+-----+-----------+----------+\n| ID | NAME    | AGE | ADDRESS   | SALARY   |\n+----+---------+-----+-----------+----------+\n|  1 | Ramesh  |  32 | Ahmedabad |  2000.00 |\n|  2 | Ramesh  |  25 | Delhi     |  1500.00 |\n|  3 | kaushik |  23 | Kota      |  2000.00 |\n|  4 | kaushik |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik  |  27 | Bhopal    |  8500.00 |\n|  6 | Komal   |  22 | MP        |  4500.00 |\n|  7 | Muffy   |  24 | Indore    | 10000.00 |\n+----+---------+-----+-----------+----------+\n```\n","source":"wiki/sql/sentence/alteryufa.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL ALTER TABLE 命令\norder: 46\n---\n\n## SQL ALTER TABLE 命令\n\n------\n\nSQL **ALTER TABLE** 命令用于添加、删除或者更改现有数据表中的列。\n\n你还可以用 ALTER TABLE 命令来添加或者删除现有数据表上的约束。\n\n## 语法\n\n------\n\n使用 ALTER TABLE 在现有的数据表中**添加新列**的基本语法如下：\n\n```\nALTER TABLE table_name ADD column_name datatype;\n```\n\n\n\n使用 ALTER TABLE 在现有的数据表中**删除列**的基本语法如下：\n\n```\nALTER TABLE table_name DROP COLUMN column_name;\n```\n\n\n\n使用 ALTER TABLE 更改现有的数据表中**列的数据类型**的基本语法如下：\n\n```\nALTER TABLE table_name MODIFY COLUMN column_name datatype;\n```\n\n\n\n使用 ALTER TABLE 给某列添加 **NOT NULL 约束** 的基本语法如下：\n\n```\nALTER TABLE table_name MODIFY column_name datatype NOT NULL;\n```\n\n\n\n使用 ALTER TABLE 给数据表添加 **唯一约束** 的基本语法如下：\n\n```\nALTER TABLE table_name \nADD CONSTRAINT MyUniqueConstraint UNIQUE(column1, column2...);\n```\n\n\n\n使用 ALTER TABLE 给数据表添加 **CHECK 约束** 的基本语法如下：\n\n```\nALTER TABLE table_name \nADD CONSTRAINT MyUniqueConstraint CHECK (CONDITION);\n```\n\n\n\n使用 ALTER TABLE 给数据表添加 **主键约束** 的基本语法如下：\n\n```\nALTER TABLE table_name \nADD CONSTRAINT MyPrimaryKey PRIMARY KEY (column1, column2...);\n```\n\n\n\n使用 ALTER TABLE 从数据表中 **删除约束** 的基本语法如下：\n\n```\nALTER TABLE table_name \nDROP CONSTRAINT MyUniqueConstraint;\n```\n\n\n\n如果你在使用 MySQL，代码应当如下：\n\n```\nALTER TABLE table_name \nDROP INDEX MyUniqueConstraint;\n```\n\n\n\n使用 ALTER TABLE 从数据表中 **删除主键约束** 的基本语法如下：\n\n```\nALTER TABLE table_name \nDROP CONSTRAINT MyPrimaryKey;\n```\n\n\n\n如果你在使用 MySQL，代码应当如下：\n\n```\nALTER TABLE table_name \nDROP PRIMARY KEY;\n```\n\n示例：\n\n------\n\n考虑 CUSTOMERS 表，表中记录如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n下面的示例展示了如何在现有的表中添加新的一列：\n\n```\nALTER TABLE CUSTOMERS ADD SEX char(1);\n```\n\n现在，CUSTOMERS 已经被更改了，SELECT 语句的输出应当如下所示：\n\n```\n+----+---------+-----+-----------+----------+------+\n| ID | NAME    | AGE | ADDRESS   | SALARY   | SEX  |\n+----+---------+-----+-----------+----------+------+\n|  1 | Ramesh  |  32 | Ahmedabad |  2000.00 | NULL |\n|  2 | Ramesh  |  25 | Delhi     |  1500.00 | NULL |\n|  3 | kaushik |  23 | Kota      |  2000.00 | NULL |\n|  4 | kaushik |  25 | Mumbai    |  6500.00 | NULL |\n|  5 | Hardik  |  27 | Bhopal    |  8500.00 | NULL |\n|  6 | Komal   |  22 | MP        |  4500.00 | NULL |\n|  7 | Muffy   |  24 | Indore    | 10000.00 | NULL |\n+----+---------+-----+-----------+----------+------+\n```\n\n下面的示例展示了如何从 CUSTOMERS 表中删除 SEX 列：\n\n```\nALTER TABLE CUSTOMERS DROP COLUMN SEX;\n```\n\n现在，CUSTOMERS 已经被更改了，SELECT 语句的输出应当如下所示：\n\n```\n+----+---------+-----+-----------+----------+\n| ID | NAME    | AGE | ADDRESS   | SALARY   |\n+----+---------+-----+-----------+----------+\n|  1 | Ramesh  |  32 | Ahmedabad |  2000.00 |\n|  2 | Ramesh  |  25 | Delhi     |  1500.00 |\n|  3 | kaushik |  23 | Kota      |  2000.00 |\n|  4 | kaushik |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik  |  27 | Bhopal    |  8500.00 |\n|  6 | Komal   |  22 | MP        |  4500.00 |\n|  7 | Muffy   |  24 | Indore    | 10000.00 |\n+----+---------+-----+-----------+----------+\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T02:38:31.712Z","path":"wiki/sql/sentence/alteryufa.html","comments":1,"_id":"cmbreopie000265x05jpb59k9","content":"<h2 id=\"SQL-ALTER-TABLE-命令\"><a href=\"#SQL-ALTER-TABLE-命令\" class=\"headerlink\" title=\"SQL ALTER TABLE 命令\"></a>SQL ALTER TABLE 命令</h2><hr>\n<p>SQL <strong>ALTER TABLE</strong> 命令用于添加、删除或者更改现有数据表中的列。</p>\n<p>你还可以用 ALTER TABLE 命令来添加或者删除现有数据表上的约束。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><hr>\n<p>使用 ALTER TABLE 在现有的数据表中<strong>添加新列</strong>的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name ADD column_name datatype;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用 ALTER TABLE 在现有的数据表中<strong>删除列</strong>的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name DROP COLUMN column_name;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用 ALTER TABLE 更改现有的数据表中<strong>列的数据类型</strong>的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name MODIFY COLUMN column_name datatype;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用 ALTER TABLE 给某列添加 <strong>NOT NULL 约束</strong> 的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name MODIFY column_name datatype NOT NULL;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用 ALTER TABLE 给数据表添加 <strong>唯一约束</strong> 的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name </span><br><span class=\"line\">ADD CONSTRAINT MyUniqueConstraint UNIQUE(column1, column2...);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用 ALTER TABLE 给数据表添加 <strong>CHECK 约束</strong> 的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name </span><br><span class=\"line\">ADD CONSTRAINT MyUniqueConstraint CHECK (CONDITION);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用 ALTER TABLE 给数据表添加 <strong>主键约束</strong> 的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name </span><br><span class=\"line\">ADD CONSTRAINT MyPrimaryKey PRIMARY KEY (column1, column2...);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用 ALTER TABLE 从数据表中 <strong>删除约束</strong> 的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name </span><br><span class=\"line\">DROP CONSTRAINT MyUniqueConstraint;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果你在使用 MySQL，代码应当如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name </span><br><span class=\"line\">DROP INDEX MyUniqueConstraint;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用 ALTER TABLE 从数据表中 <strong>删除主键约束</strong> 的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name </span><br><span class=\"line\">DROP CONSTRAINT MyPrimaryKey;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果你在使用 MySQL，代码应当如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name </span><br><span class=\"line\">DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<hr>\n<p>考虑 CUSTOMERS 表，表中记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>下面的示例展示了如何在现有的表中添加新的一列：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE CUSTOMERS ADD SEX char(1);</span><br></pre></td></tr></table></figure>\n\n<p>现在，CUSTOMERS 已经被更改了，SELECT 语句的输出应当如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+---------+-----+-----------+----------+------+</span><br><span class=\"line\">| ID | NAME    | AGE | ADDRESS   | SALARY   | SEX  |</span><br><span class=\"line\">+----+---------+-----+-----------+----------+------+</span><br><span class=\"line\">|  1 | Ramesh  |  32 | Ahmedabad |  2000.00 | NULL |</span><br><span class=\"line\">|  2 | Ramesh  |  25 | Delhi     |  1500.00 | NULL |</span><br><span class=\"line\">|  3 | kaushik |  23 | Kota      |  2000.00 | NULL |</span><br><span class=\"line\">|  4 | kaushik |  25 | Mumbai    |  6500.00 | NULL |</span><br><span class=\"line\">|  5 | Hardik  |  27 | Bhopal    |  8500.00 | NULL |</span><br><span class=\"line\">|  6 | Komal   |  22 | MP        |  4500.00 | NULL |</span><br><span class=\"line\">|  7 | Muffy   |  24 | Indore    | 10000.00 | NULL |</span><br><span class=\"line\">+----+---------+-----+-----------+----------+------+</span><br></pre></td></tr></table></figure>\n\n<p>下面的示例展示了如何从 CUSTOMERS 表中删除 SEX 列：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE CUSTOMERS DROP COLUMN SEX;</span><br></pre></td></tr></table></figure>\n\n<p>现在，CUSTOMERS 已经被更改了，SELECT 语句的输出应当如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+---------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME    | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+---------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh  |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Ramesh  |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | kaushik |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik  |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal   |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy   |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+---------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-ALTER-TABLE-命令\"><a href=\"#SQL-ALTER-TABLE-命令\" class=\"headerlink\" title=\"SQL ALTER TABLE 命令\"></a>SQL ALTER TABLE 命令</h2><hr>\n<p>SQL <strong>ALTER TABLE</strong> 命令用于添加、删除或者更改现有数据表中的列。</p>\n<p>你还可以用 ALTER TABLE 命令来添加或者删除现有数据表上的约束。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><hr>\n<p>使用 ALTER TABLE 在现有的数据表中<strong>添加新列</strong>的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name ADD column_name datatype;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用 ALTER TABLE 在现有的数据表中<strong>删除列</strong>的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name DROP COLUMN column_name;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用 ALTER TABLE 更改现有的数据表中<strong>列的数据类型</strong>的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name MODIFY COLUMN column_name datatype;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用 ALTER TABLE 给某列添加 <strong>NOT NULL 约束</strong> 的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name MODIFY column_name datatype NOT NULL;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用 ALTER TABLE 给数据表添加 <strong>唯一约束</strong> 的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name </span><br><span class=\"line\">ADD CONSTRAINT MyUniqueConstraint UNIQUE(column1, column2...);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用 ALTER TABLE 给数据表添加 <strong>CHECK 约束</strong> 的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name </span><br><span class=\"line\">ADD CONSTRAINT MyUniqueConstraint CHECK (CONDITION);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用 ALTER TABLE 给数据表添加 <strong>主键约束</strong> 的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name </span><br><span class=\"line\">ADD CONSTRAINT MyPrimaryKey PRIMARY KEY (column1, column2...);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用 ALTER TABLE 从数据表中 <strong>删除约束</strong> 的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name </span><br><span class=\"line\">DROP CONSTRAINT MyUniqueConstraint;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果你在使用 MySQL，代码应当如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name </span><br><span class=\"line\">DROP INDEX MyUniqueConstraint;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用 ALTER TABLE 从数据表中 <strong>删除主键约束</strong> 的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name </span><br><span class=\"line\">DROP CONSTRAINT MyPrimaryKey;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>如果你在使用 MySQL，代码应当如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name </span><br><span class=\"line\">DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<hr>\n<p>考虑 CUSTOMERS 表，表中记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>下面的示例展示了如何在现有的表中添加新的一列：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE CUSTOMERS ADD SEX char(1);</span><br></pre></td></tr></table></figure>\n\n<p>现在，CUSTOMERS 已经被更改了，SELECT 语句的输出应当如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+---------+-----+-----------+----------+------+</span><br><span class=\"line\">| ID | NAME    | AGE | ADDRESS   | SALARY   | SEX  |</span><br><span class=\"line\">+----+---------+-----+-----------+----------+------+</span><br><span class=\"line\">|  1 | Ramesh  |  32 | Ahmedabad |  2000.00 | NULL |</span><br><span class=\"line\">|  2 | Ramesh  |  25 | Delhi     |  1500.00 | NULL |</span><br><span class=\"line\">|  3 | kaushik |  23 | Kota      |  2000.00 | NULL |</span><br><span class=\"line\">|  4 | kaushik |  25 | Mumbai    |  6500.00 | NULL |</span><br><span class=\"line\">|  5 | Hardik  |  27 | Bhopal    |  8500.00 | NULL |</span><br><span class=\"line\">|  6 | Komal   |  22 | MP        |  4500.00 | NULL |</span><br><span class=\"line\">|  7 | Muffy   |  24 | Indore    | 10000.00 | NULL |</span><br><span class=\"line\">+----+---------+-----+-----------+----------+------+</span><br></pre></td></tr></table></figure>\n\n<p>下面的示例展示了如何从 CUSTOMERS 表中删除 SEX 列：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE CUSTOMERS DROP COLUMN SEX;</span><br></pre></td></tr></table></figure>\n\n<p>现在，CUSTOMERS 已经被更改了，SELECT 语句的输出应当如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+---------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME    | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+---------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh  |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Ramesh  |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | kaushik |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik  |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal   |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy   |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+---------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL Aliases别名","order":40,"_content":"\n## SQL 别名（Aliases）\n\n------\n\n通过使用 SQL，可以为表名称或列名称指定别名（Alias）。\n\n- SQL 别名用于为表或表中的列提供临时名称，数据库中的实际表名不会更改。\n- SQL 别名通常用于使列名更具可读性。\n- SQL 一个别名只存在于查询期间。\n- 表别名的使用是在特定SQL语句中重命名表。\n- 列别名用于为特定SQL查询重命名表的列。\n\n### 列的 SQL Alias 语法\n\n```\nSELECT column_name AS alias_name\nFROM table_name;\nWHERE condition;\n```\n\n### 表的 SQL Alias 语法\n\n```\nSELECT column_name(s)\nFROM table_name AS alias_name;\nWHERE condition;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是\"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName    | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo   | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy   | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n\n下面是选自 \"Orders\" 表的数据：\n\n| OrderID | CustomerID | EmployeeID | OrderDate  | ShipperID |\n| :------ | :--------- | :--------- | :--------- | :-------- |\n| 10354   | 58         | 8          | 1996-11-14 | 3         |\n| 10355   | 4          | 6          | 1996-11-15 | 1         |\n| 10356   | 86         | 6          | 1996-11-18 | 2         |\n\n## 列的 Alias 实例\n\n------\n\n以下SQL语句创建两个别名，一个用于CustomerID列，另一个用于CustomerName列：\n\n示例\n\n```\nSELECT CustomerID as ID, CustomerName AS Customer\nFROM Customers;\n```\n\n以下SQL语句创建两个别名，一个用于CustomerName列，一个用于ContactName列。**注：** 如果别名包含空格，则需要双引号或方括号：\n\n示例\n\n```\nSELECT CustomerName AS Customer, ContactName AS [Contact Person]\nFROM Customers;\n```\n\n以下SQL语句创建一个名为\"Address\"的别名，它包含四列（Address，PostalCode，City and Country）：\n\n```\nSELECT CustomerName, Address + ', ' + PostalCode + ', ' + City + ', ' + Country AS Address\nFROM Customers;\n```\n\n**　注意：** 要使上面的SQL语句在MySQL中工作，请使用以下命令：\n\n```\nSELECT CustomerName, CONCAT(Address,', ',PostalCode,', ',City,', ',Country) AS Address\nFROM Customers;\n```\n\n## 表的 Alias 实例\n\n------\n\n以下SQL语句选择CustomerID = 4（\"围绕角\"）的所有订单。我们使用\"Customers\"和\"Orders\"表，给它们分别为\"c\"和\"o\"的表别名（这里我们使用别名来使SQL更短）：\n\n示例\n\n```\nSELECT o.OrderID, o.OrderDate, c.CustomerName\nFROM Customers AS c, Orders AS o\nWHERE c.CustomerName=\"Around the Horn\" AND c.CustomerID=o.CustomerID;\n```\n\n以下SQL语句与上述相同，但没有别名：\n\n示例\n\n```\nSELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerName\nFROM Customers, Orders\nWHERE Customers.CustomerName=\"Around the Horn\" AND Customers.CustomerID=Orders.CustomerID;\n```\n\n在下列情况下使用别名是有用的：\n\n- 查询涉及多个表\n- 用于查询函数\n- 需要把两个或更多的列放在一起\n- 列名长或可读性差\n\n## 示例\n\n------\n\n考虑下面两个数据表：\n\n（a）CUSTOMERS 表，如下：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n（b）另一个是 ORDERS 表，如下所示：\n\n```\n+-----+---------------------+-------------+--------+\n|OID  | DATE                | CUSTOMER_ID | AMOUNT |\n+-----+---------------------+-------------+--------+\n| 102 | 2009-10-08 00:00:00 |           3 |   3000 |\n| 100 | 2009-10-08 00:00:00 |           3 |   1500 |\n| 101 | 2009-11-20 00:00:00 |           2 |   1560 |\n| 103 | 2008-05-20 00:00:00 |           4 |   2060 |\n+-----+---------------------+-------------+--------+\n```\n\n下面是**表别名**的用法：\n\n```\nSQL> SELECT C.ID, C.NAME, C.AGE, O.AMOUNT \n        FROM CUSTOMERS AS C, ORDERS AS O\n        WHERE  C.ID = O.CUSTOMER_ID;\n```\n\n上面语句的运行结果如下所示：\n\n```\n+----+----------+-----+--------+\n| ID | NAME     | AGE | AMOUNT |\n+----+----------+-----+--------+\n|  3 | kaushik  |  23 |   3000 |\n|  3 | kaushik  |  23 |   1500 |\n|  2 | Khilan   |  25 |   1560 |\n|  4 | Chaitali |  25 |   2060 |\n+----+----------+-----+--------+\n```\n\n下面是**列别名**的用法：\n\n```\nSQL> SELECT  ID AS CUSTOMER_ID, NAME AS CUSTOMER_NAME\n     FROM CUSTOMERS\n     WHERE SALARY IS NOT NULL;\n```\n\n其运行结果如下所示：\n\n```\n+-------------+---------------+\n| CUSTOMER_ID | CUSTOMER_NAME |\n+-------------+---------------+\n|           1 | Ramesh        |\n|           2 | Khilan        |\n|           3 | kaushik       |\n|           4 | Chaitali      |\n|           5 | Hardik        |\n|           6 | Komal         |\n|           7 | Muffy         |\n+-------------+---------------+\n```\n","source":"wiki/sql/sentence/aliases.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL Aliases别名\norder: 40\n---\n\n## SQL 别名（Aliases）\n\n------\n\n通过使用 SQL，可以为表名称或列名称指定别名（Alias）。\n\n- SQL 别名用于为表或表中的列提供临时名称，数据库中的实际表名不会更改。\n- SQL 别名通常用于使列名更具可读性。\n- SQL 一个别名只存在于查询期间。\n- 表别名的使用是在特定SQL语句中重命名表。\n- 列别名用于为特定SQL查询重命名表的列。\n\n### 列的 SQL Alias 语法\n\n```\nSELECT column_name AS alias_name\nFROM table_name;\nWHERE condition;\n```\n\n### 表的 SQL Alias 语法\n\n```\nSELECT column_name(s)\nFROM table_name AS alias_name;\nWHERE condition;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是\"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName    | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo   | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy   | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n\n下面是选自 \"Orders\" 表的数据：\n\n| OrderID | CustomerID | EmployeeID | OrderDate  | ShipperID |\n| :------ | :--------- | :--------- | :--------- | :-------- |\n| 10354   | 58         | 8          | 1996-11-14 | 3         |\n| 10355   | 4          | 6          | 1996-11-15 | 1         |\n| 10356   | 86         | 6          | 1996-11-18 | 2         |\n\n## 列的 Alias 实例\n\n------\n\n以下SQL语句创建两个别名，一个用于CustomerID列，另一个用于CustomerName列：\n\n示例\n\n```\nSELECT CustomerID as ID, CustomerName AS Customer\nFROM Customers;\n```\n\n以下SQL语句创建两个别名，一个用于CustomerName列，一个用于ContactName列。**注：** 如果别名包含空格，则需要双引号或方括号：\n\n示例\n\n```\nSELECT CustomerName AS Customer, ContactName AS [Contact Person]\nFROM Customers;\n```\n\n以下SQL语句创建一个名为\"Address\"的别名，它包含四列（Address，PostalCode，City and Country）：\n\n```\nSELECT CustomerName, Address + ', ' + PostalCode + ', ' + City + ', ' + Country AS Address\nFROM Customers;\n```\n\n**　注意：** 要使上面的SQL语句在MySQL中工作，请使用以下命令：\n\n```\nSELECT CustomerName, CONCAT(Address,', ',PostalCode,', ',City,', ',Country) AS Address\nFROM Customers;\n```\n\n## 表的 Alias 实例\n\n------\n\n以下SQL语句选择CustomerID = 4（\"围绕角\"）的所有订单。我们使用\"Customers\"和\"Orders\"表，给它们分别为\"c\"和\"o\"的表别名（这里我们使用别名来使SQL更短）：\n\n示例\n\n```\nSELECT o.OrderID, o.OrderDate, c.CustomerName\nFROM Customers AS c, Orders AS o\nWHERE c.CustomerName=\"Around the Horn\" AND c.CustomerID=o.CustomerID;\n```\n\n以下SQL语句与上述相同，但没有别名：\n\n示例\n\n```\nSELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerName\nFROM Customers, Orders\nWHERE Customers.CustomerName=\"Around the Horn\" AND Customers.CustomerID=Orders.CustomerID;\n```\n\n在下列情况下使用别名是有用的：\n\n- 查询涉及多个表\n- 用于查询函数\n- 需要把两个或更多的列放在一起\n- 列名长或可读性差\n\n## 示例\n\n------\n\n考虑下面两个数据表：\n\n（a）CUSTOMERS 表，如下：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n（b）另一个是 ORDERS 表，如下所示：\n\n```\n+-----+---------------------+-------------+--------+\n|OID  | DATE                | CUSTOMER_ID | AMOUNT |\n+-----+---------------------+-------------+--------+\n| 102 | 2009-10-08 00:00:00 |           3 |   3000 |\n| 100 | 2009-10-08 00:00:00 |           3 |   1500 |\n| 101 | 2009-11-20 00:00:00 |           2 |   1560 |\n| 103 | 2008-05-20 00:00:00 |           4 |   2060 |\n+-----+---------------------+-------------+--------+\n```\n\n下面是**表别名**的用法：\n\n```\nSQL> SELECT C.ID, C.NAME, C.AGE, O.AMOUNT \n        FROM CUSTOMERS AS C, ORDERS AS O\n        WHERE  C.ID = O.CUSTOMER_ID;\n```\n\n上面语句的运行结果如下所示：\n\n```\n+----+----------+-----+--------+\n| ID | NAME     | AGE | AMOUNT |\n+----+----------+-----+--------+\n|  3 | kaushik  |  23 |   3000 |\n|  3 | kaushik  |  23 |   1500 |\n|  2 | Khilan   |  25 |   1560 |\n|  4 | Chaitali |  25 |   2060 |\n+----+----------+-----+--------+\n```\n\n下面是**列别名**的用法：\n\n```\nSQL> SELECT  ID AS CUSTOMER_ID, NAME AS CUSTOMER_NAME\n     FROM CUSTOMERS\n     WHERE SALARY IS NOT NULL;\n```\n\n其运行结果如下所示：\n\n```\n+-------------+---------------+\n| CUSTOMER_ID | CUSTOMER_NAME |\n+-------------+---------------+\n|           1 | Ramesh        |\n|           2 | Khilan        |\n|           3 | kaushik       |\n|           4 | Chaitali      |\n|           5 | Hardik        |\n|           6 | Komal         |\n|           7 | Muffy         |\n+-------------+---------------+\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T02:02:47.763Z","path":"wiki/sql/sentence/aliases.html","comments":1,"_id":"cmbreopif000365x0g0k74jp4","content":"<h2 id=\"SQL-别名（Aliases）\"><a href=\"#SQL-别名（Aliases）\" class=\"headerlink\" title=\"SQL 别名（Aliases）\"></a>SQL 别名（Aliases）</h2><hr>\n<p>通过使用 SQL，可以为表名称或列名称指定别名（Alias）。</p>\n<ul>\n<li>SQL 别名用于为表或表中的列提供临时名称，数据库中的实际表名不会更改。</li>\n<li>SQL 别名通常用于使列名更具可读性。</li>\n<li>SQL 一个别名只存在于查询期间。</li>\n<li>表别名的使用是在特定SQL语句中重命名表。</li>\n<li>列别名用于为特定SQL查询重命名表的列。</li>\n</ul>\n<h3 id=\"列的-SQL-Alias-语法\"><a href=\"#列的-SQL-Alias-语法\" class=\"headerlink\" title=\"列的 SQL Alias 语法\"></a>列的 SQL Alias 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name AS alias_name</span><br><span class=\"line\">FROM table_name;</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表的-SQL-Alias-语法\"><a href=\"#表的-SQL-Alias-语法\" class=\"headerlink\" title=\"表的 SQL Alias 语法\"></a>表的 SQL Alias 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table_name AS alias_name;</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是”Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n</tbody></table>\n<p>下面是选自 “Orders” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">EmployeeID</th>\n<th align=\"left\">OrderDate</th>\n<th align=\"left\">ShipperID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10354</td>\n<td align=\"left\">58</td>\n<td align=\"left\">8</td>\n<td align=\"left\">1996-11-14</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">10355</td>\n<td align=\"left\">4</td>\n<td align=\"left\">6</td>\n<td align=\"left\">1996-11-15</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">10356</td>\n<td align=\"left\">86</td>\n<td align=\"left\">6</td>\n<td align=\"left\">1996-11-18</td>\n<td align=\"left\">2</td>\n</tr>\n</tbody></table>\n<h2 id=\"列的-Alias-实例\"><a href=\"#列的-Alias-实例\" class=\"headerlink\" title=\"列的 Alias 实例\"></a>列的 Alias 实例</h2><hr>\n<p>以下SQL语句创建两个别名，一个用于CustomerID列，另一个用于CustomerName列：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerID as ID, CustomerName AS Customer</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句创建两个别名，一个用于CustomerName列，一个用于ContactName列。<strong>注：</strong> 如果别名包含空格，则需要双引号或方括号：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerName AS Customer, ContactName AS [Contact Person]</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句创建一个名为”Address”的别名，它包含四列（Address，PostalCode，City and Country）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerName, Address + &#x27;, &#x27; + PostalCode + &#x27;, &#x27; + City + &#x27;, &#x27; + Country AS Address</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>**　注意：** 要使上面的SQL语句在MySQL中工作，请使用以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerName, CONCAT(Address,&#x27;, &#x27;,PostalCode,&#x27;, &#x27;,City,&#x27;, &#x27;,Country) AS Address</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表的-Alias-实例\"><a href=\"#表的-Alias-实例\" class=\"headerlink\" title=\"表的 Alias 实例\"></a>表的 Alias 实例</h2><hr>\n<p>以下SQL语句选择CustomerID &#x3D; 4（”围绕角”）的所有订单。我们使用”Customers”和”Orders”表，给它们分别为”c”和”o”的表别名（这里我们使用别名来使SQL更短）：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT o.OrderID, o.OrderDate, c.CustomerName</span><br><span class=\"line\">FROM Customers AS c, Orders AS o</span><br><span class=\"line\">WHERE c.CustomerName=&quot;Around the Horn&quot; AND c.CustomerID=o.CustomerID;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句与上述相同，但没有别名：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerName</span><br><span class=\"line\">FROM Customers, Orders</span><br><span class=\"line\">WHERE Customers.CustomerName=&quot;Around the Horn&quot; AND Customers.CustomerID=Orders.CustomerID;</span><br></pre></td></tr></table></figure>\n\n<p>在下列情况下使用别名是有用的：</p>\n<ul>\n<li>查询涉及多个表</li>\n<li>用于查询函数</li>\n<li>需要把两个或更多的列放在一起</li>\n<li>列名长或可读性差</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><hr>\n<p>考虑下面两个数据表：</p>\n<p>（a）CUSTOMERS 表，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>（b）另一个是 ORDERS 表，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-----+---------------------+-------------+--------+</span><br><span class=\"line\">|OID  | DATE                | CUSTOMER_ID | AMOUNT |</span><br><span class=\"line\">+-----+---------------------+-------------+--------+</span><br><span class=\"line\">| 102 | 2009-10-08 00:00:00 |           3 |   3000 |</span><br><span class=\"line\">| 100 | 2009-10-08 00:00:00 |           3 |   1500 |</span><br><span class=\"line\">| 101 | 2009-11-20 00:00:00 |           2 |   1560 |</span><br><span class=\"line\">| 103 | 2008-05-20 00:00:00 |           4 |   2060 |</span><br><span class=\"line\">+-----+---------------------+-------------+--------+</span><br></pre></td></tr></table></figure>\n\n<p>下面是<strong>表别名</strong>的用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT C.ID, C.NAME, C.AGE, O.AMOUNT </span><br><span class=\"line\">        FROM CUSTOMERS AS C, ORDERS AS O</span><br><span class=\"line\">        WHERE  C.ID = O.CUSTOMER_ID;</span><br></pre></td></tr></table></figure>\n\n<p>上面语句的运行结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+--------+</span><br><span class=\"line\">| ID | NAME     | AGE | AMOUNT |</span><br><span class=\"line\">+----+----------+-----+--------+</span><br><span class=\"line\">|  3 | kaushik  |  23 |   3000 |</span><br><span class=\"line\">|  3 | kaushik  |  23 |   1500 |</span><br><span class=\"line\">|  2 | Khilan   |  25 |   1560 |</span><br><span class=\"line\">|  4 | Chaitali |  25 |   2060 |</span><br><span class=\"line\">+----+----------+-----+--------+</span><br></pre></td></tr></table></figure>\n\n<p>下面是<strong>列别名</strong>的用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID AS CUSTOMER_ID, NAME AS CUSTOMER_NAME</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     WHERE SALARY IS NOT NULL;</span><br></pre></td></tr></table></figure>\n\n<p>其运行结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-------------+---------------+</span><br><span class=\"line\">| CUSTOMER_ID | CUSTOMER_NAME |</span><br><span class=\"line\">+-------------+---------------+</span><br><span class=\"line\">|           1 | Ramesh        |</span><br><span class=\"line\">|           2 | Khilan        |</span><br><span class=\"line\">|           3 | kaushik       |</span><br><span class=\"line\">|           4 | Chaitali      |</span><br><span class=\"line\">|           5 | Hardik        |</span><br><span class=\"line\">|           6 | Komal         |</span><br><span class=\"line\">|           7 | Muffy         |</span><br><span class=\"line\">+-------------+---------------+</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-别名（Aliases）\"><a href=\"#SQL-别名（Aliases）\" class=\"headerlink\" title=\"SQL 别名（Aliases）\"></a>SQL 别名（Aliases）</h2><hr>\n<p>通过使用 SQL，可以为表名称或列名称指定别名（Alias）。</p>\n<ul>\n<li>SQL 别名用于为表或表中的列提供临时名称，数据库中的实际表名不会更改。</li>\n<li>SQL 别名通常用于使列名更具可读性。</li>\n<li>SQL 一个别名只存在于查询期间。</li>\n<li>表别名的使用是在特定SQL语句中重命名表。</li>\n<li>列别名用于为特定SQL查询重命名表的列。</li>\n</ul>\n<h3 id=\"列的-SQL-Alias-语法\"><a href=\"#列的-SQL-Alias-语法\" class=\"headerlink\" title=\"列的 SQL Alias 语法\"></a>列的 SQL Alias 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name AS alias_name</span><br><span class=\"line\">FROM table_name;</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表的-SQL-Alias-语法\"><a href=\"#表的-SQL-Alias-语法\" class=\"headerlink\" title=\"表的 SQL Alias 语法\"></a>表的 SQL Alias 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table_name AS alias_name;</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是”Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n</tbody></table>\n<p>下面是选自 “Orders” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">EmployeeID</th>\n<th align=\"left\">OrderDate</th>\n<th align=\"left\">ShipperID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10354</td>\n<td align=\"left\">58</td>\n<td align=\"left\">8</td>\n<td align=\"left\">1996-11-14</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">10355</td>\n<td align=\"left\">4</td>\n<td align=\"left\">6</td>\n<td align=\"left\">1996-11-15</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">10356</td>\n<td align=\"left\">86</td>\n<td align=\"left\">6</td>\n<td align=\"left\">1996-11-18</td>\n<td align=\"left\">2</td>\n</tr>\n</tbody></table>\n<h2 id=\"列的-Alias-实例\"><a href=\"#列的-Alias-实例\" class=\"headerlink\" title=\"列的 Alias 实例\"></a>列的 Alias 实例</h2><hr>\n<p>以下SQL语句创建两个别名，一个用于CustomerID列，另一个用于CustomerName列：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerID as ID, CustomerName AS Customer</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句创建两个别名，一个用于CustomerName列，一个用于ContactName列。<strong>注：</strong> 如果别名包含空格，则需要双引号或方括号：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerName AS Customer, ContactName AS [Contact Person]</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句创建一个名为”Address”的别名，它包含四列（Address，PostalCode，City and Country）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerName, Address + &#x27;, &#x27; + PostalCode + &#x27;, &#x27; + City + &#x27;, &#x27; + Country AS Address</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>**　注意：** 要使上面的SQL语句在MySQL中工作，请使用以下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerName, CONCAT(Address,&#x27;, &#x27;,PostalCode,&#x27;, &#x27;,City,&#x27;, &#x27;,Country) AS Address</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"表的-Alias-实例\"><a href=\"#表的-Alias-实例\" class=\"headerlink\" title=\"表的 Alias 实例\"></a>表的 Alias 实例</h2><hr>\n<p>以下SQL语句选择CustomerID &#x3D; 4（”围绕角”）的所有订单。我们使用”Customers”和”Orders”表，给它们分别为”c”和”o”的表别名（这里我们使用别名来使SQL更短）：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT o.OrderID, o.OrderDate, c.CustomerName</span><br><span class=\"line\">FROM Customers AS c, Orders AS o</span><br><span class=\"line\">WHERE c.CustomerName=&quot;Around the Horn&quot; AND c.CustomerID=o.CustomerID;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句与上述相同，但没有别名：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerName</span><br><span class=\"line\">FROM Customers, Orders</span><br><span class=\"line\">WHERE Customers.CustomerName=&quot;Around the Horn&quot; AND Customers.CustomerID=Orders.CustomerID;</span><br></pre></td></tr></table></figure>\n\n<p>在下列情况下使用别名是有用的：</p>\n<ul>\n<li>查询涉及多个表</li>\n<li>用于查询函数</li>\n<li>需要把两个或更多的列放在一起</li>\n<li>列名长或可读性差</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><hr>\n<p>考虑下面两个数据表：</p>\n<p>（a）CUSTOMERS 表，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>（b）另一个是 ORDERS 表，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-----+---------------------+-------------+--------+</span><br><span class=\"line\">|OID  | DATE                | CUSTOMER_ID | AMOUNT |</span><br><span class=\"line\">+-----+---------------------+-------------+--------+</span><br><span class=\"line\">| 102 | 2009-10-08 00:00:00 |           3 |   3000 |</span><br><span class=\"line\">| 100 | 2009-10-08 00:00:00 |           3 |   1500 |</span><br><span class=\"line\">| 101 | 2009-11-20 00:00:00 |           2 |   1560 |</span><br><span class=\"line\">| 103 | 2008-05-20 00:00:00 |           4 |   2060 |</span><br><span class=\"line\">+-----+---------------------+-------------+--------+</span><br></pre></td></tr></table></figure>\n\n<p>下面是<strong>表别名</strong>的用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT C.ID, C.NAME, C.AGE, O.AMOUNT </span><br><span class=\"line\">        FROM CUSTOMERS AS C, ORDERS AS O</span><br><span class=\"line\">        WHERE  C.ID = O.CUSTOMER_ID;</span><br></pre></td></tr></table></figure>\n\n<p>上面语句的运行结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+--------+</span><br><span class=\"line\">| ID | NAME     | AGE | AMOUNT |</span><br><span class=\"line\">+----+----------+-----+--------+</span><br><span class=\"line\">|  3 | kaushik  |  23 |   3000 |</span><br><span class=\"line\">|  3 | kaushik  |  23 |   1500 |</span><br><span class=\"line\">|  2 | Khilan   |  25 |   1560 |</span><br><span class=\"line\">|  4 | Chaitali |  25 |   2060 |</span><br><span class=\"line\">+----+----------+-----+--------+</span><br></pre></td></tr></table></figure>\n\n<p>下面是<strong>列别名</strong>的用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID AS CUSTOMER_ID, NAME AS CUSTOMER_NAME</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     WHERE SALARY IS NOT NULL;</span><br></pre></td></tr></table></figure>\n\n<p>其运行结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-------------+---------------+</span><br><span class=\"line\">| CUSTOMER_ID | CUSTOMER_NAME |</span><br><span class=\"line\">+-------------+---------------+</span><br><span class=\"line\">|           1 | Ramesh        |</span><br><span class=\"line\">|           2 | Khilan        |</span><br><span class=\"line\">|           3 | kaushik       |</span><br><span class=\"line\">|           4 | Chaitali      |</span><br><span class=\"line\">|           5 | Hardik        |</span><br><span class=\"line\">|           6 | Komal         |</span><br><span class=\"line\">|           7 | Muffy         |</span><br><span class=\"line\">+-------------+---------------+</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 与/或运算符","order":7,"_content":"\n## SQL AND & OR 运算符\n\n------\n\nAND&OR运算符用于根据一个以上的条件过滤记录，即用于组合多个条件以缩小SQL语句中的数据。\n\nWHERE子句可以与AND，OR和NOT运算符结合使用。\n\nAND和OR运算符用于根据多个条件筛选记录：\n\n- 如果由AND分隔的所有条件为TRUE，则AND运算符显示记录。\n- 如果使用AND运算符组合N个条件。对于SQL语句执行的操作(无论是事务还是查询)，所有由AND分隔的条件都必须为TRUE。\n- 如果由OR分隔的任何条件为真，则OR运算符显示记录。\n- 如果使用OR运算符组合N个条件。对于SQL语句执行的操作(无论是事务还是查询)，OR分隔的任何一个条件都必须为TRUE。\n\n如果条件不为TRUE，则NOT运算符显示记录。\n\n### AND语法\n\n```\nSELECT column1, column2, ...\nFROM table_name\nWHERE condition1 AND condition2 AND condition3 ...;\n```\n\n### OR语法\n\n```\nSELECT column1, column2, ...\nFROM table_name\nWHERE condition1 OR condition2 OR condition3 ...;\n```\n\n### NOT语法\n\n```\nSELECT column1, column2, ...\nFROM table_name\nWHERE NOT condition;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是\"Customers\"表中的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## AND 运算符实例\n\n------\n\n以下SQL语句从 \"Customers\" 表中选择其国家为 \"Germany\" 、其城市为\"Berlin\" 的所有客户：\n\n示例：\n\n```\nSELECT * FROM Customers\nWHERE Country='Germany'\nAND City='Berlin';\n```\n\n\n\n## OR 运算符实例\n\n------\n\n以下SQL语句选择城市为\"Berlin\"或\"München\"的\"Customers\"的所有字段：\n\n示例：\n\n```\nSELECT * FROM Customers\nWHERE City='Berlin' OR City='München';\n```\n\n\n\n## NOT 运算符实例\n\n------\n\n以下SQL语句选择国家不是 \"Germany\"的\"Customers\"的所有字段：\n\n```\nSELECT * FROM Customers\nWHERE NOT Country='Germany';\n```\n\n## 结合 AND & OR\n\n------\n\n您还可以组合AND和OR（使用括号来组成成复杂的表达式）。\n\n以下SQL语句从国家 \"Germany\" 且城市为\"Berlin\" 或\"München\"的\"Customers\" 表中选择所有客户：\n\n示例：\n\n```\nSELECT * FROM Customers\nWHERE Country='Germany'\nAND (City='Berlin' OR City='München');\n```\n\n\n\n## 结合AND，OR和NOT\n\n------\n\n你也可以结合AND，OR和NOT运算符。\n\n以下SQL语句选择国家是\"德国\"的\"客户\"的所有字段，城市必须是\"柏林\"或\"慕尼黑\"（用括号形成复杂表达式）：\n\n**　代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE Country='Germany' AND (City='Berlin' OR City='München');\n```\n\n以下SQL语句选择来自\"Customers\" 的国家不是 \"Germany\" 且不是 \"USA\"的所有字段：\n\n**　代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE NOT Country='Germany' AND NOT Country='USA';\n```\n","source":"wiki/sql/sentence/andor.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 与/或运算符\norder: 7\n---\n\n## SQL AND & OR 运算符\n\n------\n\nAND&OR运算符用于根据一个以上的条件过滤记录，即用于组合多个条件以缩小SQL语句中的数据。\n\nWHERE子句可以与AND，OR和NOT运算符结合使用。\n\nAND和OR运算符用于根据多个条件筛选记录：\n\n- 如果由AND分隔的所有条件为TRUE，则AND运算符显示记录。\n- 如果使用AND运算符组合N个条件。对于SQL语句执行的操作(无论是事务还是查询)，所有由AND分隔的条件都必须为TRUE。\n- 如果由OR分隔的任何条件为真，则OR运算符显示记录。\n- 如果使用OR运算符组合N个条件。对于SQL语句执行的操作(无论是事务还是查询)，OR分隔的任何一个条件都必须为TRUE。\n\n如果条件不为TRUE，则NOT运算符显示记录。\n\n### AND语法\n\n```\nSELECT column1, column2, ...\nFROM table_name\nWHERE condition1 AND condition2 AND condition3 ...;\n```\n\n### OR语法\n\n```\nSELECT column1, column2, ...\nFROM table_name\nWHERE condition1 OR condition2 OR condition3 ...;\n```\n\n### NOT语法\n\n```\nSELECT column1, column2, ...\nFROM table_name\nWHERE NOT condition;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是\"Customers\"表中的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## AND 运算符实例\n\n------\n\n以下SQL语句从 \"Customers\" 表中选择其国家为 \"Germany\" 、其城市为\"Berlin\" 的所有客户：\n\n示例：\n\n```\nSELECT * FROM Customers\nWHERE Country='Germany'\nAND City='Berlin';\n```\n\n\n\n## OR 运算符实例\n\n------\n\n以下SQL语句选择城市为\"Berlin\"或\"München\"的\"Customers\"的所有字段：\n\n示例：\n\n```\nSELECT * FROM Customers\nWHERE City='Berlin' OR City='München';\n```\n\n\n\n## NOT 运算符实例\n\n------\n\n以下SQL语句选择国家不是 \"Germany\"的\"Customers\"的所有字段：\n\n```\nSELECT * FROM Customers\nWHERE NOT Country='Germany';\n```\n\n## 结合 AND & OR\n\n------\n\n您还可以组合AND和OR（使用括号来组成成复杂的表达式）。\n\n以下SQL语句从国家 \"Germany\" 且城市为\"Berlin\" 或\"München\"的\"Customers\" 表中选择所有客户：\n\n示例：\n\n```\nSELECT * FROM Customers\nWHERE Country='Germany'\nAND (City='Berlin' OR City='München');\n```\n\n\n\n## 结合AND，OR和NOT\n\n------\n\n你也可以结合AND，OR和NOT运算符。\n\n以下SQL语句选择国家是\"德国\"的\"客户\"的所有字段，城市必须是\"柏林\"或\"慕尼黑\"（用括号形成复杂表达式）：\n\n**　代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE Country='Germany' AND (City='Berlin' OR City='München');\n```\n\n以下SQL语句选择来自\"Customers\" 的国家不是 \"Germany\" 且不是 \"USA\"的所有字段：\n\n**　代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE NOT Country='Germany' AND NOT Country='USA';\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-10T13:12:36.152Z","path":"wiki/sql/sentence/andor.html","comments":1,"_id":"cmbreopig000465x03dh06iz2","content":"<h2 id=\"SQL-AND-OR-运算符\"><a href=\"#SQL-AND-OR-运算符\" class=\"headerlink\" title=\"SQL AND &amp; OR 运算符\"></a>SQL AND &amp; OR 运算符</h2><hr>\n<p>AND&amp;OR运算符用于根据一个以上的条件过滤记录，即用于组合多个条件以缩小SQL语句中的数据。</p>\n<p>WHERE子句可以与AND，OR和NOT运算符结合使用。</p>\n<p>AND和OR运算符用于根据多个条件筛选记录：</p>\n<ul>\n<li>如果由AND分隔的所有条件为TRUE，则AND运算符显示记录。</li>\n<li>如果使用AND运算符组合N个条件。对于SQL语句执行的操作(无论是事务还是查询)，所有由AND分隔的条件都必须为TRUE。</li>\n<li>如果由OR分隔的任何条件为真，则OR运算符显示记录。</li>\n<li>如果使用OR运算符组合N个条件。对于SQL语句执行的操作(无论是事务还是查询)，OR分隔的任何一个条件都必须为TRUE。</li>\n</ul>\n<p>如果条件不为TRUE，则NOT运算符显示记录。</p>\n<h3 id=\"AND语法\"><a href=\"#AND语法\" class=\"headerlink\" title=\"AND语法\"></a>AND语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2, ...</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition1 AND condition2 AND condition3 ...;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"OR语法\"><a href=\"#OR语法\" class=\"headerlink\" title=\"OR语法\"></a>OR语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2, ...</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition1 OR condition2 OR condition3 ...;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NOT语法\"><a href=\"#NOT语法\" class=\"headerlink\" title=\"NOT语法\"></a>NOT语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2, ...</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE NOT condition;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是”Customers”表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"AND-运算符实例\"><a href=\"#AND-运算符实例\" class=\"headerlink\" title=\"AND 运算符实例\"></a>AND 运算符实例</h2><hr>\n<p>以下SQL语句从 “Customers” 表中选择其国家为 “Germany” 、其城市为”Berlin” 的所有客户：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27;</span><br><span class=\"line\">AND City=&#x27;Berlin&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"OR-运算符实例\"><a href=\"#OR-运算符实例\" class=\"headerlink\" title=\"OR 运算符实例\"></a>OR 运算符实例</h2><hr>\n<p>以下SQL语句选择城市为”Berlin”或”München”的”Customers”的所有字段：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE City=&#x27;Berlin&#x27; OR City=&#x27;München&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"NOT-运算符实例\"><a href=\"#NOT-运算符实例\" class=\"headerlink\" title=\"NOT 运算符实例\"></a>NOT 运算符实例</h2><hr>\n<p>以下SQL语句选择国家不是 “Germany”的”Customers”的所有字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE NOT Country=&#x27;Germany&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结合-AND-OR\"><a href=\"#结合-AND-OR\" class=\"headerlink\" title=\"结合 AND &amp; OR\"></a>结合 AND &amp; OR</h2><hr>\n<p>您还可以组合AND和OR（使用括号来组成成复杂的表达式）。</p>\n<p>以下SQL语句从国家 “Germany” 且城市为”Berlin” 或”München”的”Customers” 表中选择所有客户：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27;</span><br><span class=\"line\">AND (City=&#x27;Berlin&#x27; OR City=&#x27;München&#x27;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"结合AND，OR和NOT\"><a href=\"#结合AND，OR和NOT\" class=\"headerlink\" title=\"结合AND，OR和NOT\"></a>结合AND，OR和NOT</h2><hr>\n<p>你也可以结合AND，OR和NOT运算符。</p>\n<p>以下SQL语句选择国家是”德国”的”客户”的所有字段，城市必须是”柏林”或”慕尼黑”（用括号形成复杂表达式）：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27; AND (City=&#x27;Berlin&#x27; OR City=&#x27;München&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句选择来自”Customers” 的国家不是 “Germany” 且不是 “USA”的所有字段：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE NOT Country=&#x27;Germany&#x27; AND NOT Country=&#x27;USA&#x27;;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-AND-OR-运算符\"><a href=\"#SQL-AND-OR-运算符\" class=\"headerlink\" title=\"SQL AND &amp; OR 运算符\"></a>SQL AND &amp; OR 运算符</h2><hr>\n<p>AND&amp;OR运算符用于根据一个以上的条件过滤记录，即用于组合多个条件以缩小SQL语句中的数据。</p>\n<p>WHERE子句可以与AND，OR和NOT运算符结合使用。</p>\n<p>AND和OR运算符用于根据多个条件筛选记录：</p>\n<ul>\n<li>如果由AND分隔的所有条件为TRUE，则AND运算符显示记录。</li>\n<li>如果使用AND运算符组合N个条件。对于SQL语句执行的操作(无论是事务还是查询)，所有由AND分隔的条件都必须为TRUE。</li>\n<li>如果由OR分隔的任何条件为真，则OR运算符显示记录。</li>\n<li>如果使用OR运算符组合N个条件。对于SQL语句执行的操作(无论是事务还是查询)，OR分隔的任何一个条件都必须为TRUE。</li>\n</ul>\n<p>如果条件不为TRUE，则NOT运算符显示记录。</p>\n<h3 id=\"AND语法\"><a href=\"#AND语法\" class=\"headerlink\" title=\"AND语法\"></a>AND语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2, ...</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition1 AND condition2 AND condition3 ...;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"OR语法\"><a href=\"#OR语法\" class=\"headerlink\" title=\"OR语法\"></a>OR语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2, ...</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition1 OR condition2 OR condition3 ...;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"NOT语法\"><a href=\"#NOT语法\" class=\"headerlink\" title=\"NOT语法\"></a>NOT语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2, ...</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE NOT condition;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是”Customers”表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"AND-运算符实例\"><a href=\"#AND-运算符实例\" class=\"headerlink\" title=\"AND 运算符实例\"></a>AND 运算符实例</h2><hr>\n<p>以下SQL语句从 “Customers” 表中选择其国家为 “Germany” 、其城市为”Berlin” 的所有客户：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27;</span><br><span class=\"line\">AND City=&#x27;Berlin&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"OR-运算符实例\"><a href=\"#OR-运算符实例\" class=\"headerlink\" title=\"OR 运算符实例\"></a>OR 运算符实例</h2><hr>\n<p>以下SQL语句选择城市为”Berlin”或”München”的”Customers”的所有字段：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE City=&#x27;Berlin&#x27; OR City=&#x27;München&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"NOT-运算符实例\"><a href=\"#NOT-运算符实例\" class=\"headerlink\" title=\"NOT 运算符实例\"></a>NOT 运算符实例</h2><hr>\n<p>以下SQL语句选择国家不是 “Germany”的”Customers”的所有字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE NOT Country=&#x27;Germany&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结合-AND-OR\"><a href=\"#结合-AND-OR\" class=\"headerlink\" title=\"结合 AND &amp; OR\"></a>结合 AND &amp; OR</h2><hr>\n<p>您还可以组合AND和OR（使用括号来组成成复杂的表达式）。</p>\n<p>以下SQL语句从国家 “Germany” 且城市为”Berlin” 或”München”的”Customers” 表中选择所有客户：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27;</span><br><span class=\"line\">AND (City=&#x27;Berlin&#x27; OR City=&#x27;München&#x27;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"结合AND，OR和NOT\"><a href=\"#结合AND，OR和NOT\" class=\"headerlink\" title=\"结合AND，OR和NOT\"></a>结合AND，OR和NOT</h2><hr>\n<p>你也可以结合AND，OR和NOT运算符。</p>\n<p>以下SQL语句选择国家是”德国”的”客户”的所有字段，城市必须是”柏林”或”慕尼黑”（用括号形成复杂表达式）：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27; AND (City=&#x27;Berlin&#x27; OR City=&#x27;München&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句选择来自”Customers” 的国家不是 “Germany” 且不是 “USA”的所有字段：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE NOT Country=&#x27;Germany&#x27; AND NOT Country=&#x27;USA&#x27;;</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL AUTO INCREMENT语句","order":36,"_content":"\n## SQL AUTO INCREMENT 字段\n\n------\n\nAuto-increment 会在新记录插入表中时生成一个唯一的数字。\n\n## AUTO INCREMENT 字段\n\n------\n\n我们通常希望在每次插入新记录时自动创建主键字段的值。\n\n我们可以在表中创建一个自动增量（auto-increment）字段。\n\n## 用于 MySQL 的语法\n\n------\n\n以下SQL语句将 \"Persons\" 表中的\"ID\"列定义为自动递增（auto-increment）主键字段：\n\n```\nCREATE TABLE Persons                \n(                \nID int NOT NULL AUTO_INCREMENT,                \nLastName varchar(255) NOT NULL,                \nFirstName varchar(255),                \nAddress varchar(255),                \nCity varchar(255),                \nPRIMARY KEY (ID)                \n)\n```\n\nMySQL使用AUTO_INCREMENT关键字来执行自动增量（ auto-increment ）任务。\n\n默认情况下，AUTO_INCREMENT的起始值为1，每个新记录增加1。\n\n若要以其他值开始AUTO_INCREMENT序列，请使用以下SQL语法：\n\n```\nALTER TABLE Persons AUTO_INCREMENT=100\n```\n\n要在 \"Persons\" 表中插入新记录，我们不需要为\"ID\"栏指定值（自动添加唯一值）：\n\n```\nINSERT INTO Persons (FirstName,LastName)                \nVALUES ('Lars','Monsen')\n```\n\n上面的SQL语句在 \"Persons\" 表中插入一个新记录。\"ID\"栏将得到唯一值。\"FirstName\"栏设置为\"Lars\"，\"LastName\"栏设置为\"Monsen\"。\n\n## 用于 SQL Server 的语法\n\n------\n\n以下SQL语句将 \"Persons\" 表中的\"ID\"列定义为自动递增（ auto-increment ）主键字段：\n\n```\nCREATE TABLE Persons                \n(                \nID int IDENTITY(1,1) PRIMARY KEY,                \nLastName varchar(255) NOT NULL,                \nFirstName varchar(255),                \nAddress varchar(255),                \nCity varchar(255)                \n)\n```\n\nMS SQL Server使用IDENTITY关键字执行自动增量（ auto-increment ）任务。\n\n在上面的示例中，IDENTITY的起始值为1，每个新记录增量为1。\n\n提示：指定\"ID\"列以10开头，并递增5，将标识（ identity ）更改为IDENTITY（10,5）。\n\n要在 \"Persons\" 表中插入新记录，我们不需要为\"ID\"栏指定值（自动添加唯一值）：\n\n```\nINSERT INTO Persons (FirstName,LastName)                \nVALUES ('Lars','Monsen')\n```\n\n上面的 SQL 语句在 \"Persons\" 表中插入一个新记录。\"ID\"栏将得到唯一值。\"FirstName\"栏设置为\"Lars\"，\"LastName\"栏设置为\"Monsen\"。\n\n## 用于 Access 的语法\n\n------\n\n以下 SQL 语句将 \"Persons\" 表中的\"ID\"列定义为自动递增（ auto-increment ）主键字段：\n\n```\nCREATE TABLE Persons                \n(                \nID Integer PRIMARY KEY AUTOINCREMENT,                \nLastName varchar(255) NOT NULL,                \nFirstName varchar(255),                \nAddress varchar(255),                \nCity varchar(255)                \n)\n```\n\nMS Access使用 AUTOINCREMENT 关键字执行自动增量（ auto-increment ）任务。\n\n默认情况下，AUTOINCREMENT的起始值为1，每个新记录递增 1。\n\n**　提示：**指定\"ID\"栏以10开头，并递增5，将自动递增（ autoincrement ）更改为自动递增（105）（ AUTOINCREMENT(10,5)）。\n\n要在 \"Persons\" 表中插入新记录，我们不需要为\"ID\"栏指定值（自动添加唯一值）：\n\n```\nINSERT INTO Persons (FirstName,LastName)                \nVALUES ('Lars','Monsen')\n```\n\n上面的 SQL 语句在 \"Persons\" 表中插入一个新记录。\"ID\"栏将得到唯一值。\"FirstName\"栏设置为\"Lars\"，\"LastName\"栏设置为\"Monsen\"。\n\n## 语法 for Oracle\n\n------\n\n在 Oracle 中，代码有点复杂。\n\n您必须使用序列（ sequence ）对象（该对象生成数字序列）创建自动增量（ auto-increment ）字段。\n\n使用以下CREATSEQUENT语法：\n\n```\nCREATE SEQUENCE seq_person                \nMINVALUE 1                \nSTART WITH 1                \nINCREMENT BY 1                \nCACHE 10\n```\n\n上面的代码创建了一个名为seq_pean的序列( sequence) 对象，它以1开头，以1递增。此对象缓存10个值以提高性能。缓存选项指定要存储多少序列值以提高访问速度。\n\n要在\"Persons\" 表中插入新记录，我们必须使用nextval函数，该函数从seq_hor序列检索下一个值：\n\n```\nINSERT INTO Persons (ID,FirstName,LastName)                \nVALUES (seq_person.nextval,'Lars','Monsen')\n```\n\n上面的SQL语句在 \"Persons\" 表中插入一个新记录。\"ID\" 列从 seq_person 序列中分配下一个数字。\"FirstName\"栏设置为\"Lars\"，\"LastName\"栏设置为\"Monsen\"。\n","source":"wiki/sql/sentence/autoincrement.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL AUTO INCREMENT语句\norder: 36\n---\n\n## SQL AUTO INCREMENT 字段\n\n------\n\nAuto-increment 会在新记录插入表中时生成一个唯一的数字。\n\n## AUTO INCREMENT 字段\n\n------\n\n我们通常希望在每次插入新记录时自动创建主键字段的值。\n\n我们可以在表中创建一个自动增量（auto-increment）字段。\n\n## 用于 MySQL 的语法\n\n------\n\n以下SQL语句将 \"Persons\" 表中的\"ID\"列定义为自动递增（auto-increment）主键字段：\n\n```\nCREATE TABLE Persons                \n(                \nID int NOT NULL AUTO_INCREMENT,                \nLastName varchar(255) NOT NULL,                \nFirstName varchar(255),                \nAddress varchar(255),                \nCity varchar(255),                \nPRIMARY KEY (ID)                \n)\n```\n\nMySQL使用AUTO_INCREMENT关键字来执行自动增量（ auto-increment ）任务。\n\n默认情况下，AUTO_INCREMENT的起始值为1，每个新记录增加1。\n\n若要以其他值开始AUTO_INCREMENT序列，请使用以下SQL语法：\n\n```\nALTER TABLE Persons AUTO_INCREMENT=100\n```\n\n要在 \"Persons\" 表中插入新记录，我们不需要为\"ID\"栏指定值（自动添加唯一值）：\n\n```\nINSERT INTO Persons (FirstName,LastName)                \nVALUES ('Lars','Monsen')\n```\n\n上面的SQL语句在 \"Persons\" 表中插入一个新记录。\"ID\"栏将得到唯一值。\"FirstName\"栏设置为\"Lars\"，\"LastName\"栏设置为\"Monsen\"。\n\n## 用于 SQL Server 的语法\n\n------\n\n以下SQL语句将 \"Persons\" 表中的\"ID\"列定义为自动递增（ auto-increment ）主键字段：\n\n```\nCREATE TABLE Persons                \n(                \nID int IDENTITY(1,1) PRIMARY KEY,                \nLastName varchar(255) NOT NULL,                \nFirstName varchar(255),                \nAddress varchar(255),                \nCity varchar(255)                \n)\n```\n\nMS SQL Server使用IDENTITY关键字执行自动增量（ auto-increment ）任务。\n\n在上面的示例中，IDENTITY的起始值为1，每个新记录增量为1。\n\n提示：指定\"ID\"列以10开头，并递增5，将标识（ identity ）更改为IDENTITY（10,5）。\n\n要在 \"Persons\" 表中插入新记录，我们不需要为\"ID\"栏指定值（自动添加唯一值）：\n\n```\nINSERT INTO Persons (FirstName,LastName)                \nVALUES ('Lars','Monsen')\n```\n\n上面的 SQL 语句在 \"Persons\" 表中插入一个新记录。\"ID\"栏将得到唯一值。\"FirstName\"栏设置为\"Lars\"，\"LastName\"栏设置为\"Monsen\"。\n\n## 用于 Access 的语法\n\n------\n\n以下 SQL 语句将 \"Persons\" 表中的\"ID\"列定义为自动递增（ auto-increment ）主键字段：\n\n```\nCREATE TABLE Persons                \n(                \nID Integer PRIMARY KEY AUTOINCREMENT,                \nLastName varchar(255) NOT NULL,                \nFirstName varchar(255),                \nAddress varchar(255),                \nCity varchar(255)                \n)\n```\n\nMS Access使用 AUTOINCREMENT 关键字执行自动增量（ auto-increment ）任务。\n\n默认情况下，AUTOINCREMENT的起始值为1，每个新记录递增 1。\n\n**　提示：**指定\"ID\"栏以10开头，并递增5，将自动递增（ autoincrement ）更改为自动递增（105）（ AUTOINCREMENT(10,5)）。\n\n要在 \"Persons\" 表中插入新记录，我们不需要为\"ID\"栏指定值（自动添加唯一值）：\n\n```\nINSERT INTO Persons (FirstName,LastName)                \nVALUES ('Lars','Monsen')\n```\n\n上面的 SQL 语句在 \"Persons\" 表中插入一个新记录。\"ID\"栏将得到唯一值。\"FirstName\"栏设置为\"Lars\"，\"LastName\"栏设置为\"Monsen\"。\n\n## 语法 for Oracle\n\n------\n\n在 Oracle 中，代码有点复杂。\n\n您必须使用序列（ sequence ）对象（该对象生成数字序列）创建自动增量（ auto-increment ）字段。\n\n使用以下CREATSEQUENT语法：\n\n```\nCREATE SEQUENCE seq_person                \nMINVALUE 1                \nSTART WITH 1                \nINCREMENT BY 1                \nCACHE 10\n```\n\n上面的代码创建了一个名为seq_pean的序列( sequence) 对象，它以1开头，以1递增。此对象缓存10个值以提高性能。缓存选项指定要存储多少序列值以提高访问速度。\n\n要在\"Persons\" 表中插入新记录，我们必须使用nextval函数，该函数从seq_hor序列检索下一个值：\n\n```\nINSERT INTO Persons (ID,FirstName,LastName)                \nVALUES (seq_person.nextval,'Lars','Monsen')\n```\n\n上面的SQL语句在 \"Persons\" 表中插入一个新记录。\"ID\" 列从 seq_person 序列中分配下一个数字。\"FirstName\"栏设置为\"Lars\"，\"LastName\"栏设置为\"Monsen\"。\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T01:49:05.332Z","path":"wiki/sql/sentence/autoincrement.html","comments":1,"_id":"cmbreopih000565x06z9zh2xc","content":"<h2 id=\"SQL-AUTO-INCREMENT-字段\"><a href=\"#SQL-AUTO-INCREMENT-字段\" class=\"headerlink\" title=\"SQL AUTO INCREMENT 字段\"></a>SQL AUTO INCREMENT 字段</h2><hr>\n<p>Auto-increment 会在新记录插入表中时生成一个唯一的数字。</p>\n<h2 id=\"AUTO-INCREMENT-字段\"><a href=\"#AUTO-INCREMENT-字段\" class=\"headerlink\" title=\"AUTO INCREMENT 字段\"></a>AUTO INCREMENT 字段</h2><hr>\n<p>我们通常希望在每次插入新记录时自动创建主键字段的值。</p>\n<p>我们可以在表中创建一个自动增量（auto-increment）字段。</p>\n<h2 id=\"用于-MySQL-的语法\"><a href=\"#用于-MySQL-的语法\" class=\"headerlink\" title=\"用于 MySQL 的语法\"></a>用于 MySQL 的语法</h2><hr>\n<p>以下SQL语句将 “Persons” 表中的”ID”列定义为自动递增（auto-increment）主键字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons                </span><br><span class=\"line\">(                </span><br><span class=\"line\">ID int NOT NULL AUTO_INCREMENT,                </span><br><span class=\"line\">LastName varchar(255) NOT NULL,                </span><br><span class=\"line\">FirstName varchar(255),                </span><br><span class=\"line\">Address varchar(255),                </span><br><span class=\"line\">City varchar(255),                </span><br><span class=\"line\">PRIMARY KEY (ID)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>MySQL使用AUTO_INCREMENT关键字来执行自动增量（ auto-increment ）任务。</p>\n<p>默认情况下，AUTO_INCREMENT的起始值为1，每个新记录增加1。</p>\n<p>若要以其他值开始AUTO_INCREMENT序列，请使用以下SQL语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons AUTO_INCREMENT=100</span><br></pre></td></tr></table></figure>\n\n<p>要在 “Persons” 表中插入新记录，我们不需要为”ID”栏指定值（自动添加唯一值）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO Persons (FirstName,LastName)                </span><br><span class=\"line\">VALUES (&#x27;Lars&#x27;,&#x27;Monsen&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>上面的SQL语句在 “Persons” 表中插入一个新记录。”ID”栏将得到唯一值。”FirstName”栏设置为”Lars”，”LastName”栏设置为”Monsen”。</p>\n<h2 id=\"用于-SQL-Server-的语法\"><a href=\"#用于-SQL-Server-的语法\" class=\"headerlink\" title=\"用于 SQL Server 的语法\"></a>用于 SQL Server 的语法</h2><hr>\n<p>以下SQL语句将 “Persons” 表中的”ID”列定义为自动递增（ auto-increment ）主键字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons                </span><br><span class=\"line\">(                </span><br><span class=\"line\">ID int IDENTITY(1,1) PRIMARY KEY,                </span><br><span class=\"line\">LastName varchar(255) NOT NULL,                </span><br><span class=\"line\">FirstName varchar(255),                </span><br><span class=\"line\">Address varchar(255),                </span><br><span class=\"line\">City varchar(255)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>MS SQL Server使用IDENTITY关键字执行自动增量（ auto-increment ）任务。</p>\n<p>在上面的示例中，IDENTITY的起始值为1，每个新记录增量为1。</p>\n<p>提示：指定”ID”列以10开头，并递增5，将标识（ identity ）更改为IDENTITY（10,5）。</p>\n<p>要在 “Persons” 表中插入新记录，我们不需要为”ID”栏指定值（自动添加唯一值）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO Persons (FirstName,LastName)                </span><br><span class=\"line\">VALUES (&#x27;Lars&#x27;,&#x27;Monsen&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>上面的 SQL 语句在 “Persons” 表中插入一个新记录。”ID”栏将得到唯一值。”FirstName”栏设置为”Lars”，”LastName”栏设置为”Monsen”。</p>\n<h2 id=\"用于-Access-的语法\"><a href=\"#用于-Access-的语法\" class=\"headerlink\" title=\"用于 Access 的语法\"></a>用于 Access 的语法</h2><hr>\n<p>以下 SQL 语句将 “Persons” 表中的”ID”列定义为自动递增（ auto-increment ）主键字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons                </span><br><span class=\"line\">(                </span><br><span class=\"line\">ID Integer PRIMARY KEY AUTOINCREMENT,                </span><br><span class=\"line\">LastName varchar(255) NOT NULL,                </span><br><span class=\"line\">FirstName varchar(255),                </span><br><span class=\"line\">Address varchar(255),                </span><br><span class=\"line\">City varchar(255)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>MS Access使用 AUTOINCREMENT 关键字执行自动增量（ auto-increment ）任务。</p>\n<p>默认情况下，AUTOINCREMENT的起始值为1，每个新记录递增 1。</p>\n<p>**　提示：**指定”ID”栏以10开头，并递增5，将自动递增（ autoincrement ）更改为自动递增（105）（ AUTOINCREMENT(10,5)）。</p>\n<p>要在 “Persons” 表中插入新记录，我们不需要为”ID”栏指定值（自动添加唯一值）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO Persons (FirstName,LastName)                </span><br><span class=\"line\">VALUES (&#x27;Lars&#x27;,&#x27;Monsen&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>上面的 SQL 语句在 “Persons” 表中插入一个新记录。”ID”栏将得到唯一值。”FirstName”栏设置为”Lars”，”LastName”栏设置为”Monsen”。</p>\n<h2 id=\"语法-for-Oracle\"><a href=\"#语法-for-Oracle\" class=\"headerlink\" title=\"语法 for Oracle\"></a>语法 for Oracle</h2><hr>\n<p>在 Oracle 中，代码有点复杂。</p>\n<p>您必须使用序列（ sequence ）对象（该对象生成数字序列）创建自动增量（ auto-increment ）字段。</p>\n<p>使用以下CREATSEQUENT语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE SEQUENCE seq_person                </span><br><span class=\"line\">MINVALUE 1                </span><br><span class=\"line\">START WITH 1                </span><br><span class=\"line\">INCREMENT BY 1                </span><br><span class=\"line\">CACHE 10</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码创建了一个名为seq_pean的序列( sequence) 对象，它以1开头，以1递增。此对象缓存10个值以提高性能。缓存选项指定要存储多少序列值以提高访问速度。</p>\n<p>要在”Persons” 表中插入新记录，我们必须使用nextval函数，该函数从seq_hor序列检索下一个值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO Persons (ID,FirstName,LastName)                </span><br><span class=\"line\">VALUES (seq_person.nextval,&#x27;Lars&#x27;,&#x27;Monsen&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>上面的SQL语句在 “Persons” 表中插入一个新记录。”ID” 列从 seq_person 序列中分配下一个数字。”FirstName”栏设置为”Lars”，”LastName”栏设置为”Monsen”。</p>\n","excerpt":"","more":"<h2 id=\"SQL-AUTO-INCREMENT-字段\"><a href=\"#SQL-AUTO-INCREMENT-字段\" class=\"headerlink\" title=\"SQL AUTO INCREMENT 字段\"></a>SQL AUTO INCREMENT 字段</h2><hr>\n<p>Auto-increment 会在新记录插入表中时生成一个唯一的数字。</p>\n<h2 id=\"AUTO-INCREMENT-字段\"><a href=\"#AUTO-INCREMENT-字段\" class=\"headerlink\" title=\"AUTO INCREMENT 字段\"></a>AUTO INCREMENT 字段</h2><hr>\n<p>我们通常希望在每次插入新记录时自动创建主键字段的值。</p>\n<p>我们可以在表中创建一个自动增量（auto-increment）字段。</p>\n<h2 id=\"用于-MySQL-的语法\"><a href=\"#用于-MySQL-的语法\" class=\"headerlink\" title=\"用于 MySQL 的语法\"></a>用于 MySQL 的语法</h2><hr>\n<p>以下SQL语句将 “Persons” 表中的”ID”列定义为自动递增（auto-increment）主键字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons                </span><br><span class=\"line\">(                </span><br><span class=\"line\">ID int NOT NULL AUTO_INCREMENT,                </span><br><span class=\"line\">LastName varchar(255) NOT NULL,                </span><br><span class=\"line\">FirstName varchar(255),                </span><br><span class=\"line\">Address varchar(255),                </span><br><span class=\"line\">City varchar(255),                </span><br><span class=\"line\">PRIMARY KEY (ID)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>MySQL使用AUTO_INCREMENT关键字来执行自动增量（ auto-increment ）任务。</p>\n<p>默认情况下，AUTO_INCREMENT的起始值为1，每个新记录增加1。</p>\n<p>若要以其他值开始AUTO_INCREMENT序列，请使用以下SQL语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons AUTO_INCREMENT=100</span><br></pre></td></tr></table></figure>\n\n<p>要在 “Persons” 表中插入新记录，我们不需要为”ID”栏指定值（自动添加唯一值）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO Persons (FirstName,LastName)                </span><br><span class=\"line\">VALUES (&#x27;Lars&#x27;,&#x27;Monsen&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>上面的SQL语句在 “Persons” 表中插入一个新记录。”ID”栏将得到唯一值。”FirstName”栏设置为”Lars”，”LastName”栏设置为”Monsen”。</p>\n<h2 id=\"用于-SQL-Server-的语法\"><a href=\"#用于-SQL-Server-的语法\" class=\"headerlink\" title=\"用于 SQL Server 的语法\"></a>用于 SQL Server 的语法</h2><hr>\n<p>以下SQL语句将 “Persons” 表中的”ID”列定义为自动递增（ auto-increment ）主键字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons                </span><br><span class=\"line\">(                </span><br><span class=\"line\">ID int IDENTITY(1,1) PRIMARY KEY,                </span><br><span class=\"line\">LastName varchar(255) NOT NULL,                </span><br><span class=\"line\">FirstName varchar(255),                </span><br><span class=\"line\">Address varchar(255),                </span><br><span class=\"line\">City varchar(255)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>MS SQL Server使用IDENTITY关键字执行自动增量（ auto-increment ）任务。</p>\n<p>在上面的示例中，IDENTITY的起始值为1，每个新记录增量为1。</p>\n<p>提示：指定”ID”列以10开头，并递增5，将标识（ identity ）更改为IDENTITY（10,5）。</p>\n<p>要在 “Persons” 表中插入新记录，我们不需要为”ID”栏指定值（自动添加唯一值）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO Persons (FirstName,LastName)                </span><br><span class=\"line\">VALUES (&#x27;Lars&#x27;,&#x27;Monsen&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>上面的 SQL 语句在 “Persons” 表中插入一个新记录。”ID”栏将得到唯一值。”FirstName”栏设置为”Lars”，”LastName”栏设置为”Monsen”。</p>\n<h2 id=\"用于-Access-的语法\"><a href=\"#用于-Access-的语法\" class=\"headerlink\" title=\"用于 Access 的语法\"></a>用于 Access 的语法</h2><hr>\n<p>以下 SQL 语句将 “Persons” 表中的”ID”列定义为自动递增（ auto-increment ）主键字段：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons                </span><br><span class=\"line\">(                </span><br><span class=\"line\">ID Integer PRIMARY KEY AUTOINCREMENT,                </span><br><span class=\"line\">LastName varchar(255) NOT NULL,                </span><br><span class=\"line\">FirstName varchar(255),                </span><br><span class=\"line\">Address varchar(255),                </span><br><span class=\"line\">City varchar(255)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>MS Access使用 AUTOINCREMENT 关键字执行自动增量（ auto-increment ）任务。</p>\n<p>默认情况下，AUTOINCREMENT的起始值为1，每个新记录递增 1。</p>\n<p>**　提示：**指定”ID”栏以10开头，并递增5，将自动递增（ autoincrement ）更改为自动递增（105）（ AUTOINCREMENT(10,5)）。</p>\n<p>要在 “Persons” 表中插入新记录，我们不需要为”ID”栏指定值（自动添加唯一值）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO Persons (FirstName,LastName)                </span><br><span class=\"line\">VALUES (&#x27;Lars&#x27;,&#x27;Monsen&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>上面的 SQL 语句在 “Persons” 表中插入一个新记录。”ID”栏将得到唯一值。”FirstName”栏设置为”Lars”，”LastName”栏设置为”Monsen”。</p>\n<h2 id=\"语法-for-Oracle\"><a href=\"#语法-for-Oracle\" class=\"headerlink\" title=\"语法 for Oracle\"></a>语法 for Oracle</h2><hr>\n<p>在 Oracle 中，代码有点复杂。</p>\n<p>您必须使用序列（ sequence ）对象（该对象生成数字序列）创建自动增量（ auto-increment ）字段。</p>\n<p>使用以下CREATSEQUENT语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE SEQUENCE seq_person                </span><br><span class=\"line\">MINVALUE 1                </span><br><span class=\"line\">START WITH 1                </span><br><span class=\"line\">INCREMENT BY 1                </span><br><span class=\"line\">CACHE 10</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码创建了一个名为seq_pean的序列( sequence) 对象，它以1开头，以1递增。此对象缓存10个值以提高性能。缓存选项指定要存储多少序列值以提高访问速度。</p>\n<p>要在”Persons” 表中插入新记录，我们必须使用nextval函数，该函数从seq_hor序列检索下一个值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO Persons (ID,FirstName,LastName)                </span><br><span class=\"line\">VALUES (seq_person.nextval,&#x27;Lars&#x27;,&#x27;Monsen&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>上面的SQL语句在 “Persons” 表中插入一个新记录。”ID” 列从 seq_person 序列中分配下一个数字。”FirstName”栏设置为”Lars”，”LastName”栏设置为”Monsen”。</p>\n"},{"layout":"wiki","wiki":"sql","title":"SQL BETWEEN运算符","order":20,"_content":"\n## SQL BETWEEN 运算符\n\n------\n\nBETWEEN运算符用于选取介于两个值之间的数据范围内的值。\n\nBETWEEN运算符选择给定范围内的值。值可以是数字，文本或日期。\n\nBETWEEN运算符是包含性的：包括开始和结束值，且开始值需小于结束值。\n\n### SQL BETWEEN 语法\n\n```\nSELECT column_name(s)\nFROM table_name\nWHERE column_name BETWEEN value1 AND value2;\n```\n\n要否定BETWEEN运算符的结果，可以添加NOT运算符：\n\n```\nSELECT column_name(s)\nFROM table_name\nWHERE column_name NOT BETWEEN value1 AND value2;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是\"Products\"表中的数据：\n\n| ProductID | ProductName                  | SupplierID | CategoryID | Unit                | Price |\n| :-------- | :--------------------------- | :--------- | :--------- | :------------------ | :---- |\n| 1         | Chais                        | 1          | 1          | 10 boxes x 20 bags  | 18    |\n| 2         | Chang                        | 1          | 1          | 24 - 12 oz bottles  | 19    |\n| 3         | Aniseed Syrup                | 1          | 2          | 12 - 550 ml bottles | 10    |\n| 4         | Chef Anton's Cajun Seasoning | 1          | 2          | 48 - 6 oz jars      | 22    |\n| 5         | Chef Anton's Gumbo Mix       | 1          | 2          | 36 boxes            | 21.35 |\n\n## BETWEEN 运算符实例\n\n------\n\n以下SQL语句选择价格在10到20之间的所有产品：\n\n示例：\n\n```\nSELECT * FROM Products\nWHERE Price BETWEEN 10 AND 20;\n```\n\n\n\n------\n\n## NOT BETWEEN 操作符实例\n\n要显示前面示例范围之外的产品，请使用NOT BETWEEN：\n\n示例：\n\n```\nSELECT * FROM Products\nWHERE Price NOT BETWEEN 10 AND 20;\n```\n\n\n\n## 带有 IN 的 BETWEEN 操作符实例\n\n------\n\n以下SQL语句选择价格在10到20之间但CategoryID不是1、2或3的所有产品：\n\n示例：\n\n```\nSELECT * FROM Products\nWHERE (Price BETWEEN 10 AND 20)\nAND NOT CategoryID IN (1,2,3);\n```\n\n\n\n## 带有文本值的 BETWEEN 操作符实例\n\n------\n\n以下SQL语句选择所有带有ProductName BETWEEN'Carnarvon Tigers'和'Mozzarella di Giovanni'的产品：\n\n示例：\n\n```\nSELECT * FROM Products\nWHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'\nORDER BY ProductName;\n```\n\n\n\n## 带有文本值的 NOT BETWEEN 操作符实例\n\n------\n\n以下SQL语句选择ProductName不是BETWEEN'Carnarvon Tigers'和'Mozzarella di Giovanni'的所有产品：\n\n示例：\n\n```\nSELECT * FROM Products\nWHERE ProductName NOT BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'\nORDER BY ProductName;\n```\n\n\n\n## 示例表\n\n------\n\n下面是选自 \"Orders\" 表的数据：\n\n| OrderID | CustomerID | EmployeeID | OrderDate | ShipperID |\n| :------ | :--------- | :--------- | :-------- | :-------- |\n| 10248   | 90         | 5          | 7/4/1996  | 3         |\n| 10249   | 81         | 6          | 7/5/1996  | 1         |\n| 10250   | 34         | 4          | 7/8/1996  | 2         |\n| 10251   | 84         | 3          | 7/9/1996  | 1         |\n| 10252   | 76         | 4          | 7/10/1996 | 2         |\n\n## 带有日期值的 BETWEEN 操作符实例\n\n------\n\n以下 SQL 语句选取 OrderDate 介于 '04-July-1996' 和 '09-July-1996' 之间的所有订单：\n\n示例：\n\n```\nSELECT * FROM Orders\nWHERE OrderDate BETWEEN #07/04/1996# AND #07/09/1996#;\n```\n\n\n\n| **请注意，在不同的数据库中，BETWEEN 操作符会产生不同的结果！** 在一些数据库中，BETWEEN 选取介于两个值之间但不包括两个测试值的字段。 在一些数据库中，BETWEEN 选取介于两个值之间且包括两个测试值的字段。 在一些数据库中，BETWEEN 选取介于两个值之间且包括第一个测试值但不包括最后一个测试值的字段。 **因此，请检查您的数据库是如何处理 BETWEEN 操作符！** |\n| :----------------------------------------------------------- |\n","source":"wiki/sql/sentence/between.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL BETWEEN运算符\norder: 20\n---\n\n## SQL BETWEEN 运算符\n\n------\n\nBETWEEN运算符用于选取介于两个值之间的数据范围内的值。\n\nBETWEEN运算符选择给定范围内的值。值可以是数字，文本或日期。\n\nBETWEEN运算符是包含性的：包括开始和结束值，且开始值需小于结束值。\n\n### SQL BETWEEN 语法\n\n```\nSELECT column_name(s)\nFROM table_name\nWHERE column_name BETWEEN value1 AND value2;\n```\n\n要否定BETWEEN运算符的结果，可以添加NOT运算符：\n\n```\nSELECT column_name(s)\nFROM table_name\nWHERE column_name NOT BETWEEN value1 AND value2;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是\"Products\"表中的数据：\n\n| ProductID | ProductName                  | SupplierID | CategoryID | Unit                | Price |\n| :-------- | :--------------------------- | :--------- | :--------- | :------------------ | :---- |\n| 1         | Chais                        | 1          | 1          | 10 boxes x 20 bags  | 18    |\n| 2         | Chang                        | 1          | 1          | 24 - 12 oz bottles  | 19    |\n| 3         | Aniseed Syrup                | 1          | 2          | 12 - 550 ml bottles | 10    |\n| 4         | Chef Anton's Cajun Seasoning | 1          | 2          | 48 - 6 oz jars      | 22    |\n| 5         | Chef Anton's Gumbo Mix       | 1          | 2          | 36 boxes            | 21.35 |\n\n## BETWEEN 运算符实例\n\n------\n\n以下SQL语句选择价格在10到20之间的所有产品：\n\n示例：\n\n```\nSELECT * FROM Products\nWHERE Price BETWEEN 10 AND 20;\n```\n\n\n\n------\n\n## NOT BETWEEN 操作符实例\n\n要显示前面示例范围之外的产品，请使用NOT BETWEEN：\n\n示例：\n\n```\nSELECT * FROM Products\nWHERE Price NOT BETWEEN 10 AND 20;\n```\n\n\n\n## 带有 IN 的 BETWEEN 操作符实例\n\n------\n\n以下SQL语句选择价格在10到20之间但CategoryID不是1、2或3的所有产品：\n\n示例：\n\n```\nSELECT * FROM Products\nWHERE (Price BETWEEN 10 AND 20)\nAND NOT CategoryID IN (1,2,3);\n```\n\n\n\n## 带有文本值的 BETWEEN 操作符实例\n\n------\n\n以下SQL语句选择所有带有ProductName BETWEEN'Carnarvon Tigers'和'Mozzarella di Giovanni'的产品：\n\n示例：\n\n```\nSELECT * FROM Products\nWHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'\nORDER BY ProductName;\n```\n\n\n\n## 带有文本值的 NOT BETWEEN 操作符实例\n\n------\n\n以下SQL语句选择ProductName不是BETWEEN'Carnarvon Tigers'和'Mozzarella di Giovanni'的所有产品：\n\n示例：\n\n```\nSELECT * FROM Products\nWHERE ProductName NOT BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'\nORDER BY ProductName;\n```\n\n\n\n## 示例表\n\n------\n\n下面是选自 \"Orders\" 表的数据：\n\n| OrderID | CustomerID | EmployeeID | OrderDate | ShipperID |\n| :------ | :--------- | :--------- | :-------- | :-------- |\n| 10248   | 90         | 5          | 7/4/1996  | 3         |\n| 10249   | 81         | 6          | 7/5/1996  | 1         |\n| 10250   | 34         | 4          | 7/8/1996  | 2         |\n| 10251   | 84         | 3          | 7/9/1996  | 1         |\n| 10252   | 76         | 4          | 7/10/1996 | 2         |\n\n## 带有日期值的 BETWEEN 操作符实例\n\n------\n\n以下 SQL 语句选取 OrderDate 介于 '04-July-1996' 和 '09-July-1996' 之间的所有订单：\n\n示例：\n\n```\nSELECT * FROM Orders\nWHERE OrderDate BETWEEN #07/04/1996# AND #07/09/1996#;\n```\n\n\n\n| **请注意，在不同的数据库中，BETWEEN 操作符会产生不同的结果！** 在一些数据库中，BETWEEN 选取介于两个值之间但不包括两个测试值的字段。 在一些数据库中，BETWEEN 选取介于两个值之间且包括两个测试值的字段。 在一些数据库中，BETWEEN 选取介于两个值之间且包括第一个测试值但不包括最后一个测试值的字段。 **因此，请检查您的数据库是如何处理 BETWEEN 操作符！** |\n| :----------------------------------------------------------- |\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-10T15:25:51.874Z","path":"wiki/sql/sentence/between.html","comments":1,"_id":"cmbreopii000665x0ahm04v6x","content":"<h2 id=\"SQL-BETWEEN-运算符\"><a href=\"#SQL-BETWEEN-运算符\" class=\"headerlink\" title=\"SQL BETWEEN 运算符\"></a>SQL BETWEEN 运算符</h2><hr>\n<p>BETWEEN运算符用于选取介于两个值之间的数据范围内的值。</p>\n<p>BETWEEN运算符选择给定范围内的值。值可以是数字，文本或日期。</p>\n<p>BETWEEN运算符是包含性的：包括开始和结束值，且开始值需小于结束值。</p>\n<h3 id=\"SQL-BETWEEN-语法\"><a href=\"#SQL-BETWEEN-语法\" class=\"headerlink\" title=\"SQL BETWEEN 语法\"></a>SQL BETWEEN 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE column_name BETWEEN value1 AND value2;</span><br></pre></td></tr></table></figure>\n\n<p>要否定BETWEEN运算符的结果，可以添加NOT运算符：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE column_name NOT BETWEEN value1 AND value2;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是”Products”表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">ProductID</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">SupplierID</th>\n<th align=\"left\">CategoryID</th>\n<th align=\"left\">Unit</th>\n<th align=\"left\">Price</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Chais</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">10 boxes x 20 bags</td>\n<td align=\"left\">18</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Chang</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">24 - 12 oz bottles</td>\n<td align=\"left\">19</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Aniseed Syrup</td>\n<td align=\"left\">1</td>\n<td align=\"left\">2</td>\n<td align=\"left\">12 - 550 ml bottles</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Chef Anton’s Cajun Seasoning</td>\n<td align=\"left\">1</td>\n<td align=\"left\">2</td>\n<td align=\"left\">48 - 6 oz jars</td>\n<td align=\"left\">22</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Chef Anton’s Gumbo Mix</td>\n<td align=\"left\">1</td>\n<td align=\"left\">2</td>\n<td align=\"left\">36 boxes</td>\n<td align=\"left\">21.35</td>\n</tr>\n</tbody></table>\n<h2 id=\"BETWEEN-运算符实例\"><a href=\"#BETWEEN-运算符实例\" class=\"headerlink\" title=\"BETWEEN 运算符实例\"></a>BETWEEN 运算符实例</h2><hr>\n<p>以下SQL语句选择价格在10到20之间的所有产品：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Products</span><br><span class=\"line\">WHERE Price BETWEEN 10 AND 20;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"NOT-BETWEEN-操作符实例\"><a href=\"#NOT-BETWEEN-操作符实例\" class=\"headerlink\" title=\"NOT BETWEEN 操作符实例\"></a>NOT BETWEEN 操作符实例</h2><p>要显示前面示例范围之外的产品，请使用NOT BETWEEN：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Products</span><br><span class=\"line\">WHERE Price NOT BETWEEN 10 AND 20;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"带有-IN-的-BETWEEN-操作符实例\"><a href=\"#带有-IN-的-BETWEEN-操作符实例\" class=\"headerlink\" title=\"带有 IN 的 BETWEEN 操作符实例\"></a>带有 IN 的 BETWEEN 操作符实例</h2><hr>\n<p>以下SQL语句选择价格在10到20之间但CategoryID不是1、2或3的所有产品：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Products</span><br><span class=\"line\">WHERE (Price BETWEEN 10 AND 20)</span><br><span class=\"line\">AND NOT CategoryID IN (1,2,3);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"带有文本值的-BETWEEN-操作符实例\"><a href=\"#带有文本值的-BETWEEN-操作符实例\" class=\"headerlink\" title=\"带有文本值的 BETWEEN 操作符实例\"></a>带有文本值的 BETWEEN 操作符实例</h2><hr>\n<p>以下SQL语句选择所有带有ProductName BETWEEN’Carnarvon Tigers’和’Mozzarella di Giovanni’的产品：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Products</span><br><span class=\"line\">WHERE ProductName BETWEEN &#x27;Carnarvon Tigers&#x27; AND &#x27;Mozzarella di Giovanni&#x27;</span><br><span class=\"line\">ORDER BY ProductName;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"带有文本值的-NOT-BETWEEN-操作符实例\"><a href=\"#带有文本值的-NOT-BETWEEN-操作符实例\" class=\"headerlink\" title=\"带有文本值的 NOT BETWEEN 操作符实例\"></a>带有文本值的 NOT BETWEEN 操作符实例</h2><hr>\n<p>以下SQL语句选择ProductName不是BETWEEN’Carnarvon Tigers’和’Mozzarella di Giovanni’的所有产品：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Products</span><br><span class=\"line\">WHERE ProductName NOT BETWEEN &#x27;Carnarvon Tigers&#x27; AND &#x27;Mozzarella di Giovanni&#x27;</span><br><span class=\"line\">ORDER BY ProductName;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"示例表\"><a href=\"#示例表\" class=\"headerlink\" title=\"示例表\"></a>示例表</h2><hr>\n<p>下面是选自 “Orders” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">EmployeeID</th>\n<th align=\"left\">OrderDate</th>\n<th align=\"left\">ShipperID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10248</td>\n<td align=\"left\">90</td>\n<td align=\"left\">5</td>\n<td align=\"left\">7&#x2F;4&#x2F;1996</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">10249</td>\n<td align=\"left\">81</td>\n<td align=\"left\">6</td>\n<td align=\"left\">7&#x2F;5&#x2F;1996</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">10250</td>\n<td align=\"left\">34</td>\n<td align=\"left\">4</td>\n<td align=\"left\">7&#x2F;8&#x2F;1996</td>\n<td align=\"left\">2</td>\n</tr>\n<tr>\n<td align=\"left\">10251</td>\n<td align=\"left\">84</td>\n<td align=\"left\">3</td>\n<td align=\"left\">7&#x2F;9&#x2F;1996</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">10252</td>\n<td align=\"left\">76</td>\n<td align=\"left\">4</td>\n<td align=\"left\">7&#x2F;10&#x2F;1996</td>\n<td align=\"left\">2</td>\n</tr>\n</tbody></table>\n<h2 id=\"带有日期值的-BETWEEN-操作符实例\"><a href=\"#带有日期值的-BETWEEN-操作符实例\" class=\"headerlink\" title=\"带有日期值的 BETWEEN 操作符实例\"></a>带有日期值的 BETWEEN 操作符实例</h2><hr>\n<p>以下 SQL 语句选取 OrderDate 介于 ‘04-July-1996’ 和 ‘09-July-1996’ 之间的所有订单：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Orders</span><br><span class=\"line\">WHERE OrderDate BETWEEN #07/04/1996# AND #07/09/1996#;</span><br></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>请注意，在不同的数据库中，BETWEEN 操作符会产生不同的结果！</strong> 在一些数据库中，BETWEEN 选取介于两个值之间但不包括两个测试值的字段。 在一些数据库中，BETWEEN 选取介于两个值之间且包括两个测试值的字段。 在一些数据库中，BETWEEN 选取介于两个值之间且包括第一个测试值但不包括最后一个测试值的字段。 <strong>因此，请检查您的数据库是如何处理 BETWEEN 操作符！</strong></th>\n</tr>\n</thead>\n</table>\n","excerpt":"","more":"<h2 id=\"SQL-BETWEEN-运算符\"><a href=\"#SQL-BETWEEN-运算符\" class=\"headerlink\" title=\"SQL BETWEEN 运算符\"></a>SQL BETWEEN 运算符</h2><hr>\n<p>BETWEEN运算符用于选取介于两个值之间的数据范围内的值。</p>\n<p>BETWEEN运算符选择给定范围内的值。值可以是数字，文本或日期。</p>\n<p>BETWEEN运算符是包含性的：包括开始和结束值，且开始值需小于结束值。</p>\n<h3 id=\"SQL-BETWEEN-语法\"><a href=\"#SQL-BETWEEN-语法\" class=\"headerlink\" title=\"SQL BETWEEN 语法\"></a>SQL BETWEEN 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE column_name BETWEEN value1 AND value2;</span><br></pre></td></tr></table></figure>\n\n<p>要否定BETWEEN运算符的结果，可以添加NOT运算符：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE column_name NOT BETWEEN value1 AND value2;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是”Products”表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">ProductID</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">SupplierID</th>\n<th align=\"left\">CategoryID</th>\n<th align=\"left\">Unit</th>\n<th align=\"left\">Price</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Chais</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">10 boxes x 20 bags</td>\n<td align=\"left\">18</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Chang</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">24 - 12 oz bottles</td>\n<td align=\"left\">19</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Aniseed Syrup</td>\n<td align=\"left\">1</td>\n<td align=\"left\">2</td>\n<td align=\"left\">12 - 550 ml bottles</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Chef Anton’s Cajun Seasoning</td>\n<td align=\"left\">1</td>\n<td align=\"left\">2</td>\n<td align=\"left\">48 - 6 oz jars</td>\n<td align=\"left\">22</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Chef Anton’s Gumbo Mix</td>\n<td align=\"left\">1</td>\n<td align=\"left\">2</td>\n<td align=\"left\">36 boxes</td>\n<td align=\"left\">21.35</td>\n</tr>\n</tbody></table>\n<h2 id=\"BETWEEN-运算符实例\"><a href=\"#BETWEEN-运算符实例\" class=\"headerlink\" title=\"BETWEEN 运算符实例\"></a>BETWEEN 运算符实例</h2><hr>\n<p>以下SQL语句选择价格在10到20之间的所有产品：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Products</span><br><span class=\"line\">WHERE Price BETWEEN 10 AND 20;</span><br></pre></td></tr></table></figure>\n\n\n\n<hr>\n<h2 id=\"NOT-BETWEEN-操作符实例\"><a href=\"#NOT-BETWEEN-操作符实例\" class=\"headerlink\" title=\"NOT BETWEEN 操作符实例\"></a>NOT BETWEEN 操作符实例</h2><p>要显示前面示例范围之外的产品，请使用NOT BETWEEN：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Products</span><br><span class=\"line\">WHERE Price NOT BETWEEN 10 AND 20;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"带有-IN-的-BETWEEN-操作符实例\"><a href=\"#带有-IN-的-BETWEEN-操作符实例\" class=\"headerlink\" title=\"带有 IN 的 BETWEEN 操作符实例\"></a>带有 IN 的 BETWEEN 操作符实例</h2><hr>\n<p>以下SQL语句选择价格在10到20之间但CategoryID不是1、2或3的所有产品：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Products</span><br><span class=\"line\">WHERE (Price BETWEEN 10 AND 20)</span><br><span class=\"line\">AND NOT CategoryID IN (1,2,3);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"带有文本值的-BETWEEN-操作符实例\"><a href=\"#带有文本值的-BETWEEN-操作符实例\" class=\"headerlink\" title=\"带有文本值的 BETWEEN 操作符实例\"></a>带有文本值的 BETWEEN 操作符实例</h2><hr>\n<p>以下SQL语句选择所有带有ProductName BETWEEN’Carnarvon Tigers’和’Mozzarella di Giovanni’的产品：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Products</span><br><span class=\"line\">WHERE ProductName BETWEEN &#x27;Carnarvon Tigers&#x27; AND &#x27;Mozzarella di Giovanni&#x27;</span><br><span class=\"line\">ORDER BY ProductName;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"带有文本值的-NOT-BETWEEN-操作符实例\"><a href=\"#带有文本值的-NOT-BETWEEN-操作符实例\" class=\"headerlink\" title=\"带有文本值的 NOT BETWEEN 操作符实例\"></a>带有文本值的 NOT BETWEEN 操作符实例</h2><hr>\n<p>以下SQL语句选择ProductName不是BETWEEN’Carnarvon Tigers’和’Mozzarella di Giovanni’的所有产品：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Products</span><br><span class=\"line\">WHERE ProductName NOT BETWEEN &#x27;Carnarvon Tigers&#x27; AND &#x27;Mozzarella di Giovanni&#x27;</span><br><span class=\"line\">ORDER BY ProductName;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"示例表\"><a href=\"#示例表\" class=\"headerlink\" title=\"示例表\"></a>示例表</h2><hr>\n<p>下面是选自 “Orders” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">EmployeeID</th>\n<th align=\"left\">OrderDate</th>\n<th align=\"left\">ShipperID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10248</td>\n<td align=\"left\">90</td>\n<td align=\"left\">5</td>\n<td align=\"left\">7&#x2F;4&#x2F;1996</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">10249</td>\n<td align=\"left\">81</td>\n<td align=\"left\">6</td>\n<td align=\"left\">7&#x2F;5&#x2F;1996</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">10250</td>\n<td align=\"left\">34</td>\n<td align=\"left\">4</td>\n<td align=\"left\">7&#x2F;8&#x2F;1996</td>\n<td align=\"left\">2</td>\n</tr>\n<tr>\n<td align=\"left\">10251</td>\n<td align=\"left\">84</td>\n<td align=\"left\">3</td>\n<td align=\"left\">7&#x2F;9&#x2F;1996</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">10252</td>\n<td align=\"left\">76</td>\n<td align=\"left\">4</td>\n<td align=\"left\">7&#x2F;10&#x2F;1996</td>\n<td align=\"left\">2</td>\n</tr>\n</tbody></table>\n<h2 id=\"带有日期值的-BETWEEN-操作符实例\"><a href=\"#带有日期值的-BETWEEN-操作符实例\" class=\"headerlink\" title=\"带有日期值的 BETWEEN 操作符实例\"></a>带有日期值的 BETWEEN 操作符实例</h2><hr>\n<p>以下 SQL 语句选取 OrderDate 介于 ‘04-July-1996’ 和 ‘09-July-1996’ 之间的所有订单：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Orders</span><br><span class=\"line\">WHERE OrderDate BETWEEN #07/04/1996# AND #07/09/1996#;</span><br></pre></td></tr></table></figure>\n\n\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>请注意，在不同的数据库中，BETWEEN 操作符会产生不同的结果！</strong> 在一些数据库中，BETWEEN 选取介于两个值之间但不包括两个测试值的字段。 在一些数据库中，BETWEEN 选取介于两个值之间且包括两个测试值的字段。 在一些数据库中，BETWEEN 选取介于两个值之间且包括第一个测试值但不包括最后一个测试值的字段。 <strong>因此，请检查您的数据库是如何处理 BETWEEN 操作符！</strong></th>\n</tr>\n</thead>\n</table>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 克隆数据库","order":43,"_content":"\n## SQL 克隆数据表\n\n------\n\n有些情况下，你可能需要原样拷贝某张数据表。但是，CREATE TABLE 却不能满足你的需要，因为复制表必须和原表拥有一样的索引、默认值等等。\n\n如果你在使用 MySQL 关系型数据库管理系统的话，下面几个步骤可以帮你解决这个问题：\n\n- 使用 SHOW CREATE TABLE 命令来获取一条指定了原表的结构、索引等信息的 CREATE　TABLE 语句。\n- 将语句中的表名修改为克隆表的名字，然后执行该语句。这样你就可以得到一张与原表完全相同的克隆表了。\n- 如果你还想要复制表中的数据的话，请执行 INSERT INTO ... SELECT 语句。\n\n## 示例：\n\n------\n\n请尝试下面的示例，为 TUTORIALS_TBL 创建一张克隆表，其结构如下所示：\n\n### 步骤一：\n\n获取数据表的完整结构：\n\n```\nSQL> SHOW CREATE TABLE TUTORIALS_TBL \\G;\n*************************** 1. row ***************************\n       Table: TUTORIALS_TBL\nCreate Table: CREATE TABLE `TUTORIALS_TBL` (\n  `tutorial_id` int(11) NOT NULL auto_increment,\n  `tutorial_title` varchar(100) NOT NULL default '',\n  `tutorial_author` varchar(40) NOT NULL default '',\n  `submission_date` date default NULL,\n  PRIMARY KEY  (`tutorial_id`),\n  UNIQUE KEY `AUTHOR_INDEX` (`tutorial_author`)\n) TYPE=MyISAM\n1 row in set (0.00 sec)\n```\n\n### 步骤二：\n\n改变表名，创建新表：\n\n```\nSQL> CREATE TABLE `CLONE_TBL` (\n  -> `tutorial_id` int(11) NOT NULL auto_increment,\n  -> `tutorial_title` varchar(100) NOT NULL default '',\n  -> `tutorial_author` varchar(40) NOT NULL default '',\n  -> `submission_date` date default NULL,\n  -> PRIMARY KEY  (`tutorial_id`),\n  -> UNIQUE KEY `AUTHOR_INDEX` (`tutorial_author`)\n  -> ) TYPE=MyISAM;\nQuery OK, 0 rows affected (1.80 sec)\n```\n\n### 步骤三：\n\n执行完步骤二之后，数据库就会有克隆表了。如果你还想要复制旧表中的数据的话，可以执行 INSERT INTO... SELECT 语句。\n\n```\nSQL> INSERT INTO CLONE_TBL (tutorial_id,\n    ->                        tutorial_title,\n    ->                        tutorial_author,\n    ->                        submission_date)\n    -> SELECT tutorial_id,tutorial_title,\n    ->        tutorial_author,submission_date,\n    -> FROM TUTORIALS_TBL;\nQuery OK, 3 rows affected (0.07 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n```\n\n最终，你将如期拥有一张完全相同的克隆表。\n\n## 附录\n\n另一种完整复制表的方法:\n\n```\nCREATE TABLE targetTable LIKE sourceTable;\nINSERT INTO targetTable SELECT * FROM sourceTable;\n```\n\n或者：\n\n```\ncreate table targetTable  as  select  sourceTable\n```\n\n两者的区别如下：\n\n`create table targetTable like sourceTable`，创建新表，约束和原表相同，只拷贝表结构，没有拷贝表的数据\n\n`create table targetTable as select sourceTable`，创建新表，没有原表的完整约束，会把原表的数据拷贝一份\n","source":"wiki/sql/sentence/clonedb.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 克隆数据库\norder: 43\n---\n\n## SQL 克隆数据表\n\n------\n\n有些情况下，你可能需要原样拷贝某张数据表。但是，CREATE TABLE 却不能满足你的需要，因为复制表必须和原表拥有一样的索引、默认值等等。\n\n如果你在使用 MySQL 关系型数据库管理系统的话，下面几个步骤可以帮你解决这个问题：\n\n- 使用 SHOW CREATE TABLE 命令来获取一条指定了原表的结构、索引等信息的 CREATE　TABLE 语句。\n- 将语句中的表名修改为克隆表的名字，然后执行该语句。这样你就可以得到一张与原表完全相同的克隆表了。\n- 如果你还想要复制表中的数据的话，请执行 INSERT INTO ... SELECT 语句。\n\n## 示例：\n\n------\n\n请尝试下面的示例，为 TUTORIALS_TBL 创建一张克隆表，其结构如下所示：\n\n### 步骤一：\n\n获取数据表的完整结构：\n\n```\nSQL> SHOW CREATE TABLE TUTORIALS_TBL \\G;\n*************************** 1. row ***************************\n       Table: TUTORIALS_TBL\nCreate Table: CREATE TABLE `TUTORIALS_TBL` (\n  `tutorial_id` int(11) NOT NULL auto_increment,\n  `tutorial_title` varchar(100) NOT NULL default '',\n  `tutorial_author` varchar(40) NOT NULL default '',\n  `submission_date` date default NULL,\n  PRIMARY KEY  (`tutorial_id`),\n  UNIQUE KEY `AUTHOR_INDEX` (`tutorial_author`)\n) TYPE=MyISAM\n1 row in set (0.00 sec)\n```\n\n### 步骤二：\n\n改变表名，创建新表：\n\n```\nSQL> CREATE TABLE `CLONE_TBL` (\n  -> `tutorial_id` int(11) NOT NULL auto_increment,\n  -> `tutorial_title` varchar(100) NOT NULL default '',\n  -> `tutorial_author` varchar(40) NOT NULL default '',\n  -> `submission_date` date default NULL,\n  -> PRIMARY KEY  (`tutorial_id`),\n  -> UNIQUE KEY `AUTHOR_INDEX` (`tutorial_author`)\n  -> ) TYPE=MyISAM;\nQuery OK, 0 rows affected (1.80 sec)\n```\n\n### 步骤三：\n\n执行完步骤二之后，数据库就会有克隆表了。如果你还想要复制旧表中的数据的话，可以执行 INSERT INTO... SELECT 语句。\n\n```\nSQL> INSERT INTO CLONE_TBL (tutorial_id,\n    ->                        tutorial_title,\n    ->                        tutorial_author,\n    ->                        submission_date)\n    -> SELECT tutorial_id,tutorial_title,\n    ->        tutorial_author,submission_date,\n    -> FROM TUTORIALS_TBL;\nQuery OK, 3 rows affected (0.07 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\n```\n\n最终，你将如期拥有一张完全相同的克隆表。\n\n## 附录\n\n另一种完整复制表的方法:\n\n```\nCREATE TABLE targetTable LIKE sourceTable;\nINSERT INTO targetTable SELECT * FROM sourceTable;\n```\n\n或者：\n\n```\ncreate table targetTable  as  select  sourceTable\n```\n\n两者的区别如下：\n\n`create table targetTable like sourceTable`，创建新表，约束和原表相同，只拷贝表结构，没有拷贝表的数据\n\n`create table targetTable as select sourceTable`，创建新表，没有原表的完整约束，会把原表的数据拷贝一份\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T02:28:26.315Z","path":"wiki/sql/sentence/clonedb.html","comments":1,"_id":"cmbreopij000765x0gb3w3hel","content":"<h2 id=\"SQL-克隆数据表\"><a href=\"#SQL-克隆数据表\" class=\"headerlink\" title=\"SQL 克隆数据表\"></a>SQL 克隆数据表</h2><hr>\n<p>有些情况下，你可能需要原样拷贝某张数据表。但是，CREATE TABLE 却不能满足你的需要，因为复制表必须和原表拥有一样的索引、默认值等等。</p>\n<p>如果你在使用 MySQL 关系型数据库管理系统的话，下面几个步骤可以帮你解决这个问题：</p>\n<ul>\n<li>使用 SHOW CREATE TABLE 命令来获取一条指定了原表的结构、索引等信息的 CREATE　TABLE 语句。</li>\n<li>将语句中的表名修改为克隆表的名字，然后执行该语句。这样你就可以得到一张与原表完全相同的克隆表了。</li>\n<li>如果你还想要复制表中的数据的话，请执行 INSERT INTO … SELECT 语句。</li>\n</ul>\n<h2 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h2><hr>\n<p>请尝试下面的示例，为 TUTORIALS_TBL 创建一张克隆表，其结构如下所示：</p>\n<h3 id=\"步骤一：\"><a href=\"#步骤一：\" class=\"headerlink\" title=\"步骤一：\"></a>步骤一：</h3><p>获取数据表的完整结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SHOW CREATE TABLE TUTORIALS_TBL \\G;</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">       Table: TUTORIALS_TBL</span><br><span class=\"line\">Create Table: CREATE TABLE `TUTORIALS_TBL` (</span><br><span class=\"line\">  `tutorial_id` int(11) NOT NULL auto_increment,</span><br><span class=\"line\">  `tutorial_title` varchar(100) NOT NULL default &#x27;&#x27;,</span><br><span class=\"line\">  `tutorial_author` varchar(40) NOT NULL default &#x27;&#x27;,</span><br><span class=\"line\">  `submission_date` date default NULL,</span><br><span class=\"line\">  PRIMARY KEY  (`tutorial_id`),</span><br><span class=\"line\">  UNIQUE KEY `AUTHOR_INDEX` (`tutorial_author`)</span><br><span class=\"line\">) TYPE=MyISAM</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤二：\"><a href=\"#步骤二：\" class=\"headerlink\" title=\"步骤二：\"></a>步骤二：</h3><p>改变表名，创建新表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; CREATE TABLE `CLONE_TBL` (</span><br><span class=\"line\">  -&gt; `tutorial_id` int(11) NOT NULL auto_increment,</span><br><span class=\"line\">  -&gt; `tutorial_title` varchar(100) NOT NULL default &#x27;&#x27;,</span><br><span class=\"line\">  -&gt; `tutorial_author` varchar(40) NOT NULL default &#x27;&#x27;,</span><br><span class=\"line\">  -&gt; `submission_date` date default NULL,</span><br><span class=\"line\">  -&gt; PRIMARY KEY  (`tutorial_id`),</span><br><span class=\"line\">  -&gt; UNIQUE KEY `AUTHOR_INDEX` (`tutorial_author`)</span><br><span class=\"line\">  -&gt; ) TYPE=MyISAM;</span><br><span class=\"line\">Query OK, 0 rows affected (1.80 sec)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤三：\"><a href=\"#步骤三：\" class=\"headerlink\" title=\"步骤三：\"></a>步骤三：</h3><p>执行完步骤二之后，数据库就会有克隆表了。如果你还想要复制旧表中的数据的话，可以执行 INSERT INTO… SELECT 语句。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; INSERT INTO CLONE_TBL (tutorial_id,</span><br><span class=\"line\">    -&gt;                        tutorial_title,</span><br><span class=\"line\">    -&gt;                        tutorial_author,</span><br><span class=\"line\">    -&gt;                        submission_date)</span><br><span class=\"line\">    -&gt; SELECT tutorial_id,tutorial_title,</span><br><span class=\"line\">    -&gt;        tutorial_author,submission_date,</span><br><span class=\"line\">    -&gt; FROM TUTORIALS_TBL;</span><br><span class=\"line\">Query OK, 3 rows affected (0.07 sec)</span><br><span class=\"line\">Records: 3  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>\n\n<p>最终，你将如期拥有一张完全相同的克隆表。</p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><p>另一种完整复制表的方法:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE targetTable LIKE sourceTable;</span><br><span class=\"line\">INSERT INTO targetTable SELECT * FROM sourceTable;</span><br></pre></td></tr></table></figure>\n\n<p>或者：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create table targetTable  as  select  sourceTable</span><br></pre></td></tr></table></figure>\n\n<p>两者的区别如下：</p>\n<p><code>create table targetTable like sourceTable</code>，创建新表，约束和原表相同，只拷贝表结构，没有拷贝表的数据</p>\n<p><code>create table targetTable as select sourceTable</code>，创建新表，没有原表的完整约束，会把原表的数据拷贝一份</p>\n","excerpt":"","more":"<h2 id=\"SQL-克隆数据表\"><a href=\"#SQL-克隆数据表\" class=\"headerlink\" title=\"SQL 克隆数据表\"></a>SQL 克隆数据表</h2><hr>\n<p>有些情况下，你可能需要原样拷贝某张数据表。但是，CREATE TABLE 却不能满足你的需要，因为复制表必须和原表拥有一样的索引、默认值等等。</p>\n<p>如果你在使用 MySQL 关系型数据库管理系统的话，下面几个步骤可以帮你解决这个问题：</p>\n<ul>\n<li>使用 SHOW CREATE TABLE 命令来获取一条指定了原表的结构、索引等信息的 CREATE　TABLE 语句。</li>\n<li>将语句中的表名修改为克隆表的名字，然后执行该语句。这样你就可以得到一张与原表完全相同的克隆表了。</li>\n<li>如果你还想要复制表中的数据的话，请执行 INSERT INTO … SELECT 语句。</li>\n</ul>\n<h2 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h2><hr>\n<p>请尝试下面的示例，为 TUTORIALS_TBL 创建一张克隆表，其结构如下所示：</p>\n<h3 id=\"步骤一：\"><a href=\"#步骤一：\" class=\"headerlink\" title=\"步骤一：\"></a>步骤一：</h3><p>获取数据表的完整结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SHOW CREATE TABLE TUTORIALS_TBL \\G;</span><br><span class=\"line\">*************************** 1. row ***************************</span><br><span class=\"line\">       Table: TUTORIALS_TBL</span><br><span class=\"line\">Create Table: CREATE TABLE `TUTORIALS_TBL` (</span><br><span class=\"line\">  `tutorial_id` int(11) NOT NULL auto_increment,</span><br><span class=\"line\">  `tutorial_title` varchar(100) NOT NULL default &#x27;&#x27;,</span><br><span class=\"line\">  `tutorial_author` varchar(40) NOT NULL default &#x27;&#x27;,</span><br><span class=\"line\">  `submission_date` date default NULL,</span><br><span class=\"line\">  PRIMARY KEY  (`tutorial_id`),</span><br><span class=\"line\">  UNIQUE KEY `AUTHOR_INDEX` (`tutorial_author`)</span><br><span class=\"line\">) TYPE=MyISAM</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤二：\"><a href=\"#步骤二：\" class=\"headerlink\" title=\"步骤二：\"></a>步骤二：</h3><p>改变表名，创建新表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; CREATE TABLE `CLONE_TBL` (</span><br><span class=\"line\">  -&gt; `tutorial_id` int(11) NOT NULL auto_increment,</span><br><span class=\"line\">  -&gt; `tutorial_title` varchar(100) NOT NULL default &#x27;&#x27;,</span><br><span class=\"line\">  -&gt; `tutorial_author` varchar(40) NOT NULL default &#x27;&#x27;,</span><br><span class=\"line\">  -&gt; `submission_date` date default NULL,</span><br><span class=\"line\">  -&gt; PRIMARY KEY  (`tutorial_id`),</span><br><span class=\"line\">  -&gt; UNIQUE KEY `AUTHOR_INDEX` (`tutorial_author`)</span><br><span class=\"line\">  -&gt; ) TYPE=MyISAM;</span><br><span class=\"line\">Query OK, 0 rows affected (1.80 sec)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"步骤三：\"><a href=\"#步骤三：\" class=\"headerlink\" title=\"步骤三：\"></a>步骤三：</h3><p>执行完步骤二之后，数据库就会有克隆表了。如果你还想要复制旧表中的数据的话，可以执行 INSERT INTO… SELECT 语句。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; INSERT INTO CLONE_TBL (tutorial_id,</span><br><span class=\"line\">    -&gt;                        tutorial_title,</span><br><span class=\"line\">    -&gt;                        tutorial_author,</span><br><span class=\"line\">    -&gt;                        submission_date)</span><br><span class=\"line\">    -&gt; SELECT tutorial_id,tutorial_title,</span><br><span class=\"line\">    -&gt;        tutorial_author,submission_date,</span><br><span class=\"line\">    -&gt; FROM TUTORIALS_TBL;</span><br><span class=\"line\">Query OK, 3 rows affected (0.07 sec)</span><br><span class=\"line\">Records: 3  Duplicates: 0  Warnings: 0</span><br></pre></td></tr></table></figure>\n\n<p>最终，你将如期拥有一张完全相同的克隆表。</p>\n<h2 id=\"附录\"><a href=\"#附录\" class=\"headerlink\" title=\"附录\"></a>附录</h2><p>另一种完整复制表的方法:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE targetTable LIKE sourceTable;</span><br><span class=\"line\">INSERT INTO targetTable SELECT * FROM sourceTable;</span><br></pre></td></tr></table></figure>\n\n<p>或者：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create table targetTable  as  select  sourceTable</span><br></pre></td></tr></table></figure>\n\n<p>两者的区别如下：</p>\n<p><code>create table targetTable like sourceTable</code>，创建新表，约束和原表相同，只拷贝表结构，没有拷贝表的数据</p>\n<p><code>create table targetTable as select sourceTable</code>，创建新表，没有原表的完整约束，会把原表的数据拷贝一份</p>\n"},{"layout":"wiki","wiki":"sql","title":"SQL Constraint约束","order":41,"_content":"\nSQL约束用于指定表中数据的规则。\n\n## SQL 约束\n\n------\n\n约束是作用于数据表中列上的规则，用于限制表中数据的类型。约束的存在保证了数据库中数据的精确性和可靠性。\n\n约束有列级和表级之分，列级约束作用于单一的列，而表级约束作用于整张数据表。\n\n下面是 SQL 中常用的约束，这些约束虽然已经在关系型数据库管理系统一章中讨论过了，但是仍然值得在这里回顾一遍。\n\n- ：保证列中数据不能有 NULL 值\n- ：提供该列数据未指定时所采用的默认值\n- ：保证列中的所有数据各不相同\n- ：唯一标识数据表中的行/记录\n- ：唯一标识其他表中的一条行/记录\n- ：此约束保证列中的所有值满足某一条件\n- ：用于在数据库中快速创建或检索数据\n\n约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）。\n\n## SQL创建约束\n\n------\n\n当使用CREATE TABLE语句创建表时，或者在使用ALTER TABLE语句创建表之后，可以指定约束。\n\n语法\n\n```\nCREATE TABLE table_name (\n    column1 datatype constraint,\n    column2 datatype constraint,\n    column3 datatype constraint,\n    ....\n);\n```\n\n### SQL CREATE TABLE + CONSTRAINT 语法\n\n```\nCREATE TABLE table_name                \n(                \ncolumn_name1 data_type(size) constraint_name,                \ncolumn_name2 data_type(size) constraint_name,                \ncolumn_name3 data_type(size) constraint_name,                \n....                \n);\n```\n\n## 删除约束\n\n------\n\n任何现有约束都可以通过在 ALTER TABLE 命令中指定 DROP CONSTRAINT 选项的方法删除掉。\n\n例如，要去除 EMPLOYEES 表中的主键约束，可以使用下述命令：\n\n```\nALTER TABLE EMPLOYEES DROP CONSTRAINT EMPLOYEES_PK;\n```\n\n一些数据库实现可能提供了删除特定约束的快捷方法。例如，要在 Oracle 中删除一张表的主键约束，可以使用如下命令：\n\n```\nALTER TABLE EMPLOYEES DROP PRIMARY KEY;\n```\n\n某些数据库实现允许禁用约束。这样与其从数据库中永久删除约束，你可以只是临时禁用掉它，过一段时间后再重新启用。\n\n## 完整性约束\n\n------\n\n完整性约束用于保证关系型数据库中数据的精确性和一致性。对于关系型数据库来说，数据完整性由参照完整性（referential integrity，RI）来保证。\n\n有很多种约束可以起到参照完整性的作用，这些约束包括主键约束（Primary Key）、外键约束（Foreign Key）、唯一性约束（Unique Constraint）以及上面提到的其他约束。\n\n\n\n## SQL NOT NULL 约束\n\n------\n\n在默认的情况下，表的列接受 NULL 值。\n\nNOT NULL 约束强制列不接受 NULL 值。\n\nNOT NULL 约束强制字段始终包含值。这意味着，如果不向字段添加值，就无法插入新记录或者更新记录。\n\n下面的 SQL 强制 \"P_Id\" 列和 \"LastName\" 列不接受 NULL 值：\n\n```\nCREATE TABLE Persons\n(\nP_Id int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAddress varchar(255),\nCity varchar(255)\n)\n```\n\n\n\n## SQL UNIQUE 约束\n\n------\n\nUNIQUE 约束唯一标识数据库表中的每条记录。\n\nUNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。\n\nPRIMARY KEY 约束拥有自动定义的 UNIQUE 约束。\n\n请注意，每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束。\n\n## CREATE TABLE 时的 SQL UNIQUE 约束\n\n------\n\n下面的 SQL 在 \"Persons\" 表创建时在 \"P_Id\" 列上创建 UNIQUE 约束：\n\n**　MySQL：**\n\n```\nCREATE TABLE Persons                \n(                \nP_Id int NOT NULL,                \nLastName varchar(255) NOT NULL,                \nFirstName varchar(255),                \nAddress varchar(255),                \nCity varchar(255),                \nUNIQUE (P_Id)                \n)\n```\n\n**　SQL Server / Oracle / MS Access：**\n\n```\nCREATE TABLE Persons                \n(                \nP_Id int NOT NULL UNIQUE,                \nLastName varchar(255) NOT NULL,                \nFirstName varchar(255),                \nAddress varchar(255),                \nCity varchar(255)                \n)\n```\n\n如需命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束，请使用下面的 SQL 语法：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\n```\nCREATE TABLE Persons                \n(                \nP_Id int NOT NULL,                \nLastName varchar(255) NOT NULL,                \nFirstName varchar(255),                \nAddress varchar(255),                \nCity varchar(255),                \nCONSTRAINT uc_PersonID UNIQUE (P_Id,LastName)                \n)\n```\n\n## ALTER TABLE 时的 SQL UNIQUE 约束\n\n------\n\n当表已被创建时，如需在 \"P_Id\" 列创建 UNIQUE 约束，请使用下面的 SQL：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Persons                \nADD UNIQUE (P_Id)\n```\n\n如需命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束，请使用下面的 SQL 语法：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Persons                \nADD CONSTRAINT uc_PersonID UNIQUE (P_Id,LastName)\n```\n\n## 撤销 UNIQUE 约束\n\n------\n\n如需撤销 UNIQUE 约束，请使用下面的 SQL：\n\n**　MySQL：**\n\n```\nALTER TABLE Persons                \nDROP INDEX uc_PersonID\n```\n\n**　SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Persons                \nDROP CONSTRAINT uc_PersonID\n```\n\n\n\n## SQL PRIMARY KEY 约束\n\n------\n\nPRIMARY KEY 约束唯一标识数据库表中的每条记录。\n\n主键必须包含唯一的值。\n\n主键列不能包含 NULL 值。\n\n每个表都应该有一个主键，并且每个表只能有一个主键。\n\n## CREATE TABLE 时的 SQL PRIMARY KEY 约束rimary-key-约束)\n\n------\n\n下面的 SQL 在 \"Persons\" 表创建时在 \"P_Id\" 列上创建 PRIMARY KEY 约束：\n\n**　MySQL：**\n\n```\nCREATE TABLE Persons                \n(                \nP_Id int NOT NULL,                \nLastName varchar(255) NOT NULL,                \nFirstName varchar(255),                \nAddress varchar(255),                \nCity varchar(255),                \nPRIMARY KEY (P_Id)                \n)\n```\n\n**　SQL Server / Oracle / MS Access：**\n\n```\nCREATE TABLE Persons                \n(                \nP_Id int NOT NULL PRIMARY KEY,                \nLastName varchar(255) NOT NULL,                \nFirstName varchar(255),                \nAddress varchar(255),                \nCity varchar(255)                \n)\n```\n\n如需命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束，请使用下面的 SQL 语法：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\n```\nCREATE TABLE Persons                \n(                \nP_Id int NOT NULL,                \nLastName varchar(255) NOT NULL,                \nFirstName varchar(255),                \nAddress varchar(255),                \nCity varchar(255),                \nCONSTRAINT pk_PersonID PRIMARY KEY (P_Id,LastName)                \n)\n```\n\n**　注释：** 在上面的实例中，只有一个主键 PRIMARY KEY（pk_PersonID）。然而，pk_PersonID 的值是由两个列（P_Id 和 LastName）组成的。\n\n## ALTER TABLE 时的 SQL PRIMARY KEY 约束\n\n------\n\n当表已被创建时，如需在 \"P_Id\" 列创建 PRIMARY KEY 约束，请使用下面的 SQL：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\nsql\n\n```\nALTER TABLE Persons                \nADD PRIMARY KEY (P_Id)\n```\n\n如需命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束，请使用下面的 SQL 语法：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Persons                \nADD CONSTRAINT pk_PersonID PRIMARY KEY (P_Id,LastName)\n```\n\n**　注释：**如果您使用 ALTER TABLE 语句添加主键，必须把主键列声明为不包含 NULL 值（在表首次创建时）。\n\n## 撤销 PRIMARY KEY 约束\n\n------\n\n如需撤销 PRIMARY KEY 约束，请使用下面的 SQL：\n\n**　MySQL：**\n\n```\nALTER TABLE Persons                \nDROP PRIMARY KEY\n```\n\n**　SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Persons               \nDROP CONSTRAINT pk_PersonID\n```\n\n\n\n## SQL FOREIGN KEY 约束\n\n------\n\n一个表中的 FOREIGN KEY 指向另一个表中的 PRIMARY KEY。\n\n让我们通过一个实例来解释外键。请看下面两个表：\n\n\"Persons\" 表：\n\n| P_Id | LastName  | FirstName | Address      | City      |\n| :--- | :-------- | :-------- | :----------- | :-------- |\n| 1    | Hansen    | Ola       | Timoteivn 10 | Sandnes   |\n| 2    | Svendson  | Tove      | Borgvn 23    | Sandnes   |\n| 3    | Pettersen | Kari      | Storgt 20    | Stavanger |\n\n\"Orders\" 表：\n\n| O_Id | OrderNo | P_Id |\n| :--- | :------ | :--- |\n| 1    | 77895   | 3    |\n| 2    | 44678   | 3    |\n| 3    | 22456   | 2    |\n| 4    | 24562   | 1    |\n\n请注意，\"Orders\" 表中的 \"P_Id\" 列指向 \"Persons\" 表中的 \"P_Id\" 列。\n\n\"Persons\" 表中的 \"P_Id\" 列是 \"Persons\" 表中的 PRIMARY KEY。\n\n\"Orders\" 表中的 \"P_Id\" 列是 \"Orders\" 表中的 FOREIGN KEY。\n\nFOREIGN KEY 约束用于预防破坏表之间连接的行为。\n\nFOREIGN KEY 约束也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。\n\n## CREATE TABLE 时的 SQL FOREIGN KEY 约束reign-key-约束)\n\n------\n\n下面的 SQL 在 \"Orders\" 表创建时在 \"P_Id\" 列上创建 FOREIGN KEY 约束：\n\n**　MySQL：**\n\n```\nCREATE TABLE Orders                \n(                \nO_Id int NOT NULL,                \nOrderNo int NOT NULL,                \nP_Id int,               \nPRIMARY KEY (O_Id),                \nFOREIGN KEY (P_Id) REFERENCES Persons(P_Id)                \n)\n```\n\n**　SQL Server / Oracle / MS Access：**\n\n```\nCREATE TABLE Orders                \n(                \nO_Id int NOT NULL PRIMARY KEY,                \nOrderNo int NOT NULL,                \nP_Id int FOREIGN KEY REFERENCES Persons(P_Id)                \n)\n```\n\n如需命名 FOREIGN KEY 约束，并定义多个列的 FOREIGN KEY 约束，请使用下面的 SQL 语法：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\n```\nCREATE TABLE Orders                \n(                \nO_Id int NOT NULL,                \nOrderNo int NOT NULL,                \nP_Id int,                \nPRIMARY KEY (O_Id),                \nCONSTRAINT fk_PerOrders FOREIGN KEY (P_Id)                \nREFERENCES Persons(P_Id)                \n)\n```\n\n## ALTER TABLE 时的 SQL FOREIGN KEY 约束\n\n------\n\n当 \"Orders\" 表已被创建时，如需在 \"P_Id\" 列创建 FOREIGN KEY 约束，请使用下面的 SQL：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Orders                \nADD FOREIGN KEY (P_Id)                \nREFERENCES Persons(P_Id)\n```\n\n如需命名 FOREIGN KEY 约束，并定义多个列的 FOREIGN KEY 约束，请使用下面的 SQL 语法：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Orders                \nADD CONSTRAINT fk_PerOrders                \nFOREIGN KEY (P_Id)                \nREFERENCES Persons(P_Id)\n```\n\n## 撤销 FOREIGN KEY 约束\n\n------\n\n如需撤销 FOREIGN KEY 约束，请使用下面的 SQL：\n\n**　MySQL：**\n\n```\nALTER TABLE Orders                \nDROP FOREIGN KEY fk_PerOrders\n```\n\n**　SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Orders                \nDROP CONSTRAINT fk_PerOrders\n```\n\n\n\n## SQL DEFAULT 约束\n\n------\n\nDEFAULT 约束用于向列中插入默认值。\n\n如果没有规定其他的值，那么会将默认值添加到所有的新记录。\n\n## CREATE TABLE 时的 SQL DEFAULT 约束\n\n------\n\n下面的 SQL 在 \"Persons\" 表创建时在 \"City\" 列上创建 DEFAULT 约束：\n\n**　My SQL / SQL Server / Oracle / MS Access：**\n\n```\nCREATE TABLE Persons\n(\nP_Id int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAddress varchar(255),\nCity varchar(255) DEFAULT 'Sandnes'\n)\n```\n\n通过使用类似 GETDATE() 这样的函数，DEFAULT 约束也可以用于插入系统值：\n\n```\nCREATE TABLE Orders\n(\nO_Id int NOT NULL,\nOrderNo int NOT NULL,\nP_Id int,\nOrderDate date DEFAULT GETDATE()\n)\n```\n\n## ALTER TABLE 时的 SQL DEFAULT 约束\n\n------\n\n当表已被创建时，如需在 \"City\" 列创建 DEFAULT 约束，请使用下面的 SQL：\n\n**　MySQL：**\n\n```\nALTER TABLE Persons\nALTER City SET DEFAULT 'SANDNES'\n```\n\n**　SQL Server / MS Access：**\n\n```\nALTER TABLE Persons \nADD CONSTRAINT DF_Persons_City DEFAULT('SANDNES') FOR City\n\n--注释\n--Persons 为表名\n--City 为列名\n--DF_Persons_City 为我们创建的默认约束的名称 约束名称一般为:约束类型简称_表名_列名\n```\n\n**　Oracle：**\n\n```\nALTER TABLE Persons\nMODIFY City DEFAULT 'SANDNES'\n```\n\n## 撤销 DEFAULT 约束\n\n------\n\n如需撤销 DEFAULT 约束，请使用下面的 SQL：\n\n**　MySQL：**\n\n```\nALTER TABLE Persons\nALTER City DROP DEFAULT\n```\n\n**　SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Persons\nALTER COLUMN City DROP DEFAULT\n```\n\n\n\n## SQL CHECK 约束\n\n------\n\nCHECK 约束用于限制列中的值的范围。\n\n如果对单个列定义 CHECK 约束，那么该列只允许特定的值。\n\n如果对一个表定义 CHECK 约束，那么此约束会基于行中其他列的值在特定的列中对值进行限制。\n\n## CREATE TABLE 时的 SQL CHECK 约束\n\n------\n\n下面的 SQL 在 \"Persons\" 表创建时在 \"P_Id\" 列上创建 CHECK 约束。CHECK 约束规定 \"P_Id\" 列必须只包含大于 0 的整数。\n\n**　MySQL：**\n\n```\nCREATE TABLE Persons\n(\nP_Id int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAddress varchar(255),\nCity varchar(255),\nCHECK (P_Id>0)\n)\n```\n\n**　SQL Server / Oracle / MS Access：**\n\n```\nCREATE TABLE Persons\n(\nP_Id int NOT NULL CHECK (P_Id>0),\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAddress varchar(255),\nCity varchar(255)\n)\n```\n\n如需命名 CHECK 约束，并定义多个列的 CHECK 约束，请使用下面的 SQL 语法：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\n```\nCREATE TABLE Persons\n(\nP_Id int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAddress varchar(255),\nCity varchar(255),\nCONSTRAINT chk_Person CHECK (P_Id>0 AND City='Sandnes')\n)\n```\n\n## ALTER TABLE 时的 SQL CHECK 约束\n\n当表已被创建时，如需在 \"P_Id\" 列创建 CHECK 约束，请使用下面的 SQL：\n\n**　MySQL / SQL Server / Oracle / MS Access:**\n\n```\nALTER TABLE Persons\nADD CHECK (P_Id>0)\n```\n\n如需命名 CHECK 约束，并定义多个列的 CHECK 约束，请使用下面的 SQL 语法：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Persons\nADD CONSTRAINT chk_Person CHECK (P_Id>0 AND City='Sandnes')\n```\n\n## 撤销 CHECK 约束\n\n------\n\n如需撤销 CHECK 约束，请使用下面的 SQL：\n\n**　SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Persons\nDROP CONSTRAINT chk_Person\n```\n\n**　MySQL：**\n\n```\nALTER TABLE Persons\nDROP CHECK chk_Person\n```\n","source":"wiki/sql/sentence/constraint.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL Constraint约束\norder: 41\n---\n\nSQL约束用于指定表中数据的规则。\n\n## SQL 约束\n\n------\n\n约束是作用于数据表中列上的规则，用于限制表中数据的类型。约束的存在保证了数据库中数据的精确性和可靠性。\n\n约束有列级和表级之分，列级约束作用于单一的列，而表级约束作用于整张数据表。\n\n下面是 SQL 中常用的约束，这些约束虽然已经在关系型数据库管理系统一章中讨论过了，但是仍然值得在这里回顾一遍。\n\n- ：保证列中数据不能有 NULL 值\n- ：提供该列数据未指定时所采用的默认值\n- ：保证列中的所有数据各不相同\n- ：唯一标识数据表中的行/记录\n- ：唯一标识其他表中的一条行/记录\n- ：此约束保证列中的所有值满足某一条件\n- ：用于在数据库中快速创建或检索数据\n\n约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）。\n\n## SQL创建约束\n\n------\n\n当使用CREATE TABLE语句创建表时，或者在使用ALTER TABLE语句创建表之后，可以指定约束。\n\n语法\n\n```\nCREATE TABLE table_name (\n    column1 datatype constraint,\n    column2 datatype constraint,\n    column3 datatype constraint,\n    ....\n);\n```\n\n### SQL CREATE TABLE + CONSTRAINT 语法\n\n```\nCREATE TABLE table_name                \n(                \ncolumn_name1 data_type(size) constraint_name,                \ncolumn_name2 data_type(size) constraint_name,                \ncolumn_name3 data_type(size) constraint_name,                \n....                \n);\n```\n\n## 删除约束\n\n------\n\n任何现有约束都可以通过在 ALTER TABLE 命令中指定 DROP CONSTRAINT 选项的方法删除掉。\n\n例如，要去除 EMPLOYEES 表中的主键约束，可以使用下述命令：\n\n```\nALTER TABLE EMPLOYEES DROP CONSTRAINT EMPLOYEES_PK;\n```\n\n一些数据库实现可能提供了删除特定约束的快捷方法。例如，要在 Oracle 中删除一张表的主键约束，可以使用如下命令：\n\n```\nALTER TABLE EMPLOYEES DROP PRIMARY KEY;\n```\n\n某些数据库实现允许禁用约束。这样与其从数据库中永久删除约束，你可以只是临时禁用掉它，过一段时间后再重新启用。\n\n## 完整性约束\n\n------\n\n完整性约束用于保证关系型数据库中数据的精确性和一致性。对于关系型数据库来说，数据完整性由参照完整性（referential integrity，RI）来保证。\n\n有很多种约束可以起到参照完整性的作用，这些约束包括主键约束（Primary Key）、外键约束（Foreign Key）、唯一性约束（Unique Constraint）以及上面提到的其他约束。\n\n\n\n## SQL NOT NULL 约束\n\n------\n\n在默认的情况下，表的列接受 NULL 值。\n\nNOT NULL 约束强制列不接受 NULL 值。\n\nNOT NULL 约束强制字段始终包含值。这意味着，如果不向字段添加值，就无法插入新记录或者更新记录。\n\n下面的 SQL 强制 \"P_Id\" 列和 \"LastName\" 列不接受 NULL 值：\n\n```\nCREATE TABLE Persons\n(\nP_Id int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAddress varchar(255),\nCity varchar(255)\n)\n```\n\n\n\n## SQL UNIQUE 约束\n\n------\n\nUNIQUE 约束唯一标识数据库表中的每条记录。\n\nUNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。\n\nPRIMARY KEY 约束拥有自动定义的 UNIQUE 约束。\n\n请注意，每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束。\n\n## CREATE TABLE 时的 SQL UNIQUE 约束\n\n------\n\n下面的 SQL 在 \"Persons\" 表创建时在 \"P_Id\" 列上创建 UNIQUE 约束：\n\n**　MySQL：**\n\n```\nCREATE TABLE Persons                \n(                \nP_Id int NOT NULL,                \nLastName varchar(255) NOT NULL,                \nFirstName varchar(255),                \nAddress varchar(255),                \nCity varchar(255),                \nUNIQUE (P_Id)                \n)\n```\n\n**　SQL Server / Oracle / MS Access：**\n\n```\nCREATE TABLE Persons                \n(                \nP_Id int NOT NULL UNIQUE,                \nLastName varchar(255) NOT NULL,                \nFirstName varchar(255),                \nAddress varchar(255),                \nCity varchar(255)                \n)\n```\n\n如需命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束，请使用下面的 SQL 语法：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\n```\nCREATE TABLE Persons                \n(                \nP_Id int NOT NULL,                \nLastName varchar(255) NOT NULL,                \nFirstName varchar(255),                \nAddress varchar(255),                \nCity varchar(255),                \nCONSTRAINT uc_PersonID UNIQUE (P_Id,LastName)                \n)\n```\n\n## ALTER TABLE 时的 SQL UNIQUE 约束\n\n------\n\n当表已被创建时，如需在 \"P_Id\" 列创建 UNIQUE 约束，请使用下面的 SQL：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Persons                \nADD UNIQUE (P_Id)\n```\n\n如需命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束，请使用下面的 SQL 语法：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Persons                \nADD CONSTRAINT uc_PersonID UNIQUE (P_Id,LastName)\n```\n\n## 撤销 UNIQUE 约束\n\n------\n\n如需撤销 UNIQUE 约束，请使用下面的 SQL：\n\n**　MySQL：**\n\n```\nALTER TABLE Persons                \nDROP INDEX uc_PersonID\n```\n\n**　SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Persons                \nDROP CONSTRAINT uc_PersonID\n```\n\n\n\n## SQL PRIMARY KEY 约束\n\n------\n\nPRIMARY KEY 约束唯一标识数据库表中的每条记录。\n\n主键必须包含唯一的值。\n\n主键列不能包含 NULL 值。\n\n每个表都应该有一个主键，并且每个表只能有一个主键。\n\n## CREATE TABLE 时的 SQL PRIMARY KEY 约束rimary-key-约束)\n\n------\n\n下面的 SQL 在 \"Persons\" 表创建时在 \"P_Id\" 列上创建 PRIMARY KEY 约束：\n\n**　MySQL：**\n\n```\nCREATE TABLE Persons                \n(                \nP_Id int NOT NULL,                \nLastName varchar(255) NOT NULL,                \nFirstName varchar(255),                \nAddress varchar(255),                \nCity varchar(255),                \nPRIMARY KEY (P_Id)                \n)\n```\n\n**　SQL Server / Oracle / MS Access：**\n\n```\nCREATE TABLE Persons                \n(                \nP_Id int NOT NULL PRIMARY KEY,                \nLastName varchar(255) NOT NULL,                \nFirstName varchar(255),                \nAddress varchar(255),                \nCity varchar(255)                \n)\n```\n\n如需命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束，请使用下面的 SQL 语法：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\n```\nCREATE TABLE Persons                \n(                \nP_Id int NOT NULL,                \nLastName varchar(255) NOT NULL,                \nFirstName varchar(255),                \nAddress varchar(255),                \nCity varchar(255),                \nCONSTRAINT pk_PersonID PRIMARY KEY (P_Id,LastName)                \n)\n```\n\n**　注释：** 在上面的实例中，只有一个主键 PRIMARY KEY（pk_PersonID）。然而，pk_PersonID 的值是由两个列（P_Id 和 LastName）组成的。\n\n## ALTER TABLE 时的 SQL PRIMARY KEY 约束\n\n------\n\n当表已被创建时，如需在 \"P_Id\" 列创建 PRIMARY KEY 约束，请使用下面的 SQL：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\nsql\n\n```\nALTER TABLE Persons                \nADD PRIMARY KEY (P_Id)\n```\n\n如需命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束，请使用下面的 SQL 语法：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Persons                \nADD CONSTRAINT pk_PersonID PRIMARY KEY (P_Id,LastName)\n```\n\n**　注释：**如果您使用 ALTER TABLE 语句添加主键，必须把主键列声明为不包含 NULL 值（在表首次创建时）。\n\n## 撤销 PRIMARY KEY 约束\n\n------\n\n如需撤销 PRIMARY KEY 约束，请使用下面的 SQL：\n\n**　MySQL：**\n\n```\nALTER TABLE Persons                \nDROP PRIMARY KEY\n```\n\n**　SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Persons               \nDROP CONSTRAINT pk_PersonID\n```\n\n\n\n## SQL FOREIGN KEY 约束\n\n------\n\n一个表中的 FOREIGN KEY 指向另一个表中的 PRIMARY KEY。\n\n让我们通过一个实例来解释外键。请看下面两个表：\n\n\"Persons\" 表：\n\n| P_Id | LastName  | FirstName | Address      | City      |\n| :--- | :-------- | :-------- | :----------- | :-------- |\n| 1    | Hansen    | Ola       | Timoteivn 10 | Sandnes   |\n| 2    | Svendson  | Tove      | Borgvn 23    | Sandnes   |\n| 3    | Pettersen | Kari      | Storgt 20    | Stavanger |\n\n\"Orders\" 表：\n\n| O_Id | OrderNo | P_Id |\n| :--- | :------ | :--- |\n| 1    | 77895   | 3    |\n| 2    | 44678   | 3    |\n| 3    | 22456   | 2    |\n| 4    | 24562   | 1    |\n\n请注意，\"Orders\" 表中的 \"P_Id\" 列指向 \"Persons\" 表中的 \"P_Id\" 列。\n\n\"Persons\" 表中的 \"P_Id\" 列是 \"Persons\" 表中的 PRIMARY KEY。\n\n\"Orders\" 表中的 \"P_Id\" 列是 \"Orders\" 表中的 FOREIGN KEY。\n\nFOREIGN KEY 约束用于预防破坏表之间连接的行为。\n\nFOREIGN KEY 约束也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。\n\n## CREATE TABLE 时的 SQL FOREIGN KEY 约束reign-key-约束)\n\n------\n\n下面的 SQL 在 \"Orders\" 表创建时在 \"P_Id\" 列上创建 FOREIGN KEY 约束：\n\n**　MySQL：**\n\n```\nCREATE TABLE Orders                \n(                \nO_Id int NOT NULL,                \nOrderNo int NOT NULL,                \nP_Id int,               \nPRIMARY KEY (O_Id),                \nFOREIGN KEY (P_Id) REFERENCES Persons(P_Id)                \n)\n```\n\n**　SQL Server / Oracle / MS Access：**\n\n```\nCREATE TABLE Orders                \n(                \nO_Id int NOT NULL PRIMARY KEY,                \nOrderNo int NOT NULL,                \nP_Id int FOREIGN KEY REFERENCES Persons(P_Id)                \n)\n```\n\n如需命名 FOREIGN KEY 约束，并定义多个列的 FOREIGN KEY 约束，请使用下面的 SQL 语法：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\n```\nCREATE TABLE Orders                \n(                \nO_Id int NOT NULL,                \nOrderNo int NOT NULL,                \nP_Id int,                \nPRIMARY KEY (O_Id),                \nCONSTRAINT fk_PerOrders FOREIGN KEY (P_Id)                \nREFERENCES Persons(P_Id)                \n)\n```\n\n## ALTER TABLE 时的 SQL FOREIGN KEY 约束\n\n------\n\n当 \"Orders\" 表已被创建时，如需在 \"P_Id\" 列创建 FOREIGN KEY 约束，请使用下面的 SQL：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Orders                \nADD FOREIGN KEY (P_Id)                \nREFERENCES Persons(P_Id)\n```\n\n如需命名 FOREIGN KEY 约束，并定义多个列的 FOREIGN KEY 约束，请使用下面的 SQL 语法：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Orders                \nADD CONSTRAINT fk_PerOrders                \nFOREIGN KEY (P_Id)                \nREFERENCES Persons(P_Id)\n```\n\n## 撤销 FOREIGN KEY 约束\n\n------\n\n如需撤销 FOREIGN KEY 约束，请使用下面的 SQL：\n\n**　MySQL：**\n\n```\nALTER TABLE Orders                \nDROP FOREIGN KEY fk_PerOrders\n```\n\n**　SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Orders                \nDROP CONSTRAINT fk_PerOrders\n```\n\n\n\n## SQL DEFAULT 约束\n\n------\n\nDEFAULT 约束用于向列中插入默认值。\n\n如果没有规定其他的值，那么会将默认值添加到所有的新记录。\n\n## CREATE TABLE 时的 SQL DEFAULT 约束\n\n------\n\n下面的 SQL 在 \"Persons\" 表创建时在 \"City\" 列上创建 DEFAULT 约束：\n\n**　My SQL / SQL Server / Oracle / MS Access：**\n\n```\nCREATE TABLE Persons\n(\nP_Id int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAddress varchar(255),\nCity varchar(255) DEFAULT 'Sandnes'\n)\n```\n\n通过使用类似 GETDATE() 这样的函数，DEFAULT 约束也可以用于插入系统值：\n\n```\nCREATE TABLE Orders\n(\nO_Id int NOT NULL,\nOrderNo int NOT NULL,\nP_Id int,\nOrderDate date DEFAULT GETDATE()\n)\n```\n\n## ALTER TABLE 时的 SQL DEFAULT 约束\n\n------\n\n当表已被创建时，如需在 \"City\" 列创建 DEFAULT 约束，请使用下面的 SQL：\n\n**　MySQL：**\n\n```\nALTER TABLE Persons\nALTER City SET DEFAULT 'SANDNES'\n```\n\n**　SQL Server / MS Access：**\n\n```\nALTER TABLE Persons \nADD CONSTRAINT DF_Persons_City DEFAULT('SANDNES') FOR City\n\n--注释\n--Persons 为表名\n--City 为列名\n--DF_Persons_City 为我们创建的默认约束的名称 约束名称一般为:约束类型简称_表名_列名\n```\n\n**　Oracle：**\n\n```\nALTER TABLE Persons\nMODIFY City DEFAULT 'SANDNES'\n```\n\n## 撤销 DEFAULT 约束\n\n------\n\n如需撤销 DEFAULT 约束，请使用下面的 SQL：\n\n**　MySQL：**\n\n```\nALTER TABLE Persons\nALTER City DROP DEFAULT\n```\n\n**　SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Persons\nALTER COLUMN City DROP DEFAULT\n```\n\n\n\n## SQL CHECK 约束\n\n------\n\nCHECK 约束用于限制列中的值的范围。\n\n如果对单个列定义 CHECK 约束，那么该列只允许特定的值。\n\n如果对一个表定义 CHECK 约束，那么此约束会基于行中其他列的值在特定的列中对值进行限制。\n\n## CREATE TABLE 时的 SQL CHECK 约束\n\n------\n\n下面的 SQL 在 \"Persons\" 表创建时在 \"P_Id\" 列上创建 CHECK 约束。CHECK 约束规定 \"P_Id\" 列必须只包含大于 0 的整数。\n\n**　MySQL：**\n\n```\nCREATE TABLE Persons\n(\nP_Id int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAddress varchar(255),\nCity varchar(255),\nCHECK (P_Id>0)\n)\n```\n\n**　SQL Server / Oracle / MS Access：**\n\n```\nCREATE TABLE Persons\n(\nP_Id int NOT NULL CHECK (P_Id>0),\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAddress varchar(255),\nCity varchar(255)\n)\n```\n\n如需命名 CHECK 约束，并定义多个列的 CHECK 约束，请使用下面的 SQL 语法：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\n```\nCREATE TABLE Persons\n(\nP_Id int NOT NULL,\nLastName varchar(255) NOT NULL,\nFirstName varchar(255),\nAddress varchar(255),\nCity varchar(255),\nCONSTRAINT chk_Person CHECK (P_Id>0 AND City='Sandnes')\n)\n```\n\n## ALTER TABLE 时的 SQL CHECK 约束\n\n当表已被创建时，如需在 \"P_Id\" 列创建 CHECK 约束，请使用下面的 SQL：\n\n**　MySQL / SQL Server / Oracle / MS Access:**\n\n```\nALTER TABLE Persons\nADD CHECK (P_Id>0)\n```\n\n如需命名 CHECK 约束，并定义多个列的 CHECK 约束，请使用下面的 SQL 语法：\n\n**　MySQL / SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Persons\nADD CONSTRAINT chk_Person CHECK (P_Id>0 AND City='Sandnes')\n```\n\n## 撤销 CHECK 约束\n\n------\n\n如需撤销 CHECK 约束，请使用下面的 SQL：\n\n**　SQL Server / Oracle / MS Access：**\n\n```\nALTER TABLE Persons\nDROP CONSTRAINT chk_Person\n```\n\n**　MySQL：**\n\n```\nALTER TABLE Persons\nDROP CHECK chk_Person\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T02:16:00.829Z","path":"wiki/sql/sentence/constraint.html","comments":1,"_id":"cmbreopik000865x00v84af18","content":"<p>SQL约束用于指定表中数据的规则。</p>\n<h2 id=\"SQL-约束\"><a href=\"#SQL-约束\" class=\"headerlink\" title=\"SQL 约束\"></a>SQL 约束</h2><hr>\n<p>约束是作用于数据表中列上的规则，用于限制表中数据的类型。约束的存在保证了数据库中数据的精确性和可靠性。</p>\n<p>约束有列级和表级之分，列级约束作用于单一的列，而表级约束作用于整张数据表。</p>\n<p>下面是 SQL 中常用的约束，这些约束虽然已经在关系型数据库管理系统一章中讨论过了，但是仍然值得在这里回顾一遍。</p>\n<ul>\n<li>：保证列中数据不能有 NULL 值</li>\n<li>：提供该列数据未指定时所采用的默认值</li>\n<li>：保证列中的所有数据各不相同</li>\n<li>：唯一标识数据表中的行&#x2F;记录</li>\n<li>：唯一标识其他表中的一条行&#x2F;记录</li>\n<li>：此约束保证列中的所有值满足某一条件</li>\n<li>：用于在数据库中快速创建或检索数据</li>\n</ul>\n<p>约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）。</p>\n<h2 id=\"SQL创建约束\"><a href=\"#SQL创建约束\" class=\"headerlink\" title=\"SQL创建约束\"></a>SQL创建约束</h2><hr>\n<p>当使用CREATE TABLE语句创建表时，或者在使用ALTER TABLE语句创建表之后，可以指定约束。</p>\n<p>语法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE table_name (</span><br><span class=\"line\">    column1 datatype constraint,</span><br><span class=\"line\">    column2 datatype constraint,</span><br><span class=\"line\">    column3 datatype constraint,</span><br><span class=\"line\">    ....</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SQL-CREATE-TABLE-CONSTRAINT-语法\"><a href=\"#SQL-CREATE-TABLE-CONSTRAINT-语法\" class=\"headerlink\" title=\"SQL CREATE TABLE + CONSTRAINT 语法\"></a>SQL CREATE TABLE + CONSTRAINT 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE table_name                </span><br><span class=\"line\">(                </span><br><span class=\"line\">column_name1 data_type(size) constraint_name,                </span><br><span class=\"line\">column_name2 data_type(size) constraint_name,                </span><br><span class=\"line\">column_name3 data_type(size) constraint_name,                </span><br><span class=\"line\">....                </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除约束\"><a href=\"#删除约束\" class=\"headerlink\" title=\"删除约束\"></a>删除约束</h2><hr>\n<p>任何现有约束都可以通过在 ALTER TABLE 命令中指定 DROP CONSTRAINT 选项的方法删除掉。</p>\n<p>例如，要去除 EMPLOYEES 表中的主键约束，可以使用下述命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE EMPLOYEES DROP CONSTRAINT EMPLOYEES_PK;</span><br></pre></td></tr></table></figure>\n\n<p>一些数据库实现可能提供了删除特定约束的快捷方法。例如，要在 Oracle 中删除一张表的主键约束，可以使用如下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE EMPLOYEES DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure>\n\n<p>某些数据库实现允许禁用约束。这样与其从数据库中永久删除约束，你可以只是临时禁用掉它，过一段时间后再重新启用。</p>\n<h2 id=\"完整性约束\"><a href=\"#完整性约束\" class=\"headerlink\" title=\"完整性约束\"></a>完整性约束</h2><hr>\n<p>完整性约束用于保证关系型数据库中数据的精确性和一致性。对于关系型数据库来说，数据完整性由参照完整性（referential integrity，RI）来保证。</p>\n<p>有很多种约束可以起到参照完整性的作用，这些约束包括主键约束（Primary Key）、外键约束（Foreign Key）、唯一性约束（Unique Constraint）以及上面提到的其他约束。</p>\n<h2 id=\"SQL-NOT-NULL-约束\"><a href=\"#SQL-NOT-NULL-约束\" class=\"headerlink\" title=\"SQL NOT NULL 约束\"></a>SQL NOT NULL 约束</h2><hr>\n<p>在默认的情况下，表的列接受 NULL 值。</p>\n<p>NOT NULL 约束强制列不接受 NULL 值。</p>\n<p>NOT NULL 约束强制字段始终包含值。这意味着，如果不向字段添加值，就无法插入新记录或者更新记录。</p>\n<p>下面的 SQL 强制 “P_Id” 列和 “LastName” 列不接受 NULL 值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons</span><br><span class=\"line\">(</span><br><span class=\"line\">P_Id int NOT NULL,</span><br><span class=\"line\">LastName varchar(255) NOT NULL,</span><br><span class=\"line\">FirstName varchar(255),</span><br><span class=\"line\">Address varchar(255),</span><br><span class=\"line\">City varchar(255)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"SQL-UNIQUE-约束\"><a href=\"#SQL-UNIQUE-约束\" class=\"headerlink\" title=\"SQL UNIQUE 约束\"></a>SQL UNIQUE 约束</h2><hr>\n<p>UNIQUE 约束唯一标识数据库表中的每条记录。</p>\n<p>UNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。</p>\n<p>PRIMARY KEY 约束拥有自动定义的 UNIQUE 约束。</p>\n<p>请注意，每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束。</p>\n<h2 id=\"CREATE-TABLE-时的-SQL-UNIQUE-约束\"><a href=\"#CREATE-TABLE-时的-SQL-UNIQUE-约束\" class=\"headerlink\" title=\"CREATE TABLE 时的 SQL UNIQUE 约束\"></a>CREATE TABLE 时的 SQL UNIQUE 约束</h2><hr>\n<p>下面的 SQL 在 “Persons” 表创建时在 “P_Id” 列上创建 UNIQUE 约束：</p>\n<p>**　MySQL：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons                </span><br><span class=\"line\">(                </span><br><span class=\"line\">P_Id int NOT NULL,                </span><br><span class=\"line\">LastName varchar(255) NOT NULL,                </span><br><span class=\"line\">FirstName varchar(255),                </span><br><span class=\"line\">Address varchar(255),                </span><br><span class=\"line\">City varchar(255),                </span><br><span class=\"line\">UNIQUE (P_Id)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>**　SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons                </span><br><span class=\"line\">(                </span><br><span class=\"line\">P_Id int NOT NULL UNIQUE,                </span><br><span class=\"line\">LastName varchar(255) NOT NULL,                </span><br><span class=\"line\">FirstName varchar(255),                </span><br><span class=\"line\">Address varchar(255),                </span><br><span class=\"line\">City varchar(255)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>如需命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束，请使用下面的 SQL 语法：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons                </span><br><span class=\"line\">(                </span><br><span class=\"line\">P_Id int NOT NULL,                </span><br><span class=\"line\">LastName varchar(255) NOT NULL,                </span><br><span class=\"line\">FirstName varchar(255),                </span><br><span class=\"line\">Address varchar(255),                </span><br><span class=\"line\">City varchar(255),                </span><br><span class=\"line\">CONSTRAINT uc_PersonID UNIQUE (P_Id,LastName)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ALTER-TABLE-时的-SQL-UNIQUE-约束\"><a href=\"#ALTER-TABLE-时的-SQL-UNIQUE-约束\" class=\"headerlink\" title=\"ALTER TABLE 时的 SQL UNIQUE 约束\"></a>ALTER TABLE 时的 SQL UNIQUE 约束</h2><hr>\n<p>当表已被创建时，如需在 “P_Id” 列创建 UNIQUE 约束，请使用下面的 SQL：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons                </span><br><span class=\"line\">ADD UNIQUE (P_Id)</span><br></pre></td></tr></table></figure>\n\n<p>如需命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束，请使用下面的 SQL 语法：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons                </span><br><span class=\"line\">ADD CONSTRAINT uc_PersonID UNIQUE (P_Id,LastName)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"撤销-UNIQUE-约束\"><a href=\"#撤销-UNIQUE-约束\" class=\"headerlink\" title=\"撤销 UNIQUE 约束\"></a>撤销 UNIQUE 约束</h2><hr>\n<p>如需撤销 UNIQUE 约束，请使用下面的 SQL：</p>\n<p>**　MySQL：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons                </span><br><span class=\"line\">DROP INDEX uc_PersonID</span><br></pre></td></tr></table></figure>\n\n<p>**　SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons                </span><br><span class=\"line\">DROP CONSTRAINT uc_PersonID</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"SQL-PRIMARY-KEY-约束\"><a href=\"#SQL-PRIMARY-KEY-约束\" class=\"headerlink\" title=\"SQL PRIMARY KEY 约束\"></a>SQL PRIMARY KEY 约束</h2><hr>\n<p>PRIMARY KEY 约束唯一标识数据库表中的每条记录。</p>\n<p>主键必须包含唯一的值。</p>\n<p>主键列不能包含 NULL 值。</p>\n<p>每个表都应该有一个主键，并且每个表只能有一个主键。</p>\n<h2 id=\"CREATE-TABLE-时的-SQL-PRIMARY-KEY-约束rimary-key-约束\"><a href=\"#CREATE-TABLE-时的-SQL-PRIMARY-KEY-约束rimary-key-约束\" class=\"headerlink\" title=\"CREATE TABLE 时的 SQL PRIMARY KEY 约束rimary-key-约束)\"></a>CREATE TABLE 时的 SQL PRIMARY KEY 约束rimary-key-约束)</h2><hr>\n<p>下面的 SQL 在 “Persons” 表创建时在 “P_Id” 列上创建 PRIMARY KEY 约束：</p>\n<p>**　MySQL：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons                </span><br><span class=\"line\">(                </span><br><span class=\"line\">P_Id int NOT NULL,                </span><br><span class=\"line\">LastName varchar(255) NOT NULL,                </span><br><span class=\"line\">FirstName varchar(255),                </span><br><span class=\"line\">Address varchar(255),                </span><br><span class=\"line\">City varchar(255),                </span><br><span class=\"line\">PRIMARY KEY (P_Id)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>**　SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons                </span><br><span class=\"line\">(                </span><br><span class=\"line\">P_Id int NOT NULL PRIMARY KEY,                </span><br><span class=\"line\">LastName varchar(255) NOT NULL,                </span><br><span class=\"line\">FirstName varchar(255),                </span><br><span class=\"line\">Address varchar(255),                </span><br><span class=\"line\">City varchar(255)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>如需命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束，请使用下面的 SQL 语法：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons                </span><br><span class=\"line\">(                </span><br><span class=\"line\">P_Id int NOT NULL,                </span><br><span class=\"line\">LastName varchar(255) NOT NULL,                </span><br><span class=\"line\">FirstName varchar(255),                </span><br><span class=\"line\">Address varchar(255),                </span><br><span class=\"line\">City varchar(255),                </span><br><span class=\"line\">CONSTRAINT pk_PersonID PRIMARY KEY (P_Id,LastName)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>**　注释：** 在上面的实例中，只有一个主键 PRIMARY KEY（pk_PersonID）。然而，pk_PersonID 的值是由两个列（P_Id 和 LastName）组成的。</p>\n<h2 id=\"ALTER-TABLE-时的-SQL-PRIMARY-KEY-约束\"><a href=\"#ALTER-TABLE-时的-SQL-PRIMARY-KEY-约束\" class=\"headerlink\" title=\"ALTER TABLE 时的 SQL PRIMARY KEY 约束\"></a>ALTER TABLE 时的 SQL PRIMARY KEY 约束</h2><hr>\n<p>当表已被创建时，如需在 “P_Id” 列创建 PRIMARY KEY 约束，请使用下面的 SQL：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<p>sql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons                </span><br><span class=\"line\">ADD PRIMARY KEY (P_Id)</span><br></pre></td></tr></table></figure>\n\n<p>如需命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束，请使用下面的 SQL 语法：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons                </span><br><span class=\"line\">ADD CONSTRAINT pk_PersonID PRIMARY KEY (P_Id,LastName)</span><br></pre></td></tr></table></figure>\n\n<p>**　注释：**如果您使用 ALTER TABLE 语句添加主键，必须把主键列声明为不包含 NULL 值（在表首次创建时）。</p>\n<h2 id=\"撤销-PRIMARY-KEY-约束\"><a href=\"#撤销-PRIMARY-KEY-约束\" class=\"headerlink\" title=\"撤销 PRIMARY KEY 约束\"></a>撤销 PRIMARY KEY 约束</h2><hr>\n<p>如需撤销 PRIMARY KEY 约束，请使用下面的 SQL：</p>\n<p>**　MySQL：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons                </span><br><span class=\"line\">DROP PRIMARY KEY</span><br></pre></td></tr></table></figure>\n\n<p>**　SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons               </span><br><span class=\"line\">DROP CONSTRAINT pk_PersonID</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"SQL-FOREIGN-KEY-约束\"><a href=\"#SQL-FOREIGN-KEY-约束\" class=\"headerlink\" title=\"SQL FOREIGN KEY 约束\"></a>SQL FOREIGN KEY 约束</h2><hr>\n<p>一个表中的 FOREIGN KEY 指向另一个表中的 PRIMARY KEY。</p>\n<p>让我们通过一个实例来解释外键。请看下面两个表：</p>\n<p>“Persons” 表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">P_Id</th>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Hansen</td>\n<td align=\"left\">Ola</td>\n<td align=\"left\">Timoteivn 10</td>\n<td align=\"left\">Sandnes</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Svendson</td>\n<td align=\"left\">Tove</td>\n<td align=\"left\">Borgvn 23</td>\n<td align=\"left\">Sandnes</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Pettersen</td>\n<td align=\"left\">Kari</td>\n<td align=\"left\">Storgt 20</td>\n<td align=\"left\">Stavanger</td>\n</tr>\n</tbody></table>\n<p>“Orders” 表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">O_Id</th>\n<th align=\"left\">OrderNo</th>\n<th align=\"left\">P_Id</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">77895</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">44678</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">22456</td>\n<td align=\"left\">2</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">24562</td>\n<td align=\"left\">1</td>\n</tr>\n</tbody></table>\n<p>请注意，”Orders” 表中的 “P_Id” 列指向 “Persons” 表中的 “P_Id” 列。</p>\n<p>“Persons” 表中的 “P_Id” 列是 “Persons” 表中的 PRIMARY KEY。</p>\n<p>“Orders” 表中的 “P_Id” 列是 “Orders” 表中的 FOREIGN KEY。</p>\n<p>FOREIGN KEY 约束用于预防破坏表之间连接的行为。</p>\n<p>FOREIGN KEY 约束也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。</p>\n<h2 id=\"CREATE-TABLE-时的-SQL-FOREIGN-KEY-约束reign-key-约束\"><a href=\"#CREATE-TABLE-时的-SQL-FOREIGN-KEY-约束reign-key-约束\" class=\"headerlink\" title=\"CREATE TABLE 时的 SQL FOREIGN KEY 约束reign-key-约束)\"></a>CREATE TABLE 时的 SQL FOREIGN KEY 约束reign-key-约束)</h2><hr>\n<p>下面的 SQL 在 “Orders” 表创建时在 “P_Id” 列上创建 FOREIGN KEY 约束：</p>\n<p>**　MySQL：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Orders                </span><br><span class=\"line\">(                </span><br><span class=\"line\">O_Id int NOT NULL,                </span><br><span class=\"line\">OrderNo int NOT NULL,                </span><br><span class=\"line\">P_Id int,               </span><br><span class=\"line\">PRIMARY KEY (O_Id),                </span><br><span class=\"line\">FOREIGN KEY (P_Id) REFERENCES Persons(P_Id)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>**　SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Orders                </span><br><span class=\"line\">(                </span><br><span class=\"line\">O_Id int NOT NULL PRIMARY KEY,                </span><br><span class=\"line\">OrderNo int NOT NULL,                </span><br><span class=\"line\">P_Id int FOREIGN KEY REFERENCES Persons(P_Id)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>如需命名 FOREIGN KEY 约束，并定义多个列的 FOREIGN KEY 约束，请使用下面的 SQL 语法：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Orders                </span><br><span class=\"line\">(                </span><br><span class=\"line\">O_Id int NOT NULL,                </span><br><span class=\"line\">OrderNo int NOT NULL,                </span><br><span class=\"line\">P_Id int,                </span><br><span class=\"line\">PRIMARY KEY (O_Id),                </span><br><span class=\"line\">CONSTRAINT fk_PerOrders FOREIGN KEY (P_Id)                </span><br><span class=\"line\">REFERENCES Persons(P_Id)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ALTER-TABLE-时的-SQL-FOREIGN-KEY-约束\"><a href=\"#ALTER-TABLE-时的-SQL-FOREIGN-KEY-约束\" class=\"headerlink\" title=\"ALTER TABLE 时的 SQL FOREIGN KEY 约束\"></a>ALTER TABLE 时的 SQL FOREIGN KEY 约束</h2><hr>\n<p>当 “Orders” 表已被创建时，如需在 “P_Id” 列创建 FOREIGN KEY 约束，请使用下面的 SQL：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Orders                </span><br><span class=\"line\">ADD FOREIGN KEY (P_Id)                </span><br><span class=\"line\">REFERENCES Persons(P_Id)</span><br></pre></td></tr></table></figure>\n\n<p>如需命名 FOREIGN KEY 约束，并定义多个列的 FOREIGN KEY 约束，请使用下面的 SQL 语法：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Orders                </span><br><span class=\"line\">ADD CONSTRAINT fk_PerOrders                </span><br><span class=\"line\">FOREIGN KEY (P_Id)                </span><br><span class=\"line\">REFERENCES Persons(P_Id)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"撤销-FOREIGN-KEY-约束\"><a href=\"#撤销-FOREIGN-KEY-约束\" class=\"headerlink\" title=\"撤销 FOREIGN KEY 约束\"></a>撤销 FOREIGN KEY 约束</h2><hr>\n<p>如需撤销 FOREIGN KEY 约束，请使用下面的 SQL：</p>\n<p>**　MySQL：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Orders                </span><br><span class=\"line\">DROP FOREIGN KEY fk_PerOrders</span><br></pre></td></tr></table></figure>\n\n<p>**　SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Orders                </span><br><span class=\"line\">DROP CONSTRAINT fk_PerOrders</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"SQL-DEFAULT-约束\"><a href=\"#SQL-DEFAULT-约束\" class=\"headerlink\" title=\"SQL DEFAULT 约束\"></a>SQL DEFAULT 约束</h2><hr>\n<p>DEFAULT 约束用于向列中插入默认值。</p>\n<p>如果没有规定其他的值，那么会将默认值添加到所有的新记录。</p>\n<h2 id=\"CREATE-TABLE-时的-SQL-DEFAULT-约束\"><a href=\"#CREATE-TABLE-时的-SQL-DEFAULT-约束\" class=\"headerlink\" title=\"CREATE TABLE 时的 SQL DEFAULT 约束\"></a>CREATE TABLE 时的 SQL DEFAULT 约束</h2><hr>\n<p>下面的 SQL 在 “Persons” 表创建时在 “City” 列上创建 DEFAULT 约束：</p>\n<p>**　My SQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons</span><br><span class=\"line\">(</span><br><span class=\"line\">P_Id int NOT NULL,</span><br><span class=\"line\">LastName varchar(255) NOT NULL,</span><br><span class=\"line\">FirstName varchar(255),</span><br><span class=\"line\">Address varchar(255),</span><br><span class=\"line\">City varchar(255) DEFAULT &#x27;Sandnes&#x27;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>通过使用类似 GETDATE() 这样的函数，DEFAULT 约束也可以用于插入系统值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Orders</span><br><span class=\"line\">(</span><br><span class=\"line\">O_Id int NOT NULL,</span><br><span class=\"line\">OrderNo int NOT NULL,</span><br><span class=\"line\">P_Id int,</span><br><span class=\"line\">OrderDate date DEFAULT GETDATE()</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ALTER-TABLE-时的-SQL-DEFAULT-约束\"><a href=\"#ALTER-TABLE-时的-SQL-DEFAULT-约束\" class=\"headerlink\" title=\"ALTER TABLE 时的 SQL DEFAULT 约束\"></a>ALTER TABLE 时的 SQL DEFAULT 约束</h2><hr>\n<p>当表已被创建时，如需在 “City” 列创建 DEFAULT 约束，请使用下面的 SQL：</p>\n<p>**　MySQL：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons</span><br><span class=\"line\">ALTER City SET DEFAULT &#x27;SANDNES&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>**　SQL Server &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons </span><br><span class=\"line\">ADD CONSTRAINT DF_Persons_City DEFAULT(&#x27;SANDNES&#x27;) FOR City</span><br><span class=\"line\"></span><br><span class=\"line\">--注释</span><br><span class=\"line\">--Persons 为表名</span><br><span class=\"line\">--City 为列名</span><br><span class=\"line\">--DF_Persons_City 为我们创建的默认约束的名称 约束名称一般为:约束类型简称_表名_列名</span><br></pre></td></tr></table></figure>\n\n<p>**　Oracle：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons</span><br><span class=\"line\">MODIFY City DEFAULT &#x27;SANDNES&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"撤销-DEFAULT-约束\"><a href=\"#撤销-DEFAULT-约束\" class=\"headerlink\" title=\"撤销 DEFAULT 约束\"></a>撤销 DEFAULT 约束</h2><hr>\n<p>如需撤销 DEFAULT 约束，请使用下面的 SQL：</p>\n<p>**　MySQL：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons</span><br><span class=\"line\">ALTER City DROP DEFAULT</span><br></pre></td></tr></table></figure>\n\n<p>**　SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons</span><br><span class=\"line\">ALTER COLUMN City DROP DEFAULT</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"SQL-CHECK-约束\"><a href=\"#SQL-CHECK-约束\" class=\"headerlink\" title=\"SQL CHECK 约束\"></a>SQL CHECK 约束</h2><hr>\n<p>CHECK 约束用于限制列中的值的范围。</p>\n<p>如果对单个列定义 CHECK 约束，那么该列只允许特定的值。</p>\n<p>如果对一个表定义 CHECK 约束，那么此约束会基于行中其他列的值在特定的列中对值进行限制。</p>\n<h2 id=\"CREATE-TABLE-时的-SQL-CHECK-约束\"><a href=\"#CREATE-TABLE-时的-SQL-CHECK-约束\" class=\"headerlink\" title=\"CREATE TABLE 时的 SQL CHECK 约束\"></a>CREATE TABLE 时的 SQL CHECK 约束</h2><hr>\n<p>下面的 SQL 在 “Persons” 表创建时在 “P_Id” 列上创建 CHECK 约束。CHECK 约束规定 “P_Id” 列必须只包含大于 0 的整数。</p>\n<p>**　MySQL：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons</span><br><span class=\"line\">(</span><br><span class=\"line\">P_Id int NOT NULL,</span><br><span class=\"line\">LastName varchar(255) NOT NULL,</span><br><span class=\"line\">FirstName varchar(255),</span><br><span class=\"line\">Address varchar(255),</span><br><span class=\"line\">City varchar(255),</span><br><span class=\"line\">CHECK (P_Id&gt;0)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>**　SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons</span><br><span class=\"line\">(</span><br><span class=\"line\">P_Id int NOT NULL CHECK (P_Id&gt;0),</span><br><span class=\"line\">LastName varchar(255) NOT NULL,</span><br><span class=\"line\">FirstName varchar(255),</span><br><span class=\"line\">Address varchar(255),</span><br><span class=\"line\">City varchar(255)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>如需命名 CHECK 约束，并定义多个列的 CHECK 约束，请使用下面的 SQL 语法：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons</span><br><span class=\"line\">(</span><br><span class=\"line\">P_Id int NOT NULL,</span><br><span class=\"line\">LastName varchar(255) NOT NULL,</span><br><span class=\"line\">FirstName varchar(255),</span><br><span class=\"line\">Address varchar(255),</span><br><span class=\"line\">City varchar(255),</span><br><span class=\"line\">CONSTRAINT chk_Person CHECK (P_Id&gt;0 AND City=&#x27;Sandnes&#x27;)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ALTER-TABLE-时的-SQL-CHECK-约束\"><a href=\"#ALTER-TABLE-时的-SQL-CHECK-约束\" class=\"headerlink\" title=\"ALTER TABLE 时的 SQL CHECK 约束\"></a>ALTER TABLE 时的 SQL CHECK 约束</h2><p>当表已被创建时，如需在 “P_Id” 列创建 CHECK 约束，请使用下面的 SQL：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access:**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons</span><br><span class=\"line\">ADD CHECK (P_Id&gt;0)</span><br></pre></td></tr></table></figure>\n\n<p>如需命名 CHECK 约束，并定义多个列的 CHECK 约束，请使用下面的 SQL 语法：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons</span><br><span class=\"line\">ADD CONSTRAINT chk_Person CHECK (P_Id&gt;0 AND City=&#x27;Sandnes&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"撤销-CHECK-约束\"><a href=\"#撤销-CHECK-约束\" class=\"headerlink\" title=\"撤销 CHECK 约束\"></a>撤销 CHECK 约束</h2><hr>\n<p>如需撤销 CHECK 约束，请使用下面的 SQL：</p>\n<p>**　SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons</span><br><span class=\"line\">DROP CONSTRAINT chk_Person</span><br></pre></td></tr></table></figure>\n\n<p>**　MySQL：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons</span><br><span class=\"line\">DROP CHECK chk_Person</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<p>SQL约束用于指定表中数据的规则。</p>\n<h2 id=\"SQL-约束\"><a href=\"#SQL-约束\" class=\"headerlink\" title=\"SQL 约束\"></a>SQL 约束</h2><hr>\n<p>约束是作用于数据表中列上的规则，用于限制表中数据的类型。约束的存在保证了数据库中数据的精确性和可靠性。</p>\n<p>约束有列级和表级之分，列级约束作用于单一的列，而表级约束作用于整张数据表。</p>\n<p>下面是 SQL 中常用的约束，这些约束虽然已经在关系型数据库管理系统一章中讨论过了，但是仍然值得在这里回顾一遍。</p>\n<ul>\n<li>：保证列中数据不能有 NULL 值</li>\n<li>：提供该列数据未指定时所采用的默认值</li>\n<li>：保证列中的所有数据各不相同</li>\n<li>：唯一标识数据表中的行&#x2F;记录</li>\n<li>：唯一标识其他表中的一条行&#x2F;记录</li>\n<li>：此约束保证列中的所有值满足某一条件</li>\n<li>：用于在数据库中快速创建或检索数据</li>\n</ul>\n<p>约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）。</p>\n<h2 id=\"SQL创建约束\"><a href=\"#SQL创建约束\" class=\"headerlink\" title=\"SQL创建约束\"></a>SQL创建约束</h2><hr>\n<p>当使用CREATE TABLE语句创建表时，或者在使用ALTER TABLE语句创建表之后，可以指定约束。</p>\n<p>语法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE table_name (</span><br><span class=\"line\">    column1 datatype constraint,</span><br><span class=\"line\">    column2 datatype constraint,</span><br><span class=\"line\">    column3 datatype constraint,</span><br><span class=\"line\">    ....</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SQL-CREATE-TABLE-CONSTRAINT-语法\"><a href=\"#SQL-CREATE-TABLE-CONSTRAINT-语法\" class=\"headerlink\" title=\"SQL CREATE TABLE + CONSTRAINT 语法\"></a>SQL CREATE TABLE + CONSTRAINT 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE table_name                </span><br><span class=\"line\">(                </span><br><span class=\"line\">column_name1 data_type(size) constraint_name,                </span><br><span class=\"line\">column_name2 data_type(size) constraint_name,                </span><br><span class=\"line\">column_name3 data_type(size) constraint_name,                </span><br><span class=\"line\">....                </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除约束\"><a href=\"#删除约束\" class=\"headerlink\" title=\"删除约束\"></a>删除约束</h2><hr>\n<p>任何现有约束都可以通过在 ALTER TABLE 命令中指定 DROP CONSTRAINT 选项的方法删除掉。</p>\n<p>例如，要去除 EMPLOYEES 表中的主键约束，可以使用下述命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE EMPLOYEES DROP CONSTRAINT EMPLOYEES_PK;</span><br></pre></td></tr></table></figure>\n\n<p>一些数据库实现可能提供了删除特定约束的快捷方法。例如，要在 Oracle 中删除一张表的主键约束，可以使用如下命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE EMPLOYEES DROP PRIMARY KEY;</span><br></pre></td></tr></table></figure>\n\n<p>某些数据库实现允许禁用约束。这样与其从数据库中永久删除约束，你可以只是临时禁用掉它，过一段时间后再重新启用。</p>\n<h2 id=\"完整性约束\"><a href=\"#完整性约束\" class=\"headerlink\" title=\"完整性约束\"></a>完整性约束</h2><hr>\n<p>完整性约束用于保证关系型数据库中数据的精确性和一致性。对于关系型数据库来说，数据完整性由参照完整性（referential integrity，RI）来保证。</p>\n<p>有很多种约束可以起到参照完整性的作用，这些约束包括主键约束（Primary Key）、外键约束（Foreign Key）、唯一性约束（Unique Constraint）以及上面提到的其他约束。</p>\n<h2 id=\"SQL-NOT-NULL-约束\"><a href=\"#SQL-NOT-NULL-约束\" class=\"headerlink\" title=\"SQL NOT NULL 约束\"></a>SQL NOT NULL 约束</h2><hr>\n<p>在默认的情况下，表的列接受 NULL 值。</p>\n<p>NOT NULL 约束强制列不接受 NULL 值。</p>\n<p>NOT NULL 约束强制字段始终包含值。这意味着，如果不向字段添加值，就无法插入新记录或者更新记录。</p>\n<p>下面的 SQL 强制 “P_Id” 列和 “LastName” 列不接受 NULL 值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons</span><br><span class=\"line\">(</span><br><span class=\"line\">P_Id int NOT NULL,</span><br><span class=\"line\">LastName varchar(255) NOT NULL,</span><br><span class=\"line\">FirstName varchar(255),</span><br><span class=\"line\">Address varchar(255),</span><br><span class=\"line\">City varchar(255)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"SQL-UNIQUE-约束\"><a href=\"#SQL-UNIQUE-约束\" class=\"headerlink\" title=\"SQL UNIQUE 约束\"></a>SQL UNIQUE 约束</h2><hr>\n<p>UNIQUE 约束唯一标识数据库表中的每条记录。</p>\n<p>UNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。</p>\n<p>PRIMARY KEY 约束拥有自动定义的 UNIQUE 约束。</p>\n<p>请注意，每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束。</p>\n<h2 id=\"CREATE-TABLE-时的-SQL-UNIQUE-约束\"><a href=\"#CREATE-TABLE-时的-SQL-UNIQUE-约束\" class=\"headerlink\" title=\"CREATE TABLE 时的 SQL UNIQUE 约束\"></a>CREATE TABLE 时的 SQL UNIQUE 约束</h2><hr>\n<p>下面的 SQL 在 “Persons” 表创建时在 “P_Id” 列上创建 UNIQUE 约束：</p>\n<p>**　MySQL：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons                </span><br><span class=\"line\">(                </span><br><span class=\"line\">P_Id int NOT NULL,                </span><br><span class=\"line\">LastName varchar(255) NOT NULL,                </span><br><span class=\"line\">FirstName varchar(255),                </span><br><span class=\"line\">Address varchar(255),                </span><br><span class=\"line\">City varchar(255),                </span><br><span class=\"line\">UNIQUE (P_Id)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>**　SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons                </span><br><span class=\"line\">(                </span><br><span class=\"line\">P_Id int NOT NULL UNIQUE,                </span><br><span class=\"line\">LastName varchar(255) NOT NULL,                </span><br><span class=\"line\">FirstName varchar(255),                </span><br><span class=\"line\">Address varchar(255),                </span><br><span class=\"line\">City varchar(255)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>如需命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束，请使用下面的 SQL 语法：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons                </span><br><span class=\"line\">(                </span><br><span class=\"line\">P_Id int NOT NULL,                </span><br><span class=\"line\">LastName varchar(255) NOT NULL,                </span><br><span class=\"line\">FirstName varchar(255),                </span><br><span class=\"line\">Address varchar(255),                </span><br><span class=\"line\">City varchar(255),                </span><br><span class=\"line\">CONSTRAINT uc_PersonID UNIQUE (P_Id,LastName)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ALTER-TABLE-时的-SQL-UNIQUE-约束\"><a href=\"#ALTER-TABLE-时的-SQL-UNIQUE-约束\" class=\"headerlink\" title=\"ALTER TABLE 时的 SQL UNIQUE 约束\"></a>ALTER TABLE 时的 SQL UNIQUE 约束</h2><hr>\n<p>当表已被创建时，如需在 “P_Id” 列创建 UNIQUE 约束，请使用下面的 SQL：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons                </span><br><span class=\"line\">ADD UNIQUE (P_Id)</span><br></pre></td></tr></table></figure>\n\n<p>如需命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束，请使用下面的 SQL 语法：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons                </span><br><span class=\"line\">ADD CONSTRAINT uc_PersonID UNIQUE (P_Id,LastName)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"撤销-UNIQUE-约束\"><a href=\"#撤销-UNIQUE-约束\" class=\"headerlink\" title=\"撤销 UNIQUE 约束\"></a>撤销 UNIQUE 约束</h2><hr>\n<p>如需撤销 UNIQUE 约束，请使用下面的 SQL：</p>\n<p>**　MySQL：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons                </span><br><span class=\"line\">DROP INDEX uc_PersonID</span><br></pre></td></tr></table></figure>\n\n<p>**　SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons                </span><br><span class=\"line\">DROP CONSTRAINT uc_PersonID</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"SQL-PRIMARY-KEY-约束\"><a href=\"#SQL-PRIMARY-KEY-约束\" class=\"headerlink\" title=\"SQL PRIMARY KEY 约束\"></a>SQL PRIMARY KEY 约束</h2><hr>\n<p>PRIMARY KEY 约束唯一标识数据库表中的每条记录。</p>\n<p>主键必须包含唯一的值。</p>\n<p>主键列不能包含 NULL 值。</p>\n<p>每个表都应该有一个主键，并且每个表只能有一个主键。</p>\n<h2 id=\"CREATE-TABLE-时的-SQL-PRIMARY-KEY-约束rimary-key-约束\"><a href=\"#CREATE-TABLE-时的-SQL-PRIMARY-KEY-约束rimary-key-约束\" class=\"headerlink\" title=\"CREATE TABLE 时的 SQL PRIMARY KEY 约束rimary-key-约束)\"></a>CREATE TABLE 时的 SQL PRIMARY KEY 约束rimary-key-约束)</h2><hr>\n<p>下面的 SQL 在 “Persons” 表创建时在 “P_Id” 列上创建 PRIMARY KEY 约束：</p>\n<p>**　MySQL：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons                </span><br><span class=\"line\">(                </span><br><span class=\"line\">P_Id int NOT NULL,                </span><br><span class=\"line\">LastName varchar(255) NOT NULL,                </span><br><span class=\"line\">FirstName varchar(255),                </span><br><span class=\"line\">Address varchar(255),                </span><br><span class=\"line\">City varchar(255),                </span><br><span class=\"line\">PRIMARY KEY (P_Id)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>**　SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons                </span><br><span class=\"line\">(                </span><br><span class=\"line\">P_Id int NOT NULL PRIMARY KEY,                </span><br><span class=\"line\">LastName varchar(255) NOT NULL,                </span><br><span class=\"line\">FirstName varchar(255),                </span><br><span class=\"line\">Address varchar(255),                </span><br><span class=\"line\">City varchar(255)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>如需命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束，请使用下面的 SQL 语法：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons                </span><br><span class=\"line\">(                </span><br><span class=\"line\">P_Id int NOT NULL,                </span><br><span class=\"line\">LastName varchar(255) NOT NULL,                </span><br><span class=\"line\">FirstName varchar(255),                </span><br><span class=\"line\">Address varchar(255),                </span><br><span class=\"line\">City varchar(255),                </span><br><span class=\"line\">CONSTRAINT pk_PersonID PRIMARY KEY (P_Id,LastName)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>**　注释：** 在上面的实例中，只有一个主键 PRIMARY KEY（pk_PersonID）。然而，pk_PersonID 的值是由两个列（P_Id 和 LastName）组成的。</p>\n<h2 id=\"ALTER-TABLE-时的-SQL-PRIMARY-KEY-约束\"><a href=\"#ALTER-TABLE-时的-SQL-PRIMARY-KEY-约束\" class=\"headerlink\" title=\"ALTER TABLE 时的 SQL PRIMARY KEY 约束\"></a>ALTER TABLE 时的 SQL PRIMARY KEY 约束</h2><hr>\n<p>当表已被创建时，如需在 “P_Id” 列创建 PRIMARY KEY 约束，请使用下面的 SQL：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<p>sql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons                </span><br><span class=\"line\">ADD PRIMARY KEY (P_Id)</span><br></pre></td></tr></table></figure>\n\n<p>如需命名 PRIMARY KEY 约束，并定义多个列的 PRIMARY KEY 约束，请使用下面的 SQL 语法：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons                </span><br><span class=\"line\">ADD CONSTRAINT pk_PersonID PRIMARY KEY (P_Id,LastName)</span><br></pre></td></tr></table></figure>\n\n<p>**　注释：**如果您使用 ALTER TABLE 语句添加主键，必须把主键列声明为不包含 NULL 值（在表首次创建时）。</p>\n<h2 id=\"撤销-PRIMARY-KEY-约束\"><a href=\"#撤销-PRIMARY-KEY-约束\" class=\"headerlink\" title=\"撤销 PRIMARY KEY 约束\"></a>撤销 PRIMARY KEY 约束</h2><hr>\n<p>如需撤销 PRIMARY KEY 约束，请使用下面的 SQL：</p>\n<p>**　MySQL：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons                </span><br><span class=\"line\">DROP PRIMARY KEY</span><br></pre></td></tr></table></figure>\n\n<p>**　SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons               </span><br><span class=\"line\">DROP CONSTRAINT pk_PersonID</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"SQL-FOREIGN-KEY-约束\"><a href=\"#SQL-FOREIGN-KEY-约束\" class=\"headerlink\" title=\"SQL FOREIGN KEY 约束\"></a>SQL FOREIGN KEY 约束</h2><hr>\n<p>一个表中的 FOREIGN KEY 指向另一个表中的 PRIMARY KEY。</p>\n<p>让我们通过一个实例来解释外键。请看下面两个表：</p>\n<p>“Persons” 表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">P_Id</th>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Hansen</td>\n<td align=\"left\">Ola</td>\n<td align=\"left\">Timoteivn 10</td>\n<td align=\"left\">Sandnes</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Svendson</td>\n<td align=\"left\">Tove</td>\n<td align=\"left\">Borgvn 23</td>\n<td align=\"left\">Sandnes</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Pettersen</td>\n<td align=\"left\">Kari</td>\n<td align=\"left\">Storgt 20</td>\n<td align=\"left\">Stavanger</td>\n</tr>\n</tbody></table>\n<p>“Orders” 表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">O_Id</th>\n<th align=\"left\">OrderNo</th>\n<th align=\"left\">P_Id</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">77895</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">44678</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">22456</td>\n<td align=\"left\">2</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">24562</td>\n<td align=\"left\">1</td>\n</tr>\n</tbody></table>\n<p>请注意，”Orders” 表中的 “P_Id” 列指向 “Persons” 表中的 “P_Id” 列。</p>\n<p>“Persons” 表中的 “P_Id” 列是 “Persons” 表中的 PRIMARY KEY。</p>\n<p>“Orders” 表中的 “P_Id” 列是 “Orders” 表中的 FOREIGN KEY。</p>\n<p>FOREIGN KEY 约束用于预防破坏表之间连接的行为。</p>\n<p>FOREIGN KEY 约束也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。</p>\n<h2 id=\"CREATE-TABLE-时的-SQL-FOREIGN-KEY-约束reign-key-约束\"><a href=\"#CREATE-TABLE-时的-SQL-FOREIGN-KEY-约束reign-key-约束\" class=\"headerlink\" title=\"CREATE TABLE 时的 SQL FOREIGN KEY 约束reign-key-约束)\"></a>CREATE TABLE 时的 SQL FOREIGN KEY 约束reign-key-约束)</h2><hr>\n<p>下面的 SQL 在 “Orders” 表创建时在 “P_Id” 列上创建 FOREIGN KEY 约束：</p>\n<p>**　MySQL：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Orders                </span><br><span class=\"line\">(                </span><br><span class=\"line\">O_Id int NOT NULL,                </span><br><span class=\"line\">OrderNo int NOT NULL,                </span><br><span class=\"line\">P_Id int,               </span><br><span class=\"line\">PRIMARY KEY (O_Id),                </span><br><span class=\"line\">FOREIGN KEY (P_Id) REFERENCES Persons(P_Id)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>**　SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Orders                </span><br><span class=\"line\">(                </span><br><span class=\"line\">O_Id int NOT NULL PRIMARY KEY,                </span><br><span class=\"line\">OrderNo int NOT NULL,                </span><br><span class=\"line\">P_Id int FOREIGN KEY REFERENCES Persons(P_Id)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>如需命名 FOREIGN KEY 约束，并定义多个列的 FOREIGN KEY 约束，请使用下面的 SQL 语法：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Orders                </span><br><span class=\"line\">(                </span><br><span class=\"line\">O_Id int NOT NULL,                </span><br><span class=\"line\">OrderNo int NOT NULL,                </span><br><span class=\"line\">P_Id int,                </span><br><span class=\"line\">PRIMARY KEY (O_Id),                </span><br><span class=\"line\">CONSTRAINT fk_PerOrders FOREIGN KEY (P_Id)                </span><br><span class=\"line\">REFERENCES Persons(P_Id)                </span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ALTER-TABLE-时的-SQL-FOREIGN-KEY-约束\"><a href=\"#ALTER-TABLE-时的-SQL-FOREIGN-KEY-约束\" class=\"headerlink\" title=\"ALTER TABLE 时的 SQL FOREIGN KEY 约束\"></a>ALTER TABLE 时的 SQL FOREIGN KEY 约束</h2><hr>\n<p>当 “Orders” 表已被创建时，如需在 “P_Id” 列创建 FOREIGN KEY 约束，请使用下面的 SQL：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Orders                </span><br><span class=\"line\">ADD FOREIGN KEY (P_Id)                </span><br><span class=\"line\">REFERENCES Persons(P_Id)</span><br></pre></td></tr></table></figure>\n\n<p>如需命名 FOREIGN KEY 约束，并定义多个列的 FOREIGN KEY 约束，请使用下面的 SQL 语法：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Orders                </span><br><span class=\"line\">ADD CONSTRAINT fk_PerOrders                </span><br><span class=\"line\">FOREIGN KEY (P_Id)                </span><br><span class=\"line\">REFERENCES Persons(P_Id)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"撤销-FOREIGN-KEY-约束\"><a href=\"#撤销-FOREIGN-KEY-约束\" class=\"headerlink\" title=\"撤销 FOREIGN KEY 约束\"></a>撤销 FOREIGN KEY 约束</h2><hr>\n<p>如需撤销 FOREIGN KEY 约束，请使用下面的 SQL：</p>\n<p>**　MySQL：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Orders                </span><br><span class=\"line\">DROP FOREIGN KEY fk_PerOrders</span><br></pre></td></tr></table></figure>\n\n<p>**　SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Orders                </span><br><span class=\"line\">DROP CONSTRAINT fk_PerOrders</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"SQL-DEFAULT-约束\"><a href=\"#SQL-DEFAULT-约束\" class=\"headerlink\" title=\"SQL DEFAULT 约束\"></a>SQL DEFAULT 约束</h2><hr>\n<p>DEFAULT 约束用于向列中插入默认值。</p>\n<p>如果没有规定其他的值，那么会将默认值添加到所有的新记录。</p>\n<h2 id=\"CREATE-TABLE-时的-SQL-DEFAULT-约束\"><a href=\"#CREATE-TABLE-时的-SQL-DEFAULT-约束\" class=\"headerlink\" title=\"CREATE TABLE 时的 SQL DEFAULT 约束\"></a>CREATE TABLE 时的 SQL DEFAULT 约束</h2><hr>\n<p>下面的 SQL 在 “Persons” 表创建时在 “City” 列上创建 DEFAULT 约束：</p>\n<p>**　My SQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons</span><br><span class=\"line\">(</span><br><span class=\"line\">P_Id int NOT NULL,</span><br><span class=\"line\">LastName varchar(255) NOT NULL,</span><br><span class=\"line\">FirstName varchar(255),</span><br><span class=\"line\">Address varchar(255),</span><br><span class=\"line\">City varchar(255) DEFAULT &#x27;Sandnes&#x27;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>通过使用类似 GETDATE() 这样的函数，DEFAULT 约束也可以用于插入系统值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Orders</span><br><span class=\"line\">(</span><br><span class=\"line\">O_Id int NOT NULL,</span><br><span class=\"line\">OrderNo int NOT NULL,</span><br><span class=\"line\">P_Id int,</span><br><span class=\"line\">OrderDate date DEFAULT GETDATE()</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ALTER-TABLE-时的-SQL-DEFAULT-约束\"><a href=\"#ALTER-TABLE-时的-SQL-DEFAULT-约束\" class=\"headerlink\" title=\"ALTER TABLE 时的 SQL DEFAULT 约束\"></a>ALTER TABLE 时的 SQL DEFAULT 约束</h2><hr>\n<p>当表已被创建时，如需在 “City” 列创建 DEFAULT 约束，请使用下面的 SQL：</p>\n<p>**　MySQL：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons</span><br><span class=\"line\">ALTER City SET DEFAULT &#x27;SANDNES&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>**　SQL Server &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons </span><br><span class=\"line\">ADD CONSTRAINT DF_Persons_City DEFAULT(&#x27;SANDNES&#x27;) FOR City</span><br><span class=\"line\"></span><br><span class=\"line\">--注释</span><br><span class=\"line\">--Persons 为表名</span><br><span class=\"line\">--City 为列名</span><br><span class=\"line\">--DF_Persons_City 为我们创建的默认约束的名称 约束名称一般为:约束类型简称_表名_列名</span><br></pre></td></tr></table></figure>\n\n<p>**　Oracle：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons</span><br><span class=\"line\">MODIFY City DEFAULT &#x27;SANDNES&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"撤销-DEFAULT-约束\"><a href=\"#撤销-DEFAULT-约束\" class=\"headerlink\" title=\"撤销 DEFAULT 约束\"></a>撤销 DEFAULT 约束</h2><hr>\n<p>如需撤销 DEFAULT 约束，请使用下面的 SQL：</p>\n<p>**　MySQL：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons</span><br><span class=\"line\">ALTER City DROP DEFAULT</span><br></pre></td></tr></table></figure>\n\n<p>**　SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons</span><br><span class=\"line\">ALTER COLUMN City DROP DEFAULT</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"SQL-CHECK-约束\"><a href=\"#SQL-CHECK-约束\" class=\"headerlink\" title=\"SQL CHECK 约束\"></a>SQL CHECK 约束</h2><hr>\n<p>CHECK 约束用于限制列中的值的范围。</p>\n<p>如果对单个列定义 CHECK 约束，那么该列只允许特定的值。</p>\n<p>如果对一个表定义 CHECK 约束，那么此约束会基于行中其他列的值在特定的列中对值进行限制。</p>\n<h2 id=\"CREATE-TABLE-时的-SQL-CHECK-约束\"><a href=\"#CREATE-TABLE-时的-SQL-CHECK-约束\" class=\"headerlink\" title=\"CREATE TABLE 时的 SQL CHECK 约束\"></a>CREATE TABLE 时的 SQL CHECK 约束</h2><hr>\n<p>下面的 SQL 在 “Persons” 表创建时在 “P_Id” 列上创建 CHECK 约束。CHECK 约束规定 “P_Id” 列必须只包含大于 0 的整数。</p>\n<p>**　MySQL：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons</span><br><span class=\"line\">(</span><br><span class=\"line\">P_Id int NOT NULL,</span><br><span class=\"line\">LastName varchar(255) NOT NULL,</span><br><span class=\"line\">FirstName varchar(255),</span><br><span class=\"line\">Address varchar(255),</span><br><span class=\"line\">City varchar(255),</span><br><span class=\"line\">CHECK (P_Id&gt;0)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>**　SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons</span><br><span class=\"line\">(</span><br><span class=\"line\">P_Id int NOT NULL CHECK (P_Id&gt;0),</span><br><span class=\"line\">LastName varchar(255) NOT NULL,</span><br><span class=\"line\">FirstName varchar(255),</span><br><span class=\"line\">Address varchar(255),</span><br><span class=\"line\">City varchar(255)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>如需命名 CHECK 约束，并定义多个列的 CHECK 约束，请使用下面的 SQL 语法：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons</span><br><span class=\"line\">(</span><br><span class=\"line\">P_Id int NOT NULL,</span><br><span class=\"line\">LastName varchar(255) NOT NULL,</span><br><span class=\"line\">FirstName varchar(255),</span><br><span class=\"line\">Address varchar(255),</span><br><span class=\"line\">City varchar(255),</span><br><span class=\"line\">CONSTRAINT chk_Person CHECK (P_Id&gt;0 AND City=&#x27;Sandnes&#x27;)</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ALTER-TABLE-时的-SQL-CHECK-约束\"><a href=\"#ALTER-TABLE-时的-SQL-CHECK-约束\" class=\"headerlink\" title=\"ALTER TABLE 时的 SQL CHECK 约束\"></a>ALTER TABLE 时的 SQL CHECK 约束</h2><p>当表已被创建时，如需在 “P_Id” 列创建 CHECK 约束，请使用下面的 SQL：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access:**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons</span><br><span class=\"line\">ADD CHECK (P_Id&gt;0)</span><br></pre></td></tr></table></figure>\n\n<p>如需命名 CHECK 约束，并定义多个列的 CHECK 约束，请使用下面的 SQL 语法：</p>\n<p>**　MySQL &#x2F; SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons</span><br><span class=\"line\">ADD CONSTRAINT chk_Person CHECK (P_Id&gt;0 AND City=&#x27;Sandnes&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"撤销-CHECK-约束\"><a href=\"#撤销-CHECK-约束\" class=\"headerlink\" title=\"撤销 CHECK 约束\"></a>撤销 CHECK 约束</h2><hr>\n<p>如需撤销 CHECK 约束，请使用下面的 SQL：</p>\n<p>**　SQL Server &#x2F; Oracle &#x2F; MS Access：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons</span><br><span class=\"line\">DROP CONSTRAINT chk_Person</span><br></pre></td></tr></table></figure>\n\n<p>**　MySQL：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE Persons</span><br><span class=\"line\">DROP CHECK chk_Person</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL CREATE DATABASE语句","order":33,"_content":"\n## SQL CREATE DATABASE 语句\n\n------\n\nCREATE DATABASE 语句用于创建数据库。\n\n在RDBMS中，数据库名称始终应该是唯一的。\n\n### SQL CREATE DATABASE 语法\n\n```\nCREATE DATABASE dbname;\n```\n\n在创建任何数据库之前，请确保您拥有管理权限。\n\n## SQL CREATE DATABASE 实例\n\n------\n\n下面的 SQL 语句创建一个名为 \"my_db\" 的数据库：\n\n```\nCREATE DATABASE my_db;\n```\n\n数据库表可以通过 CREATE TABLE 语句来添加。\n\n创建数据库后，您可以在数据库列表中检查它。\n\n语句：\n\n```\nSHOW DATABASES;\n```\n","source":"wiki/sql/sentence/createdb.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL CREATE DATABASE语句\norder: 33\n---\n\n## SQL CREATE DATABASE 语句\n\n------\n\nCREATE DATABASE 语句用于创建数据库。\n\n在RDBMS中，数据库名称始终应该是唯一的。\n\n### SQL CREATE DATABASE 语法\n\n```\nCREATE DATABASE dbname;\n```\n\n在创建任何数据库之前，请确保您拥有管理权限。\n\n## SQL CREATE DATABASE 实例\n\n------\n\n下面的 SQL 语句创建一个名为 \"my_db\" 的数据库：\n\n```\nCREATE DATABASE my_db;\n```\n\n数据库表可以通过 CREATE TABLE 语句来添加。\n\n创建数据库后，您可以在数据库列表中检查它。\n\n语句：\n\n```\nSHOW DATABASES;\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T01:41:42.561Z","path":"wiki/sql/sentence/createdb.html","comments":1,"_id":"cmbreopim000965x0371w1a60","content":"<h2 id=\"SQL-CREATE-DATABASE-语句\"><a href=\"#SQL-CREATE-DATABASE-语句\" class=\"headerlink\" title=\"SQL CREATE DATABASE 语句\"></a>SQL CREATE DATABASE 语句</h2><hr>\n<p>CREATE DATABASE 语句用于创建数据库。</p>\n<p>在RDBMS中，数据库名称始终应该是唯一的。</p>\n<h3 id=\"SQL-CREATE-DATABASE-语法\"><a href=\"#SQL-CREATE-DATABASE-语法\" class=\"headerlink\" title=\"SQL CREATE DATABASE 语法\"></a>SQL CREATE DATABASE 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE dbname;</span><br></pre></td></tr></table></figure>\n\n<p>在创建任何数据库之前，请确保您拥有管理权限。</p>\n<h2 id=\"SQL-CREATE-DATABASE-实例\"><a href=\"#SQL-CREATE-DATABASE-实例\" class=\"headerlink\" title=\"SQL CREATE DATABASE 实例\"></a>SQL CREATE DATABASE 实例</h2><hr>\n<p>下面的 SQL 语句创建一个名为 “my_db” 的数据库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE my_db;</span><br></pre></td></tr></table></figure>\n\n<p>数据库表可以通过 CREATE TABLE 语句来添加。</p>\n<p>创建数据库后，您可以在数据库列表中检查它。</p>\n<p>语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SHOW DATABASES;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-CREATE-DATABASE-语句\"><a href=\"#SQL-CREATE-DATABASE-语句\" class=\"headerlink\" title=\"SQL CREATE DATABASE 语句\"></a>SQL CREATE DATABASE 语句</h2><hr>\n<p>CREATE DATABASE 语句用于创建数据库。</p>\n<p>在RDBMS中，数据库名称始终应该是唯一的。</p>\n<h3 id=\"SQL-CREATE-DATABASE-语法\"><a href=\"#SQL-CREATE-DATABASE-语法\" class=\"headerlink\" title=\"SQL CREATE DATABASE 语法\"></a>SQL CREATE DATABASE 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE dbname;</span><br></pre></td></tr></table></figure>\n\n<p>在创建任何数据库之前，请确保您拥有管理权限。</p>\n<h2 id=\"SQL-CREATE-DATABASE-实例\"><a href=\"#SQL-CREATE-DATABASE-实例\" class=\"headerlink\" title=\"SQL CREATE DATABASE 实例\"></a>SQL CREATE DATABASE 实例</h2><hr>\n<p>下面的 SQL 语句创建一个名为 “my_db” 的数据库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE my_db;</span><br></pre></td></tr></table></figure>\n\n<p>数据库表可以通过 CREATE TABLE 语句来添加。</p>\n<p>创建数据库后，您可以在数据库列表中检查它。</p>\n<p>语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SHOW DATABASES;</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL CREATE TABLE语句","order":34,"_content":"\n## SQL CREATE TABLE 语句\n\n------\n\n## SQL CREATE TABLE 语句\n\nCREATE TABLE 语句用于创建数据库中的表。\n\n表由行和列组成，每个表都必须有个表名。\n\n### SQL CREATE TABLE 语法\n\n```\nCREATE TABLE table_name                \n(                \ncolumn_name1 data_type(size),                \ncolumn_name2 data_type(size),                \ncolumn_name3 data_type(size),                \n....                \n);\n```\n\ncolumn_name 参数规定表中列的名称。\n\ndata_type 参数规定列的数据类型（例如 varchar、integer、decimal、date 等等）。\n\nsize 参数规定表中列的最大长度。\n\n**　提示：**如需了解 MS Access、MySQL 和 SQL Server 中可用的数据类型，请访问我们完整的 。\n\n------\n\n## SQL CREATE TABLE 实例\n\n现在我们想要创建一个名为 \"Persons\" 的表，包含五列：PersonID、LastName、FirstName、Address 和 City。\n\n我们使用下面的 CREATE TABLE 语句：\n\n示例：\n\n```\nCREATE TABLE Persons\n(\nPersonID int,\nLastName varchar(255),\nFirstName varchar(255),\nAddress varchar(255),\nCity varchar(255)\n);\n```\n\nPersonID列数据类型为int，包含一个整数。\n\nLastName、FirstName、Address和City列具有包含字符的varchar数据类型，这些字段的最大长度为255个字符。\n\n空 \"Persons\" 表是这样的：\n\n| PersonID | LastName | FirstName | Address | City |\n| :------- | :------- | :-------- | :------ | :--- |\n|          |          |           |         |      |\n\n**　提示：**使用 INSERT INTO 语句将数据写入空表。\n","source":"wiki/sql/sentence/createtable.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL CREATE TABLE语句\norder: 34\n---\n\n## SQL CREATE TABLE 语句\n\n------\n\n## SQL CREATE TABLE 语句\n\nCREATE TABLE 语句用于创建数据库中的表。\n\n表由行和列组成，每个表都必须有个表名。\n\n### SQL CREATE TABLE 语法\n\n```\nCREATE TABLE table_name                \n(                \ncolumn_name1 data_type(size),                \ncolumn_name2 data_type(size),                \ncolumn_name3 data_type(size),                \n....                \n);\n```\n\ncolumn_name 参数规定表中列的名称。\n\ndata_type 参数规定列的数据类型（例如 varchar、integer、decimal、date 等等）。\n\nsize 参数规定表中列的最大长度。\n\n**　提示：**如需了解 MS Access、MySQL 和 SQL Server 中可用的数据类型，请访问我们完整的 。\n\n------\n\n## SQL CREATE TABLE 实例\n\n现在我们想要创建一个名为 \"Persons\" 的表，包含五列：PersonID、LastName、FirstName、Address 和 City。\n\n我们使用下面的 CREATE TABLE 语句：\n\n示例：\n\n```\nCREATE TABLE Persons\n(\nPersonID int,\nLastName varchar(255),\nFirstName varchar(255),\nAddress varchar(255),\nCity varchar(255)\n);\n```\n\nPersonID列数据类型为int，包含一个整数。\n\nLastName、FirstName、Address和City列具有包含字符的varchar数据类型，这些字段的最大长度为255个字符。\n\n空 \"Persons\" 表是这样的：\n\n| PersonID | LastName | FirstName | Address | City |\n| :------- | :------- | :-------- | :------ | :--- |\n|          |          |           |         |      |\n\n**　提示：**使用 INSERT INTO 语句将数据写入空表。\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T01:43:55.930Z","path":"wiki/sql/sentence/createtable.html","comments":1,"_id":"cmbreopin000a65x0gzx91jfz","content":"<h2 id=\"SQL-CREATE-TABLE-语句\"><a href=\"#SQL-CREATE-TABLE-语句\" class=\"headerlink\" title=\"SQL CREATE TABLE 语句\"></a>SQL CREATE TABLE 语句</h2><hr>\n<h2 id=\"SQL-CREATE-TABLE-语句-1\"><a href=\"#SQL-CREATE-TABLE-语句-1\" class=\"headerlink\" title=\"SQL CREATE TABLE 语句\"></a>SQL CREATE TABLE 语句</h2><p>CREATE TABLE 语句用于创建数据库中的表。</p>\n<p>表由行和列组成，每个表都必须有个表名。</p>\n<h3 id=\"SQL-CREATE-TABLE-语法\"><a href=\"#SQL-CREATE-TABLE-语法\" class=\"headerlink\" title=\"SQL CREATE TABLE 语法\"></a>SQL CREATE TABLE 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE table_name                </span><br><span class=\"line\">(                </span><br><span class=\"line\">column_name1 data_type(size),                </span><br><span class=\"line\">column_name2 data_type(size),                </span><br><span class=\"line\">column_name3 data_type(size),                </span><br><span class=\"line\">....                </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>column_name 参数规定表中列的名称。</p>\n<p>data_type 参数规定列的数据类型（例如 varchar、integer、decimal、date 等等）。</p>\n<p>size 参数规定表中列的最大长度。</p>\n<p>**　提示：**如需了解 MS Access、MySQL 和 SQL Server 中可用的数据类型，请访问我们完整的 。</p>\n<hr>\n<h2 id=\"SQL-CREATE-TABLE-实例\"><a href=\"#SQL-CREATE-TABLE-实例\" class=\"headerlink\" title=\"SQL CREATE TABLE 实例\"></a>SQL CREATE TABLE 实例</h2><p>现在我们想要创建一个名为 “Persons” 的表，包含五列：PersonID、LastName、FirstName、Address 和 City。</p>\n<p>我们使用下面的 CREATE TABLE 语句：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons</span><br><span class=\"line\">(</span><br><span class=\"line\">PersonID int,</span><br><span class=\"line\">LastName varchar(255),</span><br><span class=\"line\">FirstName varchar(255),</span><br><span class=\"line\">Address varchar(255),</span><br><span class=\"line\">City varchar(255)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>PersonID列数据类型为int，包含一个整数。</p>\n<p>LastName、FirstName、Address和City列具有包含字符的varchar数据类型，这些字段的最大长度为255个字符。</p>\n<p>空 “Persons” 表是这样的：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">PersonID</th>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>**　提示：**使用 INSERT INTO 语句将数据写入空表。</p>\n","excerpt":"","more":"<h2 id=\"SQL-CREATE-TABLE-语句\"><a href=\"#SQL-CREATE-TABLE-语句\" class=\"headerlink\" title=\"SQL CREATE TABLE 语句\"></a>SQL CREATE TABLE 语句</h2><hr>\n<h2 id=\"SQL-CREATE-TABLE-语句-1\"><a href=\"#SQL-CREATE-TABLE-语句-1\" class=\"headerlink\" title=\"SQL CREATE TABLE 语句\"></a>SQL CREATE TABLE 语句</h2><p>CREATE TABLE 语句用于创建数据库中的表。</p>\n<p>表由行和列组成，每个表都必须有个表名。</p>\n<h3 id=\"SQL-CREATE-TABLE-语法\"><a href=\"#SQL-CREATE-TABLE-语法\" class=\"headerlink\" title=\"SQL CREATE TABLE 语法\"></a>SQL CREATE TABLE 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE table_name                </span><br><span class=\"line\">(                </span><br><span class=\"line\">column_name1 data_type(size),                </span><br><span class=\"line\">column_name2 data_type(size),                </span><br><span class=\"line\">column_name3 data_type(size),                </span><br><span class=\"line\">....                </span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>column_name 参数规定表中列的名称。</p>\n<p>data_type 参数规定列的数据类型（例如 varchar、integer、decimal、date 等等）。</p>\n<p>size 参数规定表中列的最大长度。</p>\n<p>**　提示：**如需了解 MS Access、MySQL 和 SQL Server 中可用的数据类型，请访问我们完整的 。</p>\n<hr>\n<h2 id=\"SQL-CREATE-TABLE-实例\"><a href=\"#SQL-CREATE-TABLE-实例\" class=\"headerlink\" title=\"SQL CREATE TABLE 实例\"></a>SQL CREATE TABLE 实例</h2><p>现在我们想要创建一个名为 “Persons” 的表，包含五列：PersonID、LastName、FirstName、Address 和 City。</p>\n<p>我们使用下面的 CREATE TABLE 语句：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE Persons</span><br><span class=\"line\">(</span><br><span class=\"line\">PersonID int,</span><br><span class=\"line\">LastName varchar(255),</span><br><span class=\"line\">FirstName varchar(255),</span><br><span class=\"line\">Address varchar(255),</span><br><span class=\"line\">City varchar(255)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>PersonID列数据类型为int，包含一个整数。</p>\n<p>LastName、FirstName、Address和City列具有包含字符的varchar数据类型，这些字段的最大长度为255个字符。</p>\n<p>空 “Persons” 表是这样的：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">PersonID</th>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>**　提示：**使用 INSERT INTO 语句将数据写入空表。</p>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 简介","order":1,"_content":"\nSQL（结构化查询语言）是用于访问和操作数据库中的数据的标准数据库编程语言。\n\nSQL是关系数据库系统的标准语言。所有关系数据库管理系统(RDMS)，如MySQL、MS Access、Oracle、Sybase、Informix、Postgres和SQL Server都使用SQL作为它们的标准数据库语言。\n\n为了处理数据库和数据库相关的编程，程序员需要有一些介质，或者可以说接口来详细说明一组命令或代码来处理数据库或访问数据库的数据。在本章中，将简要介绍在学习SQL的过程中您将学习的术语。\n\n------\n\n## 你会从SQL中学到什么？\n\nSQL为结构化查询语言提供了独特的学习和数据库处理技术，并将帮助您更好地控制SQL查询并有效处理这些代码。由于SQL帮助您包括数据库创建，数据库或表删除，获取行数据和修改这些数据等，并行SQL使得事情自动和平滑，最终用户可以轻松访问和处理该应用程序的数据。\n\n------\n\n## SQL 是什么？\n\n- SQL 发音为\"sequel\"。\n- SQL 指结构化查询语言，全称是 Structured Query Language（是最初由IBM开发）。\n- SQL 是关系数据库系统的标准语言。\n- SQL 是一种 ANSI（American National Standards Institute 美国国家标准化组织）标准的计算机语言。\n\n------\n\n## SQL 能做什么？\n\n- SQL可以创建新的数据库及其对象（表，索引，视图，存储过程，函数和触发器）。\n- SQL可以修改现有数据库的结构。\n- SQL可以从数据库中删除（删除）对象。\n- SQL可以TRUNCATE（截取）表中的所有记录。\n- SQL可以对数据字典进行COMMENT。\n- SQL可以RENAME一个对象。\n- SQL可以从数据库中选择（检索）数据。\n- SQL可以将数据插入到表中。\n- SQL可以更新表中的现有数据。\n- SQL可以从数据库表中删除记录。\n- SQL可以在数据库中设置用户的GRANT和REVOKE权限。\n\n------\n\n## SQL 的历史\n\n- 1970年，SQL由IBM的Donald D. Chamberlin和Raymond F. Boyce开发。\n- 1974年，开发版本最初被称为SEQUEL（结构化英语查询语言）。\n- 1979年，关系软件发布了第一个叫做System / R的商业产品。\n- 由于商标冲突问题，SEQUEL首字母缩略词后来更改为SQL。\n- 后来IBM基于System / R的原型开始在SQL上开发商业产品。\n- 第一个关系数据库由RelationalSoftware发布，后来被称为Oracle。\n\n------\n\n## SQL 是一种标准 - 但是...\n\n虽然 SQL 是一门 ANSI（American National Standards Institute 美国国家标准化组织）标准的计算机语言，但是仍然存在着多种不同版本的 SQL 语言。\n\n然而，为了与 ANSI 标准相兼容，它们必须以相似的方式共同地来支持一些主要的命令（比如 SELECT、UPDATE、DELETE、INSERT、WHERE 等等）。\n\n|      | **注释：**除SQL标准之外，大多数SQL数据库程序还具有自己的专有扩展名！ |\n| :--- | :----------------------------------------------------------- |\n|      |                                                              |\n\n------\n\n## 在您的网站中使用 SQL\n\n要创建一个显示数据库中数据的网站，您需要：\n\n- 一个RDBMS数据库程序（即MS Access，SQL Server，MySQL）。\n- 使用服务器端脚本语言，如PHP或ASP。\n- 使用SQL来获取所需的数据。\n- 使用HTML / CSS来设置页面的样式\n\n------\n\n## RDBMS\n\nRDBMS 指关系型数据库管理系统，全称 Relational Database Management System。\n\nRDBMS 是 SQL 的基础，同样也是所有现代数据库系统的基础，比如 MS SQL Server、IBM DB2、Oracle、MySQL 以及 Microsoft Access。\n\nRDBMS 中的数据存储在被称为表的数据库对象中。\n\n表是相关的数据项的集合，它由列和行组成。\n\n**代码示例：**\n\n```\nsql SELECT * FROM Customers;\n```\n\n每个表都被分解成称为字段的更小的实体。Customers表中的字段由CustomerID，CustomerName，ContactName，Address，City，PostalCode和Country组成。字段是表中的一列，用于维护表中每条记录的特定信息。\n\n记录（也称为行）是表中存在的每个单独条目。例如，在上面的Customers表中有91条记录。记录是表中的横向实体。\n\n列是表中的垂直实体，其包含与表中的特定字段相关联的所有信息。\n\n------\n\n## SQL进程\n\n当您对任何RDBMS执行SQL命令时，系统将确定执行请求的最佳方式，并由SQL引擎确定如何解释该任务。\n\n在此过程中包含了各种组件。\n\n> 查询调度器优化引擎经典查询引擎SQL查询引擎\n\n典型的查询引擎处理所有非SQL查询，但SQL查询引擎不会处理逻辑文件。\n\n------\n\n## SQL标准命令\n\n与关系数据库交互的标准SQL命令是`CREATE`，`SELECT`，`INSERT`，`UPDATE`，`DELETE`和`DROP`，简单分为以下几组：\n\n------\n\n### DDL（数据定义语言）\n\n数据定义语言用于改变数据库结构，包括创建、更改和删除数据库对象。用于操纵表结构的数据定义语言命令有：\n\n- `CREATE TABLE`-- 创建（在数据库中创建新表、表视图或其他对象）\n- `ALTER TABLE`-- 更改 （修改现有的数据库对象，如表）\n- `DROP TABLE`-- 删除 （删除数据库中的整个表、表或其他对象的视图）\n\n------\n\n### DML（数据操纵语言）\n\n数据操纵语言用于检索、插入和修改数据，数据操纵语言是最常见的SQL命令。\n\n数据操纵语言命令包括：\n\n- `INSERT`-- 插入 （创建记录）\n- `DELETE`-- 删除 （删除记录）\n- `UPDATE`-- 修改（修改记录）\n- `SELECT` -- 检索 （从一个或多个表检索某些记录）\n\n------\n\n### DCL（数据控制语言）\n\n数据控制语言为用户提供权限控制命令。\n\n用于权限控制的命令有：\n\n- `GRANT`-- 授予权限\n- `REVOKE`-- 撤销已授予的权限\n\n------\n\n## SQL格式化使用\n\n**SQL的缩进规范要求：**\n\n- 使用空格来缩进\n- 每个缩进层次使用2个空格\n- 每行最多使用80个字符\n- 每个子句应该独占一行\n- 每个子句的参数应该缩进一个层次。\n\n可以比较直观的看到您想要的操作\n\n------\n\n## 章节小测\n\n现在，相信您已经了解了SQL的基础知识，那么，测验一下吧！\n","source":"wiki/sql/sentence/brief.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 简介\norder: 1\n---\n\nSQL（结构化查询语言）是用于访问和操作数据库中的数据的标准数据库编程语言。\n\nSQL是关系数据库系统的标准语言。所有关系数据库管理系统(RDMS)，如MySQL、MS Access、Oracle、Sybase、Informix、Postgres和SQL Server都使用SQL作为它们的标准数据库语言。\n\n为了处理数据库和数据库相关的编程，程序员需要有一些介质，或者可以说接口来详细说明一组命令或代码来处理数据库或访问数据库的数据。在本章中，将简要介绍在学习SQL的过程中您将学习的术语。\n\n------\n\n## 你会从SQL中学到什么？\n\nSQL为结构化查询语言提供了独特的学习和数据库处理技术，并将帮助您更好地控制SQL查询并有效处理这些代码。由于SQL帮助您包括数据库创建，数据库或表删除，获取行数据和修改这些数据等，并行SQL使得事情自动和平滑，最终用户可以轻松访问和处理该应用程序的数据。\n\n------\n\n## SQL 是什么？\n\n- SQL 发音为\"sequel\"。\n- SQL 指结构化查询语言，全称是 Structured Query Language（是最初由IBM开发）。\n- SQL 是关系数据库系统的标准语言。\n- SQL 是一种 ANSI（American National Standards Institute 美国国家标准化组织）标准的计算机语言。\n\n------\n\n## SQL 能做什么？\n\n- SQL可以创建新的数据库及其对象（表，索引，视图，存储过程，函数和触发器）。\n- SQL可以修改现有数据库的结构。\n- SQL可以从数据库中删除（删除）对象。\n- SQL可以TRUNCATE（截取）表中的所有记录。\n- SQL可以对数据字典进行COMMENT。\n- SQL可以RENAME一个对象。\n- SQL可以从数据库中选择（检索）数据。\n- SQL可以将数据插入到表中。\n- SQL可以更新表中的现有数据。\n- SQL可以从数据库表中删除记录。\n- SQL可以在数据库中设置用户的GRANT和REVOKE权限。\n\n------\n\n## SQL 的历史\n\n- 1970年，SQL由IBM的Donald D. Chamberlin和Raymond F. Boyce开发。\n- 1974年，开发版本最初被称为SEQUEL（结构化英语查询语言）。\n- 1979年，关系软件发布了第一个叫做System / R的商业产品。\n- 由于商标冲突问题，SEQUEL首字母缩略词后来更改为SQL。\n- 后来IBM基于System / R的原型开始在SQL上开发商业产品。\n- 第一个关系数据库由RelationalSoftware发布，后来被称为Oracle。\n\n------\n\n## SQL 是一种标准 - 但是...\n\n虽然 SQL 是一门 ANSI（American National Standards Institute 美国国家标准化组织）标准的计算机语言，但是仍然存在着多种不同版本的 SQL 语言。\n\n然而，为了与 ANSI 标准相兼容，它们必须以相似的方式共同地来支持一些主要的命令（比如 SELECT、UPDATE、DELETE、INSERT、WHERE 等等）。\n\n|      | **注释：**除SQL标准之外，大多数SQL数据库程序还具有自己的专有扩展名！ |\n| :--- | :----------------------------------------------------------- |\n|      |                                                              |\n\n------\n\n## 在您的网站中使用 SQL\n\n要创建一个显示数据库中数据的网站，您需要：\n\n- 一个RDBMS数据库程序（即MS Access，SQL Server，MySQL）。\n- 使用服务器端脚本语言，如PHP或ASP。\n- 使用SQL来获取所需的数据。\n- 使用HTML / CSS来设置页面的样式\n\n------\n\n## RDBMS\n\nRDBMS 指关系型数据库管理系统，全称 Relational Database Management System。\n\nRDBMS 是 SQL 的基础，同样也是所有现代数据库系统的基础，比如 MS SQL Server、IBM DB2、Oracle、MySQL 以及 Microsoft Access。\n\nRDBMS 中的数据存储在被称为表的数据库对象中。\n\n表是相关的数据项的集合，它由列和行组成。\n\n**代码示例：**\n\n```\nsql SELECT * FROM Customers;\n```\n\n每个表都被分解成称为字段的更小的实体。Customers表中的字段由CustomerID，CustomerName，ContactName，Address，City，PostalCode和Country组成。字段是表中的一列，用于维护表中每条记录的特定信息。\n\n记录（也称为行）是表中存在的每个单独条目。例如，在上面的Customers表中有91条记录。记录是表中的横向实体。\n\n列是表中的垂直实体，其包含与表中的特定字段相关联的所有信息。\n\n------\n\n## SQL进程\n\n当您对任何RDBMS执行SQL命令时，系统将确定执行请求的最佳方式，并由SQL引擎确定如何解释该任务。\n\n在此过程中包含了各种组件。\n\n> 查询调度器优化引擎经典查询引擎SQL查询引擎\n\n典型的查询引擎处理所有非SQL查询，但SQL查询引擎不会处理逻辑文件。\n\n------\n\n## SQL标准命令\n\n与关系数据库交互的标准SQL命令是`CREATE`，`SELECT`，`INSERT`，`UPDATE`，`DELETE`和`DROP`，简单分为以下几组：\n\n------\n\n### DDL（数据定义语言）\n\n数据定义语言用于改变数据库结构，包括创建、更改和删除数据库对象。用于操纵表结构的数据定义语言命令有：\n\n- `CREATE TABLE`-- 创建（在数据库中创建新表、表视图或其他对象）\n- `ALTER TABLE`-- 更改 （修改现有的数据库对象，如表）\n- `DROP TABLE`-- 删除 （删除数据库中的整个表、表或其他对象的视图）\n\n------\n\n### DML（数据操纵语言）\n\n数据操纵语言用于检索、插入和修改数据，数据操纵语言是最常见的SQL命令。\n\n数据操纵语言命令包括：\n\n- `INSERT`-- 插入 （创建记录）\n- `DELETE`-- 删除 （删除记录）\n- `UPDATE`-- 修改（修改记录）\n- `SELECT` -- 检索 （从一个或多个表检索某些记录）\n\n------\n\n### DCL（数据控制语言）\n\n数据控制语言为用户提供权限控制命令。\n\n用于权限控制的命令有：\n\n- `GRANT`-- 授予权限\n- `REVOKE`-- 撤销已授予的权限\n\n------\n\n## SQL格式化使用\n\n**SQL的缩进规范要求：**\n\n- 使用空格来缩进\n- 每个缩进层次使用2个空格\n- 每行最多使用80个字符\n- 每个子句应该独占一行\n- 每个子句的参数应该缩进一个层次。\n\n可以比较直观的看到您想要的操作\n\n------\n\n## 章节小测\n\n现在，相信您已经了解了SQL的基础知识，那么，测验一下吧！\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-10T09:53:16.959Z","path":"wiki/sql/sentence/brief.html","comments":1,"_id":"cmbreopio000b65x051af0g8x","content":"<p>SQL（结构化查询语言）是用于访问和操作数据库中的数据的标准数据库编程语言。</p>\n<p>SQL是关系数据库系统的标准语言。所有关系数据库管理系统(RDMS)，如MySQL、MS Access、Oracle、Sybase、Informix、Postgres和SQL Server都使用SQL作为它们的标准数据库语言。</p>\n<p>为了处理数据库和数据库相关的编程，程序员需要有一些介质，或者可以说接口来详细说明一组命令或代码来处理数据库或访问数据库的数据。在本章中，将简要介绍在学习SQL的过程中您将学习的术语。</p>\n<hr>\n<h2 id=\"你会从SQL中学到什么？\"><a href=\"#你会从SQL中学到什么？\" class=\"headerlink\" title=\"你会从SQL中学到什么？\"></a>你会从SQL中学到什么？</h2><p>SQL为结构化查询语言提供了独特的学习和数据库处理技术，并将帮助您更好地控制SQL查询并有效处理这些代码。由于SQL帮助您包括数据库创建，数据库或表删除，获取行数据和修改这些数据等，并行SQL使得事情自动和平滑，最终用户可以轻松访问和处理该应用程序的数据。</p>\n<hr>\n<h2 id=\"SQL-是什么？\"><a href=\"#SQL-是什么？\" class=\"headerlink\" title=\"SQL 是什么？\"></a>SQL 是什么？</h2><ul>\n<li>SQL 发音为”sequel”。</li>\n<li>SQL 指结构化查询语言，全称是 Structured Query Language（是最初由IBM开发）。</li>\n<li>SQL 是关系数据库系统的标准语言。</li>\n<li>SQL 是一种 ANSI（American National Standards Institute 美国国家标准化组织）标准的计算机语言。</li>\n</ul>\n<hr>\n<h2 id=\"SQL-能做什么？\"><a href=\"#SQL-能做什么？\" class=\"headerlink\" title=\"SQL 能做什么？\"></a>SQL 能做什么？</h2><ul>\n<li>SQL可以创建新的数据库及其对象（表，索引，视图，存储过程，函数和触发器）。</li>\n<li>SQL可以修改现有数据库的结构。</li>\n<li>SQL可以从数据库中删除（删除）对象。</li>\n<li>SQL可以TRUNCATE（截取）表中的所有记录。</li>\n<li>SQL可以对数据字典进行COMMENT。</li>\n<li>SQL可以RENAME一个对象。</li>\n<li>SQL可以从数据库中选择（检索）数据。</li>\n<li>SQL可以将数据插入到表中。</li>\n<li>SQL可以更新表中的现有数据。</li>\n<li>SQL可以从数据库表中删除记录。</li>\n<li>SQL可以在数据库中设置用户的GRANT和REVOKE权限。</li>\n</ul>\n<hr>\n<h2 id=\"SQL-的历史\"><a href=\"#SQL-的历史\" class=\"headerlink\" title=\"SQL 的历史\"></a>SQL 的历史</h2><ul>\n<li>1970年，SQL由IBM的Donald D. Chamberlin和Raymond F. Boyce开发。</li>\n<li>1974年，开发版本最初被称为SEQUEL（结构化英语查询语言）。</li>\n<li>1979年，关系软件发布了第一个叫做System &#x2F; R的商业产品。</li>\n<li>由于商标冲突问题，SEQUEL首字母缩略词后来更改为SQL。</li>\n<li>后来IBM基于System &#x2F; R的原型开始在SQL上开发商业产品。</li>\n<li>第一个关系数据库由RelationalSoftware发布，后来被称为Oracle。</li>\n</ul>\n<hr>\n<h2 id=\"SQL-是一种标准-但是…\"><a href=\"#SQL-是一种标准-但是…\" class=\"headerlink\" title=\"SQL 是一种标准 - 但是…\"></a>SQL 是一种标准 - 但是…</h2><p>虽然 SQL 是一门 ANSI（American National Standards Institute 美国国家标准化组织）标准的计算机语言，但是仍然存在着多种不同版本的 SQL 语言。</p>\n<p>然而，为了与 ANSI 标准相兼容，它们必须以相似的方式共同地来支持一些主要的命令（比如 SELECT、UPDATE、DELETE、INSERT、WHERE 等等）。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">**注释：**除SQL标准之外，大多数SQL数据库程序还具有自己的专有扩展名！</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"在您的网站中使用-SQL\"><a href=\"#在您的网站中使用-SQL\" class=\"headerlink\" title=\"在您的网站中使用 SQL\"></a>在您的网站中使用 SQL</h2><p>要创建一个显示数据库中数据的网站，您需要：</p>\n<ul>\n<li>一个RDBMS数据库程序（即MS Access，SQL Server，MySQL）。</li>\n<li>使用服务器端脚本语言，如PHP或ASP。</li>\n<li>使用SQL来获取所需的数据。</li>\n<li>使用HTML &#x2F; CSS来设置页面的样式</li>\n</ul>\n<hr>\n<h2 id=\"RDBMS\"><a href=\"#RDBMS\" class=\"headerlink\" title=\"RDBMS\"></a>RDBMS</h2><p>RDBMS 指关系型数据库管理系统，全称 Relational Database Management System。</p>\n<p>RDBMS 是 SQL 的基础，同样也是所有现代数据库系统的基础，比如 MS SQL Server、IBM DB2、Oracle、MySQL 以及 Microsoft Access。</p>\n<p>RDBMS 中的数据存储在被称为表的数据库对象中。</p>\n<p>表是相关的数据项的集合，它由列和行组成。</p>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sql SELECT * FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>每个表都被分解成称为字段的更小的实体。Customers表中的字段由CustomerID，CustomerName，ContactName，Address，City，PostalCode和Country组成。字段是表中的一列，用于维护表中每条记录的特定信息。</p>\n<p>记录（也称为行）是表中存在的每个单独条目。例如，在上面的Customers表中有91条记录。记录是表中的横向实体。</p>\n<p>列是表中的垂直实体，其包含与表中的特定字段相关联的所有信息。</p>\n<hr>\n<h2 id=\"SQL进程\"><a href=\"#SQL进程\" class=\"headerlink\" title=\"SQL进程\"></a>SQL进程</h2><p>当您对任何RDBMS执行SQL命令时，系统将确定执行请求的最佳方式，并由SQL引擎确定如何解释该任务。</p>\n<p>在此过程中包含了各种组件。</p>\n<blockquote>\n<p>查询调度器优化引擎经典查询引擎SQL查询引擎</p>\n</blockquote>\n<p>典型的查询引擎处理所有非SQL查询，但SQL查询引擎不会处理逻辑文件。</p>\n<hr>\n<h2 id=\"SQL标准命令\"><a href=\"#SQL标准命令\" class=\"headerlink\" title=\"SQL标准命令\"></a>SQL标准命令</h2><p>与关系数据库交互的标准SQL命令是<code>CREATE</code>，<code>SELECT</code>，<code>INSERT</code>，<code>UPDATE</code>，<code>DELETE</code>和<code>DROP</code>，简单分为以下几组：</p>\n<hr>\n<h3 id=\"DDL（数据定义语言）\"><a href=\"#DDL（数据定义语言）\" class=\"headerlink\" title=\"DDL（数据定义语言）\"></a>DDL（数据定义语言）</h3><p>数据定义语言用于改变数据库结构，包括创建、更改和删除数据库对象。用于操纵表结构的数据定义语言命令有：</p>\n<ul>\n<li><code>CREATE TABLE</code>– 创建（在数据库中创建新表、表视图或其他对象）</li>\n<li><code>ALTER TABLE</code>– 更改 （修改现有的数据库对象，如表）</li>\n<li><code>DROP TABLE</code>– 删除 （删除数据库中的整个表、表或其他对象的视图）</li>\n</ul>\n<hr>\n<h3 id=\"DML（数据操纵语言）\"><a href=\"#DML（数据操纵语言）\" class=\"headerlink\" title=\"DML（数据操纵语言）\"></a>DML（数据操纵语言）</h3><p>数据操纵语言用于检索、插入和修改数据，数据操纵语言是最常见的SQL命令。</p>\n<p>数据操纵语言命令包括：</p>\n<ul>\n<li><code>INSERT</code>– 插入 （创建记录）</li>\n<li><code>DELETE</code>– 删除 （删除记录）</li>\n<li><code>UPDATE</code>– 修改（修改记录）</li>\n<li><code>SELECT</code> – 检索 （从一个或多个表检索某些记录）</li>\n</ul>\n<hr>\n<h3 id=\"DCL（数据控制语言）\"><a href=\"#DCL（数据控制语言）\" class=\"headerlink\" title=\"DCL（数据控制语言）\"></a>DCL（数据控制语言）</h3><p>数据控制语言为用户提供权限控制命令。</p>\n<p>用于权限控制的命令有：</p>\n<ul>\n<li><code>GRANT</code>– 授予权限</li>\n<li><code>REVOKE</code>– 撤销已授予的权限</li>\n</ul>\n<hr>\n<h2 id=\"SQL格式化使用\"><a href=\"#SQL格式化使用\" class=\"headerlink\" title=\"SQL格式化使用\"></a>SQL格式化使用</h2><p><strong>SQL的缩进规范要求：</strong></p>\n<ul>\n<li>使用空格来缩进</li>\n<li>每个缩进层次使用2个空格</li>\n<li>每行最多使用80个字符</li>\n<li>每个子句应该独占一行</li>\n<li>每个子句的参数应该缩进一个层次。</li>\n</ul>\n<p>可以比较直观的看到您想要的操作</p>\n<hr>\n<h2 id=\"章节小测\"><a href=\"#章节小测\" class=\"headerlink\" title=\"章节小测\"></a>章节小测</h2><p>现在，相信您已经了解了SQL的基础知识，那么，测验一下吧！</p>\n","excerpt":"","more":"<p>SQL（结构化查询语言）是用于访问和操作数据库中的数据的标准数据库编程语言。</p>\n<p>SQL是关系数据库系统的标准语言。所有关系数据库管理系统(RDMS)，如MySQL、MS Access、Oracle、Sybase、Informix、Postgres和SQL Server都使用SQL作为它们的标准数据库语言。</p>\n<p>为了处理数据库和数据库相关的编程，程序员需要有一些介质，或者可以说接口来详细说明一组命令或代码来处理数据库或访问数据库的数据。在本章中，将简要介绍在学习SQL的过程中您将学习的术语。</p>\n<hr>\n<h2 id=\"你会从SQL中学到什么？\"><a href=\"#你会从SQL中学到什么？\" class=\"headerlink\" title=\"你会从SQL中学到什么？\"></a>你会从SQL中学到什么？</h2><p>SQL为结构化查询语言提供了独特的学习和数据库处理技术，并将帮助您更好地控制SQL查询并有效处理这些代码。由于SQL帮助您包括数据库创建，数据库或表删除，获取行数据和修改这些数据等，并行SQL使得事情自动和平滑，最终用户可以轻松访问和处理该应用程序的数据。</p>\n<hr>\n<h2 id=\"SQL-是什么？\"><a href=\"#SQL-是什么？\" class=\"headerlink\" title=\"SQL 是什么？\"></a>SQL 是什么？</h2><ul>\n<li>SQL 发音为”sequel”。</li>\n<li>SQL 指结构化查询语言，全称是 Structured Query Language（是最初由IBM开发）。</li>\n<li>SQL 是关系数据库系统的标准语言。</li>\n<li>SQL 是一种 ANSI（American National Standards Institute 美国国家标准化组织）标准的计算机语言。</li>\n</ul>\n<hr>\n<h2 id=\"SQL-能做什么？\"><a href=\"#SQL-能做什么？\" class=\"headerlink\" title=\"SQL 能做什么？\"></a>SQL 能做什么？</h2><ul>\n<li>SQL可以创建新的数据库及其对象（表，索引，视图，存储过程，函数和触发器）。</li>\n<li>SQL可以修改现有数据库的结构。</li>\n<li>SQL可以从数据库中删除（删除）对象。</li>\n<li>SQL可以TRUNCATE（截取）表中的所有记录。</li>\n<li>SQL可以对数据字典进行COMMENT。</li>\n<li>SQL可以RENAME一个对象。</li>\n<li>SQL可以从数据库中选择（检索）数据。</li>\n<li>SQL可以将数据插入到表中。</li>\n<li>SQL可以更新表中的现有数据。</li>\n<li>SQL可以从数据库表中删除记录。</li>\n<li>SQL可以在数据库中设置用户的GRANT和REVOKE权限。</li>\n</ul>\n<hr>\n<h2 id=\"SQL-的历史\"><a href=\"#SQL-的历史\" class=\"headerlink\" title=\"SQL 的历史\"></a>SQL 的历史</h2><ul>\n<li>1970年，SQL由IBM的Donald D. Chamberlin和Raymond F. Boyce开发。</li>\n<li>1974年，开发版本最初被称为SEQUEL（结构化英语查询语言）。</li>\n<li>1979年，关系软件发布了第一个叫做System &#x2F; R的商业产品。</li>\n<li>由于商标冲突问题，SEQUEL首字母缩略词后来更改为SQL。</li>\n<li>后来IBM基于System &#x2F; R的原型开始在SQL上开发商业产品。</li>\n<li>第一个关系数据库由RelationalSoftware发布，后来被称为Oracle。</li>\n</ul>\n<hr>\n<h2 id=\"SQL-是一种标准-但是…\"><a href=\"#SQL-是一种标准-但是…\" class=\"headerlink\" title=\"SQL 是一种标准 - 但是…\"></a>SQL 是一种标准 - 但是…</h2><p>虽然 SQL 是一门 ANSI（American National Standards Institute 美国国家标准化组织）标准的计算机语言，但是仍然存在着多种不同版本的 SQL 语言。</p>\n<p>然而，为了与 ANSI 标准相兼容，它们必须以相似的方式共同地来支持一些主要的命令（比如 SELECT、UPDATE、DELETE、INSERT、WHERE 等等）。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">**注释：**除SQL标准之外，大多数SQL数据库程序还具有自己的专有扩展名！</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"在您的网站中使用-SQL\"><a href=\"#在您的网站中使用-SQL\" class=\"headerlink\" title=\"在您的网站中使用 SQL\"></a>在您的网站中使用 SQL</h2><p>要创建一个显示数据库中数据的网站，您需要：</p>\n<ul>\n<li>一个RDBMS数据库程序（即MS Access，SQL Server，MySQL）。</li>\n<li>使用服务器端脚本语言，如PHP或ASP。</li>\n<li>使用SQL来获取所需的数据。</li>\n<li>使用HTML &#x2F; CSS来设置页面的样式</li>\n</ul>\n<hr>\n<h2 id=\"RDBMS\"><a href=\"#RDBMS\" class=\"headerlink\" title=\"RDBMS\"></a>RDBMS</h2><p>RDBMS 指关系型数据库管理系统，全称 Relational Database Management System。</p>\n<p>RDBMS 是 SQL 的基础，同样也是所有现代数据库系统的基础，比如 MS SQL Server、IBM DB2、Oracle、MySQL 以及 Microsoft Access。</p>\n<p>RDBMS 中的数据存储在被称为表的数据库对象中。</p>\n<p>表是相关的数据项的集合，它由列和行组成。</p>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sql SELECT * FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>每个表都被分解成称为字段的更小的实体。Customers表中的字段由CustomerID，CustomerName，ContactName，Address，City，PostalCode和Country组成。字段是表中的一列，用于维护表中每条记录的特定信息。</p>\n<p>记录（也称为行）是表中存在的每个单独条目。例如，在上面的Customers表中有91条记录。记录是表中的横向实体。</p>\n<p>列是表中的垂直实体，其包含与表中的特定字段相关联的所有信息。</p>\n<hr>\n<h2 id=\"SQL进程\"><a href=\"#SQL进程\" class=\"headerlink\" title=\"SQL进程\"></a>SQL进程</h2><p>当您对任何RDBMS执行SQL命令时，系统将确定执行请求的最佳方式，并由SQL引擎确定如何解释该任务。</p>\n<p>在此过程中包含了各种组件。</p>\n<blockquote>\n<p>查询调度器优化引擎经典查询引擎SQL查询引擎</p>\n</blockquote>\n<p>典型的查询引擎处理所有非SQL查询，但SQL查询引擎不会处理逻辑文件。</p>\n<hr>\n<h2 id=\"SQL标准命令\"><a href=\"#SQL标准命令\" class=\"headerlink\" title=\"SQL标准命令\"></a>SQL标准命令</h2><p>与关系数据库交互的标准SQL命令是<code>CREATE</code>，<code>SELECT</code>，<code>INSERT</code>，<code>UPDATE</code>，<code>DELETE</code>和<code>DROP</code>，简单分为以下几组：</p>\n<hr>\n<h3 id=\"DDL（数据定义语言）\"><a href=\"#DDL（数据定义语言）\" class=\"headerlink\" title=\"DDL（数据定义语言）\"></a>DDL（数据定义语言）</h3><p>数据定义语言用于改变数据库结构，包括创建、更改和删除数据库对象。用于操纵表结构的数据定义语言命令有：</p>\n<ul>\n<li><code>CREATE TABLE</code>– 创建（在数据库中创建新表、表视图或其他对象）</li>\n<li><code>ALTER TABLE</code>– 更改 （修改现有的数据库对象，如表）</li>\n<li><code>DROP TABLE</code>– 删除 （删除数据库中的整个表、表或其他对象的视图）</li>\n</ul>\n<hr>\n<h3 id=\"DML（数据操纵语言）\"><a href=\"#DML（数据操纵语言）\" class=\"headerlink\" title=\"DML（数据操纵语言）\"></a>DML（数据操纵语言）</h3><p>数据操纵语言用于检索、插入和修改数据，数据操纵语言是最常见的SQL命令。</p>\n<p>数据操纵语言命令包括：</p>\n<ul>\n<li><code>INSERT</code>– 插入 （创建记录）</li>\n<li><code>DELETE</code>– 删除 （删除记录）</li>\n<li><code>UPDATE</code>– 修改（修改记录）</li>\n<li><code>SELECT</code> – 检索 （从一个或多个表检索某些记录）</li>\n</ul>\n<hr>\n<h3 id=\"DCL（数据控制语言）\"><a href=\"#DCL（数据控制语言）\" class=\"headerlink\" title=\"DCL（数据控制语言）\"></a>DCL（数据控制语言）</h3><p>数据控制语言为用户提供权限控制命令。</p>\n<p>用于权限控制的命令有：</p>\n<ul>\n<li><code>GRANT</code>– 授予权限</li>\n<li><code>REVOKE</code>– 撤销已授予的权限</li>\n</ul>\n<hr>\n<h2 id=\"SQL格式化使用\"><a href=\"#SQL格式化使用\" class=\"headerlink\" title=\"SQL格式化使用\"></a>SQL格式化使用</h2><p><strong>SQL的缩进规范要求：</strong></p>\n<ul>\n<li>使用空格来缩进</li>\n<li>每个缩进层次使用2个空格</li>\n<li>每行最多使用80个字符</li>\n<li>每个子句应该独占一行</li>\n<li>每个子句的参数应该缩进一个层次。</li>\n</ul>\n<p>可以比较直观的看到您想要的操作</p>\n<hr>\n<h2 id=\"章节小测\"><a href=\"#章节小测\" class=\"headerlink\" title=\"章节小测\"></a>章节小测</h2><p>现在，相信您已经了解了SQL的基础知识，那么，测验一下吧！</p>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 通用数据类型","order":21,"_content":"\n## SQL 通用数据类型\n\n------\n\n数据类型定义了存储在列中的值的类型。\n\n## SQL 通用数据类型\n\n------\n\n数据库表中的每一列都需要有一个名称和数据类型。\n\nSQL 开发人员必须在创建 SQL 表时决定表中的每个列将要存储的数据的类型。数据类型是一个标签，是便于 SQL 了解每个列期望存储什么类型的数据的指南，它也标识了 SQL 如何与存储的数据进行交互。\n\n下面的表格列出了 SQL 中通用的数据类型：\n\n| 数据类型                           | 描述                                                         |\n| :--------------------------------- | :----------------------------------------------------------- |\n| CHARACTER(n)                       | 字符/字符串。固定长度 n。                                    |\n| VARCHAR(n) 或 CHARACTER VARYING(n) | 字符/字符串。可变长度。最大长度 n。                          |\n| BINARY(n)                          | 二进制串。固定长度 n。                                       |\n| BOOLEAN                            | 存储 TRUE 或 FALSE 值                                        |\n| VARBINARY(n) 或 BINARY VARYING(n)  | 二进制串。可变长度。最大长度 n。                             |\n| INTEGER(p)                         | 整数值（没有小数点）。精度 p。                               |\n| SMALLINT                           | 整数值（没有小数点）。精度 5。                               |\n| INTEGER                            | 整数值（没有小数点）。精度 10。                              |\n| BIGINT                             | 整数值（没有小数点）。精度 19。                              |\n| DECIMAL(p,s)                       | 精确数值，精度 p，小数点后位数 s。例如：decimal(5,2) 是一个小数点前有 3 位数小数点后有 2 位数的数字。 |\n| NUMERIC(p,s)                       | 精确数值，精度 p，小数点后位数 s。（与 DECIMAL 相同）        |\n| FLOAT(p)                           | 近似数值，尾数精度 p。一个采用以 10 为基数的指数计数法的浮点数。该类型的 size 参数由一个指定最小精度的单一数字组成。 |\n| REAL                               | 近似数值，尾数精度 7。                                       |\n| FLOAT                              | 近似数值，尾数精度 16。                                      |\n| DOUBLE PRECISION                   | 近似数值，尾数精度 16。                                      |\n| DATE                               | 存储年、月、日的值。                                         |\n| TIME                               | 存储小时、分、秒的值。                                       |\n| TIMESTAMP                          | 存储年、月、日、小时、分、秒的值。                           |\n| INTERVAL                           | 由一些整数字段组成，代表一段时间，取决于区间的类型。         |\n| ARRAY                              | 元素的固定长度的有序集合                                     |\n| MULTISET                           | 元素的可变长度的无序集合                                     |\n| XML                                | 存储 XML 数据                                                |\n\n## SQL 数据类型快速参考手册\n\n------\n\n然而，不同的数据库为数据类型定义提供了不同的选择。\n　下表显示了不同数据库平台上某些数据类型的通用名称：\n\n| 数据类型            | Access                  | SQLServer                                            | Oracle           | MySQL       | PostgreSQL       |\n| :------------------ | :---------------------- | :--------------------------------------------------- | :--------------- | :---------- | :--------------- |\n| *boolean*           | Yes/No                  | Bit                                                  | Byte             | N/A         | Boolean          |\n| *integer*           | Number (integer)        | Int                                                  | Number           | Int Integer | Int Integer      |\n| *float*             | Number (single)         | Float Real                                           | Number           | Float       | Numeric          |\n| *currency*          | Currency                | Money                                                | N/A              | N/A         | Money            |\n| *string (fixed)*    | N/A                     | Char                                                 | Char             | Char        | Char             |\n| *string (variable)* | Text (<256) Memo (65k+) | Varchar                                              | Varchar Varchar2 | Varchar     | Varchar          |\n| *binary object*     | OLE Object Memo         | Binary (fixed up to 8K) Varbinary (<8K) Image (<2GB) | Long Raw         | Blob Text   | Binary Varbinary |\n\n| **注释：** 在不同的数据库中，相同的数据类型可能有不同的名称。即使名字相同，大小和其他细节也可能不同！**请随时检查文件!** |\n| :----------------------------------------------------------- |\n","source":"wiki/sql/sentence/datatype.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 通用数据类型\norder: 21\n---\n\n## SQL 通用数据类型\n\n------\n\n数据类型定义了存储在列中的值的类型。\n\n## SQL 通用数据类型\n\n------\n\n数据库表中的每一列都需要有一个名称和数据类型。\n\nSQL 开发人员必须在创建 SQL 表时决定表中的每个列将要存储的数据的类型。数据类型是一个标签，是便于 SQL 了解每个列期望存储什么类型的数据的指南，它也标识了 SQL 如何与存储的数据进行交互。\n\n下面的表格列出了 SQL 中通用的数据类型：\n\n| 数据类型                           | 描述                                                         |\n| :--------------------------------- | :----------------------------------------------------------- |\n| CHARACTER(n)                       | 字符/字符串。固定长度 n。                                    |\n| VARCHAR(n) 或 CHARACTER VARYING(n) | 字符/字符串。可变长度。最大长度 n。                          |\n| BINARY(n)                          | 二进制串。固定长度 n。                                       |\n| BOOLEAN                            | 存储 TRUE 或 FALSE 值                                        |\n| VARBINARY(n) 或 BINARY VARYING(n)  | 二进制串。可变长度。最大长度 n。                             |\n| INTEGER(p)                         | 整数值（没有小数点）。精度 p。                               |\n| SMALLINT                           | 整数值（没有小数点）。精度 5。                               |\n| INTEGER                            | 整数值（没有小数点）。精度 10。                              |\n| BIGINT                             | 整数值（没有小数点）。精度 19。                              |\n| DECIMAL(p,s)                       | 精确数值，精度 p，小数点后位数 s。例如：decimal(5,2) 是一个小数点前有 3 位数小数点后有 2 位数的数字。 |\n| NUMERIC(p,s)                       | 精确数值，精度 p，小数点后位数 s。（与 DECIMAL 相同）        |\n| FLOAT(p)                           | 近似数值，尾数精度 p。一个采用以 10 为基数的指数计数法的浮点数。该类型的 size 参数由一个指定最小精度的单一数字组成。 |\n| REAL                               | 近似数值，尾数精度 7。                                       |\n| FLOAT                              | 近似数值，尾数精度 16。                                      |\n| DOUBLE PRECISION                   | 近似数值，尾数精度 16。                                      |\n| DATE                               | 存储年、月、日的值。                                         |\n| TIME                               | 存储小时、分、秒的值。                                       |\n| TIMESTAMP                          | 存储年、月、日、小时、分、秒的值。                           |\n| INTERVAL                           | 由一些整数字段组成，代表一段时间，取决于区间的类型。         |\n| ARRAY                              | 元素的固定长度的有序集合                                     |\n| MULTISET                           | 元素的可变长度的无序集合                                     |\n| XML                                | 存储 XML 数据                                                |\n\n## SQL 数据类型快速参考手册\n\n------\n\n然而，不同的数据库为数据类型定义提供了不同的选择。\n　下表显示了不同数据库平台上某些数据类型的通用名称：\n\n| 数据类型            | Access                  | SQLServer                                            | Oracle           | MySQL       | PostgreSQL       |\n| :------------------ | :---------------------- | :--------------------------------------------------- | :--------------- | :---------- | :--------------- |\n| *boolean*           | Yes/No                  | Bit                                                  | Byte             | N/A         | Boolean          |\n| *integer*           | Number (integer)        | Int                                                  | Number           | Int Integer | Int Integer      |\n| *float*             | Number (single)         | Float Real                                           | Number           | Float       | Numeric          |\n| *currency*          | Currency                | Money                                                | N/A              | N/A         | Money            |\n| *string (fixed)*    | N/A                     | Char                                                 | Char             | Char        | Char             |\n| *string (variable)* | Text (<256) Memo (65k+) | Varchar                                              | Varchar Varchar2 | Varchar     | Varchar          |\n| *binary object*     | OLE Object Memo         | Binary (fixed up to 8K) Varbinary (<8K) Image (<2GB) | Long Raw         | Blob Text   | Binary Varbinary |\n\n| **注释：** 在不同的数据库中，相同的数据类型可能有不同的名称。即使名字相同，大小和其他细节也可能不同！**请随时检查文件!** |\n| :----------------------------------------------------------- |\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T01:04:15.653Z","path":"wiki/sql/sentence/datatype.html","comments":1,"_id":"cmbreopio000c65x01opc9b2k","content":"<h2 id=\"SQL-通用数据类型\"><a href=\"#SQL-通用数据类型\" class=\"headerlink\" title=\"SQL 通用数据类型\"></a>SQL 通用数据类型</h2><hr>\n<p>数据类型定义了存储在列中的值的类型。</p>\n<h2 id=\"SQL-通用数据类型-1\"><a href=\"#SQL-通用数据类型-1\" class=\"headerlink\" title=\"SQL 通用数据类型\"></a>SQL 通用数据类型</h2><hr>\n<p>数据库表中的每一列都需要有一个名称和数据类型。</p>\n<p>SQL 开发人员必须在创建 SQL 表时决定表中的每个列将要存储的数据的类型。数据类型是一个标签，是便于 SQL 了解每个列期望存储什么类型的数据的指南，它也标识了 SQL 如何与存储的数据进行交互。</p>\n<p>下面的表格列出了 SQL 中通用的数据类型：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">CHARACTER(n)</td>\n<td align=\"left\">字符&#x2F;字符串。固定长度 n。</td>\n</tr>\n<tr>\n<td align=\"left\">VARCHAR(n) 或 CHARACTER VARYING(n)</td>\n<td align=\"left\">字符&#x2F;字符串。可变长度。最大长度 n。</td>\n</tr>\n<tr>\n<td align=\"left\">BINARY(n)</td>\n<td align=\"left\">二进制串。固定长度 n。</td>\n</tr>\n<tr>\n<td align=\"left\">BOOLEAN</td>\n<td align=\"left\">存储 TRUE 或 FALSE 值</td>\n</tr>\n<tr>\n<td align=\"left\">VARBINARY(n) 或 BINARY VARYING(n)</td>\n<td align=\"left\">二进制串。可变长度。最大长度 n。</td>\n</tr>\n<tr>\n<td align=\"left\">INTEGER(p)</td>\n<td align=\"left\">整数值（没有小数点）。精度 p。</td>\n</tr>\n<tr>\n<td align=\"left\">SMALLINT</td>\n<td align=\"left\">整数值（没有小数点）。精度 5。</td>\n</tr>\n<tr>\n<td align=\"left\">INTEGER</td>\n<td align=\"left\">整数值（没有小数点）。精度 10。</td>\n</tr>\n<tr>\n<td align=\"left\">BIGINT</td>\n<td align=\"left\">整数值（没有小数点）。精度 19。</td>\n</tr>\n<tr>\n<td align=\"left\">DECIMAL(p,s)</td>\n<td align=\"left\">精确数值，精度 p，小数点后位数 s。例如：decimal(5,2) 是一个小数点前有 3 位数小数点后有 2 位数的数字。</td>\n</tr>\n<tr>\n<td align=\"left\">NUMERIC(p,s)</td>\n<td align=\"left\">精确数值，精度 p，小数点后位数 s。（与 DECIMAL 相同）</td>\n</tr>\n<tr>\n<td align=\"left\">FLOAT(p)</td>\n<td align=\"left\">近似数值，尾数精度 p。一个采用以 10 为基数的指数计数法的浮点数。该类型的 size 参数由一个指定最小精度的单一数字组成。</td>\n</tr>\n<tr>\n<td align=\"left\">REAL</td>\n<td align=\"left\">近似数值，尾数精度 7。</td>\n</tr>\n<tr>\n<td align=\"left\">FLOAT</td>\n<td align=\"left\">近似数值，尾数精度 16。</td>\n</tr>\n<tr>\n<td align=\"left\">DOUBLE PRECISION</td>\n<td align=\"left\">近似数值，尾数精度 16。</td>\n</tr>\n<tr>\n<td align=\"left\">DATE</td>\n<td align=\"left\">存储年、月、日的值。</td>\n</tr>\n<tr>\n<td align=\"left\">TIME</td>\n<td align=\"left\">存储小时、分、秒的值。</td>\n</tr>\n<tr>\n<td align=\"left\">TIMESTAMP</td>\n<td align=\"left\">存储年、月、日、小时、分、秒的值。</td>\n</tr>\n<tr>\n<td align=\"left\">INTERVAL</td>\n<td align=\"left\">由一些整数字段组成，代表一段时间，取决于区间的类型。</td>\n</tr>\n<tr>\n<td align=\"left\">ARRAY</td>\n<td align=\"left\">元素的固定长度的有序集合</td>\n</tr>\n<tr>\n<td align=\"left\">MULTISET</td>\n<td align=\"left\">元素的可变长度的无序集合</td>\n</tr>\n<tr>\n<td align=\"left\">XML</td>\n<td align=\"left\">存储 XML 数据</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-数据类型快速参考手册\"><a href=\"#SQL-数据类型快速参考手册\" class=\"headerlink\" title=\"SQL 数据类型快速参考手册\"></a>SQL 数据类型快速参考手册</h2><hr>\n<p>然而，不同的数据库为数据类型定义提供了不同的选择。<br>　下表显示了不同数据库平台上某些数据类型的通用名称：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">Access</th>\n<th align=\"left\">SQLServer</th>\n<th align=\"left\">Oracle</th>\n<th align=\"left\">MySQL</th>\n<th align=\"left\">PostgreSQL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><em>boolean</em></td>\n<td align=\"left\">Yes&#x2F;No</td>\n<td align=\"left\">Bit</td>\n<td align=\"left\">Byte</td>\n<td align=\"left\">N&#x2F;A</td>\n<td align=\"left\">Boolean</td>\n</tr>\n<tr>\n<td align=\"left\"><em>integer</em></td>\n<td align=\"left\">Number (integer)</td>\n<td align=\"left\">Int</td>\n<td align=\"left\">Number</td>\n<td align=\"left\">Int Integer</td>\n<td align=\"left\">Int Integer</td>\n</tr>\n<tr>\n<td align=\"left\"><em>float</em></td>\n<td align=\"left\">Number (single)</td>\n<td align=\"left\">Float Real</td>\n<td align=\"left\">Number</td>\n<td align=\"left\">Float</td>\n<td align=\"left\">Numeric</td>\n</tr>\n<tr>\n<td align=\"left\"><em>currency</em></td>\n<td align=\"left\">Currency</td>\n<td align=\"left\">Money</td>\n<td align=\"left\">N&#x2F;A</td>\n<td align=\"left\">N&#x2F;A</td>\n<td align=\"left\">Money</td>\n</tr>\n<tr>\n<td align=\"left\"><em>string (fixed)</em></td>\n<td align=\"left\">N&#x2F;A</td>\n<td align=\"left\">Char</td>\n<td align=\"left\">Char</td>\n<td align=\"left\">Char</td>\n<td align=\"left\">Char</td>\n</tr>\n<tr>\n<td align=\"left\"><em>string (variable)</em></td>\n<td align=\"left\">Text (&lt;256) Memo (65k+)</td>\n<td align=\"left\">Varchar</td>\n<td align=\"left\">Varchar Varchar2</td>\n<td align=\"left\">Varchar</td>\n<td align=\"left\">Varchar</td>\n</tr>\n<tr>\n<td align=\"left\"><em>binary object</em></td>\n<td align=\"left\">OLE Object Memo</td>\n<td align=\"left\">Binary (fixed up to 8K) Varbinary (&lt;8K) Image (&lt;2GB)</td>\n<td align=\"left\">Long Raw</td>\n<td align=\"left\">Blob Text</td>\n<td align=\"left\">Binary Varbinary</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>注释：</strong> 在不同的数据库中，相同的数据类型可能有不同的名称。即使名字相同，大小和其他细节也可能不同！<strong>请随时检查文件!</strong></th>\n</tr>\n</thead>\n</table>\n","excerpt":"","more":"<h2 id=\"SQL-通用数据类型\"><a href=\"#SQL-通用数据类型\" class=\"headerlink\" title=\"SQL 通用数据类型\"></a>SQL 通用数据类型</h2><hr>\n<p>数据类型定义了存储在列中的值的类型。</p>\n<h2 id=\"SQL-通用数据类型-1\"><a href=\"#SQL-通用数据类型-1\" class=\"headerlink\" title=\"SQL 通用数据类型\"></a>SQL 通用数据类型</h2><hr>\n<p>数据库表中的每一列都需要有一个名称和数据类型。</p>\n<p>SQL 开发人员必须在创建 SQL 表时决定表中的每个列将要存储的数据的类型。数据类型是一个标签，是便于 SQL 了解每个列期望存储什么类型的数据的指南，它也标识了 SQL 如何与存储的数据进行交互。</p>\n<p>下面的表格列出了 SQL 中通用的数据类型：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">CHARACTER(n)</td>\n<td align=\"left\">字符&#x2F;字符串。固定长度 n。</td>\n</tr>\n<tr>\n<td align=\"left\">VARCHAR(n) 或 CHARACTER VARYING(n)</td>\n<td align=\"left\">字符&#x2F;字符串。可变长度。最大长度 n。</td>\n</tr>\n<tr>\n<td align=\"left\">BINARY(n)</td>\n<td align=\"left\">二进制串。固定长度 n。</td>\n</tr>\n<tr>\n<td align=\"left\">BOOLEAN</td>\n<td align=\"left\">存储 TRUE 或 FALSE 值</td>\n</tr>\n<tr>\n<td align=\"left\">VARBINARY(n) 或 BINARY VARYING(n)</td>\n<td align=\"left\">二进制串。可变长度。最大长度 n。</td>\n</tr>\n<tr>\n<td align=\"left\">INTEGER(p)</td>\n<td align=\"left\">整数值（没有小数点）。精度 p。</td>\n</tr>\n<tr>\n<td align=\"left\">SMALLINT</td>\n<td align=\"left\">整数值（没有小数点）。精度 5。</td>\n</tr>\n<tr>\n<td align=\"left\">INTEGER</td>\n<td align=\"left\">整数值（没有小数点）。精度 10。</td>\n</tr>\n<tr>\n<td align=\"left\">BIGINT</td>\n<td align=\"left\">整数值（没有小数点）。精度 19。</td>\n</tr>\n<tr>\n<td align=\"left\">DECIMAL(p,s)</td>\n<td align=\"left\">精确数值，精度 p，小数点后位数 s。例如：decimal(5,2) 是一个小数点前有 3 位数小数点后有 2 位数的数字。</td>\n</tr>\n<tr>\n<td align=\"left\">NUMERIC(p,s)</td>\n<td align=\"left\">精确数值，精度 p，小数点后位数 s。（与 DECIMAL 相同）</td>\n</tr>\n<tr>\n<td align=\"left\">FLOAT(p)</td>\n<td align=\"left\">近似数值，尾数精度 p。一个采用以 10 为基数的指数计数法的浮点数。该类型的 size 参数由一个指定最小精度的单一数字组成。</td>\n</tr>\n<tr>\n<td align=\"left\">REAL</td>\n<td align=\"left\">近似数值，尾数精度 7。</td>\n</tr>\n<tr>\n<td align=\"left\">FLOAT</td>\n<td align=\"left\">近似数值，尾数精度 16。</td>\n</tr>\n<tr>\n<td align=\"left\">DOUBLE PRECISION</td>\n<td align=\"left\">近似数值，尾数精度 16。</td>\n</tr>\n<tr>\n<td align=\"left\">DATE</td>\n<td align=\"left\">存储年、月、日的值。</td>\n</tr>\n<tr>\n<td align=\"left\">TIME</td>\n<td align=\"left\">存储小时、分、秒的值。</td>\n</tr>\n<tr>\n<td align=\"left\">TIMESTAMP</td>\n<td align=\"left\">存储年、月、日、小时、分、秒的值。</td>\n</tr>\n<tr>\n<td align=\"left\">INTERVAL</td>\n<td align=\"left\">由一些整数字段组成，代表一段时间，取决于区间的类型。</td>\n</tr>\n<tr>\n<td align=\"left\">ARRAY</td>\n<td align=\"left\">元素的固定长度的有序集合</td>\n</tr>\n<tr>\n<td align=\"left\">MULTISET</td>\n<td align=\"left\">元素的可变长度的无序集合</td>\n</tr>\n<tr>\n<td align=\"left\">XML</td>\n<td align=\"left\">存储 XML 数据</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-数据类型快速参考手册\"><a href=\"#SQL-数据类型快速参考手册\" class=\"headerlink\" title=\"SQL 数据类型快速参考手册\"></a>SQL 数据类型快速参考手册</h2><hr>\n<p>然而，不同的数据库为数据类型定义提供了不同的选择。<br>　下表显示了不同数据库平台上某些数据类型的通用名称：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">Access</th>\n<th align=\"left\">SQLServer</th>\n<th align=\"left\">Oracle</th>\n<th align=\"left\">MySQL</th>\n<th align=\"left\">PostgreSQL</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><em>boolean</em></td>\n<td align=\"left\">Yes&#x2F;No</td>\n<td align=\"left\">Bit</td>\n<td align=\"left\">Byte</td>\n<td align=\"left\">N&#x2F;A</td>\n<td align=\"left\">Boolean</td>\n</tr>\n<tr>\n<td align=\"left\"><em>integer</em></td>\n<td align=\"left\">Number (integer)</td>\n<td align=\"left\">Int</td>\n<td align=\"left\">Number</td>\n<td align=\"left\">Int Integer</td>\n<td align=\"left\">Int Integer</td>\n</tr>\n<tr>\n<td align=\"left\"><em>float</em></td>\n<td align=\"left\">Number (single)</td>\n<td align=\"left\">Float Real</td>\n<td align=\"left\">Number</td>\n<td align=\"left\">Float</td>\n<td align=\"left\">Numeric</td>\n</tr>\n<tr>\n<td align=\"left\"><em>currency</em></td>\n<td align=\"left\">Currency</td>\n<td align=\"left\">Money</td>\n<td align=\"left\">N&#x2F;A</td>\n<td align=\"left\">N&#x2F;A</td>\n<td align=\"left\">Money</td>\n</tr>\n<tr>\n<td align=\"left\"><em>string (fixed)</em></td>\n<td align=\"left\">N&#x2F;A</td>\n<td align=\"left\">Char</td>\n<td align=\"left\">Char</td>\n<td align=\"left\">Char</td>\n<td align=\"left\">Char</td>\n</tr>\n<tr>\n<td align=\"left\"><em>string (variable)</em></td>\n<td align=\"left\">Text (&lt;256) Memo (65k+)</td>\n<td align=\"left\">Varchar</td>\n<td align=\"left\">Varchar Varchar2</td>\n<td align=\"left\">Varchar</td>\n<td align=\"left\">Varchar</td>\n</tr>\n<tr>\n<td align=\"left\"><em>binary object</em></td>\n<td align=\"left\">OLE Object Memo</td>\n<td align=\"left\">Binary (fixed up to 8K) Varbinary (&lt;8K) Image (&lt;2GB)</td>\n<td align=\"left\">Long Raw</td>\n<td align=\"left\">Blob Text</td>\n<td align=\"left\">Binary Varbinary</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>注释：</strong> 在不同的数据库中，相同的数据类型可能有不同的名称。即使名字相同，大小和其他细节也可能不同！<strong>请随时检查文件!</strong></th>\n</tr>\n</thead>\n</table>\n"},{"layout":"wiki","wiki":"sql","title":"SQL Date函数","order":38,"_content":"\n## SQL Date 函数\n\n------\n\n> **注意：**当我们处理日期时，最困难的任务可能是确保插入日期的格式与数据库中日期列中的格式相匹配。\n\n只要您的数据仅包含日期的一部分，运行查询就不会成为问题。然而，当涉及到时间时，情况会稍微复杂一些。\n\n在讨论日期查询的复杂性之前，让我们看看最重要的内置日期处理程序。\n\n## MySQL Date 函数\n\n------\n\n下表列出了 MySQL 中最重要的内置日期函数：\n\n| 函数 | 描述                                |\n| :--- | :---------------------------------- |\n|      | 返回当前的日期和时间                |\n|      | 返回当前的日期                      |\n|      | 返回当前的时间                      |\n|      | 提取日期或日期/时间表达式的日期部分 |\n|      | 返回日期/时间的单独部分             |\n|      | 向日期添加指定的时间间隔            |\n|      | 从日期减去指定的时间间隔            |\n|      | 返回两个日期之间的天数              |\n|      | 用不同的格式显示日期/时间           |\n\n## SQL Server Date 函数\n\n------\n\n下表列出了SQL 服务器中最重要的内置日期函数：\n\n| 函数 | 描述                             |\n| :--- | :------------------------------- |\n|      | 返回当前的日期和时间             |\n|      | 返回日期/时间的单独部分          |\n|      | 在日期中添加或减去指定的时间间隔 |\n|      | 返回两个日期之间的时间           |\n|      | 用不同的格式显示日期/时间        |\n\n## SQL Date 数据类型\n\n------\n\n**　MySQL** 使用下列数据类型在数据库中存储日期或时间值：\n\n- DATE - 格式：YYYY-MM-DD\n- DATETIME - 格式：YYYY-MM-DD HH:MM:SS\n- TIMESTAMP - 格式：YYYY-MM-DD HH:MM:SS\n- YEAR - 格式：YYYY 或 YY\n\n**　SQL Server** 使用下列数据类型在数据库中存储日期或时间值：\n\n- DATE - 格式：YYYY-MM-DD\n- DATETIME - 格式：YYYY-MM-DD HH:MM:SS\n- SMALLDATETIME - 格式：YYYY-MM-DD HH:MM:SS\n- TIMESTAMP - 格式：唯一的数字\n\n**　注释：**在数据库中创建新表时，需要为该列选择数据类型！\n\n如需了解所有可用的数据类型，请访问我们完整的 。\n\n## SQL 日期处理\n\n------\n\n**注意：**如果您不涉及时间部分，那么我们可以轻松比较两个日期！\n\n假设我们有以下\"订单\"表：\n\n| OrderId | ProductName            | OrderDate  |\n| :------ | :--------------------- | :--------- |\n| 1       | Geitost                | 2008-11-11 |\n| 2       | Camembert Pierrot      | 2008-11-09 |\n| 3       | Mozzarella di Giovanni | 2008-11-11 |\n| 4       | Mascarpone Fabioli     | 2008-10-29 |\n\n现在，我们希望从上表中选取 OrderDate 为 \"2008-11-11\" 的记录。\n\n我们使用下面的 SELECT 语句：\n\n```\nSELECT * FROM Orders WHERE OrderDate='2008-11-11'\n```\n\n结果集如下所示：\n\n| OrderId | ProductName            | OrderDate  |\n| :------ | :--------------------- | :--------- |\n| 1       | Geitost                | 2008-11-11 |\n| 3       | Mozzarella di Giovanni | 2008-11-11 |\n\n现在，假设 \"Orders\" 表如下所示（请注意 \"OrderDate\" 列中的时间部分）：\n\n| OrderId | ProductName            | OrderDate           |\n| :------ | :--------------------- | :------------------ |\n| 1       | Geitost                | 2008-11-11 13:23:44 |\n| 2       | Camembert Pierrot      | 2008-11-09 15:45:21 |\n| 3       | Mozzarella di Giovanni | 2008-11-11 11:12:01 |\n| 4       | Mascarpone Fabioli     | 2008-10-29 14:56:59 |\n\n如果我们使用和上面一样的 SELECT 语句：\n\n```\nSELECT * FROM Orders WHERE OrderDate='2008-11-11'\n```\n\n这样我们就不会有结果了！这是因为查询的日期不包含时间部分。\n\n> **提示：**如果您想使查询更加简单和易于维护，请不要使用日期中的时间部分！\n","source":"wiki/sql/sentence/date.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL Date函数\norder: 38\n---\n\n## SQL Date 函数\n\n------\n\n> **注意：**当我们处理日期时，最困难的任务可能是确保插入日期的格式与数据库中日期列中的格式相匹配。\n\n只要您的数据仅包含日期的一部分，运行查询就不会成为问题。然而，当涉及到时间时，情况会稍微复杂一些。\n\n在讨论日期查询的复杂性之前，让我们看看最重要的内置日期处理程序。\n\n## MySQL Date 函数\n\n------\n\n下表列出了 MySQL 中最重要的内置日期函数：\n\n| 函数 | 描述                                |\n| :--- | :---------------------------------- |\n|      | 返回当前的日期和时间                |\n|      | 返回当前的日期                      |\n|      | 返回当前的时间                      |\n|      | 提取日期或日期/时间表达式的日期部分 |\n|      | 返回日期/时间的单独部分             |\n|      | 向日期添加指定的时间间隔            |\n|      | 从日期减去指定的时间间隔            |\n|      | 返回两个日期之间的天数              |\n|      | 用不同的格式显示日期/时间           |\n\n## SQL Server Date 函数\n\n------\n\n下表列出了SQL 服务器中最重要的内置日期函数：\n\n| 函数 | 描述                             |\n| :--- | :------------------------------- |\n|      | 返回当前的日期和时间             |\n|      | 返回日期/时间的单独部分          |\n|      | 在日期中添加或减去指定的时间间隔 |\n|      | 返回两个日期之间的时间           |\n|      | 用不同的格式显示日期/时间        |\n\n## SQL Date 数据类型\n\n------\n\n**　MySQL** 使用下列数据类型在数据库中存储日期或时间值：\n\n- DATE - 格式：YYYY-MM-DD\n- DATETIME - 格式：YYYY-MM-DD HH:MM:SS\n- TIMESTAMP - 格式：YYYY-MM-DD HH:MM:SS\n- YEAR - 格式：YYYY 或 YY\n\n**　SQL Server** 使用下列数据类型在数据库中存储日期或时间值：\n\n- DATE - 格式：YYYY-MM-DD\n- DATETIME - 格式：YYYY-MM-DD HH:MM:SS\n- SMALLDATETIME - 格式：YYYY-MM-DD HH:MM:SS\n- TIMESTAMP - 格式：唯一的数字\n\n**　注释：**在数据库中创建新表时，需要为该列选择数据类型！\n\n如需了解所有可用的数据类型，请访问我们完整的 。\n\n## SQL 日期处理\n\n------\n\n**注意：**如果您不涉及时间部分，那么我们可以轻松比较两个日期！\n\n假设我们有以下\"订单\"表：\n\n| OrderId | ProductName            | OrderDate  |\n| :------ | :--------------------- | :--------- |\n| 1       | Geitost                | 2008-11-11 |\n| 2       | Camembert Pierrot      | 2008-11-09 |\n| 3       | Mozzarella di Giovanni | 2008-11-11 |\n| 4       | Mascarpone Fabioli     | 2008-10-29 |\n\n现在，我们希望从上表中选取 OrderDate 为 \"2008-11-11\" 的记录。\n\n我们使用下面的 SELECT 语句：\n\n```\nSELECT * FROM Orders WHERE OrderDate='2008-11-11'\n```\n\n结果集如下所示：\n\n| OrderId | ProductName            | OrderDate  |\n| :------ | :--------------------- | :--------- |\n| 1       | Geitost                | 2008-11-11 |\n| 3       | Mozzarella di Giovanni | 2008-11-11 |\n\n现在，假设 \"Orders\" 表如下所示（请注意 \"OrderDate\" 列中的时间部分）：\n\n| OrderId | ProductName            | OrderDate           |\n| :------ | :--------------------- | :------------------ |\n| 1       | Geitost                | 2008-11-11 13:23:44 |\n| 2       | Camembert Pierrot      | 2008-11-09 15:45:21 |\n| 3       | Mozzarella di Giovanni | 2008-11-11 11:12:01 |\n| 4       | Mascarpone Fabioli     | 2008-10-29 14:56:59 |\n\n如果我们使用和上面一样的 SELECT 语句：\n\n```\nSELECT * FROM Orders WHERE OrderDate='2008-11-11'\n```\n\n这样我们就不会有结果了！这是因为查询的日期不包含时间部分。\n\n> **提示：**如果您想使查询更加简单和易于维护，请不要使用日期中的时间部分！\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T01:54:17.019Z","path":"wiki/sql/sentence/date.html","comments":1,"_id":"cmbreopip000d65x098vi9fsm","content":"<h2 id=\"SQL-Date-函数\"><a href=\"#SQL-Date-函数\" class=\"headerlink\" title=\"SQL Date 函数\"></a>SQL Date 函数</h2><hr>\n<blockquote>\n<p>**注意：**当我们处理日期时，最困难的任务可能是确保插入日期的格式与数据库中日期列中的格式相匹配。</p>\n</blockquote>\n<p>只要您的数据仅包含日期的一部分，运行查询就不会成为问题。然而，当涉及到时间时，情况会稍微复杂一些。</p>\n<p>在讨论日期查询的复杂性之前，让我们看看最重要的内置日期处理程序。</p>\n<h2 id=\"MySQL-Date-函数\"><a href=\"#MySQL-Date-函数\" class=\"headerlink\" title=\"MySQL Date 函数\"></a>MySQL Date 函数</h2><hr>\n<p>下表列出了 MySQL 中最重要的内置日期函数：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">函数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"></td>\n<td align=\"left\">返回当前的日期和时间</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">返回当前的日期</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">返回当前的时间</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">提取日期或日期&#x2F;时间表达式的日期部分</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">返回日期&#x2F;时间的单独部分</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">向日期添加指定的时间间隔</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">从日期减去指定的时间间隔</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">返回两个日期之间的天数</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">用不同的格式显示日期&#x2F;时间</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-Server-Date-函数\"><a href=\"#SQL-Server-Date-函数\" class=\"headerlink\" title=\"SQL Server Date 函数\"></a>SQL Server Date 函数</h2><hr>\n<p>下表列出了SQL 服务器中最重要的内置日期函数：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">函数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"></td>\n<td align=\"left\">返回当前的日期和时间</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">返回日期&#x2F;时间的单独部分</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">在日期中添加或减去指定的时间间隔</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">返回两个日期之间的时间</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">用不同的格式显示日期&#x2F;时间</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-Date-数据类型\"><a href=\"#SQL-Date-数据类型\" class=\"headerlink\" title=\"SQL Date 数据类型\"></a>SQL Date 数据类型</h2><hr>\n<p>**　MySQL** 使用下列数据类型在数据库中存储日期或时间值：</p>\n<ul>\n<li>DATE - 格式：YYYY-MM-DD</li>\n<li>DATETIME - 格式：YYYY-MM-DD HH:MM:SS</li>\n<li>TIMESTAMP - 格式：YYYY-MM-DD HH:MM:SS</li>\n<li>YEAR - 格式：YYYY 或 YY</li>\n</ul>\n<p>**　SQL Server** 使用下列数据类型在数据库中存储日期或时间值：</p>\n<ul>\n<li>DATE - 格式：YYYY-MM-DD</li>\n<li>DATETIME - 格式：YYYY-MM-DD HH:MM:SS</li>\n<li>SMALLDATETIME - 格式：YYYY-MM-DD HH:MM:SS</li>\n<li>TIMESTAMP - 格式：唯一的数字</li>\n</ul>\n<p>**　注释：**在数据库中创建新表时，需要为该列选择数据类型！</p>\n<p>如需了解所有可用的数据类型，请访问我们完整的 。</p>\n<h2 id=\"SQL-日期处理\"><a href=\"#SQL-日期处理\" class=\"headerlink\" title=\"SQL 日期处理\"></a>SQL 日期处理</h2><hr>\n<p>**注意：**如果您不涉及时间部分，那么我们可以轻松比较两个日期！</p>\n<p>假设我们有以下”订单”表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderId</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">OrderDate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Geitost</td>\n<td align=\"left\">2008-11-11</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Camembert Pierrot</td>\n<td align=\"left\">2008-11-09</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Mozzarella di Giovanni</td>\n<td align=\"left\">2008-11-11</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Mascarpone Fabioli</td>\n<td align=\"left\">2008-10-29</td>\n</tr>\n</tbody></table>\n<p>现在，我们希望从上表中选取 OrderDate 为 “2008-11-11” 的记录。</p>\n<p>我们使用下面的 SELECT 语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Orders WHERE OrderDate=&#x27;2008-11-11&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>结果集如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderId</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">OrderDate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Geitost</td>\n<td align=\"left\">2008-11-11</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Mozzarella di Giovanni</td>\n<td align=\"left\">2008-11-11</td>\n</tr>\n</tbody></table>\n<p>现在，假设 “Orders” 表如下所示（请注意 “OrderDate” 列中的时间部分）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderId</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">OrderDate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Geitost</td>\n<td align=\"left\">2008-11-11 13:23:44</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Camembert Pierrot</td>\n<td align=\"left\">2008-11-09 15:45:21</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Mozzarella di Giovanni</td>\n<td align=\"left\">2008-11-11 11:12:01</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Mascarpone Fabioli</td>\n<td align=\"left\">2008-10-29 14:56:59</td>\n</tr>\n</tbody></table>\n<p>如果我们使用和上面一样的 SELECT 语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Orders WHERE OrderDate=&#x27;2008-11-11&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就不会有结果了！这是因为查询的日期不包含时间部分。</p>\n<blockquote>\n<p>**提示：**如果您想使查询更加简单和易于维护，请不要使用日期中的时间部分！</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"SQL-Date-函数\"><a href=\"#SQL-Date-函数\" class=\"headerlink\" title=\"SQL Date 函数\"></a>SQL Date 函数</h2><hr>\n<blockquote>\n<p>**注意：**当我们处理日期时，最困难的任务可能是确保插入日期的格式与数据库中日期列中的格式相匹配。</p>\n</blockquote>\n<p>只要您的数据仅包含日期的一部分，运行查询就不会成为问题。然而，当涉及到时间时，情况会稍微复杂一些。</p>\n<p>在讨论日期查询的复杂性之前，让我们看看最重要的内置日期处理程序。</p>\n<h2 id=\"MySQL-Date-函数\"><a href=\"#MySQL-Date-函数\" class=\"headerlink\" title=\"MySQL Date 函数\"></a>MySQL Date 函数</h2><hr>\n<p>下表列出了 MySQL 中最重要的内置日期函数：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">函数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"></td>\n<td align=\"left\">返回当前的日期和时间</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">返回当前的日期</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">返回当前的时间</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">提取日期或日期&#x2F;时间表达式的日期部分</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">返回日期&#x2F;时间的单独部分</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">向日期添加指定的时间间隔</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">从日期减去指定的时间间隔</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">返回两个日期之间的天数</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">用不同的格式显示日期&#x2F;时间</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-Server-Date-函数\"><a href=\"#SQL-Server-Date-函数\" class=\"headerlink\" title=\"SQL Server Date 函数\"></a>SQL Server Date 函数</h2><hr>\n<p>下表列出了SQL 服务器中最重要的内置日期函数：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">函数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"></td>\n<td align=\"left\">返回当前的日期和时间</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">返回日期&#x2F;时间的单独部分</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">在日期中添加或减去指定的时间间隔</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">返回两个日期之间的时间</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">用不同的格式显示日期&#x2F;时间</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-Date-数据类型\"><a href=\"#SQL-Date-数据类型\" class=\"headerlink\" title=\"SQL Date 数据类型\"></a>SQL Date 数据类型</h2><hr>\n<p>**　MySQL** 使用下列数据类型在数据库中存储日期或时间值：</p>\n<ul>\n<li>DATE - 格式：YYYY-MM-DD</li>\n<li>DATETIME - 格式：YYYY-MM-DD HH:MM:SS</li>\n<li>TIMESTAMP - 格式：YYYY-MM-DD HH:MM:SS</li>\n<li>YEAR - 格式：YYYY 或 YY</li>\n</ul>\n<p>**　SQL Server** 使用下列数据类型在数据库中存储日期或时间值：</p>\n<ul>\n<li>DATE - 格式：YYYY-MM-DD</li>\n<li>DATETIME - 格式：YYYY-MM-DD HH:MM:SS</li>\n<li>SMALLDATETIME - 格式：YYYY-MM-DD HH:MM:SS</li>\n<li>TIMESTAMP - 格式：唯一的数字</li>\n</ul>\n<p>**　注释：**在数据库中创建新表时，需要为该列选择数据类型！</p>\n<p>如需了解所有可用的数据类型，请访问我们完整的 。</p>\n<h2 id=\"SQL-日期处理\"><a href=\"#SQL-日期处理\" class=\"headerlink\" title=\"SQL 日期处理\"></a>SQL 日期处理</h2><hr>\n<p>**注意：**如果您不涉及时间部分，那么我们可以轻松比较两个日期！</p>\n<p>假设我们有以下”订单”表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderId</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">OrderDate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Geitost</td>\n<td align=\"left\">2008-11-11</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Camembert Pierrot</td>\n<td align=\"left\">2008-11-09</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Mozzarella di Giovanni</td>\n<td align=\"left\">2008-11-11</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Mascarpone Fabioli</td>\n<td align=\"left\">2008-10-29</td>\n</tr>\n</tbody></table>\n<p>现在，我们希望从上表中选取 OrderDate 为 “2008-11-11” 的记录。</p>\n<p>我们使用下面的 SELECT 语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Orders WHERE OrderDate=&#x27;2008-11-11&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>结果集如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderId</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">OrderDate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Geitost</td>\n<td align=\"left\">2008-11-11</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Mozzarella di Giovanni</td>\n<td align=\"left\">2008-11-11</td>\n</tr>\n</tbody></table>\n<p>现在，假设 “Orders” 表如下所示（请注意 “OrderDate” 列中的时间部分）：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderId</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">OrderDate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Geitost</td>\n<td align=\"left\">2008-11-11 13:23:44</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Camembert Pierrot</td>\n<td align=\"left\">2008-11-09 15:45:21</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Mozzarella di Giovanni</td>\n<td align=\"left\">2008-11-11 11:12:01</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Mascarpone Fabioli</td>\n<td align=\"left\">2008-10-29 14:56:59</td>\n</tr>\n</tbody></table>\n<p>如果我们使用和上面一样的 SELECT 语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Orders WHERE OrderDate=&#x27;2008-11-11&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就不会有结果了！这是因为查询的日期不包含时间部分。</p>\n<blockquote>\n<p>**提示：**如果您想使查询更加简单和易于维护，请不要使用日期中的时间部分！</p>\n</blockquote>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 索引","order":44,"_content":"\n## SQL 索引\n\n------\n\n索引是一种特殊的查询表，可以被数据库搜索引擎用来加速数据的检索。简单说来，索引就是指向表中数据的指针。数据库的索引同书籍后面的索引非常相像。\n\n例如，如果想要查阅一本书中与某个特定主题相关的所有页面，你会先去查询索引（索引按照字母表顺序列出了所有主题），然后从索引中找到一页或者多页与该主题相关的页面。\n\n索引能够提高 SELECT 查询和 WHERE 子句的速度，但是却降低了包含 UPDATE 语句或 INSERT 语句的数据输入过程的速度。索引的创建与删除不会对表中的数据产生影响。\n\n创建索引需要使用 CREATE INDEX 语句，该语句允许对索引命名，指定要创建索引的表以及对哪些列进行索引，还可以指定索引按照升序或者降序排列。\n\n同 UNIQUE 约束一样，索引可以是唯一的。这种情况下，索引会阻止列中（或者列的组合，其中某些列有索引）出现重复的条目。\n\n## CREATE INDEX 命令：\n\n------\n\n**　CREATE INDEX**命令的基本语法如下：\n\n```\nCREATE INDEX index_name ON table_name;\n```\n\n### 单列索引：\n\n单列索引基于单一的字段创建，其基本语法如下所示：\n\n```\nCREATE INDEX index_name\nON table_name (column_name);\n```\n\n### 唯一索引：\n\n唯一索引不止用于提升查询性能，还用于保证数据完整性。唯一索引不允许向表中插入任何重复值。其基本语法如下所示：\n\n```\nCREATE UNIQUE INDEX index_name\non table_name (column_name);\n```\n\n如果您希望索引不止一个列，您可以在括号中列出这些列的名称，用逗号隔开：\n\n```\nCREATE INDEX index_name\non table_name (column1, column2);\n```\n\n### 隐式索引：\n\n隐式索引由数据库服务器在创建某些对象的时候自动生成。例如，对于主键约束和唯一约束，数据库服务器就会自动创建索引。\n\n## DROP INDEX 命令：\n\n索引可以用 SQL **DROP** 命令删除。删除索引时应当特别小心，数据库的性能可能会因此而降低或者提高。\n\n其基本语法如下：\n\nsql\n\n```\nDROP INDEX table_name.index_name;\n```\n\n## 什么时候应当避免使用索引？\n\n------\n\n尽管创建索引的目的是提升数据库的性能，但是还是有一些情况应当避免使用索引。下面几条指导原则给出了何时应当重新考虑是否使用索引：\n\n- 小的数据表不应当使用索引；\n- 需要频繁进行大批量的更新或者插入操作的表；\n- 如果列中包含大数或者 NULL 值，不宜创建索引；\n- 频繁操作的列不宜创建索引。\n","source":"wiki/sql/sentence/dbindex.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 索引\norder: 44\n---\n\n## SQL 索引\n\n------\n\n索引是一种特殊的查询表，可以被数据库搜索引擎用来加速数据的检索。简单说来，索引就是指向表中数据的指针。数据库的索引同书籍后面的索引非常相像。\n\n例如，如果想要查阅一本书中与某个特定主题相关的所有页面，你会先去查询索引（索引按照字母表顺序列出了所有主题），然后从索引中找到一页或者多页与该主题相关的页面。\n\n索引能够提高 SELECT 查询和 WHERE 子句的速度，但是却降低了包含 UPDATE 语句或 INSERT 语句的数据输入过程的速度。索引的创建与删除不会对表中的数据产生影响。\n\n创建索引需要使用 CREATE INDEX 语句，该语句允许对索引命名，指定要创建索引的表以及对哪些列进行索引，还可以指定索引按照升序或者降序排列。\n\n同 UNIQUE 约束一样，索引可以是唯一的。这种情况下，索引会阻止列中（或者列的组合，其中某些列有索引）出现重复的条目。\n\n## CREATE INDEX 命令：\n\n------\n\n**　CREATE INDEX**命令的基本语法如下：\n\n```\nCREATE INDEX index_name ON table_name;\n```\n\n### 单列索引：\n\n单列索引基于单一的字段创建，其基本语法如下所示：\n\n```\nCREATE INDEX index_name\nON table_name (column_name);\n```\n\n### 唯一索引：\n\n唯一索引不止用于提升查询性能，还用于保证数据完整性。唯一索引不允许向表中插入任何重复值。其基本语法如下所示：\n\n```\nCREATE UNIQUE INDEX index_name\non table_name (column_name);\n```\n\n如果您希望索引不止一个列，您可以在括号中列出这些列的名称，用逗号隔开：\n\n```\nCREATE INDEX index_name\non table_name (column1, column2);\n```\n\n### 隐式索引：\n\n隐式索引由数据库服务器在创建某些对象的时候自动生成。例如，对于主键约束和唯一约束，数据库服务器就会自动创建索引。\n\n## DROP INDEX 命令：\n\n索引可以用 SQL **DROP** 命令删除。删除索引时应当特别小心，数据库的性能可能会因此而降低或者提高。\n\n其基本语法如下：\n\nsql\n\n```\nDROP INDEX table_name.index_name;\n```\n\n## 什么时候应当避免使用索引？\n\n------\n\n尽管创建索引的目的是提升数据库的性能，但是还是有一些情况应当避免使用索引。下面几条指导原则给出了何时应当重新考虑是否使用索引：\n\n- 小的数据表不应当使用索引；\n- 需要频繁进行大批量的更新或者插入操作的表；\n- 如果列中包含大数或者 NULL 值，不宜创建索引；\n- 频繁操作的列不宜创建索引。\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T02:30:32.477Z","path":"wiki/sql/sentence/dbindex.html","comments":1,"_id":"cmbreopip000e65x0bwkkh3oc","content":"<h2 id=\"SQL-索引\"><a href=\"#SQL-索引\" class=\"headerlink\" title=\"SQL 索引\"></a>SQL 索引</h2><hr>\n<p>索引是一种特殊的查询表，可以被数据库搜索引擎用来加速数据的检索。简单说来，索引就是指向表中数据的指针。数据库的索引同书籍后面的索引非常相像。</p>\n<p>例如，如果想要查阅一本书中与某个特定主题相关的所有页面，你会先去查询索引（索引按照字母表顺序列出了所有主题），然后从索引中找到一页或者多页与该主题相关的页面。</p>\n<p>索引能够提高 SELECT 查询和 WHERE 子句的速度，但是却降低了包含 UPDATE 语句或 INSERT 语句的数据输入过程的速度。索引的创建与删除不会对表中的数据产生影响。</p>\n<p>创建索引需要使用 CREATE INDEX 语句，该语句允许对索引命名，指定要创建索引的表以及对哪些列进行索引，还可以指定索引按照升序或者降序排列。</p>\n<p>同 UNIQUE 约束一样，索引可以是唯一的。这种情况下，索引会阻止列中（或者列的组合，其中某些列有索引）出现重复的条目。</p>\n<h2 id=\"CREATE-INDEX-命令：\"><a href=\"#CREATE-INDEX-命令：\" class=\"headerlink\" title=\"CREATE INDEX 命令：\"></a>CREATE INDEX 命令：</h2><hr>\n<p>**　CREATE INDEX**命令的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE INDEX index_name ON table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"单列索引：\"><a href=\"#单列索引：\" class=\"headerlink\" title=\"单列索引：\"></a>单列索引：</h3><p>单列索引基于单一的字段创建，其基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE INDEX index_name</span><br><span class=\"line\">ON table_name (column_name);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"唯一索引：\"><a href=\"#唯一索引：\" class=\"headerlink\" title=\"唯一索引：\"></a>唯一索引：</h3><p>唯一索引不止用于提升查询性能，还用于保证数据完整性。唯一索引不允许向表中插入任何重复值。其基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE UNIQUE INDEX index_name</span><br><span class=\"line\">on table_name (column_name);</span><br></pre></td></tr></table></figure>\n\n<p>如果您希望索引不止一个列，您可以在括号中列出这些列的名称，用逗号隔开：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE INDEX index_name</span><br><span class=\"line\">on table_name (column1, column2);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"隐式索引：\"><a href=\"#隐式索引：\" class=\"headerlink\" title=\"隐式索引：\"></a>隐式索引：</h3><p>隐式索引由数据库服务器在创建某些对象的时候自动生成。例如，对于主键约束和唯一约束，数据库服务器就会自动创建索引。</p>\n<h2 id=\"DROP-INDEX-命令：\"><a href=\"#DROP-INDEX-命令：\" class=\"headerlink\" title=\"DROP INDEX 命令：\"></a>DROP INDEX 命令：</h2><p>索引可以用 SQL <strong>DROP</strong> 命令删除。删除索引时应当特别小心，数据库的性能可能会因此而降低或者提高。</p>\n<p>其基本语法如下：</p>\n<p>sql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP INDEX table_name.index_name;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什么时候应当避免使用索引？\"><a href=\"#什么时候应当避免使用索引？\" class=\"headerlink\" title=\"什么时候应当避免使用索引？\"></a>什么时候应当避免使用索引？</h2><hr>\n<p>尽管创建索引的目的是提升数据库的性能，但是还是有一些情况应当避免使用索引。下面几条指导原则给出了何时应当重新考虑是否使用索引：</p>\n<ul>\n<li>小的数据表不应当使用索引；</li>\n<li>需要频繁进行大批量的更新或者插入操作的表；</li>\n<li>如果列中包含大数或者 NULL 值，不宜创建索引；</li>\n<li>频繁操作的列不宜创建索引。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"SQL-索引\"><a href=\"#SQL-索引\" class=\"headerlink\" title=\"SQL 索引\"></a>SQL 索引</h2><hr>\n<p>索引是一种特殊的查询表，可以被数据库搜索引擎用来加速数据的检索。简单说来，索引就是指向表中数据的指针。数据库的索引同书籍后面的索引非常相像。</p>\n<p>例如，如果想要查阅一本书中与某个特定主题相关的所有页面，你会先去查询索引（索引按照字母表顺序列出了所有主题），然后从索引中找到一页或者多页与该主题相关的页面。</p>\n<p>索引能够提高 SELECT 查询和 WHERE 子句的速度，但是却降低了包含 UPDATE 语句或 INSERT 语句的数据输入过程的速度。索引的创建与删除不会对表中的数据产生影响。</p>\n<p>创建索引需要使用 CREATE INDEX 语句，该语句允许对索引命名，指定要创建索引的表以及对哪些列进行索引，还可以指定索引按照升序或者降序排列。</p>\n<p>同 UNIQUE 约束一样，索引可以是唯一的。这种情况下，索引会阻止列中（或者列的组合，其中某些列有索引）出现重复的条目。</p>\n<h2 id=\"CREATE-INDEX-命令：\"><a href=\"#CREATE-INDEX-命令：\" class=\"headerlink\" title=\"CREATE INDEX 命令：\"></a>CREATE INDEX 命令：</h2><hr>\n<p>**　CREATE INDEX**命令的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE INDEX index_name ON table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"单列索引：\"><a href=\"#单列索引：\" class=\"headerlink\" title=\"单列索引：\"></a>单列索引：</h3><p>单列索引基于单一的字段创建，其基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE INDEX index_name</span><br><span class=\"line\">ON table_name (column_name);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"唯一索引：\"><a href=\"#唯一索引：\" class=\"headerlink\" title=\"唯一索引：\"></a>唯一索引：</h3><p>唯一索引不止用于提升查询性能，还用于保证数据完整性。唯一索引不允许向表中插入任何重复值。其基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE UNIQUE INDEX index_name</span><br><span class=\"line\">on table_name (column_name);</span><br></pre></td></tr></table></figure>\n\n<p>如果您希望索引不止一个列，您可以在括号中列出这些列的名称，用逗号隔开：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE INDEX index_name</span><br><span class=\"line\">on table_name (column1, column2);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"隐式索引：\"><a href=\"#隐式索引：\" class=\"headerlink\" title=\"隐式索引：\"></a>隐式索引：</h3><p>隐式索引由数据库服务器在创建某些对象的时候自动生成。例如，对于主键约束和唯一约束，数据库服务器就会自动创建索引。</p>\n<h2 id=\"DROP-INDEX-命令：\"><a href=\"#DROP-INDEX-命令：\" class=\"headerlink\" title=\"DROP INDEX 命令：\"></a>DROP INDEX 命令：</h2><p>索引可以用 SQL <strong>DROP</strong> 命令删除。删除索引时应当特别小心，数据库的性能可能会因此而降低或者提高。</p>\n<p>其基本语法如下：</p>\n<p>sql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP INDEX table_name.index_name;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什么时候应当避免使用索引？\"><a href=\"#什么时候应当避免使用索引？\" class=\"headerlink\" title=\"什么时候应当避免使用索引？\"></a>什么时候应当避免使用索引？</h2><hr>\n<p>尽管创建索引的目的是提升数据库的性能，但是还是有一些情况应当避免使用索引。下面几条指导原则给出了何时应当重新考虑是否使用索引：</p>\n<ul>\n<li>小的数据表不应当使用索引；</li>\n<li>需要频繁进行大批量的更新或者插入操作的表；</li>\n<li>如果列中包含大数或者 NULL 值，不宜创建索引；</li>\n<li>频繁操作的列不宜创建索引。</li>\n</ul>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 删除","order":12,"_content":"\n## SQL DELETE 语句\n\n------\n\nDELETE语句用于删除表中现有记录。\n\n### SQL DELETE 语法\n\n```\nDELETE FROM table_name\nWHERE condition;\n```\n\n| **请注意** **删除表格中的记录时要小心！** **注意SQL DELETE 语句中的 WHERE 子句！** WHERE子句指定需要删除哪些记录。如果省略了WHERE子句，表中所有记录都将被删除！ |\n| :----------------------------------------------------------- |\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是 \"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL DELETE 实例\n\n------\n\n假设我们想从\"Customers\" 表中删除客户\"Alfreds Futterkiste\"。\n\n我们使用以下SQL语句：\n\n示例：\n\n```\nDELETE FROM Customers\nWHERE CustomerName='Alfreds Futterkiste';\n```\n\n现在，\"Customers\" 表如下所示：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## 删除所有数据\n\n------\n\n您可以删除表中的所有行，而不需要删除该表。这意味着表的结构、属性和索引将保持不变：\n\n```\nDELETE FROM table_name;\n```\n\n**　或者**\n\n```\nDELETE * FROM table_name;\n```\n\n> **注意：**在没有备份的情况下，删除记录要格外小心！因为你删除了不能恢复！\n","source":"wiki/sql/sentence/delete.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 删除\norder: 12\n---\n\n## SQL DELETE 语句\n\n------\n\nDELETE语句用于删除表中现有记录。\n\n### SQL DELETE 语法\n\n```\nDELETE FROM table_name\nWHERE condition;\n```\n\n| **请注意** **删除表格中的记录时要小心！** **注意SQL DELETE 语句中的 WHERE 子句！** WHERE子句指定需要删除哪些记录。如果省略了WHERE子句，表中所有记录都将被删除！ |\n| :----------------------------------------------------------- |\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是 \"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL DELETE 实例\n\n------\n\n假设我们想从\"Customers\" 表中删除客户\"Alfreds Futterkiste\"。\n\n我们使用以下SQL语句：\n\n示例：\n\n```\nDELETE FROM Customers\nWHERE CustomerName='Alfreds Futterkiste';\n```\n\n现在，\"Customers\" 表如下所示：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## 删除所有数据\n\n------\n\n您可以删除表中的所有行，而不需要删除该表。这意味着表的结构、属性和索引将保持不变：\n\n```\nDELETE FROM table_name;\n```\n\n**　或者**\n\n```\nDELETE * FROM table_name;\n```\n\n> **注意：**在没有备份的情况下，删除记录要格外小心！因为你删除了不能恢复！\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-10T14:17:27.553Z","path":"wiki/sql/sentence/delete.html","comments":1,"_id":"cmbreopiq000f65x01cvuefmj","content":"<h2 id=\"SQL-DELETE-语句\"><a href=\"#SQL-DELETE-语句\" class=\"headerlink\" title=\"SQL DELETE 语句\"></a>SQL DELETE 语句</h2><hr>\n<p>DELETE语句用于删除表中现有记录。</p>\n<h3 id=\"SQL-DELETE-语法\"><a href=\"#SQL-DELETE-语法\" class=\"headerlink\" title=\"SQL DELETE 语法\"></a>SQL DELETE 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DELETE FROM table_name</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>请注意</strong> <strong>删除表格中的记录时要小心！</strong> <strong>注意SQL DELETE 语句中的 WHERE 子句！</strong> WHERE子句指定需要删除哪些记录。如果省略了WHERE子句，表中所有记录都将被删除！</th>\n</tr>\n</thead>\n</table>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是 “Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-DELETE-实例\"><a href=\"#SQL-DELETE-实例\" class=\"headerlink\" title=\"SQL DELETE 实例\"></a>SQL DELETE 实例</h2><hr>\n<p>假设我们想从”Customers” 表中删除客户”Alfreds Futterkiste”。</p>\n<p>我们使用以下SQL语句：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DELETE FROM Customers</span><br><span class=\"line\">WHERE CustomerName=&#x27;Alfreds Futterkiste&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>现在，”Customers” 表如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"删除所有数据\"><a href=\"#删除所有数据\" class=\"headerlink\" title=\"删除所有数据\"></a>删除所有数据</h2><hr>\n<p>您可以删除表中的所有行，而不需要删除该表。这意味着表的结构、属性和索引将保持不变：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DELETE FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<p>**　或者**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DELETE * FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注意：**在没有备份的情况下，删除记录要格外小心！因为你删除了不能恢复！</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"SQL-DELETE-语句\"><a href=\"#SQL-DELETE-语句\" class=\"headerlink\" title=\"SQL DELETE 语句\"></a>SQL DELETE 语句</h2><hr>\n<p>DELETE语句用于删除表中现有记录。</p>\n<h3 id=\"SQL-DELETE-语法\"><a href=\"#SQL-DELETE-语法\" class=\"headerlink\" title=\"SQL DELETE 语法\"></a>SQL DELETE 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DELETE FROM table_name</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>请注意</strong> <strong>删除表格中的记录时要小心！</strong> <strong>注意SQL DELETE 语句中的 WHERE 子句！</strong> WHERE子句指定需要删除哪些记录。如果省略了WHERE子句，表中所有记录都将被删除！</th>\n</tr>\n</thead>\n</table>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是 “Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-DELETE-实例\"><a href=\"#SQL-DELETE-实例\" class=\"headerlink\" title=\"SQL DELETE 实例\"></a>SQL DELETE 实例</h2><hr>\n<p>假设我们想从”Customers” 表中删除客户”Alfreds Futterkiste”。</p>\n<p>我们使用以下SQL语句：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DELETE FROM Customers</span><br><span class=\"line\">WHERE CustomerName=&#x27;Alfreds Futterkiste&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>现在，”Customers” 表如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"删除所有数据\"><a href=\"#删除所有数据\" class=\"headerlink\" title=\"删除所有数据\"></a>删除所有数据</h2><hr>\n<p>您可以删除表中的所有行，而不需要删除该表。这意味着表的结构、属性和索引将保持不变：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DELETE FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<p>**　或者**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DELETE * FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注意：**在没有备份的情况下，删除记录要格外小心！因为你删除了不能恢复！</p>\n</blockquote>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 选择不同","order":5,"_content":"\n## SQL SELECT DISTINCT 语法\n\n------\n\nSELECT DISTINCT语法用于仅返回不同的（different）值。\n\n在一张表内，一列通常包含许多重复的值; 有时你只想列出不同的（different）值。\n\nSELECT DISTINCT语句用于仅返回不同的（different）值。\n\nSQL SELECT DISTINCT语法如下所示：\n\n```\nSELECT DISTINCT column1, column2, ...\nFROM table_name;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的 Northwind 样本数据库。\n\n下面是罗斯文示例数据库中 \"Customers\" 表的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SELECT实例\n\n------\n\n以下SQL语句从\"Customers\"表中的\"Country\"列中选择所有（包括重复）值：\n**　代码示例：**\n\n```\nSELECT Country FROM Customers;\n```\n\n以上查询的结果：\n\n```\nCountry\nGermany\nMexico\nMexico\nUK\n\nSweden\n```\n\n现在，让我们在上面的SELECT语法中使用DISTINCT关键字并查看结果。\n\n## SELECT DISTINCT 实例\n\n------\n\n以下SQL语句仅从\"Customers\" 表中的 \"Country\" 列中选择DISTINCT值：\n\n## 实例1\n\n```\nSELECT DISTINCT Country FROM Customers;\n```\n\n查询结果：\n\n```\nCountry\nGermany\nMexico\nUK\nSweden\n```\n\n以下SQL语句列出了不同（distinct）客户国家的数量：\n\n## 实例2\n\n```\nSELECT COUNT(DISTINCT Country) FROM Customers;\n```\n\n**注意：**上述示例在Firefox和Microsoft Edge中不起作用！\n\n由于在Microsoft Access数据库中不支持COUNT(DISTINCT *column_name*)。在我们的示例中Firefox和Microsoft Edge使用Microsoft Access。\n","source":"wiki/sql/sentence/distinct.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 选择不同\norder: 5\n---\n\n## SQL SELECT DISTINCT 语法\n\n------\n\nSELECT DISTINCT语法用于仅返回不同的（different）值。\n\n在一张表内，一列通常包含许多重复的值; 有时你只想列出不同的（different）值。\n\nSELECT DISTINCT语句用于仅返回不同的（different）值。\n\nSQL SELECT DISTINCT语法如下所示：\n\n```\nSELECT DISTINCT column1, column2, ...\nFROM table_name;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的 Northwind 样本数据库。\n\n下面是罗斯文示例数据库中 \"Customers\" 表的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SELECT实例\n\n------\n\n以下SQL语句从\"Customers\"表中的\"Country\"列中选择所有（包括重复）值：\n**　代码示例：**\n\n```\nSELECT Country FROM Customers;\n```\n\n以上查询的结果：\n\n```\nCountry\nGermany\nMexico\nMexico\nUK\n\nSweden\n```\n\n现在，让我们在上面的SELECT语法中使用DISTINCT关键字并查看结果。\n\n## SELECT DISTINCT 实例\n\n------\n\n以下SQL语句仅从\"Customers\" 表中的 \"Country\" 列中选择DISTINCT值：\n\n## 实例1\n\n```\nSELECT DISTINCT Country FROM Customers;\n```\n\n查询结果：\n\n```\nCountry\nGermany\nMexico\nUK\nSweden\n```\n\n以下SQL语句列出了不同（distinct）客户国家的数量：\n\n## 实例2\n\n```\nSELECT COUNT(DISTINCT Country) FROM Customers;\n```\n\n**注意：**上述示例在Firefox和Microsoft Edge中不起作用！\n\n由于在Microsoft Access数据库中不支持COUNT(DISTINCT *column_name*)。在我们的示例中Firefox和Microsoft Edge使用Microsoft Access。\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-10T12:59:05.013Z","path":"wiki/sql/sentence/distinct.html","comments":1,"_id":"cmbreopiq000g65x06drk3l00","content":"<h2 id=\"SQL-SELECT-DISTINCT-语法\"><a href=\"#SQL-SELECT-DISTINCT-语法\" class=\"headerlink\" title=\"SQL SELECT DISTINCT 语法\"></a>SQL SELECT DISTINCT 语法</h2><hr>\n<p>SELECT DISTINCT语法用于仅返回不同的（different）值。</p>\n<p>在一张表内，一列通常包含许多重复的值; 有时你只想列出不同的（different）值。</p>\n<p>SELECT DISTINCT语句用于仅返回不同的（different）值。</p>\n<p>SQL SELECT DISTINCT语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT column1, column2, ...</span><br><span class=\"line\">FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的 Northwind 样本数据库。</p>\n<p>下面是罗斯文示例数据库中 “Customers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SELECT实例\"><a href=\"#SELECT实例\" class=\"headerlink\" title=\"SELECT实例\"></a>SELECT实例</h2><hr>\n<p>以下SQL语句从”Customers”表中的”Country”列中选择所有（包括重复）值：<br>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Country FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>以上查询的结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Country</span><br><span class=\"line\">Germany</span><br><span class=\"line\">Mexico</span><br><span class=\"line\">Mexico</span><br><span class=\"line\">UK</span><br><span class=\"line\"></span><br><span class=\"line\">Sweden</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我们在上面的SELECT语法中使用DISTINCT关键字并查看结果。</p>\n<h2 id=\"SELECT-DISTINCT-实例\"><a href=\"#SELECT-DISTINCT-实例\" class=\"headerlink\" title=\"SELECT DISTINCT 实例\"></a>SELECT DISTINCT 实例</h2><hr>\n<p>以下SQL语句仅从”Customers” 表中的 “Country” 列中选择DISTINCT值：</p>\n<h2 id=\"实例1\"><a href=\"#实例1\" class=\"headerlink\" title=\"实例1\"></a>实例1</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT Country FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>查询结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Country</span><br><span class=\"line\">Germany</span><br><span class=\"line\">Mexico</span><br><span class=\"line\">UK</span><br><span class=\"line\">Sweden</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句列出了不同（distinct）客户国家的数量：</p>\n<h2 id=\"实例2\"><a href=\"#实例2\" class=\"headerlink\" title=\"实例2\"></a>实例2</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(DISTINCT Country) FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>**注意：**上述示例在Firefox和Microsoft Edge中不起作用！</p>\n<p>由于在Microsoft Access数据库中不支持COUNT(DISTINCT <em>column_name</em>)。在我们的示例中Firefox和Microsoft Edge使用Microsoft Access。</p>\n","excerpt":"","more":"<h2 id=\"SQL-SELECT-DISTINCT-语法\"><a href=\"#SQL-SELECT-DISTINCT-语法\" class=\"headerlink\" title=\"SQL SELECT DISTINCT 语法\"></a>SQL SELECT DISTINCT 语法</h2><hr>\n<p>SELECT DISTINCT语法用于仅返回不同的（different）值。</p>\n<p>在一张表内，一列通常包含许多重复的值; 有时你只想列出不同的（different）值。</p>\n<p>SELECT DISTINCT语句用于仅返回不同的（different）值。</p>\n<p>SQL SELECT DISTINCT语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT column1, column2, ...</span><br><span class=\"line\">FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的 Northwind 样本数据库。</p>\n<p>下面是罗斯文示例数据库中 “Customers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SELECT实例\"><a href=\"#SELECT实例\" class=\"headerlink\" title=\"SELECT实例\"></a>SELECT实例</h2><hr>\n<p>以下SQL语句从”Customers”表中的”Country”列中选择所有（包括重复）值：<br>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Country FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>以上查询的结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Country</span><br><span class=\"line\">Germany</span><br><span class=\"line\">Mexico</span><br><span class=\"line\">Mexico</span><br><span class=\"line\">UK</span><br><span class=\"line\"></span><br><span class=\"line\">Sweden</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我们在上面的SELECT语法中使用DISTINCT关键字并查看结果。</p>\n<h2 id=\"SELECT-DISTINCT-实例\"><a href=\"#SELECT-DISTINCT-实例\" class=\"headerlink\" title=\"SELECT DISTINCT 实例\"></a>SELECT DISTINCT 实例</h2><hr>\n<p>以下SQL语句仅从”Customers” 表中的 “Country” 列中选择DISTINCT值：</p>\n<h2 id=\"实例1\"><a href=\"#实例1\" class=\"headerlink\" title=\"实例1\"></a>实例1</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT Country FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>查询结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Country</span><br><span class=\"line\">Germany</span><br><span class=\"line\">Mexico</span><br><span class=\"line\">UK</span><br><span class=\"line\">Sweden</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句列出了不同（distinct）客户国家的数量：</p>\n<h2 id=\"实例2\"><a href=\"#实例2\" class=\"headerlink\" title=\"实例2\"></a>实例2</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(DISTINCT Country) FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>**注意：**上述示例在Firefox和Microsoft Edge中不起作用！</p>\n<p>由于在Microsoft Access数据库中不支持COUNT(DISTINCT <em>column_name</em>)。在我们的示例中Firefox和Microsoft Edge使用Microsoft Access。</p>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 撤销索引/表/数据库","order":32,"_content":"\n## SQL 撤销索引、撤销表以及撤销数据库\n\n------\n\n通过使用 DROP 语句，可以轻松地删除索引、表和数据库。\n\n## DROP INDEX 语句\n\n------\n\nDROP INDEX 语句用于删除表中的索引。\n\n### 用于 MS Access 的 DROP INDEX 语法：\n\n```\nDROP INDEX index_name ON table_name\n```\n\n### 用于 MS SQL Server 的 DROP INDEX 语法：\n\n```\nDROP INDEX table_name.index_name\n```\n\n### 用于 DB2/Oracle 的 DROP INDEX 语法：\n\n```\nDROP INDEX index_name\n```\n\n### 用于 MySQL 的 DROP INDEX 语法：\n\n```\nALTER TABLE table_name DROP INDEX index_name\n```\n\n## DROP TABLE 语句\n\n------\n\nDROP TABLE 语句用于删除表。\n\n```\nDROP TABLE table_name\n```\n\n## DROP DATABASE 语句\n\n------\n\nDROP DATABASE 语句用于删除数据库。\n\n```\nDROP DATABASE database_name\n```\n\n## TRUNCATE TABLE 语句\n\n------\n\n如果我们只需要删除表中的数据，而不删除表本身，那么我们该怎么做？\n\n使用TRUNCATE TABLE语句：\n\n```\nTRUNCATE TABLE table_name\n```\n","source":"wiki/sql/sentence/drop.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 撤销索引/表/数据库\norder: 32\n---\n\n## SQL 撤销索引、撤销表以及撤销数据库\n\n------\n\n通过使用 DROP 语句，可以轻松地删除索引、表和数据库。\n\n## DROP INDEX 语句\n\n------\n\nDROP INDEX 语句用于删除表中的索引。\n\n### 用于 MS Access 的 DROP INDEX 语法：\n\n```\nDROP INDEX index_name ON table_name\n```\n\n### 用于 MS SQL Server 的 DROP INDEX 语法：\n\n```\nDROP INDEX table_name.index_name\n```\n\n### 用于 DB2/Oracle 的 DROP INDEX 语法：\n\n```\nDROP INDEX index_name\n```\n\n### 用于 MySQL 的 DROP INDEX 语法：\n\n```\nALTER TABLE table_name DROP INDEX index_name\n```\n\n## DROP TABLE 语句\n\n------\n\nDROP TABLE 语句用于删除表。\n\n```\nDROP TABLE table_name\n```\n\n## DROP DATABASE 语句\n\n------\n\nDROP DATABASE 语句用于删除数据库。\n\n```\nDROP DATABASE database_name\n```\n\n## TRUNCATE TABLE 语句\n\n------\n\n如果我们只需要删除表中的数据，而不删除表本身，那么我们该怎么做？\n\n使用TRUNCATE TABLE语句：\n\n```\nTRUNCATE TABLE table_name\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T01:39:28.611Z","path":"wiki/sql/sentence/drop.html","comments":1,"_id":"cmbreopir000h65x0fph49lcg","content":"<h2 id=\"SQL-撤销索引、撤销表以及撤销数据库\"><a href=\"#SQL-撤销索引、撤销表以及撤销数据库\" class=\"headerlink\" title=\"SQL 撤销索引、撤销表以及撤销数据库\"></a>SQL 撤销索引、撤销表以及撤销数据库</h2><hr>\n<p>通过使用 DROP 语句，可以轻松地删除索引、表和数据库。</p>\n<h2 id=\"DROP-INDEX-语句\"><a href=\"#DROP-INDEX-语句\" class=\"headerlink\" title=\"DROP INDEX 语句\"></a>DROP INDEX 语句</h2><hr>\n<p>DROP INDEX 语句用于删除表中的索引。</p>\n<h3 id=\"用于-MS-Access-的-DROP-INDEX-语法：\"><a href=\"#用于-MS-Access-的-DROP-INDEX-语法：\" class=\"headerlink\" title=\"用于 MS Access 的 DROP INDEX 语法：\"></a>用于 MS Access 的 DROP INDEX 语法：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP INDEX index_name ON table_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用于-MS-SQL-Server-的-DROP-INDEX-语法：\"><a href=\"#用于-MS-SQL-Server-的-DROP-INDEX-语法：\" class=\"headerlink\" title=\"用于 MS SQL Server 的 DROP INDEX 语法：\"></a>用于 MS SQL Server 的 DROP INDEX 语法：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP INDEX table_name.index_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用于-DB2-Oracle-的-DROP-INDEX-语法：\"><a href=\"#用于-DB2-Oracle-的-DROP-INDEX-语法：\" class=\"headerlink\" title=\"用于 DB2&#x2F;Oracle 的 DROP INDEX 语法：\"></a>用于 DB2&#x2F;Oracle 的 DROP INDEX 语法：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP INDEX index_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用于-MySQL-的-DROP-INDEX-语法：\"><a href=\"#用于-MySQL-的-DROP-INDEX-语法：\" class=\"headerlink\" title=\"用于 MySQL 的 DROP INDEX 语法：\"></a>用于 MySQL 的 DROP INDEX 语法：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name DROP INDEX index_name</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DROP-TABLE-语句\"><a href=\"#DROP-TABLE-语句\" class=\"headerlink\" title=\"DROP TABLE 语句\"></a>DROP TABLE 语句</h2><hr>\n<p>DROP TABLE 语句用于删除表。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP TABLE table_name</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DROP-DATABASE-语句\"><a href=\"#DROP-DATABASE-语句\" class=\"headerlink\" title=\"DROP DATABASE 语句\"></a>DROP DATABASE 语句</h2><hr>\n<p>DROP DATABASE 语句用于删除数据库。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP DATABASE database_name</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TRUNCATE-TABLE-语句\"><a href=\"#TRUNCATE-TABLE-语句\" class=\"headerlink\" title=\"TRUNCATE TABLE 语句\"></a>TRUNCATE TABLE 语句</h2><hr>\n<p>如果我们只需要删除表中的数据，而不删除表本身，那么我们该怎么做？</p>\n<p>使用TRUNCATE TABLE语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">TRUNCATE TABLE table_name</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-撤销索引、撤销表以及撤销数据库\"><a href=\"#SQL-撤销索引、撤销表以及撤销数据库\" class=\"headerlink\" title=\"SQL 撤销索引、撤销表以及撤销数据库\"></a>SQL 撤销索引、撤销表以及撤销数据库</h2><hr>\n<p>通过使用 DROP 语句，可以轻松地删除索引、表和数据库。</p>\n<h2 id=\"DROP-INDEX-语句\"><a href=\"#DROP-INDEX-语句\" class=\"headerlink\" title=\"DROP INDEX 语句\"></a>DROP INDEX 语句</h2><hr>\n<p>DROP INDEX 语句用于删除表中的索引。</p>\n<h3 id=\"用于-MS-Access-的-DROP-INDEX-语法：\"><a href=\"#用于-MS-Access-的-DROP-INDEX-语法：\" class=\"headerlink\" title=\"用于 MS Access 的 DROP INDEX 语法：\"></a>用于 MS Access 的 DROP INDEX 语法：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP INDEX index_name ON table_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用于-MS-SQL-Server-的-DROP-INDEX-语法：\"><a href=\"#用于-MS-SQL-Server-的-DROP-INDEX-语法：\" class=\"headerlink\" title=\"用于 MS SQL Server 的 DROP INDEX 语法：\"></a>用于 MS SQL Server 的 DROP INDEX 语法：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP INDEX table_name.index_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用于-DB2-Oracle-的-DROP-INDEX-语法：\"><a href=\"#用于-DB2-Oracle-的-DROP-INDEX-语法：\" class=\"headerlink\" title=\"用于 DB2&#x2F;Oracle 的 DROP INDEX 语法：\"></a>用于 DB2&#x2F;Oracle 的 DROP INDEX 语法：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP INDEX index_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用于-MySQL-的-DROP-INDEX-语法：\"><a href=\"#用于-MySQL-的-DROP-INDEX-语法：\" class=\"headerlink\" title=\"用于 MySQL 的 DROP INDEX 语法：\"></a>用于 MySQL 的 DROP INDEX 语法：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name DROP INDEX index_name</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DROP-TABLE-语句\"><a href=\"#DROP-TABLE-语句\" class=\"headerlink\" title=\"DROP TABLE 语句\"></a>DROP TABLE 语句</h2><hr>\n<p>DROP TABLE 语句用于删除表。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP TABLE table_name</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DROP-DATABASE-语句\"><a href=\"#DROP-DATABASE-语句\" class=\"headerlink\" title=\"DROP DATABASE 语句\"></a>DROP DATABASE 语句</h2><hr>\n<p>DROP DATABASE 语句用于删除数据库。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP DATABASE database_name</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TRUNCATE-TABLE-语句\"><a href=\"#TRUNCATE-TABLE-语句\" class=\"headerlink\" title=\"TRUNCATE TABLE 语句\"></a>TRUNCATE TABLE 语句</h2><hr>\n<p>如果我们只需要删除表中的数据，而不删除表本身，那么我们该怎么做？</p>\n<p>使用TRUNCATE TABLE语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">TRUNCATE TABLE table_name</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 表达式","order":14,"_content":"\n## SQL 表达式\n\n------\n\n表达式是计算值的一个或多个值、运算符和SQL函数的组合。这些SQL表达式类似于公式，它们是用查询语言编写的。\n\n您还可以使用它们查询数据库中的特定数据集。\n\n### 句法\n\n考虑SELECT语句的基本语法，如下所示：\n\n```\nSELECT column1, column2, columnN \nFROM table_name \nWHERE [CONDITION|EXPRESSION];\n```\n\n有不同类型的sql表达式，如下所示：\n\n- 布尔型\n- 数值型\n- 日期\n\n现在让我们详细讨论每一个问题。\n\n## 布尔表达式\n\n------\n\nSQL布尔表达式基于匹配单个值获取数据。\n\n句法：\n\n```\nSELECT column1, column2, columnN \nFROM table_name \nWHERE SINGLE VALUE MATCHING EXPRESSION;\n```\n\n使用具有以下记录的Customers表：\n\n```\nSQL> SELECT * FROM CUSTOMERS;\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n7 rows in set (0.00 sec)\n```\n\n下表是一个简单的示例，展示了各种sql布尔表达式的用法。\n\n```\nSQL> SELECT * FROM CUSTOMERS WHERE SALARY = 10000;\n+----+-------+-----+---------+----------+\n| ID | NAME  | AGE | ADDRESS | SALARY   |\n+----+-------+-----+---------+----------+\n|  7 | Muffy |  24 | Indore  | 10000.00 |\n+----+-------+-----+---------+----------+\n1 row in set (0.00 sec)\n```\n\n## 数值表达式\n\n------\n\n数值表达式用于在任何查询中执行任何数学运算。\n\n句法：\n\n```\nSELECT numerical_expression as  OPERATION_NAME\n[FROM table_name\nWHERE CONDITION] ;\n```\n\n这里，数值表达式用于数学表达式或任何公式。下面是一个简单的示例，展示了SQLNDigitic表达式的用法：\n\n```\nSQL> SELECT (15 + 6) AS ADDITION\n+----------+\n| ADDITION |\n+----------+\n|       21 |\n+----------+\n1 row in set (0.00 sec)\n```\n\n有几个内置函数，如avg()、sum()、count()等，用于对表或特定表列执行所谓的聚合数据计算。\n\n```\nSQL> SELECT COUNT(*) AS \"RECORDS\" FROM CUSTOMERS; \n+---------+\n| RECORDS |\n+---------+\n|       7 |\n+---------+\n1 row in set (0.00 sec)\n```\n\n## 日期表达式\n\n日期表达式返回当前系统日期和时间值：\n\n```\nSQL>  SELECT CURRENT_TIMESTAMP;\n+---------------------+\n| Current_Timestamp   |\n+---------------------+\n| 2009-11-12 06:40:23 |\n+---------------------+\n1 row in set (0.00 sec)\n```\n\n另一个日期表达式如下所示：\n\n```\nSQL>  SELECT  GETDATE();;\n+-------------------------+\n| GETDATE                 |\n+-------------------------+\n| 2009-10-22 12:07:18.140 |\n+-------------------------+\n1 row in set (0.00 sec)\n```\n","source":"wiki/sql/sentence/express.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 表达式\norder: 14\n---\n\n## SQL 表达式\n\n------\n\n表达式是计算值的一个或多个值、运算符和SQL函数的组合。这些SQL表达式类似于公式，它们是用查询语言编写的。\n\n您还可以使用它们查询数据库中的特定数据集。\n\n### 句法\n\n考虑SELECT语句的基本语法，如下所示：\n\n```\nSELECT column1, column2, columnN \nFROM table_name \nWHERE [CONDITION|EXPRESSION];\n```\n\n有不同类型的sql表达式，如下所示：\n\n- 布尔型\n- 数值型\n- 日期\n\n现在让我们详细讨论每一个问题。\n\n## 布尔表达式\n\n------\n\nSQL布尔表达式基于匹配单个值获取数据。\n\n句法：\n\n```\nSELECT column1, column2, columnN \nFROM table_name \nWHERE SINGLE VALUE MATCHING EXPRESSION;\n```\n\n使用具有以下记录的Customers表：\n\n```\nSQL> SELECT * FROM CUSTOMERS;\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n7 rows in set (0.00 sec)\n```\n\n下表是一个简单的示例，展示了各种sql布尔表达式的用法。\n\n```\nSQL> SELECT * FROM CUSTOMERS WHERE SALARY = 10000;\n+----+-------+-----+---------+----------+\n| ID | NAME  | AGE | ADDRESS | SALARY   |\n+----+-------+-----+---------+----------+\n|  7 | Muffy |  24 | Indore  | 10000.00 |\n+----+-------+-----+---------+----------+\n1 row in set (0.00 sec)\n```\n\n## 数值表达式\n\n------\n\n数值表达式用于在任何查询中执行任何数学运算。\n\n句法：\n\n```\nSELECT numerical_expression as  OPERATION_NAME\n[FROM table_name\nWHERE CONDITION] ;\n```\n\n这里，数值表达式用于数学表达式或任何公式。下面是一个简单的示例，展示了SQLNDigitic表达式的用法：\n\n```\nSQL> SELECT (15 + 6) AS ADDITION\n+----------+\n| ADDITION |\n+----------+\n|       21 |\n+----------+\n1 row in set (0.00 sec)\n```\n\n有几个内置函数，如avg()、sum()、count()等，用于对表或特定表列执行所谓的聚合数据计算。\n\n```\nSQL> SELECT COUNT(*) AS \"RECORDS\" FROM CUSTOMERS; \n+---------+\n| RECORDS |\n+---------+\n|       7 |\n+---------+\n1 row in set (0.00 sec)\n```\n\n## 日期表达式\n\n日期表达式返回当前系统日期和时间值：\n\n```\nSQL>  SELECT CURRENT_TIMESTAMP;\n+---------------------+\n| Current_Timestamp   |\n+---------------------+\n| 2009-11-12 06:40:23 |\n+---------------------+\n1 row in set (0.00 sec)\n```\n\n另一个日期表达式如下所示：\n\n```\nSQL>  SELECT  GETDATE();;\n+-------------------------+\n| GETDATE                 |\n+-------------------------+\n| 2009-10-22 12:07:18.140 |\n+-------------------------+\n1 row in set (0.00 sec)\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-10T14:23:12.336Z","path":"wiki/sql/sentence/express.html","comments":1,"_id":"cmbreopir000i65x061gpbjqk","content":"<h2 id=\"SQL-表达式\"><a href=\"#SQL-表达式\" class=\"headerlink\" title=\"SQL 表达式\"></a>SQL 表达式</h2><hr>\n<p>表达式是计算值的一个或多个值、运算符和SQL函数的组合。这些SQL表达式类似于公式，它们是用查询语言编写的。</p>\n<p>您还可以使用它们查询数据库中的特定数据集。</p>\n<h3 id=\"句法\"><a href=\"#句法\" class=\"headerlink\" title=\"句法\"></a>句法</h3><p>考虑SELECT语句的基本语法，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2, columnN </span><br><span class=\"line\">FROM table_name </span><br><span class=\"line\">WHERE [CONDITION|EXPRESSION];</span><br></pre></td></tr></table></figure>\n\n<p>有不同类型的sql表达式，如下所示：</p>\n<ul>\n<li>布尔型</li>\n<li>数值型</li>\n<li>日期</li>\n</ul>\n<p>现在让我们详细讨论每一个问题。</p>\n<h2 id=\"布尔表达式\"><a href=\"#布尔表达式\" class=\"headerlink\" title=\"布尔表达式\"></a>布尔表达式</h2><hr>\n<p>SQL布尔表达式基于匹配单个值获取数据。</p>\n<p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2, columnN </span><br><span class=\"line\">FROM table_name </span><br><span class=\"line\">WHERE SINGLE VALUE MATCHING EXPRESSION;</span><br></pre></td></tr></table></figure>\n\n<p>使用具有以下记录的Customers表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT * FROM CUSTOMERS;</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>下表是一个简单的示例，展示了各种sql布尔表达式的用法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT * FROM CUSTOMERS WHERE SALARY = 10000;</span><br><span class=\"line\">+----+-------+-----+---------+----------+</span><br><span class=\"line\">| ID | NAME  | AGE | ADDRESS | SALARY   |</span><br><span class=\"line\">+----+-------+-----+---------+----------+</span><br><span class=\"line\">|  7 | Muffy |  24 | Indore  | 10000.00 |</span><br><span class=\"line\">+----+-------+-----+---------+----------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数值表达式\"><a href=\"#数值表达式\" class=\"headerlink\" title=\"数值表达式\"></a>数值表达式</h2><hr>\n<p>数值表达式用于在任何查询中执行任何数学运算。</p>\n<p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT numerical_expression as  OPERATION_NAME</span><br><span class=\"line\">[FROM table_name</span><br><span class=\"line\">WHERE CONDITION] ;</span><br></pre></td></tr></table></figure>\n\n<p>这里，数值表达式用于数学表达式或任何公式。下面是一个简单的示例，展示了SQLNDigitic表达式的用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT (15 + 6) AS ADDITION</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| ADDITION |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">|       21 |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>有几个内置函数，如avg()、sum()、count()等，用于对表或特定表列执行所谓的聚合数据计算。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT COUNT(*) AS &quot;RECORDS&quot; FROM CUSTOMERS; </span><br><span class=\"line\">+---------+</span><br><span class=\"line\">| RECORDS |</span><br><span class=\"line\">+---------+</span><br><span class=\"line\">|       7 |</span><br><span class=\"line\">+---------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"日期表达式\"><a href=\"#日期表达式\" class=\"headerlink\" title=\"日期表达式\"></a>日期表达式</h2><p>日期表达式返回当前系统日期和时间值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt;  SELECT CURRENT_TIMESTAMP;</span><br><span class=\"line\">+---------------------+</span><br><span class=\"line\">| Current_Timestamp   |</span><br><span class=\"line\">+---------------------+</span><br><span class=\"line\">| 2009-11-12 06:40:23 |</span><br><span class=\"line\">+---------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>另一个日期表达式如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt;  SELECT  GETDATE();;</span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\">| GETDATE                 |</span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\">| 2009-10-22 12:07:18.140 |</span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-表达式\"><a href=\"#SQL-表达式\" class=\"headerlink\" title=\"SQL 表达式\"></a>SQL 表达式</h2><hr>\n<p>表达式是计算值的一个或多个值、运算符和SQL函数的组合。这些SQL表达式类似于公式，它们是用查询语言编写的。</p>\n<p>您还可以使用它们查询数据库中的特定数据集。</p>\n<h3 id=\"句法\"><a href=\"#句法\" class=\"headerlink\" title=\"句法\"></a>句法</h3><p>考虑SELECT语句的基本语法，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2, columnN </span><br><span class=\"line\">FROM table_name </span><br><span class=\"line\">WHERE [CONDITION|EXPRESSION];</span><br></pre></td></tr></table></figure>\n\n<p>有不同类型的sql表达式，如下所示：</p>\n<ul>\n<li>布尔型</li>\n<li>数值型</li>\n<li>日期</li>\n</ul>\n<p>现在让我们详细讨论每一个问题。</p>\n<h2 id=\"布尔表达式\"><a href=\"#布尔表达式\" class=\"headerlink\" title=\"布尔表达式\"></a>布尔表达式</h2><hr>\n<p>SQL布尔表达式基于匹配单个值获取数据。</p>\n<p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2, columnN </span><br><span class=\"line\">FROM table_name </span><br><span class=\"line\">WHERE SINGLE VALUE MATCHING EXPRESSION;</span><br></pre></td></tr></table></figure>\n\n<p>使用具有以下记录的Customers表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT * FROM CUSTOMERS;</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>下表是一个简单的示例，展示了各种sql布尔表达式的用法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT * FROM CUSTOMERS WHERE SALARY = 10000;</span><br><span class=\"line\">+----+-------+-----+---------+----------+</span><br><span class=\"line\">| ID | NAME  | AGE | ADDRESS | SALARY   |</span><br><span class=\"line\">+----+-------+-----+---------+----------+</span><br><span class=\"line\">|  7 | Muffy |  24 | Indore  | 10000.00 |</span><br><span class=\"line\">+----+-------+-----+---------+----------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数值表达式\"><a href=\"#数值表达式\" class=\"headerlink\" title=\"数值表达式\"></a>数值表达式</h2><hr>\n<p>数值表达式用于在任何查询中执行任何数学运算。</p>\n<p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT numerical_expression as  OPERATION_NAME</span><br><span class=\"line\">[FROM table_name</span><br><span class=\"line\">WHERE CONDITION] ;</span><br></pre></td></tr></table></figure>\n\n<p>这里，数值表达式用于数学表达式或任何公式。下面是一个简单的示例，展示了SQLNDigitic表达式的用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT (15 + 6) AS ADDITION</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| ADDITION |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">|       21 |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>有几个内置函数，如avg()、sum()、count()等，用于对表或特定表列执行所谓的聚合数据计算。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT COUNT(*) AS &quot;RECORDS&quot; FROM CUSTOMERS; </span><br><span class=\"line\">+---------+</span><br><span class=\"line\">| RECORDS |</span><br><span class=\"line\">+---------+</span><br><span class=\"line\">|       7 |</span><br><span class=\"line\">+---------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"日期表达式\"><a href=\"#日期表达式\" class=\"headerlink\" title=\"日期表达式\"></a>日期表达式</h2><p>日期表达式返回当前系统日期和时间值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt;  SELECT CURRENT_TIMESTAMP;</span><br><span class=\"line\">+---------------------+</span><br><span class=\"line\">| Current_Timestamp   |</span><br><span class=\"line\">+---------------------+</span><br><span class=\"line\">| 2009-11-12 06:40:23 |</span><br><span class=\"line\">+---------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>另一个日期表达式如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt;  SELECT  GETDATE();;</span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\">| GETDATE                 |</span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\">| 2009-10-22 12:07:18.140 |</span><br><span class=\"line\">+-------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL IN运算符","order":19,"_content":"\n## SQL IN 运算符\n\n------\n\nIN 运算符允许您在 WHERE 子句中指定多个值。\n\nIN 运算符是多个 OR 条件的简写。\n\n### SQL IN 语法\n\n```\nSELECT column_name(s)\nFROM table_name\nWHERE column_name IN (value1, value2, ...);\n```\n\n### 或者\n\n```\nSELECT column_name(s)\nFROM table_name\nWHERE column_name IN (SELECT STATEMENT);\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的 Northwind 示例数据库。\n\n以下数据选取自\"Customers\" 表：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## IN 操作符实例\n\n------\n\n以下 SQL 语句选取位于\"Germany\"，\"France\"和\"UK\"的所有客户：\n\n### 代码示例：\n\n```\nSELECT * FROM Customers\nWHERE Country IN ('Germany', 'France', 'UK');\n```\n\n以下 SQL 语句选取不在\"Germany\"，\"France\"或\"UK\"中的所有客户：\n\n### 代码示例：\n\n```\nSELECT * FROM Customers\nWHERE Country NOT IN ('Germany', 'France', 'UK');\n```\n\n以下 SQL 语句选取来自同一国家的所有客户作为供应商：\n\n### 代码示例：\n\n```\nSELECT * FROM Customers\nWHERE Country IN (SELECT Country FROM Suppliers);\n```\n","source":"wiki/sql/sentence/in.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL IN运算符\norder: 19\n---\n\n## SQL IN 运算符\n\n------\n\nIN 运算符允许您在 WHERE 子句中指定多个值。\n\nIN 运算符是多个 OR 条件的简写。\n\n### SQL IN 语法\n\n```\nSELECT column_name(s)\nFROM table_name\nWHERE column_name IN (value1, value2, ...);\n```\n\n### 或者\n\n```\nSELECT column_name(s)\nFROM table_name\nWHERE column_name IN (SELECT STATEMENT);\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的 Northwind 示例数据库。\n\n以下数据选取自\"Customers\" 表：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## IN 操作符实例\n\n------\n\n以下 SQL 语句选取位于\"Germany\"，\"France\"和\"UK\"的所有客户：\n\n### 代码示例：\n\n```\nSELECT * FROM Customers\nWHERE Country IN ('Germany', 'France', 'UK');\n```\n\n以下 SQL 语句选取不在\"Germany\"，\"France\"或\"UK\"中的所有客户：\n\n### 代码示例：\n\n```\nSELECT * FROM Customers\nWHERE Country NOT IN ('Germany', 'France', 'UK');\n```\n\n以下 SQL 语句选取来自同一国家的所有客户作为供应商：\n\n### 代码示例：\n\n```\nSELECT * FROM Customers\nWHERE Country IN (SELECT Country FROM Suppliers);\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-10T15:21:25.568Z","path":"wiki/sql/sentence/in.html","comments":1,"_id":"cmbreopis000k65x0gu260r6s","content":"<h2 id=\"SQL-IN-运算符\"><a href=\"#SQL-IN-运算符\" class=\"headerlink\" title=\"SQL IN 运算符\"></a>SQL IN 运算符</h2><hr>\n<p>IN 运算符允许您在 WHERE 子句中指定多个值。</p>\n<p>IN 运算符是多个 OR 条件的简写。</p>\n<h3 id=\"SQL-IN-语法\"><a href=\"#SQL-IN-语法\" class=\"headerlink\" title=\"SQL IN 语法\"></a>SQL IN 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE column_name IN (value1, value2, ...);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"或者\"><a href=\"#或者\" class=\"headerlink\" title=\"或者\"></a>或者</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE column_name IN (SELECT STATEMENT);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的 Northwind 示例数据库。</p>\n<p>以下数据选取自”Customers” 表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"IN-操作符实例\"><a href=\"#IN-操作符实例\" class=\"headerlink\" title=\"IN 操作符实例\"></a>IN 操作符实例</h2><hr>\n<p>以下 SQL 语句选取位于”Germany”，”France”和”UK”的所有客户：</p>\n<h3 id=\"代码示例：\"><a href=\"#代码示例：\" class=\"headerlink\" title=\"代码示例：\"></a>代码示例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE Country IN (&#x27;Germany&#x27;, &#x27;France&#x27;, &#x27;UK&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>以下 SQL 语句选取不在”Germany”，”France”或”UK”中的所有客户：</p>\n<h3 id=\"代码示例：-1\"><a href=\"#代码示例：-1\" class=\"headerlink\" title=\"代码示例：\"></a>代码示例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE Country NOT IN (&#x27;Germany&#x27;, &#x27;France&#x27;, &#x27;UK&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>以下 SQL 语句选取来自同一国家的所有客户作为供应商：</p>\n<h3 id=\"代码示例：-2\"><a href=\"#代码示例：-2\" class=\"headerlink\" title=\"代码示例：\"></a>代码示例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE Country IN (SELECT Country FROM Suppliers);</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-IN-运算符\"><a href=\"#SQL-IN-运算符\" class=\"headerlink\" title=\"SQL IN 运算符\"></a>SQL IN 运算符</h2><hr>\n<p>IN 运算符允许您在 WHERE 子句中指定多个值。</p>\n<p>IN 运算符是多个 OR 条件的简写。</p>\n<h3 id=\"SQL-IN-语法\"><a href=\"#SQL-IN-语法\" class=\"headerlink\" title=\"SQL IN 语法\"></a>SQL IN 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE column_name IN (value1, value2, ...);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"或者\"><a href=\"#或者\" class=\"headerlink\" title=\"或者\"></a>或者</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE column_name IN (SELECT STATEMENT);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的 Northwind 示例数据库。</p>\n<p>以下数据选取自”Customers” 表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"IN-操作符实例\"><a href=\"#IN-操作符实例\" class=\"headerlink\" title=\"IN 操作符实例\"></a>IN 操作符实例</h2><hr>\n<p>以下 SQL 语句选取位于”Germany”，”France”和”UK”的所有客户：</p>\n<h3 id=\"代码示例：\"><a href=\"#代码示例：\" class=\"headerlink\" title=\"代码示例：\"></a>代码示例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE Country IN (&#x27;Germany&#x27;, &#x27;France&#x27;, &#x27;UK&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>以下 SQL 语句选取不在”Germany”，”France”或”UK”中的所有客户：</p>\n<h3 id=\"代码示例：-1\"><a href=\"#代码示例：-1\" class=\"headerlink\" title=\"代码示例：\"></a>代码示例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE Country NOT IN (&#x27;Germany&#x27;, &#x27;France&#x27;, &#x27;UK&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>以下 SQL 语句选取来自同一国家的所有客户作为供应商：</p>\n<h3 id=\"代码示例：-2\"><a href=\"#代码示例：-2\" class=\"headerlink\" title=\"代码示例：\"></a>代码示例：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE Country IN (SELECT Country FROM Suppliers);</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 内部连接","order":24,"_content":"\n## SQL INNER JOIN 关键字（内部连接）\n\n------\n\n内部链接INNER JOIN关键字选择两个表中具有匹配值的记录。\n\n### SQL INNER JOIN 语法\n\n```\nSELECT column_name(s)\nFROM table1\nINNER JOIN table2 ON table1.column_name = table2.column_name;\n```\n\n**　注释：**INNER JOIN 与 JOIN 是相同的。\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是 \"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName    | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders   | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo   | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n\n选自 \"Orders\" 表的数据：\n\n| OrderID | CustomerID | EmployeeID | OrderDate  | ShipperID |\n| :------ | :--------- | :--------- | :--------- | :-------- |\n| 10308   | 2          | 7          | 1996-09-18 | 3         |\n| 10309   | 37         | 3          | 1996-09-19 | 1         |\n| 10310   | 77         | 8          | 1996-09-20 | 2         |\n\n## SQL INNER JOIN 实例\n\n------\n\n以下SQL语句将返回所有下订单的客户：\n\n示例：\n\n```\nSELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nINNER JOIN Orders\nON Customers.CustomerID=Orders.CustomerID\nORDER BY Customers.CustomerName;\n```\n\n> **注释：**如果表中至少有一个匹配项，INNER JOIN 关键字将返回一行。如果 \"Customers\" 表中的行与\"Orders\" 不匹配，则不会列出行。\n\n## 加入三张表\n\n------\n\n以下SQL语句选择包含客户和货运单信息的所有订单：\n\n**　代码示例：**\n\n```\nSELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName\nFROM ((Orders\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)\nINNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);\n```\n","source":"wiki/sql/sentence/inner.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 内部连接\norder: 24\n---\n\n## SQL INNER JOIN 关键字（内部连接）\n\n------\n\n内部链接INNER JOIN关键字选择两个表中具有匹配值的记录。\n\n### SQL INNER JOIN 语法\n\n```\nSELECT column_name(s)\nFROM table1\nINNER JOIN table2 ON table1.column_name = table2.column_name;\n```\n\n**　注释：**INNER JOIN 与 JOIN 是相同的。\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是 \"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName    | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders   | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo   | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n\n选自 \"Orders\" 表的数据：\n\n| OrderID | CustomerID | EmployeeID | OrderDate  | ShipperID |\n| :------ | :--------- | :--------- | :--------- | :-------- |\n| 10308   | 2          | 7          | 1996-09-18 | 3         |\n| 10309   | 37         | 3          | 1996-09-19 | 1         |\n| 10310   | 77         | 8          | 1996-09-20 | 2         |\n\n## SQL INNER JOIN 实例\n\n------\n\n以下SQL语句将返回所有下订单的客户：\n\n示例：\n\n```\nSELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nINNER JOIN Orders\nON Customers.CustomerID=Orders.CustomerID\nORDER BY Customers.CustomerName;\n```\n\n> **注释：**如果表中至少有一个匹配项，INNER JOIN 关键字将返回一行。如果 \"Customers\" 表中的行与\"Orders\" 不匹配，则不会列出行。\n\n## 加入三张表\n\n------\n\n以下SQL语句选择包含客户和货运单信息的所有订单：\n\n**　代码示例：**\n\n```\nSELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName\nFROM ((Orders\nINNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)\nINNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T01:14:17.454Z","path":"wiki/sql/sentence/inner.html","comments":1,"_id":"cmbreopit000l65x01hm2eyvl","content":"<h2 id=\"SQL-INNER-JOIN-关键字（内部连接）\"><a href=\"#SQL-INNER-JOIN-关键字（内部连接）\" class=\"headerlink\" title=\"SQL INNER JOIN 关键字（内部连接）\"></a>SQL INNER JOIN 关键字（内部连接）</h2><hr>\n<p>内部链接INNER JOIN关键字选择两个表中具有匹配值的记录。</p>\n<h3 id=\"SQL-INNER-JOIN-语法\"><a href=\"#SQL-INNER-JOIN-语法\" class=\"headerlink\" title=\"SQL INNER JOIN 语法\"></a>SQL INNER JOIN 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table1</span><br><span class=\"line\">INNER JOIN table2 ON table1.column_name = table2.column_name;</span><br></pre></td></tr></table></figure>\n\n<p>**　注释：**INNER JOIN 与 JOIN 是相同的。</p>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是 “Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n</tbody></table>\n<p>选自 “Orders” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">EmployeeID</th>\n<th align=\"left\">OrderDate</th>\n<th align=\"left\">ShipperID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10308</td>\n<td align=\"left\">2</td>\n<td align=\"left\">7</td>\n<td align=\"left\">1996-09-18</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">10309</td>\n<td align=\"left\">37</td>\n<td align=\"left\">3</td>\n<td align=\"left\">1996-09-19</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">10310</td>\n<td align=\"left\">77</td>\n<td align=\"left\">8</td>\n<td align=\"left\">1996-09-20</td>\n<td align=\"left\">2</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-INNER-JOIN-实例\"><a href=\"#SQL-INNER-JOIN-实例\" class=\"headerlink\" title=\"SQL INNER JOIN 实例\"></a>SQL INNER JOIN 实例</h2><hr>\n<p>以下SQL语句将返回所有下订单的客户：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Customers.CustomerName, Orders.OrderID</span><br><span class=\"line\">FROM Customers</span><br><span class=\"line\">INNER JOIN Orders</span><br><span class=\"line\">ON Customers.CustomerID=Orders.CustomerID</span><br><span class=\"line\">ORDER BY Customers.CustomerName;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注释：**如果表中至少有一个匹配项，INNER JOIN 关键字将返回一行。如果 “Customers” 表中的行与”Orders” 不匹配，则不会列出行。</p>\n</blockquote>\n<h2 id=\"加入三张表\"><a href=\"#加入三张表\" class=\"headerlink\" title=\"加入三张表\"></a>加入三张表</h2><hr>\n<p>以下SQL语句选择包含客户和货运单信息的所有订单：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName</span><br><span class=\"line\">FROM ((Orders</span><br><span class=\"line\">INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)</span><br><span class=\"line\">INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-INNER-JOIN-关键字（内部连接）\"><a href=\"#SQL-INNER-JOIN-关键字（内部连接）\" class=\"headerlink\" title=\"SQL INNER JOIN 关键字（内部连接）\"></a>SQL INNER JOIN 关键字（内部连接）</h2><hr>\n<p>内部链接INNER JOIN关键字选择两个表中具有匹配值的记录。</p>\n<h3 id=\"SQL-INNER-JOIN-语法\"><a href=\"#SQL-INNER-JOIN-语法\" class=\"headerlink\" title=\"SQL INNER JOIN 语法\"></a>SQL INNER JOIN 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table1</span><br><span class=\"line\">INNER JOIN table2 ON table1.column_name = table2.column_name;</span><br></pre></td></tr></table></figure>\n\n<p>**　注释：**INNER JOIN 与 JOIN 是相同的。</p>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是 “Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n</tbody></table>\n<p>选自 “Orders” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">EmployeeID</th>\n<th align=\"left\">OrderDate</th>\n<th align=\"left\">ShipperID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10308</td>\n<td align=\"left\">2</td>\n<td align=\"left\">7</td>\n<td align=\"left\">1996-09-18</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">10309</td>\n<td align=\"left\">37</td>\n<td align=\"left\">3</td>\n<td align=\"left\">1996-09-19</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">10310</td>\n<td align=\"left\">77</td>\n<td align=\"left\">8</td>\n<td align=\"left\">1996-09-20</td>\n<td align=\"left\">2</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-INNER-JOIN-实例\"><a href=\"#SQL-INNER-JOIN-实例\" class=\"headerlink\" title=\"SQL INNER JOIN 实例\"></a>SQL INNER JOIN 实例</h2><hr>\n<p>以下SQL语句将返回所有下订单的客户：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Customers.CustomerName, Orders.OrderID</span><br><span class=\"line\">FROM Customers</span><br><span class=\"line\">INNER JOIN Orders</span><br><span class=\"line\">ON Customers.CustomerID=Orders.CustomerID</span><br><span class=\"line\">ORDER BY Customers.CustomerName;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注释：**如果表中至少有一个匹配项，INNER JOIN 关键字将返回一行。如果 “Customers” 表中的行与”Orders” 不匹配，则不会列出行。</p>\n</blockquote>\n<h2 id=\"加入三张表\"><a href=\"#加入三张表\" class=\"headerlink\" title=\"加入三张表\"></a>加入三张表</h2><hr>\n<p>以下SQL语句选择包含客户和货运单信息的所有订单：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Orders.OrderID, Customers.CustomerName, Shippers.ShipperName</span><br><span class=\"line\">FROM ((Orders</span><br><span class=\"line\">INNER JOIN Customers ON Orders.CustomerID = Customers.CustomerID)</span><br><span class=\"line\">INNER JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID);</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 在表中插入","order":9,"_content":"\n## SQL INSERT INTO 语句\n\n------\n\nINSERT INTO 语句用于向表中插入新的数据行。\n\n### SQL INSERT INTO 语法\n\nINSERT INTO 语句可以用两种形式编写。\n　第一个表单没有指定要插入数据的列的名称，只提供要插入的值，即可添加一行新的数据：\n\nsql\n\n```\nINSERT INTO table_name (column1, column2, column3, ...)\nVALUES (value1, value2, value3, ...);\n```\n\n第二种，如果要为表中的所有列添加值，则不需要在SQL查询中指定列名称。但是，请确保值的顺序与表中的列顺序相同。INSERT INTO语法如下所示：\n\nsql\n\n```\nINSERT INTO table_name\nVALUES (value1, value2, value3, ...);\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的 Northwind 示例数据库。\n\n以下是\"Customers\" 表中的数据：\n\n| CustomerID | CustomerName           | ContactName      | Address                     | City     | PostalCode | Country |\n| :--------- | :--------------------- | :--------------- | :-------------------------- | :------- | :--------- | :------ |\n| 87         | Wartian Herkku         | Pirkko Koskitalo | Torikatu 38                 | Oulu     | 90110      | Finland |\n| 88         | Wellington Importadora | Paula Parente    | Rua do Mercado, 12          | Resende  | 08737-363  | Brazil  |\n| 89         | White Clover Markets   | Karl Jablonski   | 305 - 14th Ave. S. Suite 3B | Seattle  | 98128      | USA     |\n| 90         | Wilman Kala            | Matti Karttunen  | Keskuskatu 45               | Helsinki | 21240      | Finland |\n| 91         | Wolski                 | Zbyszek          | ul. Filtrowa 68             | Walla    | 01-012     | Poland  |\n\n## INSERT INTO 实例\n\n------\n\n假设我们想在\"Customers\"表中插入一个新行。\n\n我们可以使用以下SQL语句：\n\n## 实例\n\nINSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)\nVALUES ('Cardinal','Tom B. Erichsen','Skagen 21','Stavanger','4006','Norway');\n\n现在，选自 \"Customers\" 表的数据如下所示：\n\n| CustomerID | CustomerName           | ContactName      | Address                     | City      | PostalCode | Country |\n| :--------- | :--------------------- | :--------------- | :-------------------------- | :-------- | :--------- | :------ |\n| 87         | Wartian Herkku         | Pirkko Koskitalo | Torikatu 38                 | Oulu      | 90110      | Finland |\n| 88         | Wellington Importadora | Paula Parente    | Rua do Mercado, 12          | Resende   | 08737-363  | Brazil  |\n| 89         | White Clover Markets   | Karl Jablonski   | 305 - 14th Ave. S. Suite 3B | Seattle   | 98128      | USA     |\n| 90         | Wilman Kala            | Matti Karttunen  | Keskuskatu 45               | Helsinki  | 21240      | Finland |\n| 91         | Wolski                 | Zbyszek          | ul. Filtrowa 68             | Walla     | 01-012     | Poland  |\n| 92         | Cardinal               | Tom B. Erichsen  | Skagen 21                   | Stavanger | 4006       | Norway  |\n\n| **注意到了吗？** **我们没有将任何号码插入 CustomerID 字段。** CustomerID列是一个字段，在将新记录插入到表中时自动生成。 |\n| ------------------------------------------------------------ |\n\n## 仅在指定的列中插入数据\n\n------\n\n我们还可以只在指定的列中插入数据。\n\n以下SQL语句插入一个新行，但只在\"CustomerName\"、\"City\"和\"Country\"列中插入数据（CustomerID字段将自动更新）：\n\n示例：\n\n```\nINSERT INTO Customers (CustomerName, City, Country)\nVALUES ('Cardinal', 'Stavanger', 'Norway');\n```\n\n现在，选自 \"Customers\" 表的数据如下所示：\n\n| CustomerID | CustomerName           | ContactName      | Address                     | City      | PostalCode | Country |\n| :--------- | :--------------------- | :--------------- | :-------------------------- | :-------- | :--------- | :------ |\n| 87         | Wartian Herkku         | Pirkko Koskitalo | Torikatu 38                 | Oulu      | 90110      | Finland |\n| 88         | Wellington Importadora | Paula Parente    | Rua do Mercado, 12          | Resende   | 08737-363  | Brazil  |\n| 89         | White Clover Markets   | Karl Jablonski   | 305 - 14th Ave. S. Suite 3B | Seattle   | 98128      | USA     |\n| 90         | Wilman Kala            | Matti Karttunen  | Keskuskatu 45               | Helsinki  | 21240      | Finland |\n| 91         | Wolski                 | Zbyszek          | ul. Filtrowa 68             | Walla     | 01-012     | Poland  |\n| 92         | Cardinal               | null             | null                        | Stavanger | null       | Norway  |\n\n## 使用另一个表填充一个表\n\n------\n\n您可以通过另一个表上的SELECT语句查询出来的字段值，然后将数据填充到本表中，条件是另一个表所查询的字段与本表要插入数据的字段是一一对应的。\n\n```\nINSERT INTO first_table_name [(column1, column2, ... columnN)] \nSELECT column1, column2, ...columnN \nFROM second_table_name\n[WHERE condition];\n```\n","source":"wiki/sql/sentence/insert.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 在表中插入\norder: 9\n---\n\n## SQL INSERT INTO 语句\n\n------\n\nINSERT INTO 语句用于向表中插入新的数据行。\n\n### SQL INSERT INTO 语法\n\nINSERT INTO 语句可以用两种形式编写。\n　第一个表单没有指定要插入数据的列的名称，只提供要插入的值，即可添加一行新的数据：\n\nsql\n\n```\nINSERT INTO table_name (column1, column2, column3, ...)\nVALUES (value1, value2, value3, ...);\n```\n\n第二种，如果要为表中的所有列添加值，则不需要在SQL查询中指定列名称。但是，请确保值的顺序与表中的列顺序相同。INSERT INTO语法如下所示：\n\nsql\n\n```\nINSERT INTO table_name\nVALUES (value1, value2, value3, ...);\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的 Northwind 示例数据库。\n\n以下是\"Customers\" 表中的数据：\n\n| CustomerID | CustomerName           | ContactName      | Address                     | City     | PostalCode | Country |\n| :--------- | :--------------------- | :--------------- | :-------------------------- | :------- | :--------- | :------ |\n| 87         | Wartian Herkku         | Pirkko Koskitalo | Torikatu 38                 | Oulu     | 90110      | Finland |\n| 88         | Wellington Importadora | Paula Parente    | Rua do Mercado, 12          | Resende  | 08737-363  | Brazil  |\n| 89         | White Clover Markets   | Karl Jablonski   | 305 - 14th Ave. S. Suite 3B | Seattle  | 98128      | USA     |\n| 90         | Wilman Kala            | Matti Karttunen  | Keskuskatu 45               | Helsinki | 21240      | Finland |\n| 91         | Wolski                 | Zbyszek          | ul. Filtrowa 68             | Walla    | 01-012     | Poland  |\n\n## INSERT INTO 实例\n\n------\n\n假设我们想在\"Customers\"表中插入一个新行。\n\n我们可以使用以下SQL语句：\n\n## 实例\n\nINSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)\nVALUES ('Cardinal','Tom B. Erichsen','Skagen 21','Stavanger','4006','Norway');\n\n现在，选自 \"Customers\" 表的数据如下所示：\n\n| CustomerID | CustomerName           | ContactName      | Address                     | City      | PostalCode | Country |\n| :--------- | :--------------------- | :--------------- | :-------------------------- | :-------- | :--------- | :------ |\n| 87         | Wartian Herkku         | Pirkko Koskitalo | Torikatu 38                 | Oulu      | 90110      | Finland |\n| 88         | Wellington Importadora | Paula Parente    | Rua do Mercado, 12          | Resende   | 08737-363  | Brazil  |\n| 89         | White Clover Markets   | Karl Jablonski   | 305 - 14th Ave. S. Suite 3B | Seattle   | 98128      | USA     |\n| 90         | Wilman Kala            | Matti Karttunen  | Keskuskatu 45               | Helsinki  | 21240      | Finland |\n| 91         | Wolski                 | Zbyszek          | ul. Filtrowa 68             | Walla     | 01-012     | Poland  |\n| 92         | Cardinal               | Tom B. Erichsen  | Skagen 21                   | Stavanger | 4006       | Norway  |\n\n| **注意到了吗？** **我们没有将任何号码插入 CustomerID 字段。** CustomerID列是一个字段，在将新记录插入到表中时自动生成。 |\n| ------------------------------------------------------------ |\n\n## 仅在指定的列中插入数据\n\n------\n\n我们还可以只在指定的列中插入数据。\n\n以下SQL语句插入一个新行，但只在\"CustomerName\"、\"City\"和\"Country\"列中插入数据（CustomerID字段将自动更新）：\n\n示例：\n\n```\nINSERT INTO Customers (CustomerName, City, Country)\nVALUES ('Cardinal', 'Stavanger', 'Norway');\n```\n\n现在，选自 \"Customers\" 表的数据如下所示：\n\n| CustomerID | CustomerName           | ContactName      | Address                     | City      | PostalCode | Country |\n| :--------- | :--------------------- | :--------------- | :-------------------------- | :-------- | :--------- | :------ |\n| 87         | Wartian Herkku         | Pirkko Koskitalo | Torikatu 38                 | Oulu      | 90110      | Finland |\n| 88         | Wellington Importadora | Paula Parente    | Rua do Mercado, 12          | Resende   | 08737-363  | Brazil  |\n| 89         | White Clover Markets   | Karl Jablonski   | 305 - 14th Ave. S. Suite 3B | Seattle   | 98128      | USA     |\n| 90         | Wilman Kala            | Matti Karttunen  | Keskuskatu 45               | Helsinki  | 21240      | Finland |\n| 91         | Wolski                 | Zbyszek          | ul. Filtrowa 68             | Walla     | 01-012     | Poland  |\n| 92         | Cardinal               | null             | null                        | Stavanger | null       | Norway  |\n\n## 使用另一个表填充一个表\n\n------\n\n您可以通过另一个表上的SELECT语句查询出来的字段值，然后将数据填充到本表中，条件是另一个表所查询的字段与本表要插入数据的字段是一一对应的。\n\n```\nINSERT INTO first_table_name [(column1, column2, ... columnN)] \nSELECT column1, column2, ...columnN \nFROM second_table_name\n[WHERE condition];\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-10T14:03:31.031Z","path":"wiki/sql/sentence/insert.html","comments":1,"_id":"cmbreopit000m65x003zbhopd","content":"<h2 id=\"SQL-INSERT-INTO-语句\"><a href=\"#SQL-INSERT-INTO-语句\" class=\"headerlink\" title=\"SQL INSERT INTO 语句\"></a>SQL INSERT INTO 语句</h2><hr>\n<p>INSERT INTO 语句用于向表中插入新的数据行。</p>\n<h3 id=\"SQL-INSERT-INTO-语法\"><a href=\"#SQL-INSERT-INTO-语法\" class=\"headerlink\" title=\"SQL INSERT INTO 语法\"></a>SQL INSERT INTO 语法</h3><p>INSERT INTO 语句可以用两种形式编写。<br>　第一个表单没有指定要插入数据的列的名称，只提供要插入的值，即可添加一行新的数据：</p>\n<p>sql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO table_name (column1, column2, column3, ...)</span><br><span class=\"line\">VALUES (value1, value2, value3, ...);</span><br></pre></td></tr></table></figure>\n\n<p>第二种，如果要为表中的所有列添加值，则不需要在SQL查询中指定列名称。但是，请确保值的顺序与表中的列顺序相同。INSERT INTO语法如下所示：</p>\n<p>sql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO table_name</span><br><span class=\"line\">VALUES (value1, value2, value3, ...);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的 Northwind 示例数据库。</p>\n<p>以下是”Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">87</td>\n<td align=\"left\">Wartian Herkku</td>\n<td align=\"left\">Pirkko Koskitalo</td>\n<td align=\"left\">Torikatu 38</td>\n<td align=\"left\">Oulu</td>\n<td align=\"left\">90110</td>\n<td align=\"left\">Finland</td>\n</tr>\n<tr>\n<td align=\"left\">88</td>\n<td align=\"left\">Wellington Importadora</td>\n<td align=\"left\">Paula Parente</td>\n<td align=\"left\">Rua do Mercado, 12</td>\n<td align=\"left\">Resende</td>\n<td align=\"left\">08737-363</td>\n<td align=\"left\">Brazil</td>\n</tr>\n<tr>\n<td align=\"left\">89</td>\n<td align=\"left\">White Clover Markets</td>\n<td align=\"left\">Karl Jablonski</td>\n<td align=\"left\">305 - 14th Ave. S. Suite 3B</td>\n<td align=\"left\">Seattle</td>\n<td align=\"left\">98128</td>\n<td align=\"left\">USA</td>\n</tr>\n<tr>\n<td align=\"left\">90</td>\n<td align=\"left\">Wilman Kala</td>\n<td align=\"left\">Matti Karttunen</td>\n<td align=\"left\">Keskuskatu 45</td>\n<td align=\"left\">Helsinki</td>\n<td align=\"left\">21240</td>\n<td align=\"left\">Finland</td>\n</tr>\n<tr>\n<td align=\"left\">91</td>\n<td align=\"left\">Wolski</td>\n<td align=\"left\">Zbyszek</td>\n<td align=\"left\">ul. Filtrowa 68</td>\n<td align=\"left\">Walla</td>\n<td align=\"left\">01-012</td>\n<td align=\"left\">Poland</td>\n</tr>\n</tbody></table>\n<h2 id=\"INSERT-INTO-实例\"><a href=\"#INSERT-INTO-实例\" class=\"headerlink\" title=\"INSERT INTO 实例\"></a>INSERT INTO 实例</h2><hr>\n<p>假设我们想在”Customers”表中插入一个新行。</p>\n<p>我们可以使用以下SQL语句：</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)<br>VALUES (‘Cardinal’,’Tom B. Erichsen’,’Skagen 21’,’Stavanger’,’4006’,’Norway’);</p>\n<p>现在，选自 “Customers” 表的数据如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">87</td>\n<td align=\"left\">Wartian Herkku</td>\n<td align=\"left\">Pirkko Koskitalo</td>\n<td align=\"left\">Torikatu 38</td>\n<td align=\"left\">Oulu</td>\n<td align=\"left\">90110</td>\n<td align=\"left\">Finland</td>\n</tr>\n<tr>\n<td align=\"left\">88</td>\n<td align=\"left\">Wellington Importadora</td>\n<td align=\"left\">Paula Parente</td>\n<td align=\"left\">Rua do Mercado, 12</td>\n<td align=\"left\">Resende</td>\n<td align=\"left\">08737-363</td>\n<td align=\"left\">Brazil</td>\n</tr>\n<tr>\n<td align=\"left\">89</td>\n<td align=\"left\">White Clover Markets</td>\n<td align=\"left\">Karl Jablonski</td>\n<td align=\"left\">305 - 14th Ave. S. Suite 3B</td>\n<td align=\"left\">Seattle</td>\n<td align=\"left\">98128</td>\n<td align=\"left\">USA</td>\n</tr>\n<tr>\n<td align=\"left\">90</td>\n<td align=\"left\">Wilman Kala</td>\n<td align=\"left\">Matti Karttunen</td>\n<td align=\"left\">Keskuskatu 45</td>\n<td align=\"left\">Helsinki</td>\n<td align=\"left\">21240</td>\n<td align=\"left\">Finland</td>\n</tr>\n<tr>\n<td align=\"left\">91</td>\n<td align=\"left\">Wolski</td>\n<td align=\"left\">Zbyszek</td>\n<td align=\"left\">ul. Filtrowa 68</td>\n<td align=\"left\">Walla</td>\n<td align=\"left\">01-012</td>\n<td align=\"left\">Poland</td>\n</tr>\n<tr>\n<td align=\"left\">92</td>\n<td align=\"left\">Cardinal</td>\n<td align=\"left\">Tom B. Erichsen</td>\n<td align=\"left\">Skagen 21</td>\n<td align=\"left\">Stavanger</td>\n<td align=\"left\">4006</td>\n<td align=\"left\">Norway</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>注意到了吗？</strong> <strong>我们没有将任何号码插入 CustomerID 字段。</strong> CustomerID列是一个字段，在将新记录插入到表中时自动生成。</th>\n</tr>\n</thead>\n</table>\n<h2 id=\"仅在指定的列中插入数据\"><a href=\"#仅在指定的列中插入数据\" class=\"headerlink\" title=\"仅在指定的列中插入数据\"></a>仅在指定的列中插入数据</h2><hr>\n<p>我们还可以只在指定的列中插入数据。</p>\n<p>以下SQL语句插入一个新行，但只在”CustomerName”、”City”和”Country”列中插入数据（CustomerID字段将自动更新）：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO Customers (CustomerName, City, Country)</span><br><span class=\"line\">VALUES (&#x27;Cardinal&#x27;, &#x27;Stavanger&#x27;, &#x27;Norway&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>现在，选自 “Customers” 表的数据如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">87</td>\n<td align=\"left\">Wartian Herkku</td>\n<td align=\"left\">Pirkko Koskitalo</td>\n<td align=\"left\">Torikatu 38</td>\n<td align=\"left\">Oulu</td>\n<td align=\"left\">90110</td>\n<td align=\"left\">Finland</td>\n</tr>\n<tr>\n<td align=\"left\">88</td>\n<td align=\"left\">Wellington Importadora</td>\n<td align=\"left\">Paula Parente</td>\n<td align=\"left\">Rua do Mercado, 12</td>\n<td align=\"left\">Resende</td>\n<td align=\"left\">08737-363</td>\n<td align=\"left\">Brazil</td>\n</tr>\n<tr>\n<td align=\"left\">89</td>\n<td align=\"left\">White Clover Markets</td>\n<td align=\"left\">Karl Jablonski</td>\n<td align=\"left\">305 - 14th Ave. S. Suite 3B</td>\n<td align=\"left\">Seattle</td>\n<td align=\"left\">98128</td>\n<td align=\"left\">USA</td>\n</tr>\n<tr>\n<td align=\"left\">90</td>\n<td align=\"left\">Wilman Kala</td>\n<td align=\"left\">Matti Karttunen</td>\n<td align=\"left\">Keskuskatu 45</td>\n<td align=\"left\">Helsinki</td>\n<td align=\"left\">21240</td>\n<td align=\"left\">Finland</td>\n</tr>\n<tr>\n<td align=\"left\">91</td>\n<td align=\"left\">Wolski</td>\n<td align=\"left\">Zbyszek</td>\n<td align=\"left\">ul. Filtrowa 68</td>\n<td align=\"left\">Walla</td>\n<td align=\"left\">01-012</td>\n<td align=\"left\">Poland</td>\n</tr>\n<tr>\n<td align=\"left\">92</td>\n<td align=\"left\">Cardinal</td>\n<td align=\"left\">null</td>\n<td align=\"left\">null</td>\n<td align=\"left\">Stavanger</td>\n<td align=\"left\">null</td>\n<td align=\"left\">Norway</td>\n</tr>\n</tbody></table>\n<h2 id=\"使用另一个表填充一个表\"><a href=\"#使用另一个表填充一个表\" class=\"headerlink\" title=\"使用另一个表填充一个表\"></a>使用另一个表填充一个表</h2><hr>\n<p>您可以通过另一个表上的SELECT语句查询出来的字段值，然后将数据填充到本表中，条件是另一个表所查询的字段与本表要插入数据的字段是一一对应的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO first_table_name [(column1, column2, ... columnN)] </span><br><span class=\"line\">SELECT column1, column2, ...columnN </span><br><span class=\"line\">FROM second_table_name</span><br><span class=\"line\">[WHERE condition];</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-INSERT-INTO-语句\"><a href=\"#SQL-INSERT-INTO-语句\" class=\"headerlink\" title=\"SQL INSERT INTO 语句\"></a>SQL INSERT INTO 语句</h2><hr>\n<p>INSERT INTO 语句用于向表中插入新的数据行。</p>\n<h3 id=\"SQL-INSERT-INTO-语法\"><a href=\"#SQL-INSERT-INTO-语法\" class=\"headerlink\" title=\"SQL INSERT INTO 语法\"></a>SQL INSERT INTO 语法</h3><p>INSERT INTO 语句可以用两种形式编写。<br>　第一个表单没有指定要插入数据的列的名称，只提供要插入的值，即可添加一行新的数据：</p>\n<p>sql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO table_name (column1, column2, column3, ...)</span><br><span class=\"line\">VALUES (value1, value2, value3, ...);</span><br></pre></td></tr></table></figure>\n\n<p>第二种，如果要为表中的所有列添加值，则不需要在SQL查询中指定列名称。但是，请确保值的顺序与表中的列顺序相同。INSERT INTO语法如下所示：</p>\n<p>sql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO table_name</span><br><span class=\"line\">VALUES (value1, value2, value3, ...);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的 Northwind 示例数据库。</p>\n<p>以下是”Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">87</td>\n<td align=\"left\">Wartian Herkku</td>\n<td align=\"left\">Pirkko Koskitalo</td>\n<td align=\"left\">Torikatu 38</td>\n<td align=\"left\">Oulu</td>\n<td align=\"left\">90110</td>\n<td align=\"left\">Finland</td>\n</tr>\n<tr>\n<td align=\"left\">88</td>\n<td align=\"left\">Wellington Importadora</td>\n<td align=\"left\">Paula Parente</td>\n<td align=\"left\">Rua do Mercado, 12</td>\n<td align=\"left\">Resende</td>\n<td align=\"left\">08737-363</td>\n<td align=\"left\">Brazil</td>\n</tr>\n<tr>\n<td align=\"left\">89</td>\n<td align=\"left\">White Clover Markets</td>\n<td align=\"left\">Karl Jablonski</td>\n<td align=\"left\">305 - 14th Ave. S. Suite 3B</td>\n<td align=\"left\">Seattle</td>\n<td align=\"left\">98128</td>\n<td align=\"left\">USA</td>\n</tr>\n<tr>\n<td align=\"left\">90</td>\n<td align=\"left\">Wilman Kala</td>\n<td align=\"left\">Matti Karttunen</td>\n<td align=\"left\">Keskuskatu 45</td>\n<td align=\"left\">Helsinki</td>\n<td align=\"left\">21240</td>\n<td align=\"left\">Finland</td>\n</tr>\n<tr>\n<td align=\"left\">91</td>\n<td align=\"left\">Wolski</td>\n<td align=\"left\">Zbyszek</td>\n<td align=\"left\">ul. Filtrowa 68</td>\n<td align=\"left\">Walla</td>\n<td align=\"left\">01-012</td>\n<td align=\"left\">Poland</td>\n</tr>\n</tbody></table>\n<h2 id=\"INSERT-INTO-实例\"><a href=\"#INSERT-INTO-实例\" class=\"headerlink\" title=\"INSERT INTO 实例\"></a>INSERT INTO 实例</h2><hr>\n<p>假设我们想在”Customers”表中插入一个新行。</p>\n<p>我们可以使用以下SQL语句：</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)<br>VALUES (‘Cardinal’,’Tom B. Erichsen’,’Skagen 21’,’Stavanger’,’4006’,’Norway’);</p>\n<p>现在，选自 “Customers” 表的数据如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">87</td>\n<td align=\"left\">Wartian Herkku</td>\n<td align=\"left\">Pirkko Koskitalo</td>\n<td align=\"left\">Torikatu 38</td>\n<td align=\"left\">Oulu</td>\n<td align=\"left\">90110</td>\n<td align=\"left\">Finland</td>\n</tr>\n<tr>\n<td align=\"left\">88</td>\n<td align=\"left\">Wellington Importadora</td>\n<td align=\"left\">Paula Parente</td>\n<td align=\"left\">Rua do Mercado, 12</td>\n<td align=\"left\">Resende</td>\n<td align=\"left\">08737-363</td>\n<td align=\"left\">Brazil</td>\n</tr>\n<tr>\n<td align=\"left\">89</td>\n<td align=\"left\">White Clover Markets</td>\n<td align=\"left\">Karl Jablonski</td>\n<td align=\"left\">305 - 14th Ave. S. Suite 3B</td>\n<td align=\"left\">Seattle</td>\n<td align=\"left\">98128</td>\n<td align=\"left\">USA</td>\n</tr>\n<tr>\n<td align=\"left\">90</td>\n<td align=\"left\">Wilman Kala</td>\n<td align=\"left\">Matti Karttunen</td>\n<td align=\"left\">Keskuskatu 45</td>\n<td align=\"left\">Helsinki</td>\n<td align=\"left\">21240</td>\n<td align=\"left\">Finland</td>\n</tr>\n<tr>\n<td align=\"left\">91</td>\n<td align=\"left\">Wolski</td>\n<td align=\"left\">Zbyszek</td>\n<td align=\"left\">ul. Filtrowa 68</td>\n<td align=\"left\">Walla</td>\n<td align=\"left\">01-012</td>\n<td align=\"left\">Poland</td>\n</tr>\n<tr>\n<td align=\"left\">92</td>\n<td align=\"left\">Cardinal</td>\n<td align=\"left\">Tom B. Erichsen</td>\n<td align=\"left\">Skagen 21</td>\n<td align=\"left\">Stavanger</td>\n<td align=\"left\">4006</td>\n<td align=\"left\">Norway</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th><strong>注意到了吗？</strong> <strong>我们没有将任何号码插入 CustomerID 字段。</strong> CustomerID列是一个字段，在将新记录插入到表中时自动生成。</th>\n</tr>\n</thead>\n</table>\n<h2 id=\"仅在指定的列中插入数据\"><a href=\"#仅在指定的列中插入数据\" class=\"headerlink\" title=\"仅在指定的列中插入数据\"></a>仅在指定的列中插入数据</h2><hr>\n<p>我们还可以只在指定的列中插入数据。</p>\n<p>以下SQL语句插入一个新行，但只在”CustomerName”、”City”和”Country”列中插入数据（CustomerID字段将自动更新）：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO Customers (CustomerName, City, Country)</span><br><span class=\"line\">VALUES (&#x27;Cardinal&#x27;, &#x27;Stavanger&#x27;, &#x27;Norway&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>现在，选自 “Customers” 表的数据如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">87</td>\n<td align=\"left\">Wartian Herkku</td>\n<td align=\"left\">Pirkko Koskitalo</td>\n<td align=\"left\">Torikatu 38</td>\n<td align=\"left\">Oulu</td>\n<td align=\"left\">90110</td>\n<td align=\"left\">Finland</td>\n</tr>\n<tr>\n<td align=\"left\">88</td>\n<td align=\"left\">Wellington Importadora</td>\n<td align=\"left\">Paula Parente</td>\n<td align=\"left\">Rua do Mercado, 12</td>\n<td align=\"left\">Resende</td>\n<td align=\"left\">08737-363</td>\n<td align=\"left\">Brazil</td>\n</tr>\n<tr>\n<td align=\"left\">89</td>\n<td align=\"left\">White Clover Markets</td>\n<td align=\"left\">Karl Jablonski</td>\n<td align=\"left\">305 - 14th Ave. S. Suite 3B</td>\n<td align=\"left\">Seattle</td>\n<td align=\"left\">98128</td>\n<td align=\"left\">USA</td>\n</tr>\n<tr>\n<td align=\"left\">90</td>\n<td align=\"left\">Wilman Kala</td>\n<td align=\"left\">Matti Karttunen</td>\n<td align=\"left\">Keskuskatu 45</td>\n<td align=\"left\">Helsinki</td>\n<td align=\"left\">21240</td>\n<td align=\"left\">Finland</td>\n</tr>\n<tr>\n<td align=\"left\">91</td>\n<td align=\"left\">Wolski</td>\n<td align=\"left\">Zbyszek</td>\n<td align=\"left\">ul. Filtrowa 68</td>\n<td align=\"left\">Walla</td>\n<td align=\"left\">01-012</td>\n<td align=\"left\">Poland</td>\n</tr>\n<tr>\n<td align=\"left\">92</td>\n<td align=\"left\">Cardinal</td>\n<td align=\"left\">null</td>\n<td align=\"left\">null</td>\n<td align=\"left\">Stavanger</td>\n<td align=\"left\">null</td>\n<td align=\"left\">Norway</td>\n</tr>\n</tbody></table>\n<h2 id=\"使用另一个表填充一个表\"><a href=\"#使用另一个表填充一个表\" class=\"headerlink\" title=\"使用另一个表填充一个表\"></a>使用另一个表填充一个表</h2><hr>\n<p>您可以通过另一个表上的SELECT语句查询出来的字段值，然后将数据填充到本表中，条件是另一个表所查询的字段与本表要插入数据的字段是一一对应的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO first_table_name [(column1, column2, ... columnN)] </span><br><span class=\"line\">SELECT column1, column2, ...columnN </span><br><span class=\"line\">FROM second_table_name</span><br><span class=\"line\">[WHERE condition];</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL INSECT INTO SELECT语句","order":31,"_content":"\n## SQL INSERT INTO SELECT 语句\n\n------\n\n使用SQL，您可以将信息从一个表中复制到另一个表中。\n\nINSERT INTO SELECT 语句从表中复制数据，并将数据插入现有的表中。目标表中的任何现有行都不会受到影响。\n\n### SQL INSERT INTO SELECT 语法\n\n我们可以将所有列从一个表中复制到另一个已经存在的表中：\n\n```\nINSERT INTO table2              \nSELECT * FROM table1;\n```\n\n或者我们可以把想要的列复制到另一个现有的表中：\n\n```\nINSERT INTO table2               \n(column_name(s))              \nSELECT column_name(s)             \nFROM table1;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是\"Customers\"表中的数据：\n\n| CustomerID | CustomerName                       | ContactName    | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders   | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo   | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n\n选自 \"Suppliers\" 表的数据：\n\n| SupplierID | SupplierName               | ContactName      | Address        | City        | Postal Code | Country | Phone          |\n| :--------- | :------------------------- | :--------------- | :------------- | :---------- | :---------- | :------ | :------------- |\n| 1          | Exotic Liquid              | Charlotte Cooper | 49 Gilbert St. | Londona     | EC1 4SD     | UK      | (171) 555-2222 |\n| 2          | New Orleans Cajun Delights | Shelley Burke    | P.O. Box 78934 | New Orleans | 70117       | USA     | (100) 555-4822 |\n| 3          | Grandma Kelly's Homestead  | Regina Murphy    | 707 Oxford Rd. | Ann Arbor   | 48104       | USA     | (313) 555-5735 |\n\n## SQL INSERT INTO SELECT 实例\n\n------\n\n把 \"Suppliers\" 一栏复制到 \"Customers\" 一栏：\n\n示例：\n\n```\nINSERT INTO Customers (CustomerName, Country)\nSELECT SupplierName, Country FROM Suppliers;\n```\n\n只将德国供应商的副本插入 \"Customers\" ：\n\n示例：\n\n```\nINSERT INTO Customers (CustomerName, Country)\nSELECT SupplierName, Country FROM Suppliers\nWHERE Country='Germany';\n```\n\n","source":"wiki/sql/sentence/instosel.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL INSECT INTO SELECT语句\norder: 31\n---\n\n## SQL INSERT INTO SELECT 语句\n\n------\n\n使用SQL，您可以将信息从一个表中复制到另一个表中。\n\nINSERT INTO SELECT 语句从表中复制数据，并将数据插入现有的表中。目标表中的任何现有行都不会受到影响。\n\n### SQL INSERT INTO SELECT 语法\n\n我们可以将所有列从一个表中复制到另一个已经存在的表中：\n\n```\nINSERT INTO table2              \nSELECT * FROM table1;\n```\n\n或者我们可以把想要的列复制到另一个现有的表中：\n\n```\nINSERT INTO table2               \n(column_name(s))              \nSELECT column_name(s)             \nFROM table1;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是\"Customers\"表中的数据：\n\n| CustomerID | CustomerName                       | ContactName    | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders   | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo   | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n\n选自 \"Suppliers\" 表的数据：\n\n| SupplierID | SupplierName               | ContactName      | Address        | City        | Postal Code | Country | Phone          |\n| :--------- | :------------------------- | :--------------- | :------------- | :---------- | :---------- | :------ | :------------- |\n| 1          | Exotic Liquid              | Charlotte Cooper | 49 Gilbert St. | Londona     | EC1 4SD     | UK      | (171) 555-2222 |\n| 2          | New Orleans Cajun Delights | Shelley Burke    | P.O. Box 78934 | New Orleans | 70117       | USA     | (100) 555-4822 |\n| 3          | Grandma Kelly's Homestead  | Regina Murphy    | 707 Oxford Rd. | Ann Arbor   | 48104       | USA     | (313) 555-5735 |\n\n## SQL INSERT INTO SELECT 实例\n\n------\n\n把 \"Suppliers\" 一栏复制到 \"Customers\" 一栏：\n\n示例：\n\n```\nINSERT INTO Customers (CustomerName, Country)\nSELECT SupplierName, Country FROM Suppliers;\n```\n\n只将德国供应商的副本插入 \"Customers\" ：\n\n示例：\n\n```\nINSERT INTO Customers (CustomerName, Country)\nSELECT SupplierName, Country FROM Suppliers\nWHERE Country='Germany';\n```\n\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T01:36:28.138Z","path":"wiki/sql/sentence/instosel.html","comments":1,"_id":"cmbreopiu000n65x0dnym492r","content":"<h2 id=\"SQL-INSERT-INTO-SELECT-语句\"><a href=\"#SQL-INSERT-INTO-SELECT-语句\" class=\"headerlink\" title=\"SQL INSERT INTO SELECT 语句\"></a>SQL INSERT INTO SELECT 语句</h2><hr>\n<p>使用SQL，您可以将信息从一个表中复制到另一个表中。</p>\n<p>INSERT INTO SELECT 语句从表中复制数据，并将数据插入现有的表中。目标表中的任何现有行都不会受到影响。</p>\n<h3 id=\"SQL-INSERT-INTO-SELECT-语法\"><a href=\"#SQL-INSERT-INTO-SELECT-语法\" class=\"headerlink\" title=\"SQL INSERT INTO SELECT 语法\"></a>SQL INSERT INTO SELECT 语法</h3><p>我们可以将所有列从一个表中复制到另一个已经存在的表中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO table2              </span><br><span class=\"line\">SELECT * FROM table1;</span><br></pre></td></tr></table></figure>\n\n<p>或者我们可以把想要的列复制到另一个现有的表中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO table2               </span><br><span class=\"line\">(column_name(s))              </span><br><span class=\"line\">SELECT column_name(s)             </span><br><span class=\"line\">FROM table1;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是”Customers”表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n</tbody></table>\n<p>选自 “Suppliers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">SupplierID</th>\n<th align=\"left\">SupplierName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">Postal Code</th>\n<th align=\"left\">Country</th>\n<th align=\"left\">Phone</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Exotic Liquid</td>\n<td align=\"left\">Charlotte Cooper</td>\n<td align=\"left\">49 Gilbert St.</td>\n<td align=\"left\">Londona</td>\n<td align=\"left\">EC1 4SD</td>\n<td align=\"left\">UK</td>\n<td align=\"left\">(171) 555-2222</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">New Orleans Cajun Delights</td>\n<td align=\"left\">Shelley Burke</td>\n<td align=\"left\">P.O. Box 78934</td>\n<td align=\"left\">New Orleans</td>\n<td align=\"left\">70117</td>\n<td align=\"left\">USA</td>\n<td align=\"left\">(100) 555-4822</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Grandma Kelly’s Homestead</td>\n<td align=\"left\">Regina Murphy</td>\n<td align=\"left\">707 Oxford Rd.</td>\n<td align=\"left\">Ann Arbor</td>\n<td align=\"left\">48104</td>\n<td align=\"left\">USA</td>\n<td align=\"left\">(313) 555-5735</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-INSERT-INTO-SELECT-实例\"><a href=\"#SQL-INSERT-INTO-SELECT-实例\" class=\"headerlink\" title=\"SQL INSERT INTO SELECT 实例\"></a>SQL INSERT INTO SELECT 实例</h2><hr>\n<p>把 “Suppliers” 一栏复制到 “Customers” 一栏：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO Customers (CustomerName, Country)</span><br><span class=\"line\">SELECT SupplierName, Country FROM Suppliers;</span><br></pre></td></tr></table></figure>\n\n<p>只将德国供应商的副本插入 “Customers” ：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO Customers (CustomerName, Country)</span><br><span class=\"line\">SELECT SupplierName, Country FROM Suppliers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27;;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"SQL-INSERT-INTO-SELECT-语句\"><a href=\"#SQL-INSERT-INTO-SELECT-语句\" class=\"headerlink\" title=\"SQL INSERT INTO SELECT 语句\"></a>SQL INSERT INTO SELECT 语句</h2><hr>\n<p>使用SQL，您可以将信息从一个表中复制到另一个表中。</p>\n<p>INSERT INTO SELECT 语句从表中复制数据，并将数据插入现有的表中。目标表中的任何现有行都不会受到影响。</p>\n<h3 id=\"SQL-INSERT-INTO-SELECT-语法\"><a href=\"#SQL-INSERT-INTO-SELECT-语法\" class=\"headerlink\" title=\"SQL INSERT INTO SELECT 语法\"></a>SQL INSERT INTO SELECT 语法</h3><p>我们可以将所有列从一个表中复制到另一个已经存在的表中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO table2              </span><br><span class=\"line\">SELECT * FROM table1;</span><br></pre></td></tr></table></figure>\n\n<p>或者我们可以把想要的列复制到另一个现有的表中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO table2               </span><br><span class=\"line\">(column_name(s))              </span><br><span class=\"line\">SELECT column_name(s)             </span><br><span class=\"line\">FROM table1;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是”Customers”表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n</tbody></table>\n<p>选自 “Suppliers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">SupplierID</th>\n<th align=\"left\">SupplierName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">Postal Code</th>\n<th align=\"left\">Country</th>\n<th align=\"left\">Phone</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Exotic Liquid</td>\n<td align=\"left\">Charlotte Cooper</td>\n<td align=\"left\">49 Gilbert St.</td>\n<td align=\"left\">Londona</td>\n<td align=\"left\">EC1 4SD</td>\n<td align=\"left\">UK</td>\n<td align=\"left\">(171) 555-2222</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">New Orleans Cajun Delights</td>\n<td align=\"left\">Shelley Burke</td>\n<td align=\"left\">P.O. Box 78934</td>\n<td align=\"left\">New Orleans</td>\n<td align=\"left\">70117</td>\n<td align=\"left\">USA</td>\n<td align=\"left\">(100) 555-4822</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Grandma Kelly’s Homestead</td>\n<td align=\"left\">Regina Murphy</td>\n<td align=\"left\">707 Oxford Rd.</td>\n<td align=\"left\">Ann Arbor</td>\n<td align=\"left\">48104</td>\n<td align=\"left\">USA</td>\n<td align=\"left\">(313) 555-5735</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-INSERT-INTO-SELECT-实例\"><a href=\"#SQL-INSERT-INTO-SELECT-实例\" class=\"headerlink\" title=\"SQL INSERT INTO SELECT 实例\"></a>SQL INSERT INTO SELECT 实例</h2><hr>\n<p>把 “Suppliers” 一栏复制到 “Customers” 一栏：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO Customers (CustomerName, Country)</span><br><span class=\"line\">SELECT SupplierName, Country FROM Suppliers;</span><br></pre></td></tr></table></figure>\n\n<p>只将德国供应商的副本插入 “Customers” ：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO Customers (CustomerName, Country)</span><br><span class=\"line\">SELECT SupplierName, Country FROM Suppliers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27;;</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"wiki","wiki":"sql","title":"SQL 注入","order":50,"_content":"\n## SQL 注入\n\n------\n\n如果你从网页中获取用户输入，并将其插入到 SQL 数据库中的话，那么你很可能已经暴露于一种被称作 **SQL 注入**的安全风险之下了。\n\n本节将会教你如何防止 SQL 注入，以及如何保护 Perl 这样的服务器端脚本中的程序和 SQL 语句。\n\n注入通常发生在获取用户输入的时候，例如预期得到用户的名字，但是得到的却是一段很可能会在你不知情的情况下运行的 SQL 语句。\n\n绝对不要相信用户提供的数据，处理这些数据之前必须进行验证；通常，验证工作由模式匹配来完成。\n\n下面的例子中，**name** 仅限由字母、数字和下划线组成，并且长度在 8 到 20 之间（你可以根据需要修改这些规则）。\n\n```\nif (preg_match(\"/^\\w{8,20}$/\", $_GET['username'], $matches))\n{\n   $result = mysql_query(\"SELECT * FROM CUSTOMERS \n                          WHERE name=$matches[0]\");\n}\nelse \n{\n   echo \"user name not accepted\";\n}\n```\n\n为了展示问题所在，请考虑下面这段代码：\n\n```\n// supposed input\n$name = \"Qadir'; DELETE FROM CUSTOMERS;\";\nmysql_query(\"SELECT * FROM CUSTOMSRS WHERE name='{$name}'\");\n```\n\n下面的函数调用本来是要从 CUSTOMERS 表中取得 name 字段与用户给定的输入相匹配的记录。通常情况下，$name 只包含字母和数字，或许还有空格，例如字符串 ilia。但是，这里通过在 $name 上附加一段全新的查询语句，将原有的函数调用变为了数据库的灾难：注入的 DELETE 语句将会删除表中所有的记录。\n\n幸运的是，如果你在使用　MySQL 的话，mysql_query() 函数不允许查询堆积（query stacking），或者说在一次函数调用中执行多次 SQL 查询。如果你试图进行堆积式查询的话，函数调用将会失败。\n\n然而，其他的 PHP 数据库扩展，例如 SQLite 和 PostgreSQL 会愉快地接受堆积式查询，执行字符串中所有的查询，并由此产生严重的安全问题。\n\n## 阻止 SQL 注入\n\n------\n\n你可以在 Perl 或者 PHP 等脚本语言中巧妙地处理所有的转义字符。PHP 的 MySQL 扩展提供了一个 mysql_real_escape_string() 函数，来转义那些对 MySQL 有特殊意义的字符。\n\n```\nif (get_magic_quotes_gpc()) \n{\n  $name = stripslashes($name);\n}\n$name = mysql_real_escape_string($name);\nmysql_query(\"SELECT * FROM CUSTOMERS WHERE name='{$name}'\");\n```\n\n## LIKE 困境\n\n------\n\n要破解 LIKE 困境，必须有一种专门的转义机制，将用户提供的 '%' 和 '_' 转换为字面值。为此你可以使用 addcslashes() 函数，该函数允许指定要进行转义的字符的范围。\n\n```\n$sub = addcslashes(mysql_real_escape_string(\"%str\"), \"%_\");\n// $sub == \\%str\\_\nmysql_query(\"SELECT * FROM messages \n             WHERE subject LIKE '{$sub}%'\");\n```\n","source":"wiki/sql/sentence/input.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 注入\norder: 50\n---\n\n## SQL 注入\n\n------\n\n如果你从网页中获取用户输入，并将其插入到 SQL 数据库中的话，那么你很可能已经暴露于一种被称作 **SQL 注入**的安全风险之下了。\n\n本节将会教你如何防止 SQL 注入，以及如何保护 Perl 这样的服务器端脚本中的程序和 SQL 语句。\n\n注入通常发生在获取用户输入的时候，例如预期得到用户的名字，但是得到的却是一段很可能会在你不知情的情况下运行的 SQL 语句。\n\n绝对不要相信用户提供的数据，处理这些数据之前必须进行验证；通常，验证工作由模式匹配来完成。\n\n下面的例子中，**name** 仅限由字母、数字和下划线组成，并且长度在 8 到 20 之间（你可以根据需要修改这些规则）。\n\n```\nif (preg_match(\"/^\\w{8,20}$/\", $_GET['username'], $matches))\n{\n   $result = mysql_query(\"SELECT * FROM CUSTOMERS \n                          WHERE name=$matches[0]\");\n}\nelse \n{\n   echo \"user name not accepted\";\n}\n```\n\n为了展示问题所在，请考虑下面这段代码：\n\n```\n// supposed input\n$name = \"Qadir'; DELETE FROM CUSTOMERS;\";\nmysql_query(\"SELECT * FROM CUSTOMSRS WHERE name='{$name}'\");\n```\n\n下面的函数调用本来是要从 CUSTOMERS 表中取得 name 字段与用户给定的输入相匹配的记录。通常情况下，$name 只包含字母和数字，或许还有空格，例如字符串 ilia。但是，这里通过在 $name 上附加一段全新的查询语句，将原有的函数调用变为了数据库的灾难：注入的 DELETE 语句将会删除表中所有的记录。\n\n幸运的是，如果你在使用　MySQL 的话，mysql_query() 函数不允许查询堆积（query stacking），或者说在一次函数调用中执行多次 SQL 查询。如果你试图进行堆积式查询的话，函数调用将会失败。\n\n然而，其他的 PHP 数据库扩展，例如 SQLite 和 PostgreSQL 会愉快地接受堆积式查询，执行字符串中所有的查询，并由此产生严重的安全问题。\n\n## 阻止 SQL 注入\n\n------\n\n你可以在 Perl 或者 PHP 等脚本语言中巧妙地处理所有的转义字符。PHP 的 MySQL 扩展提供了一个 mysql_real_escape_string() 函数，来转义那些对 MySQL 有特殊意义的字符。\n\n```\nif (get_magic_quotes_gpc()) \n{\n  $name = stripslashes($name);\n}\n$name = mysql_real_escape_string($name);\nmysql_query(\"SELECT * FROM CUSTOMERS WHERE name='{$name}'\");\n```\n\n## LIKE 困境\n\n------\n\n要破解 LIKE 困境，必须有一种专门的转义机制，将用户提供的 '%' 和 '_' 转换为字面值。为此你可以使用 addcslashes() 函数，该函数允许指定要进行转义的字符的范围。\n\n```\n$sub = addcslashes(mysql_real_escape_string(\"%str\"), \"%_\");\n// $sub == \\%str\\_\nmysql_query(\"SELECT * FROM messages \n             WHERE subject LIKE '{$sub}%'\");\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T02:49:21.298Z","path":"wiki/sql/sentence/input.html","comments":1,"_id":"cmbreopiu000o65x0gxygfjf8","content":"<h2 id=\"SQL-注入\"><a href=\"#SQL-注入\" class=\"headerlink\" title=\"SQL 注入\"></a>SQL 注入</h2><hr>\n<p>如果你从网页中获取用户输入，并将其插入到 SQL 数据库中的话，那么你很可能已经暴露于一种被称作 <strong>SQL 注入</strong>的安全风险之下了。</p>\n<p>本节将会教你如何防止 SQL 注入，以及如何保护 Perl 这样的服务器端脚本中的程序和 SQL 语句。</p>\n<p>注入通常发生在获取用户输入的时候，例如预期得到用户的名字，但是得到的却是一段很可能会在你不知情的情况下运行的 SQL 语句。</p>\n<p>绝对不要相信用户提供的数据，处理这些数据之前必须进行验证；通常，验证工作由模式匹配来完成。</p>\n<p>下面的例子中，<strong>name</strong> 仅限由字母、数字和下划线组成，并且长度在 8 到 20 之间（你可以根据需要修改这些规则）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if (preg_match(&quot;/^\\w&#123;8,20&#125;$/&quot;, $_GET[&#x27;username&#x27;], $matches))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   $result = mysql_query(&quot;SELECT * FROM CUSTOMERS </span><br><span class=\"line\">                          WHERE name=$matches[0]&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   echo &quot;user name not accepted&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了展示问题所在，请考虑下面这段代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// supposed input</span><br><span class=\"line\">$name = &quot;Qadir&#x27;; DELETE FROM CUSTOMERS;&quot;;</span><br><span class=\"line\">mysql_query(&quot;SELECT * FROM CUSTOMSRS WHERE name=&#x27;&#123;$name&#125;&#x27;&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>下面的函数调用本来是要从 CUSTOMERS 表中取得 name 字段与用户给定的输入相匹配的记录。通常情况下，$name 只包含字母和数字，或许还有空格，例如字符串 ilia。但是，这里通过在 $name 上附加一段全新的查询语句，将原有的函数调用变为了数据库的灾难：注入的 DELETE 语句将会删除表中所有的记录。</p>\n<p>幸运的是，如果你在使用　MySQL 的话，mysql_query() 函数不允许查询堆积（query stacking），或者说在一次函数调用中执行多次 SQL 查询。如果你试图进行堆积式查询的话，函数调用将会失败。</p>\n<p>然而，其他的 PHP 数据库扩展，例如 SQLite 和 PostgreSQL 会愉快地接受堆积式查询，执行字符串中所有的查询，并由此产生严重的安全问题。</p>\n<h2 id=\"阻止-SQL-注入\"><a href=\"#阻止-SQL-注入\" class=\"headerlink\" title=\"阻止 SQL 注入\"></a>阻止 SQL 注入</h2><hr>\n<p>你可以在 Perl 或者 PHP 等脚本语言中巧妙地处理所有的转义字符。PHP 的 MySQL 扩展提供了一个 mysql_real_escape_string() 函数，来转义那些对 MySQL 有特殊意义的字符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if (get_magic_quotes_gpc()) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  $name = stripslashes($name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$name = mysql_real_escape_string($name);</span><br><span class=\"line\">mysql_query(&quot;SELECT * FROM CUSTOMERS WHERE name=&#x27;&#123;$name&#125;&#x27;&quot;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LIKE-困境\"><a href=\"#LIKE-困境\" class=\"headerlink\" title=\"LIKE 困境\"></a>LIKE 困境</h2><hr>\n<p>要破解 LIKE 困境，必须有一种专门的转义机制，将用户提供的 ‘%’ 和 ‘_’ 转换为字面值。为此你可以使用 addcslashes() 函数，该函数允许指定要进行转义的字符的范围。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$sub = addcslashes(mysql_real_escape_string(&quot;%str&quot;), &quot;%_&quot;);</span><br><span class=\"line\">// $sub == \\%str\\_</span><br><span class=\"line\">mysql_query(&quot;SELECT * FROM messages </span><br><span class=\"line\">             WHERE subject LIKE &#x27;&#123;$sub&#125;%&#x27;&quot;);</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-注入\"><a href=\"#SQL-注入\" class=\"headerlink\" title=\"SQL 注入\"></a>SQL 注入</h2><hr>\n<p>如果你从网页中获取用户输入，并将其插入到 SQL 数据库中的话，那么你很可能已经暴露于一种被称作 <strong>SQL 注入</strong>的安全风险之下了。</p>\n<p>本节将会教你如何防止 SQL 注入，以及如何保护 Perl 这样的服务器端脚本中的程序和 SQL 语句。</p>\n<p>注入通常发生在获取用户输入的时候，例如预期得到用户的名字，但是得到的却是一段很可能会在你不知情的情况下运行的 SQL 语句。</p>\n<p>绝对不要相信用户提供的数据，处理这些数据之前必须进行验证；通常，验证工作由模式匹配来完成。</p>\n<p>下面的例子中，<strong>name</strong> 仅限由字母、数字和下划线组成，并且长度在 8 到 20 之间（你可以根据需要修改这些规则）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if (preg_match(&quot;/^\\w&#123;8,20&#125;$/&quot;, $_GET[&#x27;username&#x27;], $matches))</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   $result = mysql_query(&quot;SELECT * FROM CUSTOMERS </span><br><span class=\"line\">                          WHERE name=$matches[0]&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   echo &quot;user name not accepted&quot;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了展示问题所在，请考虑下面这段代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// supposed input</span><br><span class=\"line\">$name = &quot;Qadir&#x27;; DELETE FROM CUSTOMERS;&quot;;</span><br><span class=\"line\">mysql_query(&quot;SELECT * FROM CUSTOMSRS WHERE name=&#x27;&#123;$name&#125;&#x27;&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>下面的函数调用本来是要从 CUSTOMERS 表中取得 name 字段与用户给定的输入相匹配的记录。通常情况下，$name 只包含字母和数字，或许还有空格，例如字符串 ilia。但是，这里通过在 $name 上附加一段全新的查询语句，将原有的函数调用变为了数据库的灾难：注入的 DELETE 语句将会删除表中所有的记录。</p>\n<p>幸运的是，如果你在使用　MySQL 的话，mysql_query() 函数不允许查询堆积（query stacking），或者说在一次函数调用中执行多次 SQL 查询。如果你试图进行堆积式查询的话，函数调用将会失败。</p>\n<p>然而，其他的 PHP 数据库扩展，例如 SQLite 和 PostgreSQL 会愉快地接受堆积式查询，执行字符串中所有的查询，并由此产生严重的安全问题。</p>\n<h2 id=\"阻止-SQL-注入\"><a href=\"#阻止-SQL-注入\" class=\"headerlink\" title=\"阻止 SQL 注入\"></a>阻止 SQL 注入</h2><hr>\n<p>你可以在 Perl 或者 PHP 等脚本语言中巧妙地处理所有的转义字符。PHP 的 MySQL 扩展提供了一个 mysql_real_escape_string() 函数，来转义那些对 MySQL 有特殊意义的字符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if (get_magic_quotes_gpc()) </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  $name = stripslashes($name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$name = mysql_real_escape_string($name);</span><br><span class=\"line\">mysql_query(&quot;SELECT * FROM CUSTOMERS WHERE name=&#x27;&#123;$name&#125;&#x27;&quot;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LIKE-困境\"><a href=\"#LIKE-困境\" class=\"headerlink\" title=\"LIKE 困境\"></a>LIKE 困境</h2><hr>\n<p>要破解 LIKE 困境，必须有一种专门的转义机制，将用户提供的 ‘%’ 和 ‘_’ 转换为字面值。为此你可以使用 addcslashes() 函数，该函数允许指定要进行转义的字符的范围。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$sub = addcslashes(mysql_real_escape_string(&quot;%str&quot;), &quot;%_&quot;);</span><br><span class=\"line\">// $sub == \\%str\\_</span><br><span class=\"line\">mysql_query(&quot;SELECT * FROM messages </span><br><span class=\"line\">             WHERE subject LIKE &#x27;&#123;$sub&#125;%&#x27;&quot;);</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL Join连接","order":23,"_content":"\n## SQL JOIN 连接\n\n------\n\nSQL join 用于把来自两个或多个表的行结合起来。\n\n## SQL JOIN\n\n------\n\nSQL JOIN 子句用于把来自两个或多个表的行结合起来，基于这些表之间的共同字段。\n\n简单地说，就是先确定一个主表作为结果集，然后，把其他表的行有选择性地\"连接\"在主表结果集上。\n\n最常见的 JOIN 类型：**SQL INNER JOIN（简单的 JOIN）**。 SQL INNER JOIN 从多个表中返回满足 JOIN 条件的所有行。\n\n让我们看看选自 \"Orders\" 表的数据：\n\n| OrderID | CustomerID | OrderDate  |\n| :------ | :--------- | :--------- |\n| 10308   | 2          | 1996-09-18 |\n| 10309   | 37         | 1996-09-19 |\n| 10310   | 77         | 1996-09-20 |\n\n然后，看看选自 \"Customers\" 表的数据：\n\n| CustomerID | CustomerName                       | ContactName    | Country |\n| :--------- | :--------------------------------- | :------------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders   | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo   | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno | Mexico  |\n\n请注意，\"Orders\" 表中的 \"CustomerID\" 列指向 \"Customers\" 表中的客户。上面这两个表是通过 \"CustomerID\" 列联系起来的。\n\n然后，如果我们运行下面的 SQL 语句（包含 INNER JOIN）：\n\n示例：\n\n```\nSELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate\nFROM Orders\nINNER JOIN Customers\nON Orders.CustomerID=Customers.CustomerID;\n```\n\n运行结果如下所示：\n\n| OrderID | CustomerName                       | OrderDate  |\n| :------ | :--------------------------------- | :--------- |\n| 10308   | Ana Trujillo Emparedados y helados | 1996-09-18 |\n\n## 不同的 SQL JOIN\n\n------\n\n在我们继续讲解实例之前，我们先列出您可以使用的不同的 SQL JOIN 类型：\n\n- **INNER JOIN**：如果表中有至少一个匹配，则返回行\n- **LEFT JOIN**：即使右表中没有匹配，也从左表返回所有的行\n- **RIGHT JOIN**：即使左表中没有匹配，也从右表返回所有的行\n- **FULL JOIN**：只要其中一个表中存在匹配，则返回行\n- **SELF JOIN** ：用于将表连接到自己，就好像该表是两个表一样，临时重命名了SQL语句中的至少一个表\n- **CARTESIAN JOIN**：从两个或多个连接表返回记录集的笛卡儿积\n\n\n\n## SQL JOIN 连接详细用法\n\n------\n\nSQL **连接（JOIN）** 子句用于将数据库中两个或者两个以上表中的记录组合起来。连接通过共有值将不同表中的字段组合在一起。\n\n我们来看看\"Orders\"表中的选择：\n\n| OrderID | CustomerID | OrderDate  |\n| :------ | :--------- | :--------- |\n| 10308   | 2          | 1996-09-18 |\n| 10309   | 37         | 1996-09-19 |\n| 10310   | 77         | 1996-09-20 |\n\n然后，查看\"Customers\"表中的选择：\n\n| CustomerID | CustomerName                       | ContactName    | Country |\n| :--------- | :--------------------------------- | :------------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders   | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo   | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno | Mexico  |\n\n请注意，\"Orders\"表中的\"客户ID\"列是指\"CustomerID\"表中的\"客户ID\"。上面两个表格之间的关系是\"CustomerID\"列。\n\n然后，我们可以创建下面的SQL语句（包含一个INNER JOIN），它选择两个表中具有匹配值的记录：\n\n**　代码示例：**\n\n```\nSELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate\nFROM Orders\nINNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;\n```\n\n它会产生这样的东西：\n\n| OrderID | CustomerName                       | OrderDate  |\n| :------ | :--------------------------------- | :--------- |\n| 10308   | Ana Trujillo Emparedados y helados | 9/18/1996  |\n| 10365   | Antonio Moreno Taquería            | 11/27/1996 |\n| 10383   | Around the Horn                    | 12/16/1996 |\n| 10355   | Around the Horn                    | 11/15/1996 |\n| 10278   | Berglunds snabbköp                 | 8/12/1996  |\n\n考虑下面两个表，（a）CUSTOMERS 表：\n\n```\n    +----+----------+-----+-----------+----------+\n    | ID | NAME     | AGE | ADDRESS   | SALARY |\n    +----+----------+-----+-----------+----------+\n    | 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |\n    | 2 | Khilan   | 25 | Delhi     | 1500.00 |\n    | 3 | kaushik  | 23 | Kota      | 2000.00 |\n    | 4 | Chaitali | 25 | Mumbai    | 6500.00 |\n    | 5 | Hardik   | 27 | Bhopal    | 8500.00 |\n    | 6 | Komal    | 22 | MP        | 4500.00 |\n    | 7 | Muffy    | 24 | Indore    | 10000.00 |\n    +----+----------+-----+-----------+----------+\n```\n\n（b）另一个表是 ORDERS 表：\n\n```\n    +-----+---------------------+-------------+--------+\n    |OID | DATE                | CUSTOMER_ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |\n    | 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |\n    | 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+\n```\n\n现在，让我们用 SELECT 语句将这个两张表连接（JOIN）在一起：\n\n```\n    SQL> SELECT ID, NAME, AGE, AMOUNT\n            FROM CUSTOMERS, ORDERS\n            WHERE  CUSTOMERS.ID = ORDERS.CUSTOMER_ID;\n```\n\n上述语句的运行结果如下所示：\n\n```\n    +----+----------+-----+--------+\n    | ID | NAME     | AGE | AMOUNT | +----+----------+-----+--------+ |  3 | kaushik |  23 | 3000 |\n    | 3 | kaushik  | 23 |   1500 | |  2 | Khilan |  25 | 1560 |\n    | 4 | Chaitali | 25 |   2060 | +----+----------+-----+--------+\n```\n\n## 不同类型的SQL联接\n\n------\n\nSQL 中有多种不同的连接：\n\n- 内连接（INNER JOIN）：当两个表中都存在匹配时，才返回行。\n- 左连接（LEFT JOIN）：返回左表中的所有行，即使右表中没有匹配的行。\n- 右连接（RIGHT JOIN）：返回右表中的所有行，即使左表中没有匹配的行。\n- 全连接（FULL JOIN）：只要某一个表存在匹配，就返回行。\n- 笛卡尔连接（CARTESIAN JOIN）：返回两个或者更多的表中记录集的笛卡尔积。\n\n### 内连接\n\n最常用也最重要的连接形式是**内连接**，有时候也被称作\"EQUIJOIN\"（等值连接）。\n\n内连接根据连接谓词来组合两个表中的字段，以创建一个新的结果表。SQL 查询会比较逐个比较表 1 和表 2 中的每一条记录，来寻找满足连接谓词的所有记录对。当连接谓词得以满足时，所有满足条件的记录对的字段将会结合在一起构成结果表。\n\n#### 语法：\n\n**　内连接**的基本语法如下所示：\n\nsql\n\n```\nSELECT table1.column1, table2.column2...\nFROM table1\nINNER JOIN table2\nON table1.common_field = table2.common_field;\n```\n\n#### 示例：\n\n考虑如下两个表格，（a）CUSTOMERS 表：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY |\n+----+----------+-----+-----------+----------+\n| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |\n| 2 | Khilan   | 25 | Delhi     | 1500.00 |\n| 3 | kaushik  | 23 | Kota      | 2000.00 |\n| 4 | Chaitali | 25 | Mumbai    | 6500.00 |\n| 5 | Hardik   | 27 | Bhopal    | 8500.00 |\n| 6 | Komal    | 22 | MP        | 4500.00 |\n| 7 | Muffy    | 24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n（b）ORDERS 表：\n\n```\n+-----+---------------------+-------------+--------+\n| OID | DATE                | ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |\n| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |\n| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+\n```\n\n现在，让我们用内连接将这两个表连接在一起：\n\n```\nSQL> SELECT  ID, NAME, AMOUNT, DATE\n     FROM CUSTOMERS\n     INNER JOIN ORDERS\n     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;\n```\n\n上述语句将会产生如下结果：\n\n```\n+----+----------+--------+---------------------+\n| ID | NAME     | AMOUNT | DATE                | +----+----------+--------+---------------------+ |  3 | kaushik |   3000 | 2009-10-08 00:00:00 |\n| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |  2 | Khilan |   1560 | 2009-11-20 00:00:00 |\n| 4 | Chaitali | 2060 | 2008-05-20 00:00:00 | +----+----------+--------+---------------------+\n```\n\n### 左连接\n\n**　左链接**返回左表中的所有记录，即使右表中没有任何满足匹配条件的记录。这意味着，如果 ON 子句在右表中匹配到了 0 条记录，该连接仍然会返回至少一条记录，不过返回的记录中所有来自右表的字段都为 NULL。\n\n这就意味着，左连接会返回左表中的所有记录，加上右表中匹配到的记录，或者是 NULL （如果连接谓词无法匹配到任何记录的话）。\n\n#### 语法：\n\n**　左连接**的基本语法如下所示：\n\n```\nSELECT table1.column1, table2.column2...\nFROM table1\nLEFT JOIN table2\nON table1.common_field = table2.common_field;\n```\n\n这里，给出的条件可以是任何根据你的需要写出的条件。\n\n#### 示例：\n\n考虑如下两个表格，（a）CUSTOMERS 表：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY |\n+----+----------+-----+-----------+----------+\n| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |\n| 2 | Khilan   | 25 | Delhi     | 1500.00 |\n| 3 | kaushik  | 23 | Kota      | 2000.00 |\n| 4 | Chaitali | 25 | Mumbai    | 6500.00 |\n| 5 | Hardik   | 27 | Bhopal    | 8500.00 |\n| 6 | Komal    | 22 | MP        | 4500.00 |\n| 7 | Muffy    | 24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n（b）ORDERS 表：\n\n```\n+-----+---------------------+-------------+--------+\n| OID | DATE                | ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |\n| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |\n| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+\n```\n\n现在，让我们用左连接将这两个表连接在一起：\n\n```\nSQL> SELECT  ID, NAME, AMOUNT, DATE\n     FROM CUSTOMERS\n     LEFT JOIN ORDERS\n     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;\n```\n\n上述语句将会产生如下结果：\n\n```\n+----+----------+--------+---------------------+\n| ID | NAME     | AMOUNT | DATE                | +----+----------+--------+---------------------+ |  1 | Ramesh |   NULL | NULL |\n| 2 | Khilan   | 1560 | 2009-11-20 00:00:00 | |  3 | kaushik |   3000 | 2009-10-08 00:00:00 |\n| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |  4 | Chaitali |   2060 | 2008-05-20 00:00:00 |\n| 5 | Hardik   | NULL | NULL                | |  6 | Komal |   NULL | NULL |\n| 7 | Muffy    | NULL | NULL                | +----+----------+--------+---------------------+\n```\n\n### 右连接\n\n**　右链接**返回右表中的所有记录，即是左表中没有任何满足匹配条件的记录。这意味着，如果 ON 子句在左表中匹配到了 0 条记录，该连接仍然会返回至少一条记录，不过返回的记录中所有来自左表的字段都为 NULL。\n\n这就意味着，右连接会返回右表中的所有记录，加上左表中匹配到的记录，或者是 NULL （如果连接谓词无法匹配到任何记录的话）。\n\n#### 语法：\n\n**　右连接**的基本语法如下所示：\n\n```\nSELECT table1.column1, table2.column2...\nFROM table1\nRIGHT JOIN table2\nON table1.common_field = table2.common_field;\n```\n\n这里，给出的条件可以是任何根据你的需要写出的条件。\n\n#### 示例：\n\n考虑如下两个表格，（a）CUSTOMERS 表：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY |\n+----+----------+-----+-----------+----------+\n| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |\n| 2 | Khilan   | 25 | Delhi     | 1500.00 |\n| 3 | kaushik  | 23 | Kota      | 2000.00 |\n| 4 | Chaitali | 25 | Mumbai    | 6500.00 |\n| 5 | Hardik   | 27 | Bhopal    | 8500.00 |\n| 6 | Komal    | 22 | MP        | 4500.00 |\n| 7 | Muffy    | 24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n（b）ORDERS 表：\n\n```\n+-----+---------------------+-------------+--------+\n| OID | DATE                | ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |\n| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |\n| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+\n```\n\n现在，让我们用右连接将这两个表连接在一起：\n\n```\nSQL> SELECT  ID, NAME, AMOUNT, DATE\n     FROM CUSTOMERS\n     RIGHT JOIN ORDERS\n     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;\n```\n\n上述语句将会产生如下结果：\n\n```\n+------+----------+--------+---------------------+\n| ID | NAME     | AMOUNT | DATE                | +------+----------+--------+---------------------+ |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |\n| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    2 | Khilan |   1560 | 2009-11-20 00:00:00 |\n| 4 | Chaitali | 2060 | 2008-05-20 00:00:00 | +------+----------+--------+---------------------+\n```\n\n### 全连接\n\n**　全连接**将左连接和右连接的结果组合在一起。\n\n#### 语法：\n\n```\nSELECT table1.column1, table2.column2...\nFROM table1\nFULL JOIN table2\nON table1.common_field = table2.common_field;\n```\n\n这里，给出的条件可以是任何根据你的需要写出的条件。\n\n#### 示例：\n\n考虑如下两个表格，（a）CUSTOMERS 表：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY |\n+----+----------+-----+-----------+----------+\n| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |\n| 2 | Khilan   | 25 | Delhi     | 1500.00 |\n| 3 | kaushik  | 23 | Kota      | 2000.00 |\n| 4 | Chaitali | 25 | Mumbai    | 6500.00 |\n| 5 | Hardik   | 27 | Bhopal    | 8500.00 |\n| 6 | Komal    | 22 | MP        | 4500.00 |\n| 7 | Muffy    | 24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n（b）ORDERS 表：\n\n```\n+-----+---------------------+-------------+--------+\n| OID | DATE                | ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |\n| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |\n| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+\n```\n\n现在让我们用全连接将两个表连接在一起：\n\n```\nSQL> SELECT  ID, NAME, AMOUNT, DATE\n     FROM CUSTOMERS\n     FULL JOIN ORDERS\n     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;\n```\n\n上述语句将会产生如下结果：\n\n```\n+------+----------+--------+---------------------+\n| ID | NAME     | AMOUNT | DATE                | +------+----------+--------+---------------------+ |    1 | Ramesh |   NULL | NULL |\n| 2 | Khilan   | 1560 | 2009-11-20 00:00:00 | |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |\n| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    4 | Chaitali |   2060 | 2008-05-20 00:00:00 |\n| 5 | Hardik   | NULL | NULL                | |    6 | Komal |   NULL | NULL |\n| 7 | Muffy    | NULL | NULL                | |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |\n| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    2 | Khilan |   1560 | 2009-11-20 00:00:00 |\n| 4 | Chaitali | 2060 | 2008-05-20 00:00:00 | +------+----------+--------+---------------------+\n```\n\n如果你所用的数据库不支持全连接，比如 MySQL，那么你可以使用 UNION ALL子句来将左连接和右连接结果组合在一起：\n\n```\nSQL> SELECT  ID, NAME, AMOUNT, DATE\n     FROM CUSTOMERS\n     LEFT JOIN ORDERS\n     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID\nUNION ALL\n     SELECT  ID, NAME, AMOUNT, DATE\n     FROM CUSTOMERS\n     RIGHT JOIN ORDERS\n     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID\n```\n\n### 笛卡尔连接（交叉连接）\n\n**　笛卡尔连接** 或者**交叉连接**返回两个或者更多的连接表中记录的笛卡尔乘积。也就是说，它相当于连接谓词总是为真或者缺少连接谓词的内连接。\n\n#### 语法：[](https://ngrok.cn/sql/sql-610.html#语法-4)\n\n**　笛卡尔连接** 或者说**交叉连接**的基本语法如下所示：\n\n```\nSELECT table1.column1, table2.column2...\nFROM  table1, table2 [, table3 ]\n```\n\n#### 示例：[](https://ngrok.cn/sql/sql-610.html#示例-4)\n\n```\n考虑如下两个表格，（a）CUSTOMERS 表：\n\n    +----+----------+-----+-----------+----------+\n    | ID | NAME     | AGE | ADDRESS   | SALARY |\n    +----+----------+-----+-----------+----------+\n    | 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |\n    | 2 | Khilan   | 25 | Delhi     | 1500.00 |\n    | 3 | kaushik  | 23 | Kota      | 2000.00 |\n    | 4 | Chaitali | 25 | Mumbai    | 6500.00 |\n    | 5 | Hardik   | 27 | Bhopal    | 8500.00 |\n    | 6 | Komal    | 22 | MP        | 4500.00 |\n    | 7 | Muffy    | 24 | Indore    | 10000.00 |\n    +----+----------+-----+-----------+----------+\n\n（b）ORDERS 表：\n\n    +-----+---------------------+-------------+--------+\n    | OID | DATE                | ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |\n    | 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |\n    | 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+\n```\n\n现在，让我用内连接将这两个表连接在一起：\n\n```\nSQL> SELECT  ID, NAME, AMOUNT, DATE\n     FROM CUSTOMERS, ORDERS;\n```\n\n上述语句将会产生如下结果：\n\n```\n+----+----------+--------+---------------------+\n| ID | NAME     | AMOUNT | DATE                | +----+----------+--------+---------------------+ |  1 | Ramesh |   3000 | 2009-10-08 00:00:00 |\n| 1 | Ramesh   | 1500 | 2009-10-08 00:00:00 | |  1 | Ramesh |   1560 | 2009-11-20 00:00:00 |\n| 1 | Ramesh   | 2060 | 2008-05-20 00:00:00 | |  2 | Khilan |   3000 | 2009-10-08 00:00:00 |\n| 2 | Khilan   | 1500 | 2009-10-08 00:00:00 | |  2 | Khilan |   1560 | 2009-11-20 00:00:00 |\n| 2 | Khilan   | 2060 | 2008-05-20 00:00:00 | |  3 | kaushik |   3000 | 2009-10-08 00:00:00 |\n| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |  3 | kaushik |   1560 | 2009-11-20 00:00:00 |\n| 3 | kaushik  | 2060 | 2008-05-20 00:00:00 | |  4 | Chaitali |   3000 | 2009-10-08 00:00:00 |\n| 4 | Chaitali | 1500 | 2009-10-08 00:00:00 | |  4 | Chaitali |   1560 | 2009-11-20 00:00:00 |\n| 4 | Chaitali | 2060 | 2008-05-20 00:00:00 | |  5 | Hardik |   3000 | 2009-10-08 00:00:00 |\n| 5 | Hardik   | 1500 | 2009-10-08 00:00:00 | |  5 | Hardik |   1560 | 2009-11-20 00:00:00 |\n| 5 | Hardik   | 2060 | 2008-05-20 00:00:00 | |  6 | Komal |   3000 | 2009-10-08 00:00:00 |\n| 6 | Komal    | 1500 | 2009-10-08 00:00:00 | |  6 | Komal |   1560 | 2009-11-20 00:00:00 |\n| 6 | Komal    | 2060 | 2008-05-20 00:00:00 | |  7 | Muffy |   3000 | 2009-10-08 00:00:00 |\n| 7 | Muffy    | 1500 | 2009-10-08 00:00:00 | |  7 | Muffy |   1560 | 2009-11-20 00:00:00 |\n| 7 | Muffy    | 2060 | 2008-05-20 00:00:00 | +----+----------+--------+---------------------+\n```\n","source":"wiki/sql/sentence/join.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL Join连接\norder: 23\n---\n\n## SQL JOIN 连接\n\n------\n\nSQL join 用于把来自两个或多个表的行结合起来。\n\n## SQL JOIN\n\n------\n\nSQL JOIN 子句用于把来自两个或多个表的行结合起来，基于这些表之间的共同字段。\n\n简单地说，就是先确定一个主表作为结果集，然后，把其他表的行有选择性地\"连接\"在主表结果集上。\n\n最常见的 JOIN 类型：**SQL INNER JOIN（简单的 JOIN）**。 SQL INNER JOIN 从多个表中返回满足 JOIN 条件的所有行。\n\n让我们看看选自 \"Orders\" 表的数据：\n\n| OrderID | CustomerID | OrderDate  |\n| :------ | :--------- | :--------- |\n| 10308   | 2          | 1996-09-18 |\n| 10309   | 37         | 1996-09-19 |\n| 10310   | 77         | 1996-09-20 |\n\n然后，看看选自 \"Customers\" 表的数据：\n\n| CustomerID | CustomerName                       | ContactName    | Country |\n| :--------- | :--------------------------------- | :------------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders   | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo   | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno | Mexico  |\n\n请注意，\"Orders\" 表中的 \"CustomerID\" 列指向 \"Customers\" 表中的客户。上面这两个表是通过 \"CustomerID\" 列联系起来的。\n\n然后，如果我们运行下面的 SQL 语句（包含 INNER JOIN）：\n\n示例：\n\n```\nSELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate\nFROM Orders\nINNER JOIN Customers\nON Orders.CustomerID=Customers.CustomerID;\n```\n\n运行结果如下所示：\n\n| OrderID | CustomerName                       | OrderDate  |\n| :------ | :--------------------------------- | :--------- |\n| 10308   | Ana Trujillo Emparedados y helados | 1996-09-18 |\n\n## 不同的 SQL JOIN\n\n------\n\n在我们继续讲解实例之前，我们先列出您可以使用的不同的 SQL JOIN 类型：\n\n- **INNER JOIN**：如果表中有至少一个匹配，则返回行\n- **LEFT JOIN**：即使右表中没有匹配，也从左表返回所有的行\n- **RIGHT JOIN**：即使左表中没有匹配，也从右表返回所有的行\n- **FULL JOIN**：只要其中一个表中存在匹配，则返回行\n- **SELF JOIN** ：用于将表连接到自己，就好像该表是两个表一样，临时重命名了SQL语句中的至少一个表\n- **CARTESIAN JOIN**：从两个或多个连接表返回记录集的笛卡儿积\n\n\n\n## SQL JOIN 连接详细用法\n\n------\n\nSQL **连接（JOIN）** 子句用于将数据库中两个或者两个以上表中的记录组合起来。连接通过共有值将不同表中的字段组合在一起。\n\n我们来看看\"Orders\"表中的选择：\n\n| OrderID | CustomerID | OrderDate  |\n| :------ | :--------- | :--------- |\n| 10308   | 2          | 1996-09-18 |\n| 10309   | 37         | 1996-09-19 |\n| 10310   | 77         | 1996-09-20 |\n\n然后，查看\"Customers\"表中的选择：\n\n| CustomerID | CustomerName                       | ContactName    | Country |\n| :--------- | :--------------------------------- | :------------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders   | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo   | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno | Mexico  |\n\n请注意，\"Orders\"表中的\"客户ID\"列是指\"CustomerID\"表中的\"客户ID\"。上面两个表格之间的关系是\"CustomerID\"列。\n\n然后，我们可以创建下面的SQL语句（包含一个INNER JOIN），它选择两个表中具有匹配值的记录：\n\n**　代码示例：**\n\n```\nSELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate\nFROM Orders\nINNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;\n```\n\n它会产生这样的东西：\n\n| OrderID | CustomerName                       | OrderDate  |\n| :------ | :--------------------------------- | :--------- |\n| 10308   | Ana Trujillo Emparedados y helados | 9/18/1996  |\n| 10365   | Antonio Moreno Taquería            | 11/27/1996 |\n| 10383   | Around the Horn                    | 12/16/1996 |\n| 10355   | Around the Horn                    | 11/15/1996 |\n| 10278   | Berglunds snabbköp                 | 8/12/1996  |\n\n考虑下面两个表，（a）CUSTOMERS 表：\n\n```\n    +----+----------+-----+-----------+----------+\n    | ID | NAME     | AGE | ADDRESS   | SALARY |\n    +----+----------+-----+-----------+----------+\n    | 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |\n    | 2 | Khilan   | 25 | Delhi     | 1500.00 |\n    | 3 | kaushik  | 23 | Kota      | 2000.00 |\n    | 4 | Chaitali | 25 | Mumbai    | 6500.00 |\n    | 5 | Hardik   | 27 | Bhopal    | 8500.00 |\n    | 6 | Komal    | 22 | MP        | 4500.00 |\n    | 7 | Muffy    | 24 | Indore    | 10000.00 |\n    +----+----------+-----+-----------+----------+\n```\n\n（b）另一个表是 ORDERS 表：\n\n```\n    +-----+---------------------+-------------+--------+\n    |OID | DATE                | CUSTOMER_ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |\n    | 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |\n    | 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+\n```\n\n现在，让我们用 SELECT 语句将这个两张表连接（JOIN）在一起：\n\n```\n    SQL> SELECT ID, NAME, AGE, AMOUNT\n            FROM CUSTOMERS, ORDERS\n            WHERE  CUSTOMERS.ID = ORDERS.CUSTOMER_ID;\n```\n\n上述语句的运行结果如下所示：\n\n```\n    +----+----------+-----+--------+\n    | ID | NAME     | AGE | AMOUNT | +----+----------+-----+--------+ |  3 | kaushik |  23 | 3000 |\n    | 3 | kaushik  | 23 |   1500 | |  2 | Khilan |  25 | 1560 |\n    | 4 | Chaitali | 25 |   2060 | +----+----------+-----+--------+\n```\n\n## 不同类型的SQL联接\n\n------\n\nSQL 中有多种不同的连接：\n\n- 内连接（INNER JOIN）：当两个表中都存在匹配时，才返回行。\n- 左连接（LEFT JOIN）：返回左表中的所有行，即使右表中没有匹配的行。\n- 右连接（RIGHT JOIN）：返回右表中的所有行，即使左表中没有匹配的行。\n- 全连接（FULL JOIN）：只要某一个表存在匹配，就返回行。\n- 笛卡尔连接（CARTESIAN JOIN）：返回两个或者更多的表中记录集的笛卡尔积。\n\n### 内连接\n\n最常用也最重要的连接形式是**内连接**，有时候也被称作\"EQUIJOIN\"（等值连接）。\n\n内连接根据连接谓词来组合两个表中的字段，以创建一个新的结果表。SQL 查询会比较逐个比较表 1 和表 2 中的每一条记录，来寻找满足连接谓词的所有记录对。当连接谓词得以满足时，所有满足条件的记录对的字段将会结合在一起构成结果表。\n\n#### 语法：\n\n**　内连接**的基本语法如下所示：\n\nsql\n\n```\nSELECT table1.column1, table2.column2...\nFROM table1\nINNER JOIN table2\nON table1.common_field = table2.common_field;\n```\n\n#### 示例：\n\n考虑如下两个表格，（a）CUSTOMERS 表：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY |\n+----+----------+-----+-----------+----------+\n| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |\n| 2 | Khilan   | 25 | Delhi     | 1500.00 |\n| 3 | kaushik  | 23 | Kota      | 2000.00 |\n| 4 | Chaitali | 25 | Mumbai    | 6500.00 |\n| 5 | Hardik   | 27 | Bhopal    | 8500.00 |\n| 6 | Komal    | 22 | MP        | 4500.00 |\n| 7 | Muffy    | 24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n（b）ORDERS 表：\n\n```\n+-----+---------------------+-------------+--------+\n| OID | DATE                | ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |\n| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |\n| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+\n```\n\n现在，让我们用内连接将这两个表连接在一起：\n\n```\nSQL> SELECT  ID, NAME, AMOUNT, DATE\n     FROM CUSTOMERS\n     INNER JOIN ORDERS\n     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;\n```\n\n上述语句将会产生如下结果：\n\n```\n+----+----------+--------+---------------------+\n| ID | NAME     | AMOUNT | DATE                | +----+----------+--------+---------------------+ |  3 | kaushik |   3000 | 2009-10-08 00:00:00 |\n| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |  2 | Khilan |   1560 | 2009-11-20 00:00:00 |\n| 4 | Chaitali | 2060 | 2008-05-20 00:00:00 | +----+----------+--------+---------------------+\n```\n\n### 左连接\n\n**　左链接**返回左表中的所有记录，即使右表中没有任何满足匹配条件的记录。这意味着，如果 ON 子句在右表中匹配到了 0 条记录，该连接仍然会返回至少一条记录，不过返回的记录中所有来自右表的字段都为 NULL。\n\n这就意味着，左连接会返回左表中的所有记录，加上右表中匹配到的记录，或者是 NULL （如果连接谓词无法匹配到任何记录的话）。\n\n#### 语法：\n\n**　左连接**的基本语法如下所示：\n\n```\nSELECT table1.column1, table2.column2...\nFROM table1\nLEFT JOIN table2\nON table1.common_field = table2.common_field;\n```\n\n这里，给出的条件可以是任何根据你的需要写出的条件。\n\n#### 示例：\n\n考虑如下两个表格，（a）CUSTOMERS 表：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY |\n+----+----------+-----+-----------+----------+\n| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |\n| 2 | Khilan   | 25 | Delhi     | 1500.00 |\n| 3 | kaushik  | 23 | Kota      | 2000.00 |\n| 4 | Chaitali | 25 | Mumbai    | 6500.00 |\n| 5 | Hardik   | 27 | Bhopal    | 8500.00 |\n| 6 | Komal    | 22 | MP        | 4500.00 |\n| 7 | Muffy    | 24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n（b）ORDERS 表：\n\n```\n+-----+---------------------+-------------+--------+\n| OID | DATE                | ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |\n| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |\n| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+\n```\n\n现在，让我们用左连接将这两个表连接在一起：\n\n```\nSQL> SELECT  ID, NAME, AMOUNT, DATE\n     FROM CUSTOMERS\n     LEFT JOIN ORDERS\n     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;\n```\n\n上述语句将会产生如下结果：\n\n```\n+----+----------+--------+---------------------+\n| ID | NAME     | AMOUNT | DATE                | +----+----------+--------+---------------------+ |  1 | Ramesh |   NULL | NULL |\n| 2 | Khilan   | 1560 | 2009-11-20 00:00:00 | |  3 | kaushik |   3000 | 2009-10-08 00:00:00 |\n| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |  4 | Chaitali |   2060 | 2008-05-20 00:00:00 |\n| 5 | Hardik   | NULL | NULL                | |  6 | Komal |   NULL | NULL |\n| 7 | Muffy    | NULL | NULL                | +----+----------+--------+---------------------+\n```\n\n### 右连接\n\n**　右链接**返回右表中的所有记录，即是左表中没有任何满足匹配条件的记录。这意味着，如果 ON 子句在左表中匹配到了 0 条记录，该连接仍然会返回至少一条记录，不过返回的记录中所有来自左表的字段都为 NULL。\n\n这就意味着，右连接会返回右表中的所有记录，加上左表中匹配到的记录，或者是 NULL （如果连接谓词无法匹配到任何记录的话）。\n\n#### 语法：\n\n**　右连接**的基本语法如下所示：\n\n```\nSELECT table1.column1, table2.column2...\nFROM table1\nRIGHT JOIN table2\nON table1.common_field = table2.common_field;\n```\n\n这里，给出的条件可以是任何根据你的需要写出的条件。\n\n#### 示例：\n\n考虑如下两个表格，（a）CUSTOMERS 表：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY |\n+----+----------+-----+-----------+----------+\n| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |\n| 2 | Khilan   | 25 | Delhi     | 1500.00 |\n| 3 | kaushik  | 23 | Kota      | 2000.00 |\n| 4 | Chaitali | 25 | Mumbai    | 6500.00 |\n| 5 | Hardik   | 27 | Bhopal    | 8500.00 |\n| 6 | Komal    | 22 | MP        | 4500.00 |\n| 7 | Muffy    | 24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n（b）ORDERS 表：\n\n```\n+-----+---------------------+-------------+--------+\n| OID | DATE                | ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |\n| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |\n| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+\n```\n\n现在，让我们用右连接将这两个表连接在一起：\n\n```\nSQL> SELECT  ID, NAME, AMOUNT, DATE\n     FROM CUSTOMERS\n     RIGHT JOIN ORDERS\n     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;\n```\n\n上述语句将会产生如下结果：\n\n```\n+------+----------+--------+---------------------+\n| ID | NAME     | AMOUNT | DATE                | +------+----------+--------+---------------------+ |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |\n| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    2 | Khilan |   1560 | 2009-11-20 00:00:00 |\n| 4 | Chaitali | 2060 | 2008-05-20 00:00:00 | +------+----------+--------+---------------------+\n```\n\n### 全连接\n\n**　全连接**将左连接和右连接的结果组合在一起。\n\n#### 语法：\n\n```\nSELECT table1.column1, table2.column2...\nFROM table1\nFULL JOIN table2\nON table1.common_field = table2.common_field;\n```\n\n这里，给出的条件可以是任何根据你的需要写出的条件。\n\n#### 示例：\n\n考虑如下两个表格，（a）CUSTOMERS 表：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY |\n+----+----------+-----+-----------+----------+\n| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |\n| 2 | Khilan   | 25 | Delhi     | 1500.00 |\n| 3 | kaushik  | 23 | Kota      | 2000.00 |\n| 4 | Chaitali | 25 | Mumbai    | 6500.00 |\n| 5 | Hardik   | 27 | Bhopal    | 8500.00 |\n| 6 | Komal    | 22 | MP        | 4500.00 |\n| 7 | Muffy    | 24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n（b）ORDERS 表：\n\n```\n+-----+---------------------+-------------+--------+\n| OID | DATE                | ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |\n| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |\n| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+\n```\n\n现在让我们用全连接将两个表连接在一起：\n\n```\nSQL> SELECT  ID, NAME, AMOUNT, DATE\n     FROM CUSTOMERS\n     FULL JOIN ORDERS\n     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;\n```\n\n上述语句将会产生如下结果：\n\n```\n+------+----------+--------+---------------------+\n| ID | NAME     | AMOUNT | DATE                | +------+----------+--------+---------------------+ |    1 | Ramesh |   NULL | NULL |\n| 2 | Khilan   | 1560 | 2009-11-20 00:00:00 | |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |\n| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    4 | Chaitali |   2060 | 2008-05-20 00:00:00 |\n| 5 | Hardik   | NULL | NULL                | |    6 | Komal |   NULL | NULL |\n| 7 | Muffy    | NULL | NULL                | |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |\n| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    2 | Khilan |   1560 | 2009-11-20 00:00:00 |\n| 4 | Chaitali | 2060 | 2008-05-20 00:00:00 | +------+----------+--------+---------------------+\n```\n\n如果你所用的数据库不支持全连接，比如 MySQL，那么你可以使用 UNION ALL子句来将左连接和右连接结果组合在一起：\n\n```\nSQL> SELECT  ID, NAME, AMOUNT, DATE\n     FROM CUSTOMERS\n     LEFT JOIN ORDERS\n     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID\nUNION ALL\n     SELECT  ID, NAME, AMOUNT, DATE\n     FROM CUSTOMERS\n     RIGHT JOIN ORDERS\n     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID\n```\n\n### 笛卡尔连接（交叉连接）\n\n**　笛卡尔连接** 或者**交叉连接**返回两个或者更多的连接表中记录的笛卡尔乘积。也就是说，它相当于连接谓词总是为真或者缺少连接谓词的内连接。\n\n#### 语法：[](https://ngrok.cn/sql/sql-610.html#语法-4)\n\n**　笛卡尔连接** 或者说**交叉连接**的基本语法如下所示：\n\n```\nSELECT table1.column1, table2.column2...\nFROM  table1, table2 [, table3 ]\n```\n\n#### 示例：[](https://ngrok.cn/sql/sql-610.html#示例-4)\n\n```\n考虑如下两个表格，（a）CUSTOMERS 表：\n\n    +----+----------+-----+-----------+----------+\n    | ID | NAME     | AGE | ADDRESS   | SALARY |\n    +----+----------+-----+-----------+----------+\n    | 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |\n    | 2 | Khilan   | 25 | Delhi     | 1500.00 |\n    | 3 | kaushik  | 23 | Kota      | 2000.00 |\n    | 4 | Chaitali | 25 | Mumbai    | 6500.00 |\n    | 5 | Hardik   | 27 | Bhopal    | 8500.00 |\n    | 6 | Komal    | 22 | MP        | 4500.00 |\n    | 7 | Muffy    | 24 | Indore    | 10000.00 |\n    +----+----------+-----+-----------+----------+\n\n（b）ORDERS 表：\n\n    +-----+---------------------+-------------+--------+\n    | OID | DATE                | ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |\n    | 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |\n    | 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+\n```\n\n现在，让我用内连接将这两个表连接在一起：\n\n```\nSQL> SELECT  ID, NAME, AMOUNT, DATE\n     FROM CUSTOMERS, ORDERS;\n```\n\n上述语句将会产生如下结果：\n\n```\n+----+----------+--------+---------------------+\n| ID | NAME     | AMOUNT | DATE                | +----+----------+--------+---------------------+ |  1 | Ramesh |   3000 | 2009-10-08 00:00:00 |\n| 1 | Ramesh   | 1500 | 2009-10-08 00:00:00 | |  1 | Ramesh |   1560 | 2009-11-20 00:00:00 |\n| 1 | Ramesh   | 2060 | 2008-05-20 00:00:00 | |  2 | Khilan |   3000 | 2009-10-08 00:00:00 |\n| 2 | Khilan   | 1500 | 2009-10-08 00:00:00 | |  2 | Khilan |   1560 | 2009-11-20 00:00:00 |\n| 2 | Khilan   | 2060 | 2008-05-20 00:00:00 | |  3 | kaushik |   3000 | 2009-10-08 00:00:00 |\n| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |  3 | kaushik |   1560 | 2009-11-20 00:00:00 |\n| 3 | kaushik  | 2060 | 2008-05-20 00:00:00 | |  4 | Chaitali |   3000 | 2009-10-08 00:00:00 |\n| 4 | Chaitali | 1500 | 2009-10-08 00:00:00 | |  4 | Chaitali |   1560 | 2009-11-20 00:00:00 |\n| 4 | Chaitali | 2060 | 2008-05-20 00:00:00 | |  5 | Hardik |   3000 | 2009-10-08 00:00:00 |\n| 5 | Hardik   | 1500 | 2009-10-08 00:00:00 | |  5 | Hardik |   1560 | 2009-11-20 00:00:00 |\n| 5 | Hardik   | 2060 | 2008-05-20 00:00:00 | |  6 | Komal |   3000 | 2009-10-08 00:00:00 |\n| 6 | Komal    | 1500 | 2009-10-08 00:00:00 | |  6 | Komal |   1560 | 2009-11-20 00:00:00 |\n| 6 | Komal    | 2060 | 2008-05-20 00:00:00 | |  7 | Muffy |   3000 | 2009-10-08 00:00:00 |\n| 7 | Muffy    | 1500 | 2009-10-08 00:00:00 | |  7 | Muffy |   1560 | 2009-11-20 00:00:00 |\n| 7 | Muffy    | 2060 | 2008-05-20 00:00:00 | +----+----------+--------+---------------------+\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T02:21:18.300Z","path":"wiki/sql/sentence/join.html","comments":1,"_id":"cmbreopiv000p65x01l8w4wa2","content":"<h2 id=\"SQL-JOIN-连接\"><a href=\"#SQL-JOIN-连接\" class=\"headerlink\" title=\"SQL JOIN 连接\"></a>SQL JOIN 连接</h2><hr>\n<p>SQL join 用于把来自两个或多个表的行结合起来。</p>\n<h2 id=\"SQL-JOIN\"><a href=\"#SQL-JOIN\" class=\"headerlink\" title=\"SQL JOIN\"></a>SQL JOIN</h2><hr>\n<p>SQL JOIN 子句用于把来自两个或多个表的行结合起来，基于这些表之间的共同字段。</p>\n<p>简单地说，就是先确定一个主表作为结果集，然后，把其他表的行有选择性地”连接”在主表结果集上。</p>\n<p>最常见的 JOIN 类型：<strong>SQL INNER JOIN（简单的 JOIN）</strong>。 SQL INNER JOIN 从多个表中返回满足 JOIN 条件的所有行。</p>\n<p>让我们看看选自 “Orders” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">OrderDate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10308</td>\n<td align=\"left\">2</td>\n<td align=\"left\">1996-09-18</td>\n</tr>\n<tr>\n<td align=\"left\">10309</td>\n<td align=\"left\">37</td>\n<td align=\"left\">1996-09-19</td>\n</tr>\n<tr>\n<td align=\"left\">10310</td>\n<td align=\"left\">77</td>\n<td align=\"left\">1996-09-20</td>\n</tr>\n</tbody></table>\n<p>然后，看看选自 “Customers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mexico</td>\n</tr>\n</tbody></table>\n<p>请注意，”Orders” 表中的 “CustomerID” 列指向 “Customers” 表中的客户。上面这两个表是通过 “CustomerID” 列联系起来的。</p>\n<p>然后，如果我们运行下面的 SQL 语句（包含 INNER JOIN）：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate</span><br><span class=\"line\">FROM Orders</span><br><span class=\"line\">INNER JOIN Customers</span><br><span class=\"line\">ON Orders.CustomerID=Customers.CustomerID;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">OrderDate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10308</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">1996-09-18</td>\n</tr>\n</tbody></table>\n<h2 id=\"不同的-SQL-JOIN\"><a href=\"#不同的-SQL-JOIN\" class=\"headerlink\" title=\"不同的 SQL JOIN\"></a>不同的 SQL JOIN</h2><hr>\n<p>在我们继续讲解实例之前，我们先列出您可以使用的不同的 SQL JOIN 类型：</p>\n<ul>\n<li><strong>INNER JOIN</strong>：如果表中有至少一个匹配，则返回行</li>\n<li><strong>LEFT JOIN</strong>：即使右表中没有匹配，也从左表返回所有的行</li>\n<li><strong>RIGHT JOIN</strong>：即使左表中没有匹配，也从右表返回所有的行</li>\n<li><strong>FULL JOIN</strong>：只要其中一个表中存在匹配，则返回行</li>\n<li><strong>SELF JOIN</strong> ：用于将表连接到自己，就好像该表是两个表一样，临时重命名了SQL语句中的至少一个表</li>\n<li><strong>CARTESIAN JOIN</strong>：从两个或多个连接表返回记录集的笛卡儿积</li>\n</ul>\n<h2 id=\"SQL-JOIN-连接详细用法\"><a href=\"#SQL-JOIN-连接详细用法\" class=\"headerlink\" title=\"SQL JOIN 连接详细用法\"></a>SQL JOIN 连接详细用法</h2><hr>\n<p>SQL <strong>连接（JOIN）</strong> 子句用于将数据库中两个或者两个以上表中的记录组合起来。连接通过共有值将不同表中的字段组合在一起。</p>\n<p>我们来看看”Orders”表中的选择：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">OrderDate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10308</td>\n<td align=\"left\">2</td>\n<td align=\"left\">1996-09-18</td>\n</tr>\n<tr>\n<td align=\"left\">10309</td>\n<td align=\"left\">37</td>\n<td align=\"left\">1996-09-19</td>\n</tr>\n<tr>\n<td align=\"left\">10310</td>\n<td align=\"left\">77</td>\n<td align=\"left\">1996-09-20</td>\n</tr>\n</tbody></table>\n<p>然后，查看”Customers”表中的选择：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mexico</td>\n</tr>\n</tbody></table>\n<p>请注意，”Orders”表中的”客户ID”列是指”CustomerID”表中的”客户ID”。上面两个表格之间的关系是”CustomerID”列。</p>\n<p>然后，我们可以创建下面的SQL语句（包含一个INNER JOIN），它选择两个表中具有匹配值的记录：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate</span><br><span class=\"line\">FROM Orders</span><br><span class=\"line\">INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;</span><br></pre></td></tr></table></figure>\n\n<p>它会产生这样的东西：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">OrderDate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10308</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">9&#x2F;18&#x2F;1996</td>\n</tr>\n<tr>\n<td align=\"left\">10365</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">11&#x2F;27&#x2F;1996</td>\n</tr>\n<tr>\n<td align=\"left\">10383</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">12&#x2F;16&#x2F;1996</td>\n</tr>\n<tr>\n<td align=\"left\">10355</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">11&#x2F;15&#x2F;1996</td>\n</tr>\n<tr>\n<td align=\"left\">10278</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">8&#x2F;12&#x2F;1996</td>\n</tr>\n</tbody></table>\n<p>考虑下面两个表，（a）CUSTOMERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |</span><br><span class=\"line\">| 2 | Khilan   | 25 | Delhi     | 1500.00 |</span><br><span class=\"line\">| 3 | kaushik  | 23 | Kota      | 2000.00 |</span><br><span class=\"line\">| 4 | Chaitali | 25 | Mumbai    | 6500.00 |</span><br><span class=\"line\">| 5 | Hardik   | 27 | Bhopal    | 8500.00 |</span><br><span class=\"line\">| 6 | Komal    | 22 | MP        | 4500.00 |</span><br><span class=\"line\">| 7 | Muffy    | 24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>（b）另一个表是 ORDERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-----+---------------------+-------------+--------+</span><br><span class=\"line\">|OID | DATE                | CUSTOMER_ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |</span><br><span class=\"line\">| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |</span><br><span class=\"line\">| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我们用 SELECT 语句将这个两张表连接（JOIN）在一起：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT ID, NAME, AGE, AMOUNT</span><br><span class=\"line\">        FROM CUSTOMERS, ORDERS</span><br><span class=\"line\">        WHERE  CUSTOMERS.ID = ORDERS.CUSTOMER_ID;</span><br></pre></td></tr></table></figure>\n\n<p>上述语句的运行结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+--------+</span><br><span class=\"line\">| ID | NAME     | AGE | AMOUNT | +----+----------+-----+--------+ |  3 | kaushik |  23 | 3000 |</span><br><span class=\"line\">| 3 | kaushik  | 23 |   1500 | |  2 | Khilan |  25 | 1560 |</span><br><span class=\"line\">| 4 | Chaitali | 25 |   2060 | +----+----------+-----+--------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不同类型的SQL联接\"><a href=\"#不同类型的SQL联接\" class=\"headerlink\" title=\"不同类型的SQL联接\"></a>不同类型的SQL联接</h2><hr>\n<p>SQL 中有多种不同的连接：</p>\n<ul>\n<li>内连接（INNER JOIN）：当两个表中都存在匹配时，才返回行。</li>\n<li>左连接（LEFT JOIN）：返回左表中的所有行，即使右表中没有匹配的行。</li>\n<li>右连接（RIGHT JOIN）：返回右表中的所有行，即使左表中没有匹配的行。</li>\n<li>全连接（FULL JOIN）：只要某一个表存在匹配，就返回行。</li>\n<li>笛卡尔连接（CARTESIAN JOIN）：返回两个或者更多的表中记录集的笛卡尔积。</li>\n</ul>\n<h3 id=\"内连接\"><a href=\"#内连接\" class=\"headerlink\" title=\"内连接\"></a>内连接</h3><p>最常用也最重要的连接形式是<strong>内连接</strong>，有时候也被称作”EQUIJOIN”（等值连接）。</p>\n<p>内连接根据连接谓词来组合两个表中的字段，以创建一个新的结果表。SQL 查询会比较逐个比较表 1 和表 2 中的每一条记录，来寻找满足连接谓词的所有记录对。当连接谓词得以满足时，所有满足条件的记录对的字段将会结合在一起构成结果表。</p>\n<h4 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><p>**　内连接**的基本语法如下所示：</p>\n<p>sql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT table1.column1, table2.column2...</span><br><span class=\"line\">FROM table1</span><br><span class=\"line\">INNER JOIN table2</span><br><span class=\"line\">ON table1.common_field = table2.common_field;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><p>考虑如下两个表格，（a）CUSTOMERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |</span><br><span class=\"line\">| 2 | Khilan   | 25 | Delhi     | 1500.00 |</span><br><span class=\"line\">| 3 | kaushik  | 23 | Kota      | 2000.00 |</span><br><span class=\"line\">| 4 | Chaitali | 25 | Mumbai    | 6500.00 |</span><br><span class=\"line\">| 5 | Hardik   | 27 | Bhopal    | 8500.00 |</span><br><span class=\"line\">| 6 | Komal    | 22 | MP        | 4500.00 |</span><br><span class=\"line\">| 7 | Muffy    | 24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>（b）ORDERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-----+---------------------+-------------+--------+</span><br><span class=\"line\">| OID | DATE                | ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |</span><br><span class=\"line\">| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |</span><br><span class=\"line\">| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我们用内连接将这两个表连接在一起：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     INNER JOIN ORDERS</span><br><span class=\"line\">     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;</span><br></pre></td></tr></table></figure>\n\n<p>上述语句将会产生如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+--------+---------------------+</span><br><span class=\"line\">| ID | NAME     | AMOUNT | DATE                | +----+----------+--------+---------------------+ |  3 | kaushik |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |  2 | Khilan |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 4 | Chaitali | 2060 | 2008-05-20 00:00:00 | +----+----------+--------+---------------------+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"左连接\"><a href=\"#左连接\" class=\"headerlink\" title=\"左连接\"></a>左连接</h3><p>**　左链接**返回左表中的所有记录，即使右表中没有任何满足匹配条件的记录。这意味着，如果 ON 子句在右表中匹配到了 0 条记录，该连接仍然会返回至少一条记录，不过返回的记录中所有来自右表的字段都为 NULL。</p>\n<p>这就意味着，左连接会返回左表中的所有记录，加上右表中匹配到的记录，或者是 NULL （如果连接谓词无法匹配到任何记录的话）。</p>\n<h4 id=\"语法：-1\"><a href=\"#语法：-1\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><p>**　左连接**的基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT table1.column1, table2.column2...</span><br><span class=\"line\">FROM table1</span><br><span class=\"line\">LEFT JOIN table2</span><br><span class=\"line\">ON table1.common_field = table2.common_field;</span><br></pre></td></tr></table></figure>\n\n<p>这里，给出的条件可以是任何根据你的需要写出的条件。</p>\n<h4 id=\"示例：-1\"><a href=\"#示例：-1\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><p>考虑如下两个表格，（a）CUSTOMERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |</span><br><span class=\"line\">| 2 | Khilan   | 25 | Delhi     | 1500.00 |</span><br><span class=\"line\">| 3 | kaushik  | 23 | Kota      | 2000.00 |</span><br><span class=\"line\">| 4 | Chaitali | 25 | Mumbai    | 6500.00 |</span><br><span class=\"line\">| 5 | Hardik   | 27 | Bhopal    | 8500.00 |</span><br><span class=\"line\">| 6 | Komal    | 22 | MP        | 4500.00 |</span><br><span class=\"line\">| 7 | Muffy    | 24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>（b）ORDERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-----+---------------------+-------------+--------+</span><br><span class=\"line\">| OID | DATE                | ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |</span><br><span class=\"line\">| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |</span><br><span class=\"line\">| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我们用左连接将这两个表连接在一起：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     LEFT JOIN ORDERS</span><br><span class=\"line\">     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;</span><br></pre></td></tr></table></figure>\n\n<p>上述语句将会产生如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+--------+---------------------+</span><br><span class=\"line\">| ID | NAME     | AMOUNT | DATE                | +----+----------+--------+---------------------+ |  1 | Ramesh |   NULL | NULL |</span><br><span class=\"line\">| 2 | Khilan   | 1560 | 2009-11-20 00:00:00 | |  3 | kaushik |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |  4 | Chaitali |   2060 | 2008-05-20 00:00:00 |</span><br><span class=\"line\">| 5 | Hardik   | NULL | NULL                | |  6 | Komal |   NULL | NULL |</span><br><span class=\"line\">| 7 | Muffy    | NULL | NULL                | +----+----------+--------+---------------------+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"右连接\"><a href=\"#右连接\" class=\"headerlink\" title=\"右连接\"></a>右连接</h3><p>**　右链接**返回右表中的所有记录，即是左表中没有任何满足匹配条件的记录。这意味着，如果 ON 子句在左表中匹配到了 0 条记录，该连接仍然会返回至少一条记录，不过返回的记录中所有来自左表的字段都为 NULL。</p>\n<p>这就意味着，右连接会返回右表中的所有记录，加上左表中匹配到的记录，或者是 NULL （如果连接谓词无法匹配到任何记录的话）。</p>\n<h4 id=\"语法：-2\"><a href=\"#语法：-2\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><p>**　右连接**的基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT table1.column1, table2.column2...</span><br><span class=\"line\">FROM table1</span><br><span class=\"line\">RIGHT JOIN table2</span><br><span class=\"line\">ON table1.common_field = table2.common_field;</span><br></pre></td></tr></table></figure>\n\n<p>这里，给出的条件可以是任何根据你的需要写出的条件。</p>\n<h4 id=\"示例：-2\"><a href=\"#示例：-2\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><p>考虑如下两个表格，（a）CUSTOMERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |</span><br><span class=\"line\">| 2 | Khilan   | 25 | Delhi     | 1500.00 |</span><br><span class=\"line\">| 3 | kaushik  | 23 | Kota      | 2000.00 |</span><br><span class=\"line\">| 4 | Chaitali | 25 | Mumbai    | 6500.00 |</span><br><span class=\"line\">| 5 | Hardik   | 27 | Bhopal    | 8500.00 |</span><br><span class=\"line\">| 6 | Komal    | 22 | MP        | 4500.00 |</span><br><span class=\"line\">| 7 | Muffy    | 24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>（b）ORDERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-----+---------------------+-------------+--------+</span><br><span class=\"line\">| OID | DATE                | ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |</span><br><span class=\"line\">| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |</span><br><span class=\"line\">| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我们用右连接将这两个表连接在一起：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     RIGHT JOIN ORDERS</span><br><span class=\"line\">     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;</span><br></pre></td></tr></table></figure>\n\n<p>上述语句将会产生如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+------+----------+--------+---------------------+</span><br><span class=\"line\">| ID | NAME     | AMOUNT | DATE                | +------+----------+--------+---------------------+ |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    2 | Khilan |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 4 | Chaitali | 2060 | 2008-05-20 00:00:00 | +------+----------+--------+---------------------+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"全连接\"><a href=\"#全连接\" class=\"headerlink\" title=\"全连接\"></a>全连接</h3><p>**　全连接**将左连接和右连接的结果组合在一起。</p>\n<h4 id=\"语法：-3\"><a href=\"#语法：-3\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT table1.column1, table2.column2...</span><br><span class=\"line\">FROM table1</span><br><span class=\"line\">FULL JOIN table2</span><br><span class=\"line\">ON table1.common_field = table2.common_field;</span><br></pre></td></tr></table></figure>\n\n<p>这里，给出的条件可以是任何根据你的需要写出的条件。</p>\n<h4 id=\"示例：-3\"><a href=\"#示例：-3\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><p>考虑如下两个表格，（a）CUSTOMERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |</span><br><span class=\"line\">| 2 | Khilan   | 25 | Delhi     | 1500.00 |</span><br><span class=\"line\">| 3 | kaushik  | 23 | Kota      | 2000.00 |</span><br><span class=\"line\">| 4 | Chaitali | 25 | Mumbai    | 6500.00 |</span><br><span class=\"line\">| 5 | Hardik   | 27 | Bhopal    | 8500.00 |</span><br><span class=\"line\">| 6 | Komal    | 22 | MP        | 4500.00 |</span><br><span class=\"line\">| 7 | Muffy    | 24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>（b）ORDERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-----+---------------------+-------------+--------+</span><br><span class=\"line\">| OID | DATE                | ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |</span><br><span class=\"line\">| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |</span><br><span class=\"line\">| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+</span><br></pre></td></tr></table></figure>\n\n<p>现在让我们用全连接将两个表连接在一起：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     FULL JOIN ORDERS</span><br><span class=\"line\">     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;</span><br></pre></td></tr></table></figure>\n\n<p>上述语句将会产生如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+------+----------+--------+---------------------+</span><br><span class=\"line\">| ID | NAME     | AMOUNT | DATE                | +------+----------+--------+---------------------+ |    1 | Ramesh |   NULL | NULL |</span><br><span class=\"line\">| 2 | Khilan   | 1560 | 2009-11-20 00:00:00 | |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    4 | Chaitali |   2060 | 2008-05-20 00:00:00 |</span><br><span class=\"line\">| 5 | Hardik   | NULL | NULL                | |    6 | Komal |   NULL | NULL |</span><br><span class=\"line\">| 7 | Muffy    | NULL | NULL                | |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    2 | Khilan |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 4 | Chaitali | 2060 | 2008-05-20 00:00:00 | +------+----------+--------+---------------------+</span><br></pre></td></tr></table></figure>\n\n<p>如果你所用的数据库不支持全连接，比如 MySQL，那么你可以使用 UNION ALL子句来将左连接和右连接结果组合在一起：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     LEFT JOIN ORDERS</span><br><span class=\"line\">     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID</span><br><span class=\"line\">UNION ALL</span><br><span class=\"line\">     SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     RIGHT JOIN ORDERS</span><br><span class=\"line\">     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"笛卡尔连接（交叉连接）\"><a href=\"#笛卡尔连接（交叉连接）\" class=\"headerlink\" title=\"笛卡尔连接（交叉连接）\"></a>笛卡尔连接（交叉连接）</h3><p>**　笛卡尔连接** 或者<strong>交叉连接</strong>返回两个或者更多的连接表中记录的笛卡尔乘积。也就是说，它相当于连接谓词总是为真或者缺少连接谓词的内连接。</p>\n<h4 id=\"语法：-4\"><a href=\"#语法：-4\" class=\"headerlink\" title=\"语法：\"></a>语法：<a href=\"https://ngrok.cn/sql/sql-610.html#%E8%AF%AD%E6%B3%95-4\"></a></h4><p>**　笛卡尔连接** 或者说<strong>交叉连接</strong>的基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT table1.column1, table2.column2...</span><br><span class=\"line\">FROM  table1, table2 [, table3 ]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"示例：-4\"><a href=\"#示例：-4\" class=\"headerlink\" title=\"示例：\"></a>示例：<a href=\"https://ngrok.cn/sql/sql-610.html#%E7%A4%BA%E4%BE%8B-4\"></a></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">考虑如下两个表格，（a）CUSTOMERS 表：</span><br><span class=\"line\"></span><br><span class=\"line\">    +----+----------+-----+-----------+----------+</span><br><span class=\"line\">    | ID | NAME     | AGE | ADDRESS   | SALARY |</span><br><span class=\"line\">    +----+----------+-----+-----------+----------+</span><br><span class=\"line\">    | 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |</span><br><span class=\"line\">    | 2 | Khilan   | 25 | Delhi     | 1500.00 |</span><br><span class=\"line\">    | 3 | kaushik  | 23 | Kota      | 2000.00 |</span><br><span class=\"line\">    | 4 | Chaitali | 25 | Mumbai    | 6500.00 |</span><br><span class=\"line\">    | 5 | Hardik   | 27 | Bhopal    | 8500.00 |</span><br><span class=\"line\">    | 6 | Komal    | 22 | MP        | 4500.00 |</span><br><span class=\"line\">    | 7 | Muffy    | 24 | Indore    | 10000.00 |</span><br><span class=\"line\">    +----+----------+-----+-----------+----------+</span><br><span class=\"line\"></span><br><span class=\"line\">（b）ORDERS 表：</span><br><span class=\"line\"></span><br><span class=\"line\">    +-----+---------------------+-------------+--------+</span><br><span class=\"line\">    | OID | DATE                | ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |</span><br><span class=\"line\">    | 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |</span><br><span class=\"line\">    | 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我用内连接将这两个表连接在一起：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS, ORDERS;</span><br></pre></td></tr></table></figure>\n\n<p>上述语句将会产生如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+--------+---------------------+</span><br><span class=\"line\">| ID | NAME     | AMOUNT | DATE                | +----+----------+--------+---------------------+ |  1 | Ramesh |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 1 | Ramesh   | 1500 | 2009-10-08 00:00:00 | |  1 | Ramesh |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 1 | Ramesh   | 2060 | 2008-05-20 00:00:00 | |  2 | Khilan |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 2 | Khilan   | 1500 | 2009-10-08 00:00:00 | |  2 | Khilan |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 2 | Khilan   | 2060 | 2008-05-20 00:00:00 | |  3 | kaushik |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |  3 | kaushik |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 3 | kaushik  | 2060 | 2008-05-20 00:00:00 | |  4 | Chaitali |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 4 | Chaitali | 1500 | 2009-10-08 00:00:00 | |  4 | Chaitali |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 4 | Chaitali | 2060 | 2008-05-20 00:00:00 | |  5 | Hardik |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 5 | Hardik   | 1500 | 2009-10-08 00:00:00 | |  5 | Hardik |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 5 | Hardik   | 2060 | 2008-05-20 00:00:00 | |  6 | Komal |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 6 | Komal    | 1500 | 2009-10-08 00:00:00 | |  6 | Komal |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 6 | Komal    | 2060 | 2008-05-20 00:00:00 | |  7 | Muffy |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 7 | Muffy    | 1500 | 2009-10-08 00:00:00 | |  7 | Muffy |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 7 | Muffy    | 2060 | 2008-05-20 00:00:00 | +----+----------+--------+---------------------+</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-JOIN-连接\"><a href=\"#SQL-JOIN-连接\" class=\"headerlink\" title=\"SQL JOIN 连接\"></a>SQL JOIN 连接</h2><hr>\n<p>SQL join 用于把来自两个或多个表的行结合起来。</p>\n<h2 id=\"SQL-JOIN\"><a href=\"#SQL-JOIN\" class=\"headerlink\" title=\"SQL JOIN\"></a>SQL JOIN</h2><hr>\n<p>SQL JOIN 子句用于把来自两个或多个表的行结合起来，基于这些表之间的共同字段。</p>\n<p>简单地说，就是先确定一个主表作为结果集，然后，把其他表的行有选择性地”连接”在主表结果集上。</p>\n<p>最常见的 JOIN 类型：<strong>SQL INNER JOIN（简单的 JOIN）</strong>。 SQL INNER JOIN 从多个表中返回满足 JOIN 条件的所有行。</p>\n<p>让我们看看选自 “Orders” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">OrderDate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10308</td>\n<td align=\"left\">2</td>\n<td align=\"left\">1996-09-18</td>\n</tr>\n<tr>\n<td align=\"left\">10309</td>\n<td align=\"left\">37</td>\n<td align=\"left\">1996-09-19</td>\n</tr>\n<tr>\n<td align=\"left\">10310</td>\n<td align=\"left\">77</td>\n<td align=\"left\">1996-09-20</td>\n</tr>\n</tbody></table>\n<p>然后，看看选自 “Customers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mexico</td>\n</tr>\n</tbody></table>\n<p>请注意，”Orders” 表中的 “CustomerID” 列指向 “Customers” 表中的客户。上面这两个表是通过 “CustomerID” 列联系起来的。</p>\n<p>然后，如果我们运行下面的 SQL 语句（包含 INNER JOIN）：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate</span><br><span class=\"line\">FROM Orders</span><br><span class=\"line\">INNER JOIN Customers</span><br><span class=\"line\">ON Orders.CustomerID=Customers.CustomerID;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">OrderDate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10308</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">1996-09-18</td>\n</tr>\n</tbody></table>\n<h2 id=\"不同的-SQL-JOIN\"><a href=\"#不同的-SQL-JOIN\" class=\"headerlink\" title=\"不同的 SQL JOIN\"></a>不同的 SQL JOIN</h2><hr>\n<p>在我们继续讲解实例之前，我们先列出您可以使用的不同的 SQL JOIN 类型：</p>\n<ul>\n<li><strong>INNER JOIN</strong>：如果表中有至少一个匹配，则返回行</li>\n<li><strong>LEFT JOIN</strong>：即使右表中没有匹配，也从左表返回所有的行</li>\n<li><strong>RIGHT JOIN</strong>：即使左表中没有匹配，也从右表返回所有的行</li>\n<li><strong>FULL JOIN</strong>：只要其中一个表中存在匹配，则返回行</li>\n<li><strong>SELF JOIN</strong> ：用于将表连接到自己，就好像该表是两个表一样，临时重命名了SQL语句中的至少一个表</li>\n<li><strong>CARTESIAN JOIN</strong>：从两个或多个连接表返回记录集的笛卡儿积</li>\n</ul>\n<h2 id=\"SQL-JOIN-连接详细用法\"><a href=\"#SQL-JOIN-连接详细用法\" class=\"headerlink\" title=\"SQL JOIN 连接详细用法\"></a>SQL JOIN 连接详细用法</h2><hr>\n<p>SQL <strong>连接（JOIN）</strong> 子句用于将数据库中两个或者两个以上表中的记录组合起来。连接通过共有值将不同表中的字段组合在一起。</p>\n<p>我们来看看”Orders”表中的选择：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">OrderDate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10308</td>\n<td align=\"left\">2</td>\n<td align=\"left\">1996-09-18</td>\n</tr>\n<tr>\n<td align=\"left\">10309</td>\n<td align=\"left\">37</td>\n<td align=\"left\">1996-09-19</td>\n</tr>\n<tr>\n<td align=\"left\">10310</td>\n<td align=\"left\">77</td>\n<td align=\"left\">1996-09-20</td>\n</tr>\n</tbody></table>\n<p>然后，查看”Customers”表中的选择：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mexico</td>\n</tr>\n</tbody></table>\n<p>请注意，”Orders”表中的”客户ID”列是指”CustomerID”表中的”客户ID”。上面两个表格之间的关系是”CustomerID”列。</p>\n<p>然后，我们可以创建下面的SQL语句（包含一个INNER JOIN），它选择两个表中具有匹配值的记录：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Orders.OrderID, Customers.CustomerName, Orders.OrderDate</span><br><span class=\"line\">FROM Orders</span><br><span class=\"line\">INNER JOIN Customers ON Orders.CustomerID=Customers.CustomerID;</span><br></pre></td></tr></table></figure>\n\n<p>它会产生这样的东西：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">OrderDate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10308</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">9&#x2F;18&#x2F;1996</td>\n</tr>\n<tr>\n<td align=\"left\">10365</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">11&#x2F;27&#x2F;1996</td>\n</tr>\n<tr>\n<td align=\"left\">10383</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">12&#x2F;16&#x2F;1996</td>\n</tr>\n<tr>\n<td align=\"left\">10355</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">11&#x2F;15&#x2F;1996</td>\n</tr>\n<tr>\n<td align=\"left\">10278</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">8&#x2F;12&#x2F;1996</td>\n</tr>\n</tbody></table>\n<p>考虑下面两个表，（a）CUSTOMERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |</span><br><span class=\"line\">| 2 | Khilan   | 25 | Delhi     | 1500.00 |</span><br><span class=\"line\">| 3 | kaushik  | 23 | Kota      | 2000.00 |</span><br><span class=\"line\">| 4 | Chaitali | 25 | Mumbai    | 6500.00 |</span><br><span class=\"line\">| 5 | Hardik   | 27 | Bhopal    | 8500.00 |</span><br><span class=\"line\">| 6 | Komal    | 22 | MP        | 4500.00 |</span><br><span class=\"line\">| 7 | Muffy    | 24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>（b）另一个表是 ORDERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-----+---------------------+-------------+--------+</span><br><span class=\"line\">|OID | DATE                | CUSTOMER_ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |</span><br><span class=\"line\">| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |</span><br><span class=\"line\">| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我们用 SELECT 语句将这个两张表连接（JOIN）在一起：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT ID, NAME, AGE, AMOUNT</span><br><span class=\"line\">        FROM CUSTOMERS, ORDERS</span><br><span class=\"line\">        WHERE  CUSTOMERS.ID = ORDERS.CUSTOMER_ID;</span><br></pre></td></tr></table></figure>\n\n<p>上述语句的运行结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+--------+</span><br><span class=\"line\">| ID | NAME     | AGE | AMOUNT | +----+----------+-----+--------+ |  3 | kaushik |  23 | 3000 |</span><br><span class=\"line\">| 3 | kaushik  | 23 |   1500 | |  2 | Khilan |  25 | 1560 |</span><br><span class=\"line\">| 4 | Chaitali | 25 |   2060 | +----+----------+-----+--------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不同类型的SQL联接\"><a href=\"#不同类型的SQL联接\" class=\"headerlink\" title=\"不同类型的SQL联接\"></a>不同类型的SQL联接</h2><hr>\n<p>SQL 中有多种不同的连接：</p>\n<ul>\n<li>内连接（INNER JOIN）：当两个表中都存在匹配时，才返回行。</li>\n<li>左连接（LEFT JOIN）：返回左表中的所有行，即使右表中没有匹配的行。</li>\n<li>右连接（RIGHT JOIN）：返回右表中的所有行，即使左表中没有匹配的行。</li>\n<li>全连接（FULL JOIN）：只要某一个表存在匹配，就返回行。</li>\n<li>笛卡尔连接（CARTESIAN JOIN）：返回两个或者更多的表中记录集的笛卡尔积。</li>\n</ul>\n<h3 id=\"内连接\"><a href=\"#内连接\" class=\"headerlink\" title=\"内连接\"></a>内连接</h3><p>最常用也最重要的连接形式是<strong>内连接</strong>，有时候也被称作”EQUIJOIN”（等值连接）。</p>\n<p>内连接根据连接谓词来组合两个表中的字段，以创建一个新的结果表。SQL 查询会比较逐个比较表 1 和表 2 中的每一条记录，来寻找满足连接谓词的所有记录对。当连接谓词得以满足时，所有满足条件的记录对的字段将会结合在一起构成结果表。</p>\n<h4 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><p>**　内连接**的基本语法如下所示：</p>\n<p>sql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT table1.column1, table2.column2...</span><br><span class=\"line\">FROM table1</span><br><span class=\"line\">INNER JOIN table2</span><br><span class=\"line\">ON table1.common_field = table2.common_field;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><p>考虑如下两个表格，（a）CUSTOMERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |</span><br><span class=\"line\">| 2 | Khilan   | 25 | Delhi     | 1500.00 |</span><br><span class=\"line\">| 3 | kaushik  | 23 | Kota      | 2000.00 |</span><br><span class=\"line\">| 4 | Chaitali | 25 | Mumbai    | 6500.00 |</span><br><span class=\"line\">| 5 | Hardik   | 27 | Bhopal    | 8500.00 |</span><br><span class=\"line\">| 6 | Komal    | 22 | MP        | 4500.00 |</span><br><span class=\"line\">| 7 | Muffy    | 24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>（b）ORDERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-----+---------------------+-------------+--------+</span><br><span class=\"line\">| OID | DATE                | ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |</span><br><span class=\"line\">| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |</span><br><span class=\"line\">| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我们用内连接将这两个表连接在一起：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     INNER JOIN ORDERS</span><br><span class=\"line\">     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;</span><br></pre></td></tr></table></figure>\n\n<p>上述语句将会产生如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+--------+---------------------+</span><br><span class=\"line\">| ID | NAME     | AMOUNT | DATE                | +----+----------+--------+---------------------+ |  3 | kaushik |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |  2 | Khilan |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 4 | Chaitali | 2060 | 2008-05-20 00:00:00 | +----+----------+--------+---------------------+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"左连接\"><a href=\"#左连接\" class=\"headerlink\" title=\"左连接\"></a>左连接</h3><p>**　左链接**返回左表中的所有记录，即使右表中没有任何满足匹配条件的记录。这意味着，如果 ON 子句在右表中匹配到了 0 条记录，该连接仍然会返回至少一条记录，不过返回的记录中所有来自右表的字段都为 NULL。</p>\n<p>这就意味着，左连接会返回左表中的所有记录，加上右表中匹配到的记录，或者是 NULL （如果连接谓词无法匹配到任何记录的话）。</p>\n<h4 id=\"语法：-1\"><a href=\"#语法：-1\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><p>**　左连接**的基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT table1.column1, table2.column2...</span><br><span class=\"line\">FROM table1</span><br><span class=\"line\">LEFT JOIN table2</span><br><span class=\"line\">ON table1.common_field = table2.common_field;</span><br></pre></td></tr></table></figure>\n\n<p>这里，给出的条件可以是任何根据你的需要写出的条件。</p>\n<h4 id=\"示例：-1\"><a href=\"#示例：-1\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><p>考虑如下两个表格，（a）CUSTOMERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |</span><br><span class=\"line\">| 2 | Khilan   | 25 | Delhi     | 1500.00 |</span><br><span class=\"line\">| 3 | kaushik  | 23 | Kota      | 2000.00 |</span><br><span class=\"line\">| 4 | Chaitali | 25 | Mumbai    | 6500.00 |</span><br><span class=\"line\">| 5 | Hardik   | 27 | Bhopal    | 8500.00 |</span><br><span class=\"line\">| 6 | Komal    | 22 | MP        | 4500.00 |</span><br><span class=\"line\">| 7 | Muffy    | 24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>（b）ORDERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-----+---------------------+-------------+--------+</span><br><span class=\"line\">| OID | DATE                | ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |</span><br><span class=\"line\">| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |</span><br><span class=\"line\">| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我们用左连接将这两个表连接在一起：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     LEFT JOIN ORDERS</span><br><span class=\"line\">     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;</span><br></pre></td></tr></table></figure>\n\n<p>上述语句将会产生如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+--------+---------------------+</span><br><span class=\"line\">| ID | NAME     | AMOUNT | DATE                | +----+----------+--------+---------------------+ |  1 | Ramesh |   NULL | NULL |</span><br><span class=\"line\">| 2 | Khilan   | 1560 | 2009-11-20 00:00:00 | |  3 | kaushik |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |  4 | Chaitali |   2060 | 2008-05-20 00:00:00 |</span><br><span class=\"line\">| 5 | Hardik   | NULL | NULL                | |  6 | Komal |   NULL | NULL |</span><br><span class=\"line\">| 7 | Muffy    | NULL | NULL                | +----+----------+--------+---------------------+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"右连接\"><a href=\"#右连接\" class=\"headerlink\" title=\"右连接\"></a>右连接</h3><p>**　右链接**返回右表中的所有记录，即是左表中没有任何满足匹配条件的记录。这意味着，如果 ON 子句在左表中匹配到了 0 条记录，该连接仍然会返回至少一条记录，不过返回的记录中所有来自左表的字段都为 NULL。</p>\n<p>这就意味着，右连接会返回右表中的所有记录，加上左表中匹配到的记录，或者是 NULL （如果连接谓词无法匹配到任何记录的话）。</p>\n<h4 id=\"语法：-2\"><a href=\"#语法：-2\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><p>**　右连接**的基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT table1.column1, table2.column2...</span><br><span class=\"line\">FROM table1</span><br><span class=\"line\">RIGHT JOIN table2</span><br><span class=\"line\">ON table1.common_field = table2.common_field;</span><br></pre></td></tr></table></figure>\n\n<p>这里，给出的条件可以是任何根据你的需要写出的条件。</p>\n<h4 id=\"示例：-2\"><a href=\"#示例：-2\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><p>考虑如下两个表格，（a）CUSTOMERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |</span><br><span class=\"line\">| 2 | Khilan   | 25 | Delhi     | 1500.00 |</span><br><span class=\"line\">| 3 | kaushik  | 23 | Kota      | 2000.00 |</span><br><span class=\"line\">| 4 | Chaitali | 25 | Mumbai    | 6500.00 |</span><br><span class=\"line\">| 5 | Hardik   | 27 | Bhopal    | 8500.00 |</span><br><span class=\"line\">| 6 | Komal    | 22 | MP        | 4500.00 |</span><br><span class=\"line\">| 7 | Muffy    | 24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>（b）ORDERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-----+---------------------+-------------+--------+</span><br><span class=\"line\">| OID | DATE                | ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |</span><br><span class=\"line\">| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |</span><br><span class=\"line\">| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我们用右连接将这两个表连接在一起：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     RIGHT JOIN ORDERS</span><br><span class=\"line\">     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;</span><br></pre></td></tr></table></figure>\n\n<p>上述语句将会产生如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+------+----------+--------+---------------------+</span><br><span class=\"line\">| ID | NAME     | AMOUNT | DATE                | +------+----------+--------+---------------------+ |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    2 | Khilan |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 4 | Chaitali | 2060 | 2008-05-20 00:00:00 | +------+----------+--------+---------------------+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"全连接\"><a href=\"#全连接\" class=\"headerlink\" title=\"全连接\"></a>全连接</h3><p>**　全连接**将左连接和右连接的结果组合在一起。</p>\n<h4 id=\"语法：-3\"><a href=\"#语法：-3\" class=\"headerlink\" title=\"语法：\"></a>语法：</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT table1.column1, table2.column2...</span><br><span class=\"line\">FROM table1</span><br><span class=\"line\">FULL JOIN table2</span><br><span class=\"line\">ON table1.common_field = table2.common_field;</span><br></pre></td></tr></table></figure>\n\n<p>这里，给出的条件可以是任何根据你的需要写出的条件。</p>\n<h4 id=\"示例：-3\"><a href=\"#示例：-3\" class=\"headerlink\" title=\"示例：\"></a>示例：</h4><p>考虑如下两个表格，（a）CUSTOMERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |</span><br><span class=\"line\">| 2 | Khilan   | 25 | Delhi     | 1500.00 |</span><br><span class=\"line\">| 3 | kaushik  | 23 | Kota      | 2000.00 |</span><br><span class=\"line\">| 4 | Chaitali | 25 | Mumbai    | 6500.00 |</span><br><span class=\"line\">| 5 | Hardik   | 27 | Bhopal    | 8500.00 |</span><br><span class=\"line\">| 6 | Komal    | 22 | MP        | 4500.00 |</span><br><span class=\"line\">| 7 | Muffy    | 24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>（b）ORDERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-----+---------------------+-------------+--------+</span><br><span class=\"line\">| OID | DATE                | ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |</span><br><span class=\"line\">| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |</span><br><span class=\"line\">| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+</span><br></pre></td></tr></table></figure>\n\n<p>现在让我们用全连接将两个表连接在一起：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     FULL JOIN ORDERS</span><br><span class=\"line\">     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;</span><br></pre></td></tr></table></figure>\n\n<p>上述语句将会产生如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+------+----------+--------+---------------------+</span><br><span class=\"line\">| ID | NAME     | AMOUNT | DATE                | +------+----------+--------+---------------------+ |    1 | Ramesh |   NULL | NULL |</span><br><span class=\"line\">| 2 | Khilan   | 1560 | 2009-11-20 00:00:00 | |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    4 | Chaitali |   2060 | 2008-05-20 00:00:00 |</span><br><span class=\"line\">| 5 | Hardik   | NULL | NULL                | |    6 | Komal |   NULL | NULL |</span><br><span class=\"line\">| 7 | Muffy    | NULL | NULL                | |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    2 | Khilan |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 4 | Chaitali | 2060 | 2008-05-20 00:00:00 | +------+----------+--------+---------------------+</span><br></pre></td></tr></table></figure>\n\n<p>如果你所用的数据库不支持全连接，比如 MySQL，那么你可以使用 UNION ALL子句来将左连接和右连接结果组合在一起：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     LEFT JOIN ORDERS</span><br><span class=\"line\">     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID</span><br><span class=\"line\">UNION ALL</span><br><span class=\"line\">     SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     RIGHT JOIN ORDERS</span><br><span class=\"line\">     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"笛卡尔连接（交叉连接）\"><a href=\"#笛卡尔连接（交叉连接）\" class=\"headerlink\" title=\"笛卡尔连接（交叉连接）\"></a>笛卡尔连接（交叉连接）</h3><p>**　笛卡尔连接** 或者<strong>交叉连接</strong>返回两个或者更多的连接表中记录的笛卡尔乘积。也就是说，它相当于连接谓词总是为真或者缺少连接谓词的内连接。</p>\n<h4 id=\"语法：-4\"><a href=\"#语法：-4\" class=\"headerlink\" title=\"语法：\"></a>语法：<a href=\"https://ngrok.cn/sql/sql-610.html#%E8%AF%AD%E6%B3%95-4\"></a></h4><p>**　笛卡尔连接** 或者说<strong>交叉连接</strong>的基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT table1.column1, table2.column2...</span><br><span class=\"line\">FROM  table1, table2 [, table3 ]</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"示例：-4\"><a href=\"#示例：-4\" class=\"headerlink\" title=\"示例：\"></a>示例：<a href=\"https://ngrok.cn/sql/sql-610.html#%E7%A4%BA%E4%BE%8B-4\"></a></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">考虑如下两个表格，（a）CUSTOMERS 表：</span><br><span class=\"line\"></span><br><span class=\"line\">    +----+----------+-----+-----------+----------+</span><br><span class=\"line\">    | ID | NAME     | AGE | ADDRESS   | SALARY |</span><br><span class=\"line\">    +----+----------+-----+-----------+----------+</span><br><span class=\"line\">    | 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |</span><br><span class=\"line\">    | 2 | Khilan   | 25 | Delhi     | 1500.00 |</span><br><span class=\"line\">    | 3 | kaushik  | 23 | Kota      | 2000.00 |</span><br><span class=\"line\">    | 4 | Chaitali | 25 | Mumbai    | 6500.00 |</span><br><span class=\"line\">    | 5 | Hardik   | 27 | Bhopal    | 8500.00 |</span><br><span class=\"line\">    | 6 | Komal    | 22 | MP        | 4500.00 |</span><br><span class=\"line\">    | 7 | Muffy    | 24 | Indore    | 10000.00 |</span><br><span class=\"line\">    +----+----------+-----+-----------+----------+</span><br><span class=\"line\"></span><br><span class=\"line\">（b）ORDERS 表：</span><br><span class=\"line\"></span><br><span class=\"line\">    +-----+---------------------+-------------+--------+</span><br><span class=\"line\">    | OID | DATE                | ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |</span><br><span class=\"line\">    | 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |</span><br><span class=\"line\">    | 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我用内连接将这两个表连接在一起：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS, ORDERS;</span><br></pre></td></tr></table></figure>\n\n<p>上述语句将会产生如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+--------+---------------------+</span><br><span class=\"line\">| ID | NAME     | AMOUNT | DATE                | +----+----------+--------+---------------------+ |  1 | Ramesh |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 1 | Ramesh   | 1500 | 2009-10-08 00:00:00 | |  1 | Ramesh |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 1 | Ramesh   | 2060 | 2008-05-20 00:00:00 | |  2 | Khilan |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 2 | Khilan   | 1500 | 2009-10-08 00:00:00 | |  2 | Khilan |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 2 | Khilan   | 2060 | 2008-05-20 00:00:00 | |  3 | kaushik |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |  3 | kaushik |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 3 | kaushik  | 2060 | 2008-05-20 00:00:00 | |  4 | Chaitali |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 4 | Chaitali | 1500 | 2009-10-08 00:00:00 | |  4 | Chaitali |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 4 | Chaitali | 2060 | 2008-05-20 00:00:00 | |  5 | Hardik |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 5 | Hardik   | 1500 | 2009-10-08 00:00:00 | |  5 | Hardik |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 5 | Hardik   | 2060 | 2008-05-20 00:00:00 | |  6 | Komal |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 6 | Komal    | 1500 | 2009-10-08 00:00:00 | |  6 | Komal |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 6 | Komal    | 2060 | 2008-05-20 00:00:00 | |  7 | Muffy |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 7 | Muffy    | 1500 | 2009-10-08 00:00:00 | |  7 | Muffy |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 7 | Muffy    | 2060 | 2008-05-20 00:00:00 | +----+----------+--------+---------------------+</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 左连接","order":25,"_content":"\n## SQL 左连接 LEFT JOIN 关键字\n\n------\n\nSQL左链接LEFT JOIN关键字返回左表（表1）中的所有行，即使在右表（表2）中没有匹配。如果在正确的表中没有匹配，结果是NULL。\n\n### SQL LEFT JOIN 语法\n\n```\nSELECT column_name(s)                \nFROM table1                \nLEFT JOIN table2                \nON table1.column_name=table2.column_name;\n```\n\n或：\n\n```\nSELECT column_name(s)                \nFROM table1                \nLEFT OUTER JOIN table2                \nON table1.column_name=table2.column_name;\n```\n\n> **注释：**在一些数据库中，LEFT JOIN称为LEFT OUT ER JOIN。\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是 \"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName    | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders   | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo   | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n\n选自 \"Orders\" 表的数据：\n\n| OrderID | CustomerID | EmployeeID | OrderDate  | ShipperID |\n| :------ | :--------- | :--------- | :--------- | :-------- |\n| 10308   | 2          | 7          | 1996-09-18 | 3         |\n| 10309   | 37         | 3          | 1996-09-19 | 1         |\n| 10310   | 77         | 8          | 1996-09-20 | 2         |\n\n## SQL LEFT JOIN 实例\n\n------\n\n以下SQL语句将选择所有客户以及他们可能拥有的任何订单：\n\n示例：\n\n```\nSELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nLEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID\nORDER BY Customers.CustomerName;\n```\n\n**注释：**LEFT JOIN 关键字返回左表（Customers）中的所有行，即使在右边表（Orders）中没有匹配。\n","source":"wiki/sql/sentence/left.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 左连接\norder: 25\n---\n\n## SQL 左连接 LEFT JOIN 关键字\n\n------\n\nSQL左链接LEFT JOIN关键字返回左表（表1）中的所有行，即使在右表（表2）中没有匹配。如果在正确的表中没有匹配，结果是NULL。\n\n### SQL LEFT JOIN 语法\n\n```\nSELECT column_name(s)                \nFROM table1                \nLEFT JOIN table2                \nON table1.column_name=table2.column_name;\n```\n\n或：\n\n```\nSELECT column_name(s)                \nFROM table1                \nLEFT OUTER JOIN table2                \nON table1.column_name=table2.column_name;\n```\n\n> **注释：**在一些数据库中，LEFT JOIN称为LEFT OUT ER JOIN。\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是 \"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName    | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders   | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo   | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n\n选自 \"Orders\" 表的数据：\n\n| OrderID | CustomerID | EmployeeID | OrderDate  | ShipperID |\n| :------ | :--------- | :--------- | :--------- | :-------- |\n| 10308   | 2          | 7          | 1996-09-18 | 3         |\n| 10309   | 37         | 3          | 1996-09-19 | 1         |\n| 10310   | 77         | 8          | 1996-09-20 | 2         |\n\n## SQL LEFT JOIN 实例\n\n------\n\n以下SQL语句将选择所有客户以及他们可能拥有的任何订单：\n\n示例：\n\n```\nSELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nLEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID\nORDER BY Customers.CustomerName;\n```\n\n**注释：**LEFT JOIN 关键字返回左表（Customers）中的所有行，即使在右边表（Orders）中没有匹配。\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T01:16:19.495Z","path":"wiki/sql/sentence/left.html","comments":1,"_id":"cmbreopiv000q65x0auaz61zo","content":"<h2 id=\"SQL-左连接-LEFT-JOIN-关键字\"><a href=\"#SQL-左连接-LEFT-JOIN-关键字\" class=\"headerlink\" title=\"SQL 左连接 LEFT JOIN 关键字\"></a>SQL 左连接 LEFT JOIN 关键字</h2><hr>\n<p>SQL左链接LEFT JOIN关键字返回左表（表1）中的所有行，即使在右表（表2）中没有匹配。如果在正确的表中没有匹配，结果是NULL。</p>\n<h3 id=\"SQL-LEFT-JOIN-语法\"><a href=\"#SQL-LEFT-JOIN-语法\" class=\"headerlink\" title=\"SQL LEFT JOIN 语法\"></a>SQL LEFT JOIN 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)                </span><br><span class=\"line\">FROM table1                </span><br><span class=\"line\">LEFT JOIN table2                </span><br><span class=\"line\">ON table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure>\n\n<p>或：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)                </span><br><span class=\"line\">FROM table1                </span><br><span class=\"line\">LEFT OUTER JOIN table2                </span><br><span class=\"line\">ON table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注释：**在一些数据库中，LEFT JOIN称为LEFT OUT ER JOIN。</p>\n</blockquote>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是 “Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n</tbody></table>\n<p>选自 “Orders” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">EmployeeID</th>\n<th align=\"left\">OrderDate</th>\n<th align=\"left\">ShipperID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10308</td>\n<td align=\"left\">2</td>\n<td align=\"left\">7</td>\n<td align=\"left\">1996-09-18</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">10309</td>\n<td align=\"left\">37</td>\n<td align=\"left\">3</td>\n<td align=\"left\">1996-09-19</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">10310</td>\n<td align=\"left\">77</td>\n<td align=\"left\">8</td>\n<td align=\"left\">1996-09-20</td>\n<td align=\"left\">2</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-LEFT-JOIN-实例\"><a href=\"#SQL-LEFT-JOIN-实例\" class=\"headerlink\" title=\"SQL LEFT JOIN 实例\"></a>SQL LEFT JOIN 实例</h2><hr>\n<p>以下SQL语句将选择所有客户以及他们可能拥有的任何订单：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Customers.CustomerName, Orders.OrderID</span><br><span class=\"line\">FROM Customers</span><br><span class=\"line\">LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID</span><br><span class=\"line\">ORDER BY Customers.CustomerName;</span><br></pre></td></tr></table></figure>\n\n<p>**注释：**LEFT JOIN 关键字返回左表（Customers）中的所有行，即使在右边表（Orders）中没有匹配。</p>\n","excerpt":"","more":"<h2 id=\"SQL-左连接-LEFT-JOIN-关键字\"><a href=\"#SQL-左连接-LEFT-JOIN-关键字\" class=\"headerlink\" title=\"SQL 左连接 LEFT JOIN 关键字\"></a>SQL 左连接 LEFT JOIN 关键字</h2><hr>\n<p>SQL左链接LEFT JOIN关键字返回左表（表1）中的所有行，即使在右表（表2）中没有匹配。如果在正确的表中没有匹配，结果是NULL。</p>\n<h3 id=\"SQL-LEFT-JOIN-语法\"><a href=\"#SQL-LEFT-JOIN-语法\" class=\"headerlink\" title=\"SQL LEFT JOIN 语法\"></a>SQL LEFT JOIN 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)                </span><br><span class=\"line\">FROM table1                </span><br><span class=\"line\">LEFT JOIN table2                </span><br><span class=\"line\">ON table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure>\n\n<p>或：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)                </span><br><span class=\"line\">FROM table1                </span><br><span class=\"line\">LEFT OUTER JOIN table2                </span><br><span class=\"line\">ON table1.column_name=table2.column_name;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注释：**在一些数据库中，LEFT JOIN称为LEFT OUT ER JOIN。</p>\n</blockquote>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是 “Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n</tbody></table>\n<p>选自 “Orders” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">EmployeeID</th>\n<th align=\"left\">OrderDate</th>\n<th align=\"left\">ShipperID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10308</td>\n<td align=\"left\">2</td>\n<td align=\"left\">7</td>\n<td align=\"left\">1996-09-18</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">10309</td>\n<td align=\"left\">37</td>\n<td align=\"left\">3</td>\n<td align=\"left\">1996-09-19</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">10310</td>\n<td align=\"left\">77</td>\n<td align=\"left\">8</td>\n<td align=\"left\">1996-09-20</td>\n<td align=\"left\">2</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-LEFT-JOIN-实例\"><a href=\"#SQL-LEFT-JOIN-实例\" class=\"headerlink\" title=\"SQL LEFT JOIN 实例\"></a>SQL LEFT JOIN 实例</h2><hr>\n<p>以下SQL语句将选择所有客户以及他们可能拥有的任何订单：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Customers.CustomerName, Orders.OrderID</span><br><span class=\"line\">FROM Customers</span><br><span class=\"line\">LEFT JOIN Orders ON Customers.CustomerID = Orders.CustomerID</span><br><span class=\"line\">ORDER BY Customers.CustomerName;</span><br></pre></td></tr></table></figure>\n\n<p>**注释：**LEFT JOIN 关键字返回左表（Customers）中的所有行，即使在右边表（Orders）中没有匹配。</p>\n"},{"layout":"wiki","wiki":"sql","title":"SQL LIKE运算符","order":17,"_content":"\n## SQL LIKE 运算符\n\n------\n\n在WHERE子句中使用LIKE运算符来搜索列中的指定模式。\n\n有两个通配符与LIKE运算符一起使用：\n\n- `％` - 百分号表示零个，一个或多个字符\n- `_` - 下划线表示单个字符\n\n**　注意：** MS Access使用问号（`?`）而不是下划线（`_`）。\n\n百分号和下划线也可以组合使用！\n\n### SQL LIKE 语法\n\n```\nSELECT column1, column2, ...\nFROM table_name\nWHERE columnN LIKE pattern;\n```\n\n**　提示** ：您还可以使用AND或OR运算符组合任意数量的条件。\n\n下面是一些使用'％'和'_'通配符显示不同LIKE运算符的例子：\n\n| LIKE 运算符                     | 描述                                 |\n| :------------------------------ | :----------------------------------- |\n| WHERE CustomerName LIKE 'a%'    | 查找以\"a\"开头的任何值                |\n| WHERE CustomerName LIKE '%a'    | 查找以\"a\"结尾的任何值                |\n| WHERE CustomerName LIKE '%or%'  | 在任何位置查找任何具有\"or\"的值       |\n| WHERE CustomerName LIKE '_r%'   | 在第二个位置查找任何具有\"r\"的值      |\n| WHERE CustomerName LIKE 'a_%_%' | 查找以\"a\"开头且长度至少为3个字符的值 |\n| WHERE ContactName LIKE 'a%o'    | 找到以\"a\"开头，以\"o\"结尾的值         |\n\n## 演示数据库\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是\"Customers\"表中的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL LIKE 运算符实例\n\n------\n\n以下SQL语句选择以\"a\"开头的CustomerName的所有客户：\n\n**　代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE CustomerName LIKE 'a%';\n```\n\n以下SQL语句选择客户名称以\"a\"结尾的所有客户：\n\n**　代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE CustomerName LIKE '%a';\n```\n\n以下SQL语句选择客户名称在任何位置都具有\"or\"的所有客户：\n\n**　代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE CustomerName LIKE '%or%';\n```\n\n以下SQL语句选择客户名称在第二位具有\"r\"的所有客户：\n\n**　代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE CustomerName LIKE '_r%';\n```\n\n以下SQL语句选择客户名称以\"a\"开头且长度至少为3个字符的所有客户：\n\n**　代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE CustomerName LIKE 'a_%_%';\n```\n\n以下SQL语句选择联系人名称以\"a\"开头并以\"o\"结尾的所有客户：\n\n**　代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE ContactName LIKE 'a%o';\n```\n\n以下SQL语句选择客户名称不以\"a\"开头的所有客户：\n\n**　代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE CustomerName NOT LIKE 'a%';\n```\n\n以下SQL语句选择客户名称以\"a\"开头，以\"s\"结尾的5位字符的所有客户：\n\n**　代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE CustomerName LIKE 'a___s';\n```\n","source":"wiki/sql/sentence/like.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL LIKE运算符\norder: 17\n---\n\n## SQL LIKE 运算符\n\n------\n\n在WHERE子句中使用LIKE运算符来搜索列中的指定模式。\n\n有两个通配符与LIKE运算符一起使用：\n\n- `％` - 百分号表示零个，一个或多个字符\n- `_` - 下划线表示单个字符\n\n**　注意：** MS Access使用问号（`?`）而不是下划线（`_`）。\n\n百分号和下划线也可以组合使用！\n\n### SQL LIKE 语法\n\n```\nSELECT column1, column2, ...\nFROM table_name\nWHERE columnN LIKE pattern;\n```\n\n**　提示** ：您还可以使用AND或OR运算符组合任意数量的条件。\n\n下面是一些使用'％'和'_'通配符显示不同LIKE运算符的例子：\n\n| LIKE 运算符                     | 描述                                 |\n| :------------------------------ | :----------------------------------- |\n| WHERE CustomerName LIKE 'a%'    | 查找以\"a\"开头的任何值                |\n| WHERE CustomerName LIKE '%a'    | 查找以\"a\"结尾的任何值                |\n| WHERE CustomerName LIKE '%or%'  | 在任何位置查找任何具有\"or\"的值       |\n| WHERE CustomerName LIKE '_r%'   | 在第二个位置查找任何具有\"r\"的值      |\n| WHERE CustomerName LIKE 'a_%_%' | 查找以\"a\"开头且长度至少为3个字符的值 |\n| WHERE ContactName LIKE 'a%o'    | 找到以\"a\"开头，以\"o\"结尾的值         |\n\n## 演示数据库\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是\"Customers\"表中的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL LIKE 运算符实例\n\n------\n\n以下SQL语句选择以\"a\"开头的CustomerName的所有客户：\n\n**　代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE CustomerName LIKE 'a%';\n```\n\n以下SQL语句选择客户名称以\"a\"结尾的所有客户：\n\n**　代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE CustomerName LIKE '%a';\n```\n\n以下SQL语句选择客户名称在任何位置都具有\"or\"的所有客户：\n\n**　代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE CustomerName LIKE '%or%';\n```\n\n以下SQL语句选择客户名称在第二位具有\"r\"的所有客户：\n\n**　代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE CustomerName LIKE '_r%';\n```\n\n以下SQL语句选择客户名称以\"a\"开头且长度至少为3个字符的所有客户：\n\n**　代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE CustomerName LIKE 'a_%_%';\n```\n\n以下SQL语句选择联系人名称以\"a\"开头并以\"o\"结尾的所有客户：\n\n**　代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE ContactName LIKE 'a%o';\n```\n\n以下SQL语句选择客户名称不以\"a\"开头的所有客户：\n\n**　代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE CustomerName NOT LIKE 'a%';\n```\n\n以下SQL语句选择客户名称以\"a\"开头，以\"s\"结尾的5位字符的所有客户：\n\n**　代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE CustomerName LIKE 'a___s';\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-10T15:11:59.155Z","path":"wiki/sql/sentence/like.html","comments":1,"_id":"cmbreopiw000r65x05efuafjr","content":"<h2 id=\"SQL-LIKE-运算符\"><a href=\"#SQL-LIKE-运算符\" class=\"headerlink\" title=\"SQL LIKE 运算符\"></a>SQL LIKE 运算符</h2><hr>\n<p>在WHERE子句中使用LIKE运算符来搜索列中的指定模式。</p>\n<p>有两个通配符与LIKE运算符一起使用：</p>\n<ul>\n<li><code>％</code> - 百分号表示零个，一个或多个字符</li>\n<li><code>_</code> - 下划线表示单个字符</li>\n</ul>\n<p>**　注意：** MS Access使用问号（<code>?</code>）而不是下划线（<code>_</code>）。</p>\n<p>百分号和下划线也可以组合使用！</p>\n<h3 id=\"SQL-LIKE-语法\"><a href=\"#SQL-LIKE-语法\" class=\"headerlink\" title=\"SQL LIKE 语法\"></a>SQL LIKE 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2, ...</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE columnN LIKE pattern;</span><br></pre></td></tr></table></figure>\n\n<p>**　提示** ：您还可以使用AND或OR运算符组合任意数量的条件。</p>\n<p>下面是一些使用’％’和’_’通配符显示不同LIKE运算符的例子：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">LIKE 运算符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">WHERE CustomerName LIKE ‘a%’</td>\n<td align=\"left\">查找以”a”开头的任何值</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE CustomerName LIKE ‘%a’</td>\n<td align=\"left\">查找以”a”结尾的任何值</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE CustomerName LIKE ‘%or%’</td>\n<td align=\"left\">在任何位置查找任何具有”or”的值</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE CustomerName LIKE ‘_r%’</td>\n<td align=\"left\">在第二个位置查找任何具有”r”的值</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE CustomerName LIKE ‘a_%_%’</td>\n<td align=\"left\">查找以”a”开头且长度至少为3个字符的值</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE ContactName LIKE ‘a%o’</td>\n<td align=\"left\">找到以”a”开头，以”o”结尾的值</td>\n</tr>\n</tbody></table>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是”Customers”表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-LIKE-运算符实例\"><a href=\"#SQL-LIKE-运算符实例\" class=\"headerlink\" title=\"SQL LIKE 运算符实例\"></a>SQL LIKE 运算符实例</h2><hr>\n<p>以下SQL语句选择以”a”开头的CustomerName的所有客户：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE CustomerName LIKE &#x27;a%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句选择客户名称以”a”结尾的所有客户：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE CustomerName LIKE &#x27;%a&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句选择客户名称在任何位置都具有”or”的所有客户：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE CustomerName LIKE &#x27;%or%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句选择客户名称在第二位具有”r”的所有客户：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE CustomerName LIKE &#x27;_r%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句选择客户名称以”a”开头且长度至少为3个字符的所有客户：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE CustomerName LIKE &#x27;a_%_%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句选择联系人名称以”a”开头并以”o”结尾的所有客户：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE ContactName LIKE &#x27;a%o&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句选择客户名称不以”a”开头的所有客户：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE CustomerName NOT LIKE &#x27;a%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句选择客户名称以”a”开头，以”s”结尾的5位字符的所有客户：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE CustomerName LIKE &#x27;a___s&#x27;;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-LIKE-运算符\"><a href=\"#SQL-LIKE-运算符\" class=\"headerlink\" title=\"SQL LIKE 运算符\"></a>SQL LIKE 运算符</h2><hr>\n<p>在WHERE子句中使用LIKE运算符来搜索列中的指定模式。</p>\n<p>有两个通配符与LIKE运算符一起使用：</p>\n<ul>\n<li><code>％</code> - 百分号表示零个，一个或多个字符</li>\n<li><code>_</code> - 下划线表示单个字符</li>\n</ul>\n<p>**　注意：** MS Access使用问号（<code>?</code>）而不是下划线（<code>_</code>）。</p>\n<p>百分号和下划线也可以组合使用！</p>\n<h3 id=\"SQL-LIKE-语法\"><a href=\"#SQL-LIKE-语法\" class=\"headerlink\" title=\"SQL LIKE 语法\"></a>SQL LIKE 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2, ...</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE columnN LIKE pattern;</span><br></pre></td></tr></table></figure>\n\n<p>**　提示** ：您还可以使用AND或OR运算符组合任意数量的条件。</p>\n<p>下面是一些使用’％’和’_’通配符显示不同LIKE运算符的例子：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">LIKE 运算符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">WHERE CustomerName LIKE ‘a%’</td>\n<td align=\"left\">查找以”a”开头的任何值</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE CustomerName LIKE ‘%a’</td>\n<td align=\"left\">查找以”a”结尾的任何值</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE CustomerName LIKE ‘%or%’</td>\n<td align=\"left\">在任何位置查找任何具有”or”的值</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE CustomerName LIKE ‘_r%’</td>\n<td align=\"left\">在第二个位置查找任何具有”r”的值</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE CustomerName LIKE ‘a_%_%’</td>\n<td align=\"left\">查找以”a”开头且长度至少为3个字符的值</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE ContactName LIKE ‘a%o’</td>\n<td align=\"left\">找到以”a”开头，以”o”结尾的值</td>\n</tr>\n</tbody></table>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是”Customers”表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-LIKE-运算符实例\"><a href=\"#SQL-LIKE-运算符实例\" class=\"headerlink\" title=\"SQL LIKE 运算符实例\"></a>SQL LIKE 运算符实例</h2><hr>\n<p>以下SQL语句选择以”a”开头的CustomerName的所有客户：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE CustomerName LIKE &#x27;a%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句选择客户名称以”a”结尾的所有客户：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE CustomerName LIKE &#x27;%a&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句选择客户名称在任何位置都具有”or”的所有客户：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE CustomerName LIKE &#x27;%or%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句选择客户名称在第二位具有”r”的所有客户：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE CustomerName LIKE &#x27;_r%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句选择客户名称以”a”开头且长度至少为3个字符的所有客户：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE CustomerName LIKE &#x27;a_%_%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句选择联系人名称以”a”开头并以”o”结尾的所有客户：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE ContactName LIKE &#x27;a%o&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句选择客户名称不以”a”开头的所有客户：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE CustomerName NOT LIKE &#x27;a%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句选择客户名称以”a”开头，以”s”结尾的5位字符的所有客户：</p>\n<p>**　代码示例：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE CustomerName LIKE &#x27;a___s&#x27;;</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL TOP/LIMIT语句","order":16,"_content":"\n## SQL SELECT TOP 子句\n\n------\n\n- SELECT TOP 子句用于指定要返回的记录数量。\n- SELECT TOP子句在包含数千条记录的大型表上很有用。返回大量记录会影响性能。\n\n> **注：**并不是所有的数据库系统都支持SELECT TOP子句。MySQL支持LIMIT子句来选择有限数量的记录，而Oracle使用ROWNUM。\n\n### SQL Server / MS Access 语法\n\n```\nSELECT TOP number|percent column_name(s)\nFROM table_name\nWHERE condition;\n```\n\n## MySQL 和 Oracle 中的 SQL SELECT TOP 是等价的\n\n------\n\n### **MySQL语法：**\n\n```\nSELECT column_name(s)\nFROM table_name\nWHERE condition\nLIMIT number;\n```\n\n#### 实例\n\n```\nSELECT *\nFROM Persons\nLIMIT 5;\n```\n\n### Oracle 语法\n\n```\nSELECT column_name(s)\nFROM table_name\nWHERE ROWNUM <= number;\n```\n\n示例：\n\n```\nSELECT *\nFROM Persons\nWHERE ROWNUM <=5;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是\"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL SELECT TOP 实例\n\n------\n\n以下SQL语句从\"Customers\" 表中选择前两条记录：\n\n示例：\n\n```\nSELECT TOP 2 * FROM Customers;\n```\n\n## SQL SELECT TOP PERCENT 实例\n\n------\n\n以下SQL语句从 \"Customers\" 表中选择前50%的记录：\n\n示例：\n\n```\nSELECT TOP 50 PERCENT * FROM Customers;\n```\n\n## SQL TOP，LIMIT和ROWNUM示例\n\n以下SQL语句从\"Customers\"表中选择前三个记录：\n\n```\nSELECT TOP 3 * FROM Customers;\n```\n\n以下SQL语句显示了使用LIMIT子句的等效示例：\n\n```\nSELECT * FROM Customers\nLIMIT 3;\n```\n\n以下SQL语句显示了使用ROWNUM的等效示例：\n\n```\nSELECT * FROM Customers\nWHERE ROWNUM <= 3;\n```\n\n## SQL TOP PERCENT示例以下SQL语句从\"Customers\"表中选择记录的前50％：\n\n```\nSELECT TOP 50 PERCENT * FROM Customers;\n```\n\n## 添加一个条件\n\n------\n\n以下SQL语句从\"Customers\"表中选择国家为\"Germany\"的前三条记录：\n\n```\nSELECT TOP 3 * FROM Customers\nWHERE Country='Germany';\n```\n\n以下SQL语句显示了使用LIMIT子句的等效示例：\n\n```\nSELECT * FROM Customers\nWHERE Country='Germany'\nLIMIT 3;\n```\n\n以下SQL语句显示了使用ROWNUM的等效示例：\n\n```\nSELECT * FROM Customers\nWHERE Country='Germany' AND ROWNUM <= 3;\n```\n\n## 为什么要LIMIT你的查询结果\n\n------\n\nLIMIT作为一种简单的分页方法，主要是为了减少数据返回的时间，如果您查询一个非常大的表(例如一个有数十万或数百万行的表)而不使用限制，那么您可能会等待很长时间才能显示所有的结果，所以使用LIMIT可以减少查询数据返回的时间，提高效率。\n","source":"wiki/sql/sentence/limit.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL TOP/LIMIT语句\norder: 16\n---\n\n## SQL SELECT TOP 子句\n\n------\n\n- SELECT TOP 子句用于指定要返回的记录数量。\n- SELECT TOP子句在包含数千条记录的大型表上很有用。返回大量记录会影响性能。\n\n> **注：**并不是所有的数据库系统都支持SELECT TOP子句。MySQL支持LIMIT子句来选择有限数量的记录，而Oracle使用ROWNUM。\n\n### SQL Server / MS Access 语法\n\n```\nSELECT TOP number|percent column_name(s)\nFROM table_name\nWHERE condition;\n```\n\n## MySQL 和 Oracle 中的 SQL SELECT TOP 是等价的\n\n------\n\n### **MySQL语法：**\n\n```\nSELECT column_name(s)\nFROM table_name\nWHERE condition\nLIMIT number;\n```\n\n#### 实例\n\n```\nSELECT *\nFROM Persons\nLIMIT 5;\n```\n\n### Oracle 语法\n\n```\nSELECT column_name(s)\nFROM table_name\nWHERE ROWNUM <= number;\n```\n\n示例：\n\n```\nSELECT *\nFROM Persons\nWHERE ROWNUM <=5;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是\"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL SELECT TOP 实例\n\n------\n\n以下SQL语句从\"Customers\" 表中选择前两条记录：\n\n示例：\n\n```\nSELECT TOP 2 * FROM Customers;\n```\n\n## SQL SELECT TOP PERCENT 实例\n\n------\n\n以下SQL语句从 \"Customers\" 表中选择前50%的记录：\n\n示例：\n\n```\nSELECT TOP 50 PERCENT * FROM Customers;\n```\n\n## SQL TOP，LIMIT和ROWNUM示例\n\n以下SQL语句从\"Customers\"表中选择前三个记录：\n\n```\nSELECT TOP 3 * FROM Customers;\n```\n\n以下SQL语句显示了使用LIMIT子句的等效示例：\n\n```\nSELECT * FROM Customers\nLIMIT 3;\n```\n\n以下SQL语句显示了使用ROWNUM的等效示例：\n\n```\nSELECT * FROM Customers\nWHERE ROWNUM <= 3;\n```\n\n## SQL TOP PERCENT示例以下SQL语句从\"Customers\"表中选择记录的前50％：\n\n```\nSELECT TOP 50 PERCENT * FROM Customers;\n```\n\n## 添加一个条件\n\n------\n\n以下SQL语句从\"Customers\"表中选择国家为\"Germany\"的前三条记录：\n\n```\nSELECT TOP 3 * FROM Customers\nWHERE Country='Germany';\n```\n\n以下SQL语句显示了使用LIMIT子句的等效示例：\n\n```\nSELECT * FROM Customers\nWHERE Country='Germany'\nLIMIT 3;\n```\n\n以下SQL语句显示了使用ROWNUM的等效示例：\n\n```\nSELECT * FROM Customers\nWHERE Country='Germany' AND ROWNUM <= 3;\n```\n\n## 为什么要LIMIT你的查询结果\n\n------\n\nLIMIT作为一种简单的分页方法，主要是为了减少数据返回的时间，如果您查询一个非常大的表(例如一个有数十万或数百万行的表)而不使用限制，那么您可能会等待很长时间才能显示所有的结果，所以使用LIMIT可以减少查询数据返回的时间，提高效率。\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-10T14:36:39.290Z","path":"wiki/sql/sentence/limit.html","comments":1,"_id":"cmbreopiw000s65x0eqy77ayp","content":"<h2 id=\"SQL-SELECT-TOP-子句\"><a href=\"#SQL-SELECT-TOP-子句\" class=\"headerlink\" title=\"SQL SELECT TOP 子句\"></a>SQL SELECT TOP 子句</h2><hr>\n<ul>\n<li>SELECT TOP 子句用于指定要返回的记录数量。</li>\n<li>SELECT TOP子句在包含数千条记录的大型表上很有用。返回大量记录会影响性能。</li>\n</ul>\n<blockquote>\n<p>**注：**并不是所有的数据库系统都支持SELECT TOP子句。MySQL支持LIMIT子句来选择有限数量的记录，而Oracle使用ROWNUM。</p>\n</blockquote>\n<h3 id=\"SQL-Server-MS-Access-语法\"><a href=\"#SQL-Server-MS-Access-语法\" class=\"headerlink\" title=\"SQL Server &#x2F; MS Access 语法\"></a>SQL Server &#x2F; MS Access 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TOP number|percent column_name(s)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MySQL-和-Oracle-中的-SQL-SELECT-TOP-是等价的\"><a href=\"#MySQL-和-Oracle-中的-SQL-SELECT-TOP-是等价的\" class=\"headerlink\" title=\"MySQL 和 Oracle 中的 SQL SELECT TOP 是等价的\"></a>MySQL 和 Oracle 中的 SQL SELECT TOP 是等价的</h2><hr>\n<h3 id=\"MySQL语法：\"><a href=\"#MySQL语法：\" class=\"headerlink\" title=\"MySQL语法：\"></a><strong>MySQL语法：</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition</span><br><span class=\"line\">LIMIT number;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM Persons</span><br><span class=\"line\">LIMIT 5;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Oracle-语法\"><a href=\"#Oracle-语法\" class=\"headerlink\" title=\"Oracle 语法\"></a>Oracle 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE ROWNUM &lt;= number;</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM Persons</span><br><span class=\"line\">WHERE ROWNUM &lt;=5;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是”Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-SELECT-TOP-实例\"><a href=\"#SQL-SELECT-TOP-实例\" class=\"headerlink\" title=\"SQL SELECT TOP 实例\"></a>SQL SELECT TOP 实例</h2><hr>\n<p>以下SQL语句从”Customers” 表中选择前两条记录：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TOP 2 * FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SQL-SELECT-TOP-PERCENT-实例\"><a href=\"#SQL-SELECT-TOP-PERCENT-实例\" class=\"headerlink\" title=\"SQL SELECT TOP PERCENT 实例\"></a>SQL SELECT TOP PERCENT 实例</h2><hr>\n<p>以下SQL语句从 “Customers” 表中选择前50%的记录：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TOP 50 PERCENT * FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SQL-TOP，LIMIT和ROWNUM示例\"><a href=\"#SQL-TOP，LIMIT和ROWNUM示例\" class=\"headerlink\" title=\"SQL TOP，LIMIT和ROWNUM示例\"></a>SQL TOP，LIMIT和ROWNUM示例</h2><p>以下SQL语句从”Customers”表中选择前三个记录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TOP 3 * FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句显示了使用LIMIT子句的等效示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">LIMIT 3;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句显示了使用ROWNUM的等效示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE ROWNUM &lt;= 3;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SQL-TOP-PERCENT示例以下SQL语句从”Customers”表中选择记录的前50％：\"><a href=\"#SQL-TOP-PERCENT示例以下SQL语句从”Customers”表中选择记录的前50％：\" class=\"headerlink\" title=\"SQL TOP PERCENT示例以下SQL语句从”Customers”表中选择记录的前50％：\"></a>SQL TOP PERCENT示例以下SQL语句从”Customers”表中选择记录的前50％：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TOP 50 PERCENT * FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加一个条件\"><a href=\"#添加一个条件\" class=\"headerlink\" title=\"添加一个条件\"></a>添加一个条件</h2><hr>\n<p>以下SQL语句从”Customers”表中选择国家为”Germany”的前三条记录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TOP 3 * FROM Customers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句显示了使用LIMIT子句的等效示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27;</span><br><span class=\"line\">LIMIT 3;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句显示了使用ROWNUM的等效示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27; AND ROWNUM &lt;= 3;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"为什么要LIMIT你的查询结果\"><a href=\"#为什么要LIMIT你的查询结果\" class=\"headerlink\" title=\"为什么要LIMIT你的查询结果\"></a>为什么要LIMIT你的查询结果</h2><hr>\n<p>LIMIT作为一种简单的分页方法，主要是为了减少数据返回的时间，如果您查询一个非常大的表(例如一个有数十万或数百万行的表)而不使用限制，那么您可能会等待很长时间才能显示所有的结果，所以使用LIMIT可以减少查询数据返回的时间，提高效率。</p>\n","excerpt":"","more":"<h2 id=\"SQL-SELECT-TOP-子句\"><a href=\"#SQL-SELECT-TOP-子句\" class=\"headerlink\" title=\"SQL SELECT TOP 子句\"></a>SQL SELECT TOP 子句</h2><hr>\n<ul>\n<li>SELECT TOP 子句用于指定要返回的记录数量。</li>\n<li>SELECT TOP子句在包含数千条记录的大型表上很有用。返回大量记录会影响性能。</li>\n</ul>\n<blockquote>\n<p>**注：**并不是所有的数据库系统都支持SELECT TOP子句。MySQL支持LIMIT子句来选择有限数量的记录，而Oracle使用ROWNUM。</p>\n</blockquote>\n<h3 id=\"SQL-Server-MS-Access-语法\"><a href=\"#SQL-Server-MS-Access-语法\" class=\"headerlink\" title=\"SQL Server &#x2F; MS Access 语法\"></a>SQL Server &#x2F; MS Access 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TOP number|percent column_name(s)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MySQL-和-Oracle-中的-SQL-SELECT-TOP-是等价的\"><a href=\"#MySQL-和-Oracle-中的-SQL-SELECT-TOP-是等价的\" class=\"headerlink\" title=\"MySQL 和 Oracle 中的 SQL SELECT TOP 是等价的\"></a>MySQL 和 Oracle 中的 SQL SELECT TOP 是等价的</h2><hr>\n<h3 id=\"MySQL语法：\"><a href=\"#MySQL语法：\" class=\"headerlink\" title=\"MySQL语法：\"></a><strong>MySQL语法：</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition</span><br><span class=\"line\">LIMIT number;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM Persons</span><br><span class=\"line\">LIMIT 5;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Oracle-语法\"><a href=\"#Oracle-语法\" class=\"headerlink\" title=\"Oracle 语法\"></a>Oracle 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE ROWNUM &lt;= number;</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM Persons</span><br><span class=\"line\">WHERE ROWNUM &lt;=5;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是”Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-SELECT-TOP-实例\"><a href=\"#SQL-SELECT-TOP-实例\" class=\"headerlink\" title=\"SQL SELECT TOP 实例\"></a>SQL SELECT TOP 实例</h2><hr>\n<p>以下SQL语句从”Customers” 表中选择前两条记录：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TOP 2 * FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SQL-SELECT-TOP-PERCENT-实例\"><a href=\"#SQL-SELECT-TOP-PERCENT-实例\" class=\"headerlink\" title=\"SQL SELECT TOP PERCENT 实例\"></a>SQL SELECT TOP PERCENT 实例</h2><hr>\n<p>以下SQL语句从 “Customers” 表中选择前50%的记录：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TOP 50 PERCENT * FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SQL-TOP，LIMIT和ROWNUM示例\"><a href=\"#SQL-TOP，LIMIT和ROWNUM示例\" class=\"headerlink\" title=\"SQL TOP，LIMIT和ROWNUM示例\"></a>SQL TOP，LIMIT和ROWNUM示例</h2><p>以下SQL语句从”Customers”表中选择前三个记录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TOP 3 * FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句显示了使用LIMIT子句的等效示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">LIMIT 3;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句显示了使用ROWNUM的等效示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE ROWNUM &lt;= 3;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SQL-TOP-PERCENT示例以下SQL语句从”Customers”表中选择记录的前50％：\"><a href=\"#SQL-TOP-PERCENT示例以下SQL语句从”Customers”表中选择记录的前50％：\" class=\"headerlink\" title=\"SQL TOP PERCENT示例以下SQL语句从”Customers”表中选择记录的前50％：\"></a>SQL TOP PERCENT示例以下SQL语句从”Customers”表中选择记录的前50％：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TOP 50 PERCENT * FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加一个条件\"><a href=\"#添加一个条件\" class=\"headerlink\" title=\"添加一个条件\"></a>添加一个条件</h2><hr>\n<p>以下SQL语句从”Customers”表中选择国家为”Germany”的前三条记录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TOP 3 * FROM Customers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句显示了使用LIMIT子句的等效示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27;</span><br><span class=\"line\">LIMIT 3;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句显示了使用ROWNUM的等效示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27; AND ROWNUM &lt;= 3;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"为什么要LIMIT你的查询结果\"><a href=\"#为什么要LIMIT你的查询结果\" class=\"headerlink\" title=\"为什么要LIMIT你的查询结果\"></a>为什么要LIMIT你的查询结果</h2><hr>\n<p>LIMIT作为一种简单的分页方法，主要是为了减少数据返回的时间，如果您查询一个非常大的表(例如一个有数十万或数百万行的表)而不使用限制，那么您可能会等待很长时间才能显示所有的结果，所以使用LIMIT可以减少查询数据返回的时间，提高效率。</p>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 按关键字排序","order":8,"_content":"\n## SQL ORDER BY 关键字\n\n------\n\nORDER BY 关键字用于按升序或降序对结果集进行排序。\n\nORDER BY 关键字默认情况下按升序排序记录。\n\n如果需要按降序对记录进行排序，可以使用DESC关键字。\n\n### SQL ORDER BY 语法\n\n```\nSELECT column1, column2, ...\nFROM table_name\nORDER BY column1, column2, ... ASC|DESC;\n```\n\n您可以在ORDER BY子句中使用多个列，但要确保用于对该列进行排序的列应该在列表中。\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是 \"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## ORDER BY 实例\n\n------\n\n下面的 SQL 语句从 \"Customers\" 表中选取所有客户，并按照 \"Country\" 列排序：\n\n示例：\n\n```\nSELECT * FROM Customers\nORDER BY Country;\n```\n\n## ORDER BY DESC 实例\n\n------\n\n下面的 SQL 语句从 \"Customers\" 表中选取所有客户，并按照 \"Country\" 列降序排序：\n\n## 实例\n\n```\nSELECT * FROM Customers\nORDER BY Country DESC;\n```\n\n\n\n## ORDER BY 多列 实例1\n\n------\n\n下面的 SQL 语句从 \"Customers\" 表中选取所有客户，并按照 \"Country\" 和 \"CustomerName\" 列排序：\n\n示例：\n\n```\nSELECT * FROM Customers\nORDER BY Country, CustomerName;\n```\n\n\n\n## ORDER BY 多列 实例2\n\n------\n\n以下SQL语句从\"Customers\" 表中选择所有客户，按 \"Country\" 升序排列，并按 \"CustomerName\" 列降序排列：\n\n```\nSELECT * FROM Customers\nORDER BY Country ASC, CustomerName DESC;\n```\n","source":"wiki/sql/sentence/order.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 按关键字排序\norder: 8\n---\n\n## SQL ORDER BY 关键字\n\n------\n\nORDER BY 关键字用于按升序或降序对结果集进行排序。\n\nORDER BY 关键字默认情况下按升序排序记录。\n\n如果需要按降序对记录进行排序，可以使用DESC关键字。\n\n### SQL ORDER BY 语法\n\n```\nSELECT column1, column2, ...\nFROM table_name\nORDER BY column1, column2, ... ASC|DESC;\n```\n\n您可以在ORDER BY子句中使用多个列，但要确保用于对该列进行排序的列应该在列表中。\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是 \"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## ORDER BY 实例\n\n------\n\n下面的 SQL 语句从 \"Customers\" 表中选取所有客户，并按照 \"Country\" 列排序：\n\n示例：\n\n```\nSELECT * FROM Customers\nORDER BY Country;\n```\n\n## ORDER BY DESC 实例\n\n------\n\n下面的 SQL 语句从 \"Customers\" 表中选取所有客户，并按照 \"Country\" 列降序排序：\n\n## 实例\n\n```\nSELECT * FROM Customers\nORDER BY Country DESC;\n```\n\n\n\n## ORDER BY 多列 实例1\n\n------\n\n下面的 SQL 语句从 \"Customers\" 表中选取所有客户，并按照 \"Country\" 和 \"CustomerName\" 列排序：\n\n示例：\n\n```\nSELECT * FROM Customers\nORDER BY Country, CustomerName;\n```\n\n\n\n## ORDER BY 多列 实例2\n\n------\n\n以下SQL语句从\"Customers\" 表中选择所有客户，按 \"Country\" 升序排列，并按 \"CustomerName\" 列降序排列：\n\n```\nSELECT * FROM Customers\nORDER BY Country ASC, CustomerName DESC;\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-10T14:00:14.269Z","path":"wiki/sql/sentence/order.html","comments":1,"_id":"cmbreopix000u65x0gwsj8v0h","content":"<h2 id=\"SQL-ORDER-BY-关键字\"><a href=\"#SQL-ORDER-BY-关键字\" class=\"headerlink\" title=\"SQL ORDER BY 关键字\"></a>SQL ORDER BY 关键字</h2><hr>\n<p>ORDER BY 关键字用于按升序或降序对结果集进行排序。</p>\n<p>ORDER BY 关键字默认情况下按升序排序记录。</p>\n<p>如果需要按降序对记录进行排序，可以使用DESC关键字。</p>\n<h3 id=\"SQL-ORDER-BY-语法\"><a href=\"#SQL-ORDER-BY-语法\" class=\"headerlink\" title=\"SQL ORDER BY 语法\"></a>SQL ORDER BY 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2, ...</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">ORDER BY column1, column2, ... ASC|DESC;</span><br></pre></td></tr></table></figure>\n\n<p>您可以在ORDER BY子句中使用多个列，但要确保用于对该列进行排序的列应该在列表中。</p>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是 “Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"ORDER-BY-实例\"><a href=\"#ORDER-BY-实例\" class=\"headerlink\" title=\"ORDER BY 实例\"></a>ORDER BY 实例</h2><hr>\n<p>下面的 SQL 语句从 “Customers” 表中选取所有客户，并按照 “Country” 列排序：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">ORDER BY Country;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ORDER-BY-DESC-实例\"><a href=\"#ORDER-BY-DESC-实例\" class=\"headerlink\" title=\"ORDER BY DESC 实例\"></a>ORDER BY DESC 实例</h2><hr>\n<p>下面的 SQL 语句从 “Customers” 表中选取所有客户，并按照 “Country” 列降序排序：</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">ORDER BY Country DESC;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"ORDER-BY-多列-实例1\"><a href=\"#ORDER-BY-多列-实例1\" class=\"headerlink\" title=\"ORDER BY 多列 实例1\"></a>ORDER BY 多列 实例1</h2><hr>\n<p>下面的 SQL 语句从 “Customers” 表中选取所有客户，并按照 “Country” 和 “CustomerName” 列排序：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">ORDER BY Country, CustomerName;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"ORDER-BY-多列-实例2\"><a href=\"#ORDER-BY-多列-实例2\" class=\"headerlink\" title=\"ORDER BY 多列 实例2\"></a>ORDER BY 多列 实例2</h2><hr>\n<p>以下SQL语句从”Customers” 表中选择所有客户，按 “Country” 升序排列，并按 “CustomerName” 列降序排列：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">ORDER BY Country ASC, CustomerName DESC;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-ORDER-BY-关键字\"><a href=\"#SQL-ORDER-BY-关键字\" class=\"headerlink\" title=\"SQL ORDER BY 关键字\"></a>SQL ORDER BY 关键字</h2><hr>\n<p>ORDER BY 关键字用于按升序或降序对结果集进行排序。</p>\n<p>ORDER BY 关键字默认情况下按升序排序记录。</p>\n<p>如果需要按降序对记录进行排序，可以使用DESC关键字。</p>\n<h3 id=\"SQL-ORDER-BY-语法\"><a href=\"#SQL-ORDER-BY-语法\" class=\"headerlink\" title=\"SQL ORDER BY 语法\"></a>SQL ORDER BY 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2, ...</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">ORDER BY column1, column2, ... ASC|DESC;</span><br></pre></td></tr></table></figure>\n\n<p>您可以在ORDER BY子句中使用多个列，但要确保用于对该列进行排序的列应该在列表中。</p>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是 “Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"ORDER-BY-实例\"><a href=\"#ORDER-BY-实例\" class=\"headerlink\" title=\"ORDER BY 实例\"></a>ORDER BY 实例</h2><hr>\n<p>下面的 SQL 语句从 “Customers” 表中选取所有客户，并按照 “Country” 列排序：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">ORDER BY Country;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ORDER-BY-DESC-实例\"><a href=\"#ORDER-BY-DESC-实例\" class=\"headerlink\" title=\"ORDER BY DESC 实例\"></a>ORDER BY DESC 实例</h2><hr>\n<p>下面的 SQL 语句从 “Customers” 表中选取所有客户，并按照 “Country” 列降序排序：</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">ORDER BY Country DESC;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"ORDER-BY-多列-实例1\"><a href=\"#ORDER-BY-多列-实例1\" class=\"headerlink\" title=\"ORDER BY 多列 实例1\"></a>ORDER BY 多列 实例1</h2><hr>\n<p>下面的 SQL 语句从 “Customers” 表中选取所有客户，并按照 “Country” 和 “CustomerName” 列排序：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">ORDER BY Country, CustomerName;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"ORDER-BY-多列-实例2\"><a href=\"#ORDER-BY-多列-实例2\" class=\"headerlink\" title=\"ORDER BY 多列 实例2\"></a>ORDER BY 多列 实例2</h2><hr>\n<p>以下SQL语句从”Customers” 表中选择所有客户，按 “Country” 升序排列，并按 “CustomerName” 列降序排列：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">ORDER BY Country ASC, CustomerName DESC;</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL RBDMS概念","order":2,"_content":"\n## SQL RDBMS 概念\n\n------\n\nRDBMS是关系数据库管理系统(Relational Database Management System)的缩写。\n\nRDBMS是SQL的基础，也是所有现代数据库系统(如MS SQL Server、IBMDB2、Oracle、MySQL和MicrosoftAccess)的基础。\n\n关系数据库管理系统(Relational Database Management System，RDBMS)是一种基于E.F.Codd提出的关系模型的数据库管理系统。\n\n## 什么是表？\n\n------\n\nRDBMS中的数据存储在称为表的数据库对象中。这个表基本上是一个相关数据条目的集合，它由许多列和行组成。请记住，表是关系数据库中最常见和最简单的数据存储形式。\n\n下面的程序是Customers表的一个示例\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n## 什么是字段？\n\n------\n\n每个表都被分解成更小的实体，称为字段。Customers表中的字段由ID、姓名、年龄、地址和薪资组成。\n\n字段是表中的列，用于维护有关表中每条记录的特定信息。\n\n## 什么是记录或者行数据？\n\n------\n\n记录也称为数据行，即表中存在的每个单独的条目。例如，上面的Customers表中有7条记录。下面是Customers表中的单行数据或记录。\n\n```\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n记录是表中的水平实体。\n\n## 什么是列？\n\n------\n\n列是表中的垂直实体，其中包含与表中特定字段关联的所有信息。\n\n例如，Customers表中的一列是Address，它表示位置描述，如下所示：\n\n```\n+-----------+\n| ADDRESS   |\n+-----------+\n| Ahmedabad |\n| Delhi     |\n| Kota      |\n| Mumbai    |\n| Bhopal    |\n| MP        |\n| Indore    |\n+----+------+\n```\n\n## 什么是空值？\n\n------\n\n表中的空值是显示为空的字段中的值，这意味着具有空值的字段是没有值的字段。\n\n非常重要的一点是空值不同于零值或包含空格的字段。具有空值的字段是在创建记录时留空的字段。\n\n## SQL约束\n\n------\n\n约束是在表上的数据列上强制执行的规则。它们用于限制可以进入表中的数据类型。\n\n这确保了数据库中数据的准确性和可靠性。\n\n约束可以是列级别，也可以是表级别。列级约束仅应用于一列，而表级约束则应用于整个表。\n\n以下是sql−中可用的一些最常用的约束\n\n- ：保证列中数据不能有 NULL 值\n- ：提供该列数据未指定时所采用的默认值\n- ：保证列中的所有数据各不相同\n- ：唯一标识数据表中的行/记录\n- ：唯一标识其他表中的一条行/记录\n- ：此约束保证列中的所有值满足某一条件\n- ：用于在数据库中快速创建或检索数据\n\n约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）。\n\n## 数据完整性\n\n------\n\n每个关系数据库管理系统都存在以下类型的数据完整性：\n\n> 实体完整性−表中没有重复行。\n> 域完整性−通过限制值的类型、格式或范围来强制执行给定列的有效条目。\n> 引用完整性−不能删除其他记录使用的行。\n> 用户定义的完整性−强制执行一些不属于实体、域或引用完整性的特定业务规则。\n\n## 数据库规范化\n\n------\n\n数据库规范化是在数据库中有效地组织数据的过程。这个规范化过程有两个原因：\n\n- 消除冗余数据，例如，将相同的数据存储在多个表中。\n- 确保数据依赖关系是有意义的。\n\n这两个原因都是值得追求的目标，因为它们减少了数据库消耗的空间量，并确保了数据的逻辑存储。\n\n规范化由一系列指导原则组成，有助于指导您创建良好的数据库结构。\n\n规范化指导原则称为范式，范式的目的是组织数据库结构，使其符合第一范式、第二范式和第三范式的规则。\n\n你可以更长远的去选择第四范式，第五范式，等等，但一般来说，第三范式已经足够了。\n\n> 第一范式(1NF)\n> 第二范式(2NF)\n> 第三范式(3NF)\n","source":"wiki/sql/sentence/rdbms.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL RBDMS概念\norder: 2\n---\n\n## SQL RDBMS 概念\n\n------\n\nRDBMS是关系数据库管理系统(Relational Database Management System)的缩写。\n\nRDBMS是SQL的基础，也是所有现代数据库系统(如MS SQL Server、IBMDB2、Oracle、MySQL和MicrosoftAccess)的基础。\n\n关系数据库管理系统(Relational Database Management System，RDBMS)是一种基于E.F.Codd提出的关系模型的数据库管理系统。\n\n## 什么是表？\n\n------\n\nRDBMS中的数据存储在称为表的数据库对象中。这个表基本上是一个相关数据条目的集合，它由许多列和行组成。请记住，表是关系数据库中最常见和最简单的数据存储形式。\n\n下面的程序是Customers表的一个示例\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n## 什么是字段？\n\n------\n\n每个表都被分解成更小的实体，称为字段。Customers表中的字段由ID、姓名、年龄、地址和薪资组成。\n\n字段是表中的列，用于维护有关表中每条记录的特定信息。\n\n## 什么是记录或者行数据？\n\n------\n\n记录也称为数据行，即表中存在的每个单独的条目。例如，上面的Customers表中有7条记录。下面是Customers表中的单行数据或记录。\n\n```\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n记录是表中的水平实体。\n\n## 什么是列？\n\n------\n\n列是表中的垂直实体，其中包含与表中特定字段关联的所有信息。\n\n例如，Customers表中的一列是Address，它表示位置描述，如下所示：\n\n```\n+-----------+\n| ADDRESS   |\n+-----------+\n| Ahmedabad |\n| Delhi     |\n| Kota      |\n| Mumbai    |\n| Bhopal    |\n| MP        |\n| Indore    |\n+----+------+\n```\n\n## 什么是空值？\n\n------\n\n表中的空值是显示为空的字段中的值，这意味着具有空值的字段是没有值的字段。\n\n非常重要的一点是空值不同于零值或包含空格的字段。具有空值的字段是在创建记录时留空的字段。\n\n## SQL约束\n\n------\n\n约束是在表上的数据列上强制执行的规则。它们用于限制可以进入表中的数据类型。\n\n这确保了数据库中数据的准确性和可靠性。\n\n约束可以是列级别，也可以是表级别。列级约束仅应用于一列，而表级约束则应用于整个表。\n\n以下是sql−中可用的一些最常用的约束\n\n- ：保证列中数据不能有 NULL 值\n- ：提供该列数据未指定时所采用的默认值\n- ：保证列中的所有数据各不相同\n- ：唯一标识数据表中的行/记录\n- ：唯一标识其他表中的一条行/记录\n- ：此约束保证列中的所有值满足某一条件\n- ：用于在数据库中快速创建或检索数据\n\n约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）。\n\n## 数据完整性\n\n------\n\n每个关系数据库管理系统都存在以下类型的数据完整性：\n\n> 实体完整性−表中没有重复行。\n> 域完整性−通过限制值的类型、格式或范围来强制执行给定列的有效条目。\n> 引用完整性−不能删除其他记录使用的行。\n> 用户定义的完整性−强制执行一些不属于实体、域或引用完整性的特定业务规则。\n\n## 数据库规范化\n\n------\n\n数据库规范化是在数据库中有效地组织数据的过程。这个规范化过程有两个原因：\n\n- 消除冗余数据，例如，将相同的数据存储在多个表中。\n- 确保数据依赖关系是有意义的。\n\n这两个原因都是值得追求的目标，因为它们减少了数据库消耗的空间量，并确保了数据的逻辑存储。\n\n规范化由一系列指导原则组成，有助于指导您创建良好的数据库结构。\n\n规范化指导原则称为范式，范式的目的是组织数据库结构，使其符合第一范式、第二范式和第三范式的规则。\n\n你可以更长远的去选择第四范式，第五范式，等等，但一般来说，第三范式已经足够了。\n\n> 第一范式(1NF)\n> 第二范式(2NF)\n> 第三范式(3NF)\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-10T09:52:51.063Z","path":"wiki/sql/sentence/rdbms.html","comments":1,"_id":"cmbreopiy000v65x0epjpgixr","content":"<h2 id=\"SQL-RDBMS-概念\"><a href=\"#SQL-RDBMS-概念\" class=\"headerlink\" title=\"SQL RDBMS 概念\"></a>SQL RDBMS 概念</h2><hr>\n<p>RDBMS是关系数据库管理系统(Relational Database Management System)的缩写。</p>\n<p>RDBMS是SQL的基础，也是所有现代数据库系统(如MS SQL Server、IBMDB2、Oracle、MySQL和MicrosoftAccess)的基础。</p>\n<p>关系数据库管理系统(Relational Database Management System，RDBMS)是一种基于E.F.Codd提出的关系模型的数据库管理系统。</p>\n<h2 id=\"什么是表？\"><a href=\"#什么是表？\" class=\"headerlink\" title=\"什么是表？\"></a>什么是表？</h2><hr>\n<p>RDBMS中的数据存储在称为表的数据库对象中。这个表基本上是一个相关数据条目的集合，它由许多列和行组成。请记住，表是关系数据库中最常见和最简单的数据存储形式。</p>\n<p>下面的程序是Customers表的一个示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什么是字段？\"><a href=\"#什么是字段？\" class=\"headerlink\" title=\"什么是字段？\"></a>什么是字段？</h2><hr>\n<p>每个表都被分解成更小的实体，称为字段。Customers表中的字段由ID、姓名、年龄、地址和薪资组成。</p>\n<p>字段是表中的列，用于维护有关表中每条记录的特定信息。</p>\n<h2 id=\"什么是记录或者行数据？\"><a href=\"#什么是记录或者行数据？\" class=\"headerlink\" title=\"什么是记录或者行数据？\"></a>什么是记录或者行数据？</h2><hr>\n<p>记录也称为数据行，即表中存在的每个单独的条目。例如，上面的Customers表中有7条记录。下面是Customers表中的单行数据或记录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>记录是表中的水平实体。</p>\n<h2 id=\"什么是列？\"><a href=\"#什么是列？\" class=\"headerlink\" title=\"什么是列？\"></a>什么是列？</h2><hr>\n<p>列是表中的垂直实体，其中包含与表中特定字段关联的所有信息。</p>\n<p>例如，Customers表中的一列是Address，它表示位置描述，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-----------+</span><br><span class=\"line\">| ADDRESS   |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">| Ahmedabad |</span><br><span class=\"line\">| Delhi     |</span><br><span class=\"line\">| Kota      |</span><br><span class=\"line\">| Mumbai    |</span><br><span class=\"line\">| Bhopal    |</span><br><span class=\"line\">| MP        |</span><br><span class=\"line\">| Indore    |</span><br><span class=\"line\">+----+------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什么是空值？\"><a href=\"#什么是空值？\" class=\"headerlink\" title=\"什么是空值？\"></a>什么是空值？</h2><hr>\n<p>表中的空值是显示为空的字段中的值，这意味着具有空值的字段是没有值的字段。</p>\n<p>非常重要的一点是空值不同于零值或包含空格的字段。具有空值的字段是在创建记录时留空的字段。</p>\n<h2 id=\"SQL约束\"><a href=\"#SQL约束\" class=\"headerlink\" title=\"SQL约束\"></a>SQL约束</h2><hr>\n<p>约束是在表上的数据列上强制执行的规则。它们用于限制可以进入表中的数据类型。</p>\n<p>这确保了数据库中数据的准确性和可靠性。</p>\n<p>约束可以是列级别，也可以是表级别。列级约束仅应用于一列，而表级约束则应用于整个表。</p>\n<p>以下是sql−中可用的一些最常用的约束</p>\n<ul>\n<li>：保证列中数据不能有 NULL 值</li>\n<li>：提供该列数据未指定时所采用的默认值</li>\n<li>：保证列中的所有数据各不相同</li>\n<li>：唯一标识数据表中的行&#x2F;记录</li>\n<li>：唯一标识其他表中的一条行&#x2F;记录</li>\n<li>：此约束保证列中的所有值满足某一条件</li>\n<li>：用于在数据库中快速创建或检索数据</li>\n</ul>\n<p>约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）。</p>\n<h2 id=\"数据完整性\"><a href=\"#数据完整性\" class=\"headerlink\" title=\"数据完整性\"></a>数据完整性</h2><hr>\n<p>每个关系数据库管理系统都存在以下类型的数据完整性：</p>\n<blockquote>\n<p>实体完整性−表中没有重复行。<br>域完整性−通过限制值的类型、格式或范围来强制执行给定列的有效条目。<br>引用完整性−不能删除其他记录使用的行。<br>用户定义的完整性−强制执行一些不属于实体、域或引用完整性的特定业务规则。</p>\n</blockquote>\n<h2 id=\"数据库规范化\"><a href=\"#数据库规范化\" class=\"headerlink\" title=\"数据库规范化\"></a>数据库规范化</h2><hr>\n<p>数据库规范化是在数据库中有效地组织数据的过程。这个规范化过程有两个原因：</p>\n<ul>\n<li>消除冗余数据，例如，将相同的数据存储在多个表中。</li>\n<li>确保数据依赖关系是有意义的。</li>\n</ul>\n<p>这两个原因都是值得追求的目标，因为它们减少了数据库消耗的空间量，并确保了数据的逻辑存储。</p>\n<p>规范化由一系列指导原则组成，有助于指导您创建良好的数据库结构。</p>\n<p>规范化指导原则称为范式，范式的目的是组织数据库结构，使其符合第一范式、第二范式和第三范式的规则。</p>\n<p>你可以更长远的去选择第四范式，第五范式，等等，但一般来说，第三范式已经足够了。</p>\n<blockquote>\n<p>第一范式(1NF)<br>第二范式(2NF)<br>第三范式(3NF)</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"SQL-RDBMS-概念\"><a href=\"#SQL-RDBMS-概念\" class=\"headerlink\" title=\"SQL RDBMS 概念\"></a>SQL RDBMS 概念</h2><hr>\n<p>RDBMS是关系数据库管理系统(Relational Database Management System)的缩写。</p>\n<p>RDBMS是SQL的基础，也是所有现代数据库系统(如MS SQL Server、IBMDB2、Oracle、MySQL和MicrosoftAccess)的基础。</p>\n<p>关系数据库管理系统(Relational Database Management System，RDBMS)是一种基于E.F.Codd提出的关系模型的数据库管理系统。</p>\n<h2 id=\"什么是表？\"><a href=\"#什么是表？\" class=\"headerlink\" title=\"什么是表？\"></a>什么是表？</h2><hr>\n<p>RDBMS中的数据存储在称为表的数据库对象中。这个表基本上是一个相关数据条目的集合，它由许多列和行组成。请记住，表是关系数据库中最常见和最简单的数据存储形式。</p>\n<p>下面的程序是Customers表的一个示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什么是字段？\"><a href=\"#什么是字段？\" class=\"headerlink\" title=\"什么是字段？\"></a>什么是字段？</h2><hr>\n<p>每个表都被分解成更小的实体，称为字段。Customers表中的字段由ID、姓名、年龄、地址和薪资组成。</p>\n<p>字段是表中的列，用于维护有关表中每条记录的特定信息。</p>\n<h2 id=\"什么是记录或者行数据？\"><a href=\"#什么是记录或者行数据？\" class=\"headerlink\" title=\"什么是记录或者行数据？\"></a>什么是记录或者行数据？</h2><hr>\n<p>记录也称为数据行，即表中存在的每个单独的条目。例如，上面的Customers表中有7条记录。下面是Customers表中的单行数据或记录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>记录是表中的水平实体。</p>\n<h2 id=\"什么是列？\"><a href=\"#什么是列？\" class=\"headerlink\" title=\"什么是列？\"></a>什么是列？</h2><hr>\n<p>列是表中的垂直实体，其中包含与表中特定字段关联的所有信息。</p>\n<p>例如，Customers表中的一列是Address，它表示位置描述，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-----------+</span><br><span class=\"line\">| ADDRESS   |</span><br><span class=\"line\">+-----------+</span><br><span class=\"line\">| Ahmedabad |</span><br><span class=\"line\">| Delhi     |</span><br><span class=\"line\">| Kota      |</span><br><span class=\"line\">| Mumbai    |</span><br><span class=\"line\">| Bhopal    |</span><br><span class=\"line\">| MP        |</span><br><span class=\"line\">| Indore    |</span><br><span class=\"line\">+----+------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什么是空值？\"><a href=\"#什么是空值？\" class=\"headerlink\" title=\"什么是空值？\"></a>什么是空值？</h2><hr>\n<p>表中的空值是显示为空的字段中的值，这意味着具有空值的字段是没有值的字段。</p>\n<p>非常重要的一点是空值不同于零值或包含空格的字段。具有空值的字段是在创建记录时留空的字段。</p>\n<h2 id=\"SQL约束\"><a href=\"#SQL约束\" class=\"headerlink\" title=\"SQL约束\"></a>SQL约束</h2><hr>\n<p>约束是在表上的数据列上强制执行的规则。它们用于限制可以进入表中的数据类型。</p>\n<p>这确保了数据库中数据的准确性和可靠性。</p>\n<p>约束可以是列级别，也可以是表级别。列级约束仅应用于一列，而表级约束则应用于整个表。</p>\n<p>以下是sql−中可用的一些最常用的约束</p>\n<ul>\n<li>：保证列中数据不能有 NULL 值</li>\n<li>：提供该列数据未指定时所采用的默认值</li>\n<li>：保证列中的所有数据各不相同</li>\n<li>：唯一标识数据表中的行&#x2F;记录</li>\n<li>：唯一标识其他表中的一条行&#x2F;记录</li>\n<li>：此约束保证列中的所有值满足某一条件</li>\n<li>：用于在数据库中快速创建或检索数据</li>\n</ul>\n<p>约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）。</p>\n<h2 id=\"数据完整性\"><a href=\"#数据完整性\" class=\"headerlink\" title=\"数据完整性\"></a>数据完整性</h2><hr>\n<p>每个关系数据库管理系统都存在以下类型的数据完整性：</p>\n<blockquote>\n<p>实体完整性−表中没有重复行。<br>域完整性−通过限制值的类型、格式或范围来强制执行给定列的有效条目。<br>引用完整性−不能删除其他记录使用的行。<br>用户定义的完整性−强制执行一些不属于实体、域或引用完整性的特定业务规则。</p>\n</blockquote>\n<h2 id=\"数据库规范化\"><a href=\"#数据库规范化\" class=\"headerlink\" title=\"数据库规范化\"></a>数据库规范化</h2><hr>\n<p>数据库规范化是在数据库中有效地组织数据的过程。这个规范化过程有两个原因：</p>\n<ul>\n<li>消除冗余数据，例如，将相同的数据存储在多个表中。</li>\n<li>确保数据依赖关系是有意义的。</li>\n</ul>\n<p>这两个原因都是值得追求的目标，因为它们减少了数据库消耗的空间量，并确保了数据的逻辑存储。</p>\n<p>规范化由一系列指导原则组成，有助于指导您创建良好的数据库结构。</p>\n<p>规范化指导原则称为范式，范式的目的是组织数据库结构，使其符合第一范式、第二范式和第三范式的规则。</p>\n<p>你可以更长远的去选择第四范式，第五范式，等等，但一般来说，第三范式已经足够了。</p>\n<blockquote>\n<p>第一范式(1NF)<br>第二范式(2NF)<br>第三范式(3NF)</p>\n</blockquote>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 处理重复数据","order":48,"_content":"\n## SQL 处理重复数据\n\n------\n\n有时候，数据表中会存在相同的记录。在获取表中记录时，相较于取得重复记录来说，取得唯一的记录显然更有意义。\n\n我们之前讨论过的 SQL **DISTINCT** 关键字，与 SELECT 语句一起使用可以时，可以达到消除所有重复记录，只返回唯一记录的目的。\n\n## 语法\n\n------\n\n利用 DISTINCT 关键字来消除重复记录的基本语法如下所示：\n\n```\nSELECT DISTINCT column1, column2,.....columnN \nFROM table_name\nWHERE [condition]\n```\n\n示例：\n\n------\n\n考虑 CUSTOMERS 表，表中记录如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n首先，让我们先看一下 SELECT 语句是如何返回重复的薪水记录的：\n\n```\nSQL> SELECT SALARY FROM CUSTOMERS\n     ORDER BY SALARY;\n```\n\n运行上述语句将会得到以下结果，其中 SALARY 为 2000 的记录出现了两次，即来自原始数据表的重复记录：\n\n```\n+----------+\n| SALARY   |\n+----------+\n|  1500.00 |\n|  2000.00 |\n|  2000.00 |\n|  4500.00 |\n|  6500.00 |\n|  8500.00 |\n| 10000.00 |\n+----------+\n```\n\n现在，让我们在上面的 SELECT 查询中使用 DISTINCT 关键字，然后观察将会得到什么结果：\n\n```\nSQL> SELECT DISTINCT SALARY FROM CUSTOMERS\n     ORDER BY SALARY;\n```\n\n上述语句将会产生如下结果，这一再没有任何重复的条目了：\n\n```\n+----------+\n| SALARY   |\n+----------+\n|  1500.00 |\n|  2000.00 |\n|  4500.00 |\n|  6500.00 |\n|  8500.00 |\n| 10000.00 |\n+----------+\n```\n","source":"wiki/sql/sentence/repeat.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 处理重复数据\norder: 48\n---\n\n## SQL 处理重复数据\n\n------\n\n有时候，数据表中会存在相同的记录。在获取表中记录时，相较于取得重复记录来说，取得唯一的记录显然更有意义。\n\n我们之前讨论过的 SQL **DISTINCT** 关键字，与 SELECT 语句一起使用可以时，可以达到消除所有重复记录，只返回唯一记录的目的。\n\n## 语法\n\n------\n\n利用 DISTINCT 关键字来消除重复记录的基本语法如下所示：\n\n```\nSELECT DISTINCT column1, column2,.....columnN \nFROM table_name\nWHERE [condition]\n```\n\n示例：\n\n------\n\n考虑 CUSTOMERS 表，表中记录如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n首先，让我们先看一下 SELECT 语句是如何返回重复的薪水记录的：\n\n```\nSQL> SELECT SALARY FROM CUSTOMERS\n     ORDER BY SALARY;\n```\n\n运行上述语句将会得到以下结果，其中 SALARY 为 2000 的记录出现了两次，即来自原始数据表的重复记录：\n\n```\n+----------+\n| SALARY   |\n+----------+\n|  1500.00 |\n|  2000.00 |\n|  2000.00 |\n|  4500.00 |\n|  6500.00 |\n|  8500.00 |\n| 10000.00 |\n+----------+\n```\n\n现在，让我们在上面的 SELECT 查询中使用 DISTINCT 关键字，然后观察将会得到什么结果：\n\n```\nSQL> SELECT DISTINCT SALARY FROM CUSTOMERS\n     ORDER BY SALARY;\n```\n\n上述语句将会产生如下结果，这一再没有任何重复的条目了：\n\n```\n+----------+\n| SALARY   |\n+----------+\n|  1500.00 |\n|  2000.00 |\n|  4500.00 |\n|  6500.00 |\n|  8500.00 |\n| 10000.00 |\n+----------+\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T02:44:09.663Z","path":"wiki/sql/sentence/repeat.html","comments":1,"_id":"cmbreopiy000w65x0591jfgws","content":"<h2 id=\"SQL-处理重复数据\"><a href=\"#SQL-处理重复数据\" class=\"headerlink\" title=\"SQL 处理重复数据\"></a>SQL 处理重复数据</h2><hr>\n<p>有时候，数据表中会存在相同的记录。在获取表中记录时，相较于取得重复记录来说，取得唯一的记录显然更有意义。</p>\n<p>我们之前讨论过的 SQL <strong>DISTINCT</strong> 关键字，与 SELECT 语句一起使用可以时，可以达到消除所有重复记录，只返回唯一记录的目的。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><hr>\n<p>利用 DISTINCT 关键字来消除重复记录的基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT column1, column2,.....columnN </span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE [condition]</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<hr>\n<p>考虑 CUSTOMERS 表，表中记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>首先，让我们先看一下 SELECT 语句是如何返回重复的薪水记录的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT SALARY FROM CUSTOMERS</span><br><span class=\"line\">     ORDER BY SALARY;</span><br></pre></td></tr></table></figure>\n\n<p>运行上述语句将会得到以下结果，其中 SALARY 为 2000 的记录出现了两次，即来自原始数据表的重复记录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----------+</span><br><span class=\"line\">| SALARY   |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">|  1500.00 |</span><br><span class=\"line\">|  2000.00 |</span><br><span class=\"line\">|  2000.00 |</span><br><span class=\"line\">|  4500.00 |</span><br><span class=\"line\">|  6500.00 |</span><br><span class=\"line\">|  8500.00 |</span><br><span class=\"line\">| 10000.00 |</span><br><span class=\"line\">+----------+</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我们在上面的 SELECT 查询中使用 DISTINCT 关键字，然后观察将会得到什么结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT DISTINCT SALARY FROM CUSTOMERS</span><br><span class=\"line\">     ORDER BY SALARY;</span><br></pre></td></tr></table></figure>\n\n<p>上述语句将会产生如下结果，这一再没有任何重复的条目了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----------+</span><br><span class=\"line\">| SALARY   |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">|  1500.00 |</span><br><span class=\"line\">|  2000.00 |</span><br><span class=\"line\">|  4500.00 |</span><br><span class=\"line\">|  6500.00 |</span><br><span class=\"line\">|  8500.00 |</span><br><span class=\"line\">| 10000.00 |</span><br><span class=\"line\">+----------+</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-处理重复数据\"><a href=\"#SQL-处理重复数据\" class=\"headerlink\" title=\"SQL 处理重复数据\"></a>SQL 处理重复数据</h2><hr>\n<p>有时候，数据表中会存在相同的记录。在获取表中记录时，相较于取得重复记录来说，取得唯一的记录显然更有意义。</p>\n<p>我们之前讨论过的 SQL <strong>DISTINCT</strong> 关键字，与 SELECT 语句一起使用可以时，可以达到消除所有重复记录，只返回唯一记录的目的。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><hr>\n<p>利用 DISTINCT 关键字来消除重复记录的基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT column1, column2,.....columnN </span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE [condition]</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<hr>\n<p>考虑 CUSTOMERS 表，表中记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>首先，让我们先看一下 SELECT 语句是如何返回重复的薪水记录的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT SALARY FROM CUSTOMERS</span><br><span class=\"line\">     ORDER BY SALARY;</span><br></pre></td></tr></table></figure>\n\n<p>运行上述语句将会得到以下结果，其中 SALARY 为 2000 的记录出现了两次，即来自原始数据表的重复记录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----------+</span><br><span class=\"line\">| SALARY   |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">|  1500.00 |</span><br><span class=\"line\">|  2000.00 |</span><br><span class=\"line\">|  2000.00 |</span><br><span class=\"line\">|  4500.00 |</span><br><span class=\"line\">|  6500.00 |</span><br><span class=\"line\">|  8500.00 |</span><br><span class=\"line\">| 10000.00 |</span><br><span class=\"line\">+----------+</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我们在上面的 SELECT 查询中使用 DISTINCT 关键字，然后观察将会得到什么结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT DISTINCT SALARY FROM CUSTOMERS</span><br><span class=\"line\">     ORDER BY SALARY;</span><br></pre></td></tr></table></figure>\n\n<p>上述语句将会产生如下结果，这一再没有任何重复的条目了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----------+</span><br><span class=\"line\">| SALARY   |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">|  1500.00 |</span><br><span class=\"line\">|  2000.00 |</span><br><span class=\"line\">|  4500.00 |</span><br><span class=\"line\">|  6500.00 |</span><br><span class=\"line\">|  8500.00 |</span><br><span class=\"line\">| 10000.00 |</span><br><span class=\"line\">+----------+</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 完整外部连接","order":27,"_content":"\n## SQL FULL OUTER JOIN 关键字\n\n------\n\n当左（表1）或右（表2）表记录匹配时，FULL OUTER JOIN关键字将返回所有记录。\n\n**　注意：** FULL OUTER JOIN可能会返回非常大的结果集！\n\n### SQL FULL OUTER JOIN 语法\n\n```\nSELECT column_name(s)\nFROM table1\nFULL OUTER JOIN table2 ON table1.column_name = table2.column_name;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是\"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName    | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders   | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo   | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n\n选自 \"Orders\" 表的数据：\n\n| OrderID | CustomerID | EmployeeID | OrderDate  | ShipperID |\n| :------ | :--------- | :--------- | :--------- | :-------- |\n| 10308   | 2          | 7          | 1996-09-18 | 3         |\n| 10309   | 3          | 3          | 1996-09-19 | 1         |\n| 10310   | 77         | 8          | 1996-09-20 | 2         |\n\n## SQL FULL OUTER JOIN 实例\n\n------\n\n以下SQL语句选择所有客户和所有订单：\n\n```\nSELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nFULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID\nORDER BY Customers.CustomerName;\n```\n\n从这套结果中选择的数据如下：\n\n| CustomerName                       | OrderID |\n| :--------------------------------- | :------ |\n| Alfreds Futterkiste                |         |\n| Ana Trujillo Emparedados y helados | 10308   |\n| Antonio Moreno Taquería            | 10309   |\n|                                    | 10310   |\n\n**注意：** FULL OUTER JOIN关键字返回左表（Customers）中的所有行，以及右表（Orders）中的所有行。如果 \"Customers\"中的行中没有\"Orders\"中的匹配项，或者\"Orders\"中的行中没有 \"Customers\"中的匹配项，那么这些行也会列出。\n","source":"wiki/sql/sentence/outer.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 完整外部连接\norder: 27\n---\n\n## SQL FULL OUTER JOIN 关键字\n\n------\n\n当左（表1）或右（表2）表记录匹配时，FULL OUTER JOIN关键字将返回所有记录。\n\n**　注意：** FULL OUTER JOIN可能会返回非常大的结果集！\n\n### SQL FULL OUTER JOIN 语法\n\n```\nSELECT column_name(s)\nFROM table1\nFULL OUTER JOIN table2 ON table1.column_name = table2.column_name;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是\"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName    | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders   | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo   | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n\n选自 \"Orders\" 表的数据：\n\n| OrderID | CustomerID | EmployeeID | OrderDate  | ShipperID |\n| :------ | :--------- | :--------- | :--------- | :-------- |\n| 10308   | 2          | 7          | 1996-09-18 | 3         |\n| 10309   | 3          | 3          | 1996-09-19 | 1         |\n| 10310   | 77         | 8          | 1996-09-20 | 2         |\n\n## SQL FULL OUTER JOIN 实例\n\n------\n\n以下SQL语句选择所有客户和所有订单：\n\n```\nSELECT Customers.CustomerName, Orders.OrderID\nFROM Customers\nFULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID\nORDER BY Customers.CustomerName;\n```\n\n从这套结果中选择的数据如下：\n\n| CustomerName                       | OrderID |\n| :--------------------------------- | :------ |\n| Alfreds Futterkiste                |         |\n| Ana Trujillo Emparedados y helados | 10308   |\n| Antonio Moreno Taquería            | 10309   |\n|                                    | 10310   |\n\n**注意：** FULL OUTER JOIN关键字返回左表（Customers）中的所有行，以及右表（Orders）中的所有行。如果 \"Customers\"中的行中没有\"Orders\"中的匹配项，或者\"Orders\"中的行中没有 \"Customers\"中的匹配项，那么这些行也会列出。\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T01:22:06.069Z","path":"wiki/sql/sentence/outer.html","comments":1,"_id":"cmbreopiz000x65x0dp106nv2","content":"<h2 id=\"SQL-FULL-OUTER-JOIN-关键字\"><a href=\"#SQL-FULL-OUTER-JOIN-关键字\" class=\"headerlink\" title=\"SQL FULL OUTER JOIN 关键字\"></a>SQL FULL OUTER JOIN 关键字</h2><hr>\n<p>当左（表1）或右（表2）表记录匹配时，FULL OUTER JOIN关键字将返回所有记录。</p>\n<p>**　注意：** FULL OUTER JOIN可能会返回非常大的结果集！</p>\n<h3 id=\"SQL-FULL-OUTER-JOIN-语法\"><a href=\"#SQL-FULL-OUTER-JOIN-语法\" class=\"headerlink\" title=\"SQL FULL OUTER JOIN 语法\"></a>SQL FULL OUTER JOIN 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table1</span><br><span class=\"line\">FULL OUTER JOIN table2 ON table1.column_name = table2.column_name;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是”Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n</tbody></table>\n<p>选自 “Orders” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">EmployeeID</th>\n<th align=\"left\">OrderDate</th>\n<th align=\"left\">ShipperID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10308</td>\n<td align=\"left\">2</td>\n<td align=\"left\">7</td>\n<td align=\"left\">1996-09-18</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">10309</td>\n<td align=\"left\">3</td>\n<td align=\"left\">3</td>\n<td align=\"left\">1996-09-19</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">10310</td>\n<td align=\"left\">77</td>\n<td align=\"left\">8</td>\n<td align=\"left\">1996-09-20</td>\n<td align=\"left\">2</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-FULL-OUTER-JOIN-实例\"><a href=\"#SQL-FULL-OUTER-JOIN-实例\" class=\"headerlink\" title=\"SQL FULL OUTER JOIN 实例\"></a>SQL FULL OUTER JOIN 实例</h2><hr>\n<p>以下SQL语句选择所有客户和所有订单：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Customers.CustomerName, Orders.OrderID</span><br><span class=\"line\">FROM Customers</span><br><span class=\"line\">FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID</span><br><span class=\"line\">ORDER BY Customers.CustomerName;</span><br></pre></td></tr></table></figure>\n\n<p>从这套结果中选择的数据如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">OrderID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">10308</td>\n</tr>\n<tr>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">10309</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">10310</td>\n</tr>\n</tbody></table>\n<p><strong>注意：</strong> FULL OUTER JOIN关键字返回左表（Customers）中的所有行，以及右表（Orders）中的所有行。如果 “Customers”中的行中没有”Orders”中的匹配项，或者”Orders”中的行中没有 “Customers”中的匹配项，那么这些行也会列出。</p>\n","excerpt":"","more":"<h2 id=\"SQL-FULL-OUTER-JOIN-关键字\"><a href=\"#SQL-FULL-OUTER-JOIN-关键字\" class=\"headerlink\" title=\"SQL FULL OUTER JOIN 关键字\"></a>SQL FULL OUTER JOIN 关键字</h2><hr>\n<p>当左（表1）或右（表2）表记录匹配时，FULL OUTER JOIN关键字将返回所有记录。</p>\n<p>**　注意：** FULL OUTER JOIN可能会返回非常大的结果集！</p>\n<h3 id=\"SQL-FULL-OUTER-JOIN-语法\"><a href=\"#SQL-FULL-OUTER-JOIN-语法\" class=\"headerlink\" title=\"SQL FULL OUTER JOIN 语法\"></a>SQL FULL OUTER JOIN 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table1</span><br><span class=\"line\">FULL OUTER JOIN table2 ON table1.column_name = table2.column_name;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是”Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n</tbody></table>\n<p>选自 “Orders” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">EmployeeID</th>\n<th align=\"left\">OrderDate</th>\n<th align=\"left\">ShipperID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10308</td>\n<td align=\"left\">2</td>\n<td align=\"left\">7</td>\n<td align=\"left\">1996-09-18</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">10309</td>\n<td align=\"left\">3</td>\n<td align=\"left\">3</td>\n<td align=\"left\">1996-09-19</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">10310</td>\n<td align=\"left\">77</td>\n<td align=\"left\">8</td>\n<td align=\"left\">1996-09-20</td>\n<td align=\"left\">2</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-FULL-OUTER-JOIN-实例\"><a href=\"#SQL-FULL-OUTER-JOIN-实例\" class=\"headerlink\" title=\"SQL FULL OUTER JOIN 实例\"></a>SQL FULL OUTER JOIN 实例</h2><hr>\n<p>以下SQL语句选择所有客户和所有订单：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Customers.CustomerName, Orders.OrderID</span><br><span class=\"line\">FROM Customers</span><br><span class=\"line\">FULL OUTER JOIN Orders ON Customers.CustomerID=Orders.CustomerID</span><br><span class=\"line\">ORDER BY Customers.CustomerName;</span><br></pre></td></tr></table></figure>\n\n<p>从这套结果中选择的数据如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">OrderID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">10308</td>\n</tr>\n<tr>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">10309</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">10310</td>\n</tr>\n</tbody></table>\n<p><strong>注意：</strong> FULL OUTER JOIN关键字返回左表（Customers）中的所有行，以及右表（Orders）中的所有行。如果 “Customers”中的行中没有”Orders”中的匹配项，或者”Orders”中的行中没有 “Customers”中的匹配项，那么这些行也会列出。</p>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 右连接","order":26,"_content":"\n## SQL右连接 RIGHT JOIN 关键字\n\n------\n\nSQL右链接 RIGHT JOIN 关键字返回右表（table2）的所有行，即使在左表（table1）上没有匹配。如果左表没有匹配，则结果为NULL。\n\n### SQL RIGHT JOIN 语法\n\n```\nSELECT column_name(s)\nFROM table1\nRIGHT JOIN table2 ON table1.column_name = table2.column_name;\n```\n\n> **注释：**在一些数据库中，RIGHT JOIN 称为 RIGHT OUTER JOIN。\n\n------\n\n## 演示数据库\n\n在本教程中，我们将使用着名的Northwind示例数据库。\n\n以下是\"Orders\"表中的一个选项：\n\n| OrderID | CustomerID | EmployeeID | OrderDate  | ShipperID |\n| :------ | :--------- | :--------- | :--------- | :-------- |\n| 10308   | 2          | 7          | 1996-09-18 | 3         |\n| 10309   | 37         | 3          | 1996-09-19 | 1         |\n| 10310   | 77         | 8          | 1996-09-20 | 2         |\n\n并从\"Employees\" t表中选择：\n\n| EmployeeID | LastName  | FirstName | BirthDate | Photo      |\n| :--------- | :-------- | :-------- | :-------- | :--------- |\n| 1          | Davolio   | Nancy     | 12/8/1968 | EmpID1.pic |\n| 2          | Fuller    | Andrew    | 2/19/1952 | EmpID2.pic |\n| 3          | Leverling | Janet     | 8/30/1963 | EmpID3.pic |\n\n## SQL RIGHT JOIN 实例\n\n------\n\n以下SQL语句将返回所有雇员以及他们可能已经放置的任何订单：\n\n示例：\n\n```\nSELECT Orders.OrderID, Employees.LastName, Employees.FirstName\nFROM Orders\nRIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nORDER BY Orders.OrderID;\n```\n\n**注释：**RIGHT JOIN 关键字返回右表（Employees）的所有行，即使在左表（Orders）中没有匹配。\n","source":"wiki/sql/sentence/right.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 右连接\norder: 26\n---\n\n## SQL右连接 RIGHT JOIN 关键字\n\n------\n\nSQL右链接 RIGHT JOIN 关键字返回右表（table2）的所有行，即使在左表（table1）上没有匹配。如果左表没有匹配，则结果为NULL。\n\n### SQL RIGHT JOIN 语法\n\n```\nSELECT column_name(s)\nFROM table1\nRIGHT JOIN table2 ON table1.column_name = table2.column_name;\n```\n\n> **注释：**在一些数据库中，RIGHT JOIN 称为 RIGHT OUTER JOIN。\n\n------\n\n## 演示数据库\n\n在本教程中，我们将使用着名的Northwind示例数据库。\n\n以下是\"Orders\"表中的一个选项：\n\n| OrderID | CustomerID | EmployeeID | OrderDate  | ShipperID |\n| :------ | :--------- | :--------- | :--------- | :-------- |\n| 10308   | 2          | 7          | 1996-09-18 | 3         |\n| 10309   | 37         | 3          | 1996-09-19 | 1         |\n| 10310   | 77         | 8          | 1996-09-20 | 2         |\n\n并从\"Employees\" t表中选择：\n\n| EmployeeID | LastName  | FirstName | BirthDate | Photo      |\n| :--------- | :-------- | :-------- | :-------- | :--------- |\n| 1          | Davolio   | Nancy     | 12/8/1968 | EmpID1.pic |\n| 2          | Fuller    | Andrew    | 2/19/1952 | EmpID2.pic |\n| 3          | Leverling | Janet     | 8/30/1963 | EmpID3.pic |\n\n## SQL RIGHT JOIN 实例\n\n------\n\n以下SQL语句将返回所有雇员以及他们可能已经放置的任何订单：\n\n示例：\n\n```\nSELECT Orders.OrderID, Employees.LastName, Employees.FirstName\nFROM Orders\nRIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nORDER BY Orders.OrderID;\n```\n\n**注释：**RIGHT JOIN 关键字返回右表（Employees）的所有行，即使在左表（Orders）中没有匹配。\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T01:18:14.024Z","path":"wiki/sql/sentence/right.html","comments":1,"_id":"cmbreopiz000y65x00dd1axrw","content":"<h2 id=\"SQL右连接-RIGHT-JOIN-关键字\"><a href=\"#SQL右连接-RIGHT-JOIN-关键字\" class=\"headerlink\" title=\"SQL右连接 RIGHT JOIN 关键字\"></a>SQL右连接 RIGHT JOIN 关键字</h2><hr>\n<p>SQL右链接 RIGHT JOIN 关键字返回右表（table2）的所有行，即使在左表（table1）上没有匹配。如果左表没有匹配，则结果为NULL。</p>\n<h3 id=\"SQL-RIGHT-JOIN-语法\"><a href=\"#SQL-RIGHT-JOIN-语法\" class=\"headerlink\" title=\"SQL RIGHT JOIN 语法\"></a>SQL RIGHT JOIN 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table1</span><br><span class=\"line\">RIGHT JOIN table2 ON table1.column_name = table2.column_name;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注释：**在一些数据库中，RIGHT JOIN 称为 RIGHT OUTER JOIN。</p>\n</blockquote>\n<hr>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><p>在本教程中，我们将使用着名的Northwind示例数据库。</p>\n<p>以下是”Orders”表中的一个选项：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">EmployeeID</th>\n<th align=\"left\">OrderDate</th>\n<th align=\"left\">ShipperID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10308</td>\n<td align=\"left\">2</td>\n<td align=\"left\">7</td>\n<td align=\"left\">1996-09-18</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">10309</td>\n<td align=\"left\">37</td>\n<td align=\"left\">3</td>\n<td align=\"left\">1996-09-19</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">10310</td>\n<td align=\"left\">77</td>\n<td align=\"left\">8</td>\n<td align=\"left\">1996-09-20</td>\n<td align=\"left\">2</td>\n</tr>\n</tbody></table>\n<p>并从”Employees” t表中选择：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">EmployeeID</th>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">BirthDate</th>\n<th align=\"left\">Photo</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Davolio</td>\n<td align=\"left\">Nancy</td>\n<td align=\"left\">12&#x2F;8&#x2F;1968</td>\n<td align=\"left\">EmpID1.pic</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Fuller</td>\n<td align=\"left\">Andrew</td>\n<td align=\"left\">2&#x2F;19&#x2F;1952</td>\n<td align=\"left\">EmpID2.pic</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Leverling</td>\n<td align=\"left\">Janet</td>\n<td align=\"left\">8&#x2F;30&#x2F;1963</td>\n<td align=\"left\">EmpID3.pic</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-RIGHT-JOIN-实例\"><a href=\"#SQL-RIGHT-JOIN-实例\" class=\"headerlink\" title=\"SQL RIGHT JOIN 实例\"></a>SQL RIGHT JOIN 实例</h2><hr>\n<p>以下SQL语句将返回所有雇员以及他们可能已经放置的任何订单：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Orders.OrderID, Employees.LastName, Employees.FirstName</span><br><span class=\"line\">FROM Orders</span><br><span class=\"line\">RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID</span><br><span class=\"line\">ORDER BY Orders.OrderID;</span><br></pre></td></tr></table></figure>\n\n<p>**注释：**RIGHT JOIN 关键字返回右表（Employees）的所有行，即使在左表（Orders）中没有匹配。</p>\n","excerpt":"","more":"<h2 id=\"SQL右连接-RIGHT-JOIN-关键字\"><a href=\"#SQL右连接-RIGHT-JOIN-关键字\" class=\"headerlink\" title=\"SQL右连接 RIGHT JOIN 关键字\"></a>SQL右连接 RIGHT JOIN 关键字</h2><hr>\n<p>SQL右链接 RIGHT JOIN 关键字返回右表（table2）的所有行，即使在左表（table1）上没有匹配。如果左表没有匹配，则结果为NULL。</p>\n<h3 id=\"SQL-RIGHT-JOIN-语法\"><a href=\"#SQL-RIGHT-JOIN-语法\" class=\"headerlink\" title=\"SQL RIGHT JOIN 语法\"></a>SQL RIGHT JOIN 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table1</span><br><span class=\"line\">RIGHT JOIN table2 ON table1.column_name = table2.column_name;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注释：**在一些数据库中，RIGHT JOIN 称为 RIGHT OUTER JOIN。</p>\n</blockquote>\n<hr>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><p>在本教程中，我们将使用着名的Northwind示例数据库。</p>\n<p>以下是”Orders”表中的一个选项：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">EmployeeID</th>\n<th align=\"left\">OrderDate</th>\n<th align=\"left\">ShipperID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10308</td>\n<td align=\"left\">2</td>\n<td align=\"left\">7</td>\n<td align=\"left\">1996-09-18</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">10309</td>\n<td align=\"left\">37</td>\n<td align=\"left\">3</td>\n<td align=\"left\">1996-09-19</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">10310</td>\n<td align=\"left\">77</td>\n<td align=\"left\">8</td>\n<td align=\"left\">1996-09-20</td>\n<td align=\"left\">2</td>\n</tr>\n</tbody></table>\n<p>并从”Employees” t表中选择：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">EmployeeID</th>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">BirthDate</th>\n<th align=\"left\">Photo</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Davolio</td>\n<td align=\"left\">Nancy</td>\n<td align=\"left\">12&#x2F;8&#x2F;1968</td>\n<td align=\"left\">EmpID1.pic</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Fuller</td>\n<td align=\"left\">Andrew</td>\n<td align=\"left\">2&#x2F;19&#x2F;1952</td>\n<td align=\"left\">EmpID2.pic</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Leverling</td>\n<td align=\"left\">Janet</td>\n<td align=\"left\">8&#x2F;30&#x2F;1963</td>\n<td align=\"left\">EmpID3.pic</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-RIGHT-JOIN-实例\"><a href=\"#SQL-RIGHT-JOIN-实例\" class=\"headerlink\" title=\"SQL RIGHT JOIN 实例\"></a>SQL RIGHT JOIN 实例</h2><hr>\n<p>以下SQL语句将返回所有雇员以及他们可能已经放置的任何订单：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Orders.OrderID, Employees.LastName, Employees.FirstName</span><br><span class=\"line\">FROM Orders</span><br><span class=\"line\">RIGHT JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID</span><br><span class=\"line\">ORDER BY Orders.OrderID;</span><br></pre></td></tr></table></figure>\n\n<p>**注释：**RIGHT JOIN 关键字返回右表（Employees）的所有行，即使在左表（Orders）中没有匹配。</p>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 自连接","order":28,"_content":"\n## SQL自连接\n\n------\n\n自联接是一种常规联接，但表本身是连接的。\n\n### Self JOIN语法\n\n```\nSELECT column_name(s)\nFROM table1 T1, table1 T2\nWHERE condition;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用着名的Northwind示例数据库。\n\n以下是\"Customers\"表中的选择：\n\n| CustomerID | CustomerName                       | ContactName    | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders   | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo   | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n\n## SQL Self JOIN示例\n\n------\n\n以下SQL语句匹配来自同一城市的客户：\n\n示例\n\n```\nSELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City\nFROM Customers A, Customers B\nWHERE A.CustomerID <> B.CustomerID\nAND A.City = B.City \nORDER BY A.City;\n```\n","source":"wiki/sql/sentence/self.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 自连接\norder: 28\n---\n\n## SQL自连接\n\n------\n\n自联接是一种常规联接，但表本身是连接的。\n\n### Self JOIN语法\n\n```\nSELECT column_name(s)\nFROM table1 T1, table1 T2\nWHERE condition;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用着名的Northwind示例数据库。\n\n以下是\"Customers\"表中的选择：\n\n| CustomerID | CustomerName                       | ContactName    | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders   | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo   | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n\n## SQL Self JOIN示例\n\n------\n\n以下SQL语句匹配来自同一城市的客户：\n\n示例\n\n```\nSELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City\nFROM Customers A, Customers B\nWHERE A.CustomerID <> B.CustomerID\nAND A.City = B.City \nORDER BY A.City;\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T01:24:46.019Z","path":"wiki/sql/sentence/self.html","comments":1,"_id":"cmbreopj0000z65x00byectr4","content":"<h2 id=\"SQL自连接\"><a href=\"#SQL自连接\" class=\"headerlink\" title=\"SQL自连接\"></a>SQL自连接</h2><hr>\n<p>自联接是一种常规联接，但表本身是连接的。</p>\n<h3 id=\"Self-JOIN语法\"><a href=\"#Self-JOIN语法\" class=\"headerlink\" title=\"Self JOIN语法\"></a>Self JOIN语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table1 T1, table1 T2</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用着名的Northwind示例数据库。</p>\n<p>以下是”Customers”表中的选择：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-Self-JOIN示例\"><a href=\"#SQL-Self-JOIN示例\" class=\"headerlink\" title=\"SQL Self JOIN示例\"></a>SQL Self JOIN示例</h2><hr>\n<p>以下SQL语句匹配来自同一城市的客户：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City</span><br><span class=\"line\">FROM Customers A, Customers B</span><br><span class=\"line\">WHERE A.CustomerID &lt;&gt; B.CustomerID</span><br><span class=\"line\">AND A.City = B.City </span><br><span class=\"line\">ORDER BY A.City;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL自连接\"><a href=\"#SQL自连接\" class=\"headerlink\" title=\"SQL自连接\"></a>SQL自连接</h2><hr>\n<p>自联接是一种常规联接，但表本身是连接的。</p>\n<h3 id=\"Self-JOIN语法\"><a href=\"#Self-JOIN语法\" class=\"headerlink\" title=\"Self JOIN语法\"></a>Self JOIN语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table1 T1, table1 T2</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用着名的Northwind示例数据库。</p>\n<p>以下是”Customers”表中的选择：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-Self-JOIN示例\"><a href=\"#SQL-Self-JOIN示例\" class=\"headerlink\" title=\"SQL Self JOIN示例\"></a>SQL Self JOIN示例</h2><hr>\n<p>以下SQL语句匹配来自同一城市的客户：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT A.CustomerName AS CustomerName1, B.CustomerName AS CustomerName2, A.City</span><br><span class=\"line\">FROM Customers A, Customers B</span><br><span class=\"line\">WHERE A.CustomerID &lt;&gt; B.CustomerID</span><br><span class=\"line\">AND A.City = B.City </span><br><span class=\"line\">ORDER BY A.City;</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 语句快速参考","order":22,"_content":"\n## SQL语句快速参考\n\n------\n\n| SQL 语句        | 语法                                                         |\n| :-------------- | :----------------------------------------------------------- |\n| AND / OR        | SELECT column_name(s) FROM table_name WHERE condition AND\\|OR condition |\n| ALTER TABLE     | ALTER TABLE table_name ADD column_name datatype or ALTER TABLE table_name DROP COLUMN column_name |\n| AS (alias)      | SELECT column_name AS column_alias FROM table_name or SELECT column_name FROM table_name AS table_alias |\n| BETWEEN         | SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2 |\n| CREATE DATABASE | CREATE DATABASE database_name                                |\n| CREATE TABLE    | CREATE TABLE table_name ( column_name1 data_type, column_name2 data_type, column_name2 data_type, ... ) |\n| CREATE INDEX    | CREATE INDEX index_name ON table_name (column_name) or CREATE UNIQUE INDEX index_name ON table_name (column_name) |\n| CREATE VIEW     | CREATE VIEW view_name AS SELECT column_name(s) FROM table_name WHERE condition |\n| DELETE          | DELETE FROM table_name WHERE some_column=some_value or DELETE FROM table_name (**Note:**Deletes the entire table!!) DELETE * FROM table_name (**Note:**Deletes the entire table!!) |\n| DROP DATABASE   | DROP DATABASE database_name                                  |\n| DROP INDEX      | DROP INDEX table_name.index_name (SQL Server) DROP INDEX index_name ON table_name (MS Access) DROP INDEX index_name (DB2/Oracle) ALTER TABLE table_name DROP INDEX index_name (MySQL) |\n| DROP TABLE      | DROP TABLE table_name                                        |\n| GROUP BY        | SELECT column_name, aggregate_function(column_name) FROM table_name WHERE column_name operator value GROUP BY column_name |\n| HAVING          | SELECT column_name, aggregate_function(column_name) FROM table_name WHERE column_name operator value GROUP BY column_name HAVING aggregate_function(column_name) operator value |\n| IN              | SELECT column_name(s) FROM table_name WHERE column_name IN (value1,value2,..) |\n| INSERT INTO     | INSERT INTO table_name VALUES (value1, value2, value3,....) *or* INSERT INTO table_name (column1, column2, column3,...) VALUES (value1, value2, value3,....) |\n| INNER JOIN      | SELECT column_name(s) FROM table_name1 INNER JOIN table_name2 ON table_name1.column_name=table_name2.column_name |\n| LEFT JOIN       | SELECT column_name(s) FROM table_name1 LEFT JOIN table_name2 ON table_name1.column_name=table_name2.column_name |\n| RIGHT JOIN      | SELECT column_name(s) FROM table_name1 RIGHT JOIN table_name2 ON table_name1.column_name=table_name2.column_name |\n| FULL JOIN       | SELECT column_name(s) FROM table_name1 FULL JOIN table_name2 ON table_name1.column_name=table_name2.column_name |\n| LIKE            | SELECT column_name(s) FROM table_name WHERE column_nameLIKE pattern |\n| ORDER BY        | SELECT column_name(s) FROM table_name ORDER BY column_name [ASC\\|DESC] |\n| SELECT          | SELECT column_name(s) FROM table_name                        |\n| SELECT *        | SELECT * FROM table_name                                     |\n| SELECT DISTINCT | SELECT DISTINCT column_name(s) FROM table_name               |\n| SELECT INTO     | SELECT * INTO new_table_name [IN externaldatabase] FROM old_table_name *or* SELECT column_name(s) INTO new_table_name [IN externaldatabase] FROM old_table_name |\n| SELECT TOP      | SELECT TOP number\\|percent column_name(s) FROM table_name    |\n| TRUNCATE TABLE  | TRUNCATE TABLE table_name                                    |\n| UNION           | SELECT column_name(s) FROM table_name1 UNION SELECT column_name(s) FROM table_name2 |\n| UNION ALL       | SELECT column_name(s) FROM table_name1 UNION ALL SELECT column_name(s) FROM table_name2 |\n| UPDATE          | UPDATE table_name SET column1=value, column2=value,... WHERE some_column=some_value |\n| WHERE           | SELECT column_name(s) FROM table_name WHERE column_name operator value |\n","source":"wiki/sql/sentence/refer.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 语句快速参考\norder: 22\n---\n\n## SQL语句快速参考\n\n------\n\n| SQL 语句        | 语法                                                         |\n| :-------------- | :----------------------------------------------------------- |\n| AND / OR        | SELECT column_name(s) FROM table_name WHERE condition AND\\|OR condition |\n| ALTER TABLE     | ALTER TABLE table_name ADD column_name datatype or ALTER TABLE table_name DROP COLUMN column_name |\n| AS (alias)      | SELECT column_name AS column_alias FROM table_name or SELECT column_name FROM table_name AS table_alias |\n| BETWEEN         | SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2 |\n| CREATE DATABASE | CREATE DATABASE database_name                                |\n| CREATE TABLE    | CREATE TABLE table_name ( column_name1 data_type, column_name2 data_type, column_name2 data_type, ... ) |\n| CREATE INDEX    | CREATE INDEX index_name ON table_name (column_name) or CREATE UNIQUE INDEX index_name ON table_name (column_name) |\n| CREATE VIEW     | CREATE VIEW view_name AS SELECT column_name(s) FROM table_name WHERE condition |\n| DELETE          | DELETE FROM table_name WHERE some_column=some_value or DELETE FROM table_name (**Note:**Deletes the entire table!!) DELETE * FROM table_name (**Note:**Deletes the entire table!!) |\n| DROP DATABASE   | DROP DATABASE database_name                                  |\n| DROP INDEX      | DROP INDEX table_name.index_name (SQL Server) DROP INDEX index_name ON table_name (MS Access) DROP INDEX index_name (DB2/Oracle) ALTER TABLE table_name DROP INDEX index_name (MySQL) |\n| DROP TABLE      | DROP TABLE table_name                                        |\n| GROUP BY        | SELECT column_name, aggregate_function(column_name) FROM table_name WHERE column_name operator value GROUP BY column_name |\n| HAVING          | SELECT column_name, aggregate_function(column_name) FROM table_name WHERE column_name operator value GROUP BY column_name HAVING aggregate_function(column_name) operator value |\n| IN              | SELECT column_name(s) FROM table_name WHERE column_name IN (value1,value2,..) |\n| INSERT INTO     | INSERT INTO table_name VALUES (value1, value2, value3,....) *or* INSERT INTO table_name (column1, column2, column3,...) VALUES (value1, value2, value3,....) |\n| INNER JOIN      | SELECT column_name(s) FROM table_name1 INNER JOIN table_name2 ON table_name1.column_name=table_name2.column_name |\n| LEFT JOIN       | SELECT column_name(s) FROM table_name1 LEFT JOIN table_name2 ON table_name1.column_name=table_name2.column_name |\n| RIGHT JOIN      | SELECT column_name(s) FROM table_name1 RIGHT JOIN table_name2 ON table_name1.column_name=table_name2.column_name |\n| FULL JOIN       | SELECT column_name(s) FROM table_name1 FULL JOIN table_name2 ON table_name1.column_name=table_name2.column_name |\n| LIKE            | SELECT column_name(s) FROM table_name WHERE column_nameLIKE pattern |\n| ORDER BY        | SELECT column_name(s) FROM table_name ORDER BY column_name [ASC\\|DESC] |\n| SELECT          | SELECT column_name(s) FROM table_name                        |\n| SELECT *        | SELECT * FROM table_name                                     |\n| SELECT DISTINCT | SELECT DISTINCT column_name(s) FROM table_name               |\n| SELECT INTO     | SELECT * INTO new_table_name [IN externaldatabase] FROM old_table_name *or* SELECT column_name(s) INTO new_table_name [IN externaldatabase] FROM old_table_name |\n| SELECT TOP      | SELECT TOP number\\|percent column_name(s) FROM table_name    |\n| TRUNCATE TABLE  | TRUNCATE TABLE table_name                                    |\n| UNION           | SELECT column_name(s) FROM table_name1 UNION SELECT column_name(s) FROM table_name2 |\n| UNION ALL       | SELECT column_name(s) FROM table_name1 UNION ALL SELECT column_name(s) FROM table_name2 |\n| UPDATE          | UPDATE table_name SET column1=value, column2=value,... WHERE some_column=some_value |\n| WHERE           | SELECT column_name(s) FROM table_name WHERE column_name operator value |\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T01:09:10.391Z","path":"wiki/sql/sentence/refer.html","comments":1,"_id":"cmbreopj1001065x0ctcbcq7w","content":"<h2 id=\"SQL语句快速参考\"><a href=\"#SQL语句快速参考\" class=\"headerlink\" title=\"SQL语句快速参考\"></a>SQL语句快速参考</h2><hr>\n<table>\n<thead>\n<tr>\n<th align=\"left\">SQL 语句</th>\n<th align=\"left\">语法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">AND &#x2F; OR</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name WHERE condition AND|OR condition</td>\n</tr>\n<tr>\n<td align=\"left\">ALTER TABLE</td>\n<td align=\"left\">ALTER TABLE table_name ADD column_name datatype or ALTER TABLE table_name DROP COLUMN column_name</td>\n</tr>\n<tr>\n<td align=\"left\">AS (alias)</td>\n<td align=\"left\">SELECT column_name AS column_alias FROM table_name or SELECT column_name FROM table_name AS table_alias</td>\n</tr>\n<tr>\n<td align=\"left\">BETWEEN</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2</td>\n</tr>\n<tr>\n<td align=\"left\">CREATE DATABASE</td>\n<td align=\"left\">CREATE DATABASE database_name</td>\n</tr>\n<tr>\n<td align=\"left\">CREATE TABLE</td>\n<td align=\"left\">CREATE TABLE table_name ( column_name1 data_type, column_name2 data_type, column_name2 data_type, … )</td>\n</tr>\n<tr>\n<td align=\"left\">CREATE INDEX</td>\n<td align=\"left\">CREATE INDEX index_name ON table_name (column_name) or CREATE UNIQUE INDEX index_name ON table_name (column_name)</td>\n</tr>\n<tr>\n<td align=\"left\">CREATE VIEW</td>\n<td align=\"left\">CREATE VIEW view_name AS SELECT column_name(s) FROM table_name WHERE condition</td>\n</tr>\n<tr>\n<td align=\"left\">DELETE</td>\n<td align=\"left\">DELETE FROM table_name WHERE some_column&#x3D;some_value or DELETE FROM table_name (**Note:**Deletes the entire table!!) DELETE * FROM table_name (**Note:**Deletes the entire table!!)</td>\n</tr>\n<tr>\n<td align=\"left\">DROP DATABASE</td>\n<td align=\"left\">DROP DATABASE database_name</td>\n</tr>\n<tr>\n<td align=\"left\">DROP INDEX</td>\n<td align=\"left\">DROP INDEX table_name.index_name (SQL Server) DROP INDEX index_name ON table_name (MS Access) DROP INDEX index_name (DB2&#x2F;Oracle) ALTER TABLE table_name DROP INDEX index_name (MySQL)</td>\n</tr>\n<tr>\n<td align=\"left\">DROP TABLE</td>\n<td align=\"left\">DROP TABLE table_name</td>\n</tr>\n<tr>\n<td align=\"left\">GROUP BY</td>\n<td align=\"left\">SELECT column_name, aggregate_function(column_name) FROM table_name WHERE column_name operator value GROUP BY column_name</td>\n</tr>\n<tr>\n<td align=\"left\">HAVING</td>\n<td align=\"left\">SELECT column_name, aggregate_function(column_name) FROM table_name WHERE column_name operator value GROUP BY column_name HAVING aggregate_function(column_name) operator value</td>\n</tr>\n<tr>\n<td align=\"left\">IN</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name WHERE column_name IN (value1,value2,..)</td>\n</tr>\n<tr>\n<td align=\"left\">INSERT INTO</td>\n<td align=\"left\">INSERT INTO table_name VALUES (value1, value2, value3,….) <em>or</em> INSERT INTO table_name (column1, column2, column3,…) VALUES (value1, value2, value3,….)</td>\n</tr>\n<tr>\n<td align=\"left\">INNER JOIN</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name1 INNER JOIN table_name2 ON table_name1.column_name&#x3D;table_name2.column_name</td>\n</tr>\n<tr>\n<td align=\"left\">LEFT JOIN</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name1 LEFT JOIN table_name2 ON table_name1.column_name&#x3D;table_name2.column_name</td>\n</tr>\n<tr>\n<td align=\"left\">RIGHT JOIN</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name1 RIGHT JOIN table_name2 ON table_name1.column_name&#x3D;table_name2.column_name</td>\n</tr>\n<tr>\n<td align=\"left\">FULL JOIN</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name1 FULL JOIN table_name2 ON table_name1.column_name&#x3D;table_name2.column_name</td>\n</tr>\n<tr>\n<td align=\"left\">LIKE</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name WHERE column_nameLIKE pattern</td>\n</tr>\n<tr>\n<td align=\"left\">ORDER BY</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name ORDER BY column_name [ASC|DESC]</td>\n</tr>\n<tr>\n<td align=\"left\">SELECT</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name</td>\n</tr>\n<tr>\n<td align=\"left\">SELECT *</td>\n<td align=\"left\">SELECT * FROM table_name</td>\n</tr>\n<tr>\n<td align=\"left\">SELECT DISTINCT</td>\n<td align=\"left\">SELECT DISTINCT column_name(s) FROM table_name</td>\n</tr>\n<tr>\n<td align=\"left\">SELECT INTO</td>\n<td align=\"left\">SELECT * INTO new_table_name [IN externaldatabase] FROM old_table_name <em>or</em> SELECT column_name(s) INTO new_table_name [IN externaldatabase] FROM old_table_name</td>\n</tr>\n<tr>\n<td align=\"left\">SELECT TOP</td>\n<td align=\"left\">SELECT TOP number|percent column_name(s) FROM table_name</td>\n</tr>\n<tr>\n<td align=\"left\">TRUNCATE TABLE</td>\n<td align=\"left\">TRUNCATE TABLE table_name</td>\n</tr>\n<tr>\n<td align=\"left\">UNION</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name1 UNION SELECT column_name(s) FROM table_name2</td>\n</tr>\n<tr>\n<td align=\"left\">UNION ALL</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name1 UNION ALL SELECT column_name(s) FROM table_name2</td>\n</tr>\n<tr>\n<td align=\"left\">UPDATE</td>\n<td align=\"left\">UPDATE table_name SET column1&#x3D;value, column2&#x3D;value,… WHERE some_column&#x3D;some_value</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name WHERE column_name operator value</td>\n</tr>\n</tbody></table>\n","excerpt":"","more":"<h2 id=\"SQL语句快速参考\"><a href=\"#SQL语句快速参考\" class=\"headerlink\" title=\"SQL语句快速参考\"></a>SQL语句快速参考</h2><hr>\n<table>\n<thead>\n<tr>\n<th align=\"left\">SQL 语句</th>\n<th align=\"left\">语法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">AND &#x2F; OR</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name WHERE condition AND|OR condition</td>\n</tr>\n<tr>\n<td align=\"left\">ALTER TABLE</td>\n<td align=\"left\">ALTER TABLE table_name ADD column_name datatype or ALTER TABLE table_name DROP COLUMN column_name</td>\n</tr>\n<tr>\n<td align=\"left\">AS (alias)</td>\n<td align=\"left\">SELECT column_name AS column_alias FROM table_name or SELECT column_name FROM table_name AS table_alias</td>\n</tr>\n<tr>\n<td align=\"left\">BETWEEN</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name WHERE column_name BETWEEN value1 AND value2</td>\n</tr>\n<tr>\n<td align=\"left\">CREATE DATABASE</td>\n<td align=\"left\">CREATE DATABASE database_name</td>\n</tr>\n<tr>\n<td align=\"left\">CREATE TABLE</td>\n<td align=\"left\">CREATE TABLE table_name ( column_name1 data_type, column_name2 data_type, column_name2 data_type, … )</td>\n</tr>\n<tr>\n<td align=\"left\">CREATE INDEX</td>\n<td align=\"left\">CREATE INDEX index_name ON table_name (column_name) or CREATE UNIQUE INDEX index_name ON table_name (column_name)</td>\n</tr>\n<tr>\n<td align=\"left\">CREATE VIEW</td>\n<td align=\"left\">CREATE VIEW view_name AS SELECT column_name(s) FROM table_name WHERE condition</td>\n</tr>\n<tr>\n<td align=\"left\">DELETE</td>\n<td align=\"left\">DELETE FROM table_name WHERE some_column&#x3D;some_value or DELETE FROM table_name (**Note:**Deletes the entire table!!) DELETE * FROM table_name (**Note:**Deletes the entire table!!)</td>\n</tr>\n<tr>\n<td align=\"left\">DROP DATABASE</td>\n<td align=\"left\">DROP DATABASE database_name</td>\n</tr>\n<tr>\n<td align=\"left\">DROP INDEX</td>\n<td align=\"left\">DROP INDEX table_name.index_name (SQL Server) DROP INDEX index_name ON table_name (MS Access) DROP INDEX index_name (DB2&#x2F;Oracle) ALTER TABLE table_name DROP INDEX index_name (MySQL)</td>\n</tr>\n<tr>\n<td align=\"left\">DROP TABLE</td>\n<td align=\"left\">DROP TABLE table_name</td>\n</tr>\n<tr>\n<td align=\"left\">GROUP BY</td>\n<td align=\"left\">SELECT column_name, aggregate_function(column_name) FROM table_name WHERE column_name operator value GROUP BY column_name</td>\n</tr>\n<tr>\n<td align=\"left\">HAVING</td>\n<td align=\"left\">SELECT column_name, aggregate_function(column_name) FROM table_name WHERE column_name operator value GROUP BY column_name HAVING aggregate_function(column_name) operator value</td>\n</tr>\n<tr>\n<td align=\"left\">IN</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name WHERE column_name IN (value1,value2,..)</td>\n</tr>\n<tr>\n<td align=\"left\">INSERT INTO</td>\n<td align=\"left\">INSERT INTO table_name VALUES (value1, value2, value3,….) <em>or</em> INSERT INTO table_name (column1, column2, column3,…) VALUES (value1, value2, value3,….)</td>\n</tr>\n<tr>\n<td align=\"left\">INNER JOIN</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name1 INNER JOIN table_name2 ON table_name1.column_name&#x3D;table_name2.column_name</td>\n</tr>\n<tr>\n<td align=\"left\">LEFT JOIN</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name1 LEFT JOIN table_name2 ON table_name1.column_name&#x3D;table_name2.column_name</td>\n</tr>\n<tr>\n<td align=\"left\">RIGHT JOIN</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name1 RIGHT JOIN table_name2 ON table_name1.column_name&#x3D;table_name2.column_name</td>\n</tr>\n<tr>\n<td align=\"left\">FULL JOIN</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name1 FULL JOIN table_name2 ON table_name1.column_name&#x3D;table_name2.column_name</td>\n</tr>\n<tr>\n<td align=\"left\">LIKE</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name WHERE column_nameLIKE pattern</td>\n</tr>\n<tr>\n<td align=\"left\">ORDER BY</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name ORDER BY column_name [ASC|DESC]</td>\n</tr>\n<tr>\n<td align=\"left\">SELECT</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name</td>\n</tr>\n<tr>\n<td align=\"left\">SELECT *</td>\n<td align=\"left\">SELECT * FROM table_name</td>\n</tr>\n<tr>\n<td align=\"left\">SELECT DISTINCT</td>\n<td align=\"left\">SELECT DISTINCT column_name(s) FROM table_name</td>\n</tr>\n<tr>\n<td align=\"left\">SELECT INTO</td>\n<td align=\"left\">SELECT * INTO new_table_name [IN externaldatabase] FROM old_table_name <em>or</em> SELECT column_name(s) INTO new_table_name [IN externaldatabase] FROM old_table_name</td>\n</tr>\n<tr>\n<td align=\"left\">SELECT TOP</td>\n<td align=\"left\">SELECT TOP number|percent column_name(s) FROM table_name</td>\n</tr>\n<tr>\n<td align=\"left\">TRUNCATE TABLE</td>\n<td align=\"left\">TRUNCATE TABLE table_name</td>\n</tr>\n<tr>\n<td align=\"left\">UNION</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name1 UNION SELECT column_name(s) FROM table_name2</td>\n</tr>\n<tr>\n<td align=\"left\">UNION ALL</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name1 UNION ALL SELECT column_name(s) FROM table_name2</td>\n</tr>\n<tr>\n<td align=\"left\">UPDATE</td>\n<td align=\"left\">UPDATE table_name SET column1&#x3D;value, column2&#x3D;value,… WHERE some_column&#x3D;some_value</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE</td>\n<td align=\"left\">SELECT column_name(s) FROM table_name WHERE column_name operator value</td>\n</tr>\n</tbody></table>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 使用序列","order":53,"_content":"\n## SQL 使用序列\n\n------\n\n序列是根据需要产生的一组有序整数：1, 2, 3 ... 序列在数据库中经常用到，因为许多应用要求数据表中的的每一行都有一个唯一的值，序列为此提供了一种简单的方法。\n\n本节阐述在 MySQL 中如何使用序列。\n\n## 使用 AUTO_INCREMENT 列\n\n------\n\n在 MySQL 中使用序列最简单的方式是，把某列定义为 AUTO_INCREMENT，然后将剩下的事情交由 MySQL 处理：\n\n## 示例\n\n------\n\n试一下下面的例子，该例将会创建一张新表，然后再里面插入几条记录，添加记录时并不需要指定记录的 ID，因为该列的值由 MySQL 自动增加。\n\n```\nmysql> CREATE TABLE INSECT\n    -> (\n    -> id INT UNSIGNED NOT NULL AUTO_INCREMENT,\n    -> PRIMARY KEY (id),\n    -> name VARCHAR(30) NOT NULL, # type of insect\n    -> date DATE NOT NULL, # date collected\n    -> origin VARCHAR(30) NOT NULL # where collected\n);\nQuery OK, 0 rows affected (0.02 sec)\nmysql> INSERT INTO INSECT (id,name,date,origin) VALUES\n    -> (NULL,'housefly','2001-09-10','kitchen'),\n    -> (NULL,'millipede','2001-09-10','driveway'),\n    -> (NULL,'grasshopper','2001-09-10','front yard');\nQuery OK, 3 rows affected (0.02 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\nmysql> SELECT * FROM INSECT ORDER BY id;\n+----+-------------+------------+------------+\n| id | name        | date       | origin     |\n+----+-------------+------------+------------+\n|  1 | housefly    | 2001-09-10 | kitchen    |\n|  2 | millipede   | 2001-09-10 | driveway   |\n|  3 | grasshopper | 2001-09-10 | front yard |\n+----+-------------+------------+------------+\n3 rows in set (0.00 sec)\n```\n\n## 获取 AUTO_INCREMENT 值\n\n------\n\nLAST_INSERT_ID() 是一个 SQL 函数，可以用在任何能够执行 SQL 语句地方。另外，Perl 和 PHP 各自提供了其独有的函数，用于获得最后一条记录的 AUTO_INCREMENT 值。\n\n## Perl 示例\n\n------\n\n使用 mysql_insertid 属性来获取 SQL 查询产生的 AUTO_INCREMENT 值。根据执行查询的方式不同，该属性可以通过数据库句柄或者语句句柄来访问。下面的示例通过数据库句柄取得自增值：\n\n```\n$dbh->do (\"INSERT INTO INSECT (name,date,origin)\nVALUES('moth','2001-09-14','windowsill')\");\nmy $seq = $dbh->{mysql_insertid};\n```\n\n## PHP 示例\n\n------\n\n在执行完会产生自增值的查询后，可以通过调用 mysql_insert_id() 来获取此值：\n\n```\nmysql_query (\"INSERT INTO INSECT (name,date,origin)\nVALUES('moth','2001-09-14','windowsill')\", $conn_id);\n$seq = mysql_insert_id ($conn_id);\n```\n\n## 重新编号现有序列\n\n------\n\n当你从表中删除了很多记录后，可能会想要对所有的记录重新定序。只要略施小计就能达到此目的，不过如果你的表与其他表之间存在连接的话，请千万小心。\n\n当你觉得不得不对 AUTO_INCREMENT 列重新定序时，从表中删除该列，然后再将其添加回来，就可以达到目的了。下面的示例展示了如何使用这种方法，为 INSECT 表中的 ID 值重新定序：\n\n```\nmysql> ALTER TABLE INSECT DROP id;\nmysql> ALTER TABLE insect\n    -> ADD id INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST,\n    -> ADD PRIMARY KEY (id);\n```\n\n## 从特定值的序列\n\n------\n\n默认情况下，MySQL 中序列的起始值为 1，不过你可以在创建数据表的时候，指定任意其他值。下面的示例中，MySQL 将序列的起始值设为 100：\n\n```\nmysql> CREATE TABLE INSECT\n    -> (\n    -> id INT UNSIGNED NOT NULL AUTO_INCREMENT = 100,\n    -> PRIMARY KEY (id),\n    -> name VARCHAR(30) NOT NULL, # type of insect\n    -> date DATE NOT NULL, # date collected\n    -> origin VARCHAR(30) NOT NULL # where collected\n);\n```\n\n或者，你也可以先创建数据表，然后使用 ALTER TABLE 来设置序列的起始值：\n\n```\nmysql> ALTER TABLE t AUTO_INCREMENT = 100;\n```\n","source":"wiki/sql/sentence/sequence.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 使用序列\norder: 53\n---\n\n## SQL 使用序列\n\n------\n\n序列是根据需要产生的一组有序整数：1, 2, 3 ... 序列在数据库中经常用到，因为许多应用要求数据表中的的每一行都有一个唯一的值，序列为此提供了一种简单的方法。\n\n本节阐述在 MySQL 中如何使用序列。\n\n## 使用 AUTO_INCREMENT 列\n\n------\n\n在 MySQL 中使用序列最简单的方式是，把某列定义为 AUTO_INCREMENT，然后将剩下的事情交由 MySQL 处理：\n\n## 示例\n\n------\n\n试一下下面的例子，该例将会创建一张新表，然后再里面插入几条记录，添加记录时并不需要指定记录的 ID，因为该列的值由 MySQL 自动增加。\n\n```\nmysql> CREATE TABLE INSECT\n    -> (\n    -> id INT UNSIGNED NOT NULL AUTO_INCREMENT,\n    -> PRIMARY KEY (id),\n    -> name VARCHAR(30) NOT NULL, # type of insect\n    -> date DATE NOT NULL, # date collected\n    -> origin VARCHAR(30) NOT NULL # where collected\n);\nQuery OK, 0 rows affected (0.02 sec)\nmysql> INSERT INTO INSECT (id,name,date,origin) VALUES\n    -> (NULL,'housefly','2001-09-10','kitchen'),\n    -> (NULL,'millipede','2001-09-10','driveway'),\n    -> (NULL,'grasshopper','2001-09-10','front yard');\nQuery OK, 3 rows affected (0.02 sec)\nRecords: 3  Duplicates: 0  Warnings: 0\nmysql> SELECT * FROM INSECT ORDER BY id;\n+----+-------------+------------+------------+\n| id | name        | date       | origin     |\n+----+-------------+------------+------------+\n|  1 | housefly    | 2001-09-10 | kitchen    |\n|  2 | millipede   | 2001-09-10 | driveway   |\n|  3 | grasshopper | 2001-09-10 | front yard |\n+----+-------------+------------+------------+\n3 rows in set (0.00 sec)\n```\n\n## 获取 AUTO_INCREMENT 值\n\n------\n\nLAST_INSERT_ID() 是一个 SQL 函数，可以用在任何能够执行 SQL 语句地方。另外，Perl 和 PHP 各自提供了其独有的函数，用于获得最后一条记录的 AUTO_INCREMENT 值。\n\n## Perl 示例\n\n------\n\n使用 mysql_insertid 属性来获取 SQL 查询产生的 AUTO_INCREMENT 值。根据执行查询的方式不同，该属性可以通过数据库句柄或者语句句柄来访问。下面的示例通过数据库句柄取得自增值：\n\n```\n$dbh->do (\"INSERT INTO INSECT (name,date,origin)\nVALUES('moth','2001-09-14','windowsill')\");\nmy $seq = $dbh->{mysql_insertid};\n```\n\n## PHP 示例\n\n------\n\n在执行完会产生自增值的查询后，可以通过调用 mysql_insert_id() 来获取此值：\n\n```\nmysql_query (\"INSERT INTO INSECT (name,date,origin)\nVALUES('moth','2001-09-14','windowsill')\", $conn_id);\n$seq = mysql_insert_id ($conn_id);\n```\n\n## 重新编号现有序列\n\n------\n\n当你从表中删除了很多记录后，可能会想要对所有的记录重新定序。只要略施小计就能达到此目的，不过如果你的表与其他表之间存在连接的话，请千万小心。\n\n当你觉得不得不对 AUTO_INCREMENT 列重新定序时，从表中删除该列，然后再将其添加回来，就可以达到目的了。下面的示例展示了如何使用这种方法，为 INSECT 表中的 ID 值重新定序：\n\n```\nmysql> ALTER TABLE INSECT DROP id;\nmysql> ALTER TABLE insect\n    -> ADD id INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST,\n    -> ADD PRIMARY KEY (id);\n```\n\n## 从特定值的序列\n\n------\n\n默认情况下，MySQL 中序列的起始值为 1，不过你可以在创建数据表的时候，指定任意其他值。下面的示例中，MySQL 将序列的起始值设为 100：\n\n```\nmysql> CREATE TABLE INSECT\n    -> (\n    -> id INT UNSIGNED NOT NULL AUTO_INCREMENT = 100,\n    -> PRIMARY KEY (id),\n    -> name VARCHAR(30) NOT NULL, # type of insect\n    -> date DATE NOT NULL, # date collected\n    -> origin VARCHAR(30) NOT NULL # where collected\n);\n```\n\n或者，你也可以先创建数据表，然后使用 ALTER TABLE 来设置序列的起始值：\n\n```\nmysql> ALTER TABLE t AUTO_INCREMENT = 100;\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T03:09:05.195Z","path":"wiki/sql/sentence/sequence.html","comments":1,"_id":"cmbreopj2001165x08jsdgvfj","content":"<h2 id=\"SQL-使用序列\"><a href=\"#SQL-使用序列\" class=\"headerlink\" title=\"SQL 使用序列\"></a>SQL 使用序列</h2><hr>\n<p>序列是根据需要产生的一组有序整数：1, 2, 3 … 序列在数据库中经常用到，因为许多应用要求数据表中的的每一行都有一个唯一的值，序列为此提供了一种简单的方法。</p>\n<p>本节阐述在 MySQL 中如何使用序列。</p>\n<h2 id=\"使用-AUTO-INCREMENT-列\"><a href=\"#使用-AUTO-INCREMENT-列\" class=\"headerlink\" title=\"使用 AUTO_INCREMENT 列\"></a>使用 AUTO_INCREMENT 列</h2><hr>\n<p>在 MySQL 中使用序列最简单的方式是，把某列定义为 AUTO_INCREMENT，然后将剩下的事情交由 MySQL 处理：</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><hr>\n<p>试一下下面的例子，该例将会创建一张新表，然后再里面插入几条记录，添加记录时并不需要指定记录的 ID，因为该列的值由 MySQL 自动增加。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE TABLE INSECT</span><br><span class=\"line\">    -&gt; (</span><br><span class=\"line\">    -&gt; id INT UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">    -&gt; PRIMARY KEY (id),</span><br><span class=\"line\">    -&gt; name VARCHAR(30) NOT NULL, # type of insect</span><br><span class=\"line\">    -&gt; date DATE NOT NULL, # date collected</span><br><span class=\"line\">    -&gt; origin VARCHAR(30) NOT NULL # where collected</span><br><span class=\"line\">);</span><br><span class=\"line\">Query OK, 0 rows affected (0.02 sec)</span><br><span class=\"line\">mysql&gt; INSERT INTO INSECT (id,name,date,origin) VALUES</span><br><span class=\"line\">    -&gt; (NULL,&#x27;housefly&#x27;,&#x27;2001-09-10&#x27;,&#x27;kitchen&#x27;),</span><br><span class=\"line\">    -&gt; (NULL,&#x27;millipede&#x27;,&#x27;2001-09-10&#x27;,&#x27;driveway&#x27;),</span><br><span class=\"line\">    -&gt; (NULL,&#x27;grasshopper&#x27;,&#x27;2001-09-10&#x27;,&#x27;front yard&#x27;);</span><br><span class=\"line\">Query OK, 3 rows affected (0.02 sec)</span><br><span class=\"line\">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class=\"line\">mysql&gt; SELECT * FROM INSECT ORDER BY id;</span><br><span class=\"line\">+----+-------------+------------+------------+</span><br><span class=\"line\">| id | name        | date       | origin     |</span><br><span class=\"line\">+----+-------------+------------+------------+</span><br><span class=\"line\">|  1 | housefly    | 2001-09-10 | kitchen    |</span><br><span class=\"line\">|  2 | millipede   | 2001-09-10 | driveway   |</span><br><span class=\"line\">|  3 | grasshopper | 2001-09-10 | front yard |</span><br><span class=\"line\">+----+-------------+------------+------------+</span><br><span class=\"line\">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取-AUTO-INCREMENT-值\"><a href=\"#获取-AUTO-INCREMENT-值\" class=\"headerlink\" title=\"获取 AUTO_INCREMENT 值\"></a>获取 AUTO_INCREMENT 值</h2><hr>\n<p>LAST_INSERT_ID() 是一个 SQL 函数，可以用在任何能够执行 SQL 语句地方。另外，Perl 和 PHP 各自提供了其独有的函数，用于获得最后一条记录的 AUTO_INCREMENT 值。</p>\n<h2 id=\"Perl-示例\"><a href=\"#Perl-示例\" class=\"headerlink\" title=\"Perl 示例\"></a>Perl 示例</h2><hr>\n<p>使用 mysql_insertid 属性来获取 SQL 查询产生的 AUTO_INCREMENT 值。根据执行查询的方式不同，该属性可以通过数据库句柄或者语句句柄来访问。下面的示例通过数据库句柄取得自增值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$dbh-&gt;do (&quot;INSERT INTO INSECT (name,date,origin)</span><br><span class=\"line\">VALUES(&#x27;moth&#x27;,&#x27;2001-09-14&#x27;,&#x27;windowsill&#x27;)&quot;);</span><br><span class=\"line\">my $seq = $dbh-&gt;&#123;mysql_insertid&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PHP-示例\"><a href=\"#PHP-示例\" class=\"headerlink\" title=\"PHP 示例\"></a>PHP 示例</h2><hr>\n<p>在执行完会产生自增值的查询后，可以通过调用 mysql_insert_id() 来获取此值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql_query (&quot;INSERT INTO INSECT (name,date,origin)</span><br><span class=\"line\">VALUES(&#x27;moth&#x27;,&#x27;2001-09-14&#x27;,&#x27;windowsill&#x27;)&quot;, $conn_id);</span><br><span class=\"line\">$seq = mysql_insert_id ($conn_id);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重新编号现有序列\"><a href=\"#重新编号现有序列\" class=\"headerlink\" title=\"重新编号现有序列\"></a>重新编号现有序列</h2><hr>\n<p>当你从表中删除了很多记录后，可能会想要对所有的记录重新定序。只要略施小计就能达到此目的，不过如果你的表与其他表之间存在连接的话，请千万小心。</p>\n<p>当你觉得不得不对 AUTO_INCREMENT 列重新定序时，从表中删除该列，然后再将其添加回来，就可以达到目的了。下面的示例展示了如何使用这种方法，为 INSECT 表中的 ID 值重新定序：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER TABLE INSECT DROP id;</span><br><span class=\"line\">mysql&gt; ALTER TABLE insect</span><br><span class=\"line\">    -&gt; ADD id INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST,</span><br><span class=\"line\">    -&gt; ADD PRIMARY KEY (id);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从特定值的序列\"><a href=\"#从特定值的序列\" class=\"headerlink\" title=\"从特定值的序列\"></a>从特定值的序列</h2><hr>\n<p>默认情况下，MySQL 中序列的起始值为 1，不过你可以在创建数据表的时候，指定任意其他值。下面的示例中，MySQL 将序列的起始值设为 100：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE TABLE INSECT</span><br><span class=\"line\">    -&gt; (</span><br><span class=\"line\">    -&gt; id INT UNSIGNED NOT NULL AUTO_INCREMENT = 100,</span><br><span class=\"line\">    -&gt; PRIMARY KEY (id),</span><br><span class=\"line\">    -&gt; name VARCHAR(30) NOT NULL, # type of insect</span><br><span class=\"line\">    -&gt; date DATE NOT NULL, # date collected</span><br><span class=\"line\">    -&gt; origin VARCHAR(30) NOT NULL # where collected</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>或者，你也可以先创建数据表，然后使用 ALTER TABLE 来设置序列的起始值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER TABLE t AUTO_INCREMENT = 100;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-使用序列\"><a href=\"#SQL-使用序列\" class=\"headerlink\" title=\"SQL 使用序列\"></a>SQL 使用序列</h2><hr>\n<p>序列是根据需要产生的一组有序整数：1, 2, 3 … 序列在数据库中经常用到，因为许多应用要求数据表中的的每一行都有一个唯一的值，序列为此提供了一种简单的方法。</p>\n<p>本节阐述在 MySQL 中如何使用序列。</p>\n<h2 id=\"使用-AUTO-INCREMENT-列\"><a href=\"#使用-AUTO-INCREMENT-列\" class=\"headerlink\" title=\"使用 AUTO_INCREMENT 列\"></a>使用 AUTO_INCREMENT 列</h2><hr>\n<p>在 MySQL 中使用序列最简单的方式是，把某列定义为 AUTO_INCREMENT，然后将剩下的事情交由 MySQL 处理：</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><hr>\n<p>试一下下面的例子，该例将会创建一张新表，然后再里面插入几条记录，添加记录时并不需要指定记录的 ID，因为该列的值由 MySQL 自动增加。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE TABLE INSECT</span><br><span class=\"line\">    -&gt; (</span><br><span class=\"line\">    -&gt; id INT UNSIGNED NOT NULL AUTO_INCREMENT,</span><br><span class=\"line\">    -&gt; PRIMARY KEY (id),</span><br><span class=\"line\">    -&gt; name VARCHAR(30) NOT NULL, # type of insect</span><br><span class=\"line\">    -&gt; date DATE NOT NULL, # date collected</span><br><span class=\"line\">    -&gt; origin VARCHAR(30) NOT NULL # where collected</span><br><span class=\"line\">);</span><br><span class=\"line\">Query OK, 0 rows affected (0.02 sec)</span><br><span class=\"line\">mysql&gt; INSERT INTO INSECT (id,name,date,origin) VALUES</span><br><span class=\"line\">    -&gt; (NULL,&#x27;housefly&#x27;,&#x27;2001-09-10&#x27;,&#x27;kitchen&#x27;),</span><br><span class=\"line\">    -&gt; (NULL,&#x27;millipede&#x27;,&#x27;2001-09-10&#x27;,&#x27;driveway&#x27;),</span><br><span class=\"line\">    -&gt; (NULL,&#x27;grasshopper&#x27;,&#x27;2001-09-10&#x27;,&#x27;front yard&#x27;);</span><br><span class=\"line\">Query OK, 3 rows affected (0.02 sec)</span><br><span class=\"line\">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class=\"line\">mysql&gt; SELECT * FROM INSECT ORDER BY id;</span><br><span class=\"line\">+----+-------------+------------+------------+</span><br><span class=\"line\">| id | name        | date       | origin     |</span><br><span class=\"line\">+----+-------------+------------+------------+</span><br><span class=\"line\">|  1 | housefly    | 2001-09-10 | kitchen    |</span><br><span class=\"line\">|  2 | millipede   | 2001-09-10 | driveway   |</span><br><span class=\"line\">|  3 | grasshopper | 2001-09-10 | front yard |</span><br><span class=\"line\">+----+-------------+------------+------------+</span><br><span class=\"line\">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取-AUTO-INCREMENT-值\"><a href=\"#获取-AUTO-INCREMENT-值\" class=\"headerlink\" title=\"获取 AUTO_INCREMENT 值\"></a>获取 AUTO_INCREMENT 值</h2><hr>\n<p>LAST_INSERT_ID() 是一个 SQL 函数，可以用在任何能够执行 SQL 语句地方。另外，Perl 和 PHP 各自提供了其独有的函数，用于获得最后一条记录的 AUTO_INCREMENT 值。</p>\n<h2 id=\"Perl-示例\"><a href=\"#Perl-示例\" class=\"headerlink\" title=\"Perl 示例\"></a>Perl 示例</h2><hr>\n<p>使用 mysql_insertid 属性来获取 SQL 查询产生的 AUTO_INCREMENT 值。根据执行查询的方式不同，该属性可以通过数据库句柄或者语句句柄来访问。下面的示例通过数据库句柄取得自增值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$dbh-&gt;do (&quot;INSERT INTO INSECT (name,date,origin)</span><br><span class=\"line\">VALUES(&#x27;moth&#x27;,&#x27;2001-09-14&#x27;,&#x27;windowsill&#x27;)&quot;);</span><br><span class=\"line\">my $seq = $dbh-&gt;&#123;mysql_insertid&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PHP-示例\"><a href=\"#PHP-示例\" class=\"headerlink\" title=\"PHP 示例\"></a>PHP 示例</h2><hr>\n<p>在执行完会产生自增值的查询后，可以通过调用 mysql_insert_id() 来获取此值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql_query (&quot;INSERT INTO INSECT (name,date,origin)</span><br><span class=\"line\">VALUES(&#x27;moth&#x27;,&#x27;2001-09-14&#x27;,&#x27;windowsill&#x27;)&quot;, $conn_id);</span><br><span class=\"line\">$seq = mysql_insert_id ($conn_id);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重新编号现有序列\"><a href=\"#重新编号现有序列\" class=\"headerlink\" title=\"重新编号现有序列\"></a>重新编号现有序列</h2><hr>\n<p>当你从表中删除了很多记录后，可能会想要对所有的记录重新定序。只要略施小计就能达到此目的，不过如果你的表与其他表之间存在连接的话，请千万小心。</p>\n<p>当你觉得不得不对 AUTO_INCREMENT 列重新定序时，从表中删除该列，然后再将其添加回来，就可以达到目的了。下面的示例展示了如何使用这种方法，为 INSECT 表中的 ID 值重新定序：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER TABLE INSECT DROP id;</span><br><span class=\"line\">mysql&gt; ALTER TABLE insect</span><br><span class=\"line\">    -&gt; ADD id INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST,</span><br><span class=\"line\">    -&gt; ADD PRIMARY KEY (id);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从特定值的序列\"><a href=\"#从特定值的序列\" class=\"headerlink\" title=\"从特定值的序列\"></a>从特定值的序列</h2><hr>\n<p>默认情况下，MySQL 中序列的起始值为 1，不过你可以在创建数据表的时候，指定任意其他值。下面的示例中，MySQL 将序列的起始值设为 100：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE TABLE INSECT</span><br><span class=\"line\">    -&gt; (</span><br><span class=\"line\">    -&gt; id INT UNSIGNED NOT NULL AUTO_INCREMENT = 100,</span><br><span class=\"line\">    -&gt; PRIMARY KEY (id),</span><br><span class=\"line\">    -&gt; name VARCHAR(30) NOT NULL, # type of insect</span><br><span class=\"line\">    -&gt; date DATE NOT NULL, # date collected</span><br><span class=\"line\">    -&gt; origin VARCHAR(30) NOT NULL # where collected</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>或者，你也可以先创建数据表，然后使用 ALTER TABLE 来设置序列的起始值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; ALTER TABLE t AUTO_INCREMENT = 100;</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 各种数据库的数据类型","order":56,"_content":"\n## SQL 各种数据库的数据类型\n\n------\n\nMicrosoft Access、MySQL 和 SQL Server 所使用的数据类型和范围。\n\n## Microsoft Access 数据类型\n\n------\n\n| 数据类型      | 描述                                                         | 存储     |\n| :------------ | :----------------------------------------------------------- | :------- |\n| Text          | 用于文本或文本与数字的组合。最多 255 个字符。                |          |\n| Memo          | Memo 用于更大数量的文本。最多存储 65,536 个字符。**注释：**无法对 memo 字段进行排序。不过它们是可搜索的。 |          |\n| Byte          | 允许 0 到 255 的数字。                                       | 1 字节   |\n| Integer       | 允许介于 -32,768 与 32,767 之间的全部数字。                  | 2 字节   |\n| Long          | 允许介于 -2,147,483,648 与 2,147,483,647 之间的全部数字。    | 4 字节   |\n| Single        | 单精度浮点。处理大多数小数。                                 | 4 字节   |\n| Double        | 双精度浮点。处理大多数小数。                                 | 8 字节   |\n| Currency      | 用于货币。支持 15 位的元，外加 4 位小数。**提示：**您可以选择使用哪个国家的货币。 | 8 字节   |\n| AutoNumber    | AutoNumber 字段自动为每条记录分配数字，通常从 1 开始。       | 4 字节   |\n| Date/Time     | 用于日期和时间                                               | 8 字节   |\n| Yes/No        | 逻辑字段，可以显示为 Yes/No、True/False 或 On/Off。在代码中，使用常量 True 和 False （等价于 1 和 0）。**注释：**Yes/No 字段中不允许 Null 值 | 1 比特   |\n| Ole Object    | 可以存储图片、音频、视频或其他 BLOBs（Binary Large OBjects）。 | 最多 1GB |\n| Hyperlink     | 包含指向其他文件的链接，包括网页。                           |          |\n| Lookup Wizard | 允许您创建一个可从下拉列表中进行选择的选项列表。             | 4 字节   |\n\n\n\n## MySQL 数据类型\n\n------\n\n在 MySQL 中，有三种主要的类型：Text（文本）、Number（数字）和 Date/Time（日期/时间）类型。\n\n**　Text 类型：**\n\n| 数据类型         | 描述                                                         |\n| :--------------- | :----------------------------------------------------------- |\n| CHAR(size)       | 保存固定长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的长度。最多 255 个字符。 |\n| VARCHAR(size)    | 保存可变长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的最大长度。最多 255 个字符。**注释：**如果值的长度大于 255，则被转换为 TEXT 类型。 |\n| TINYTEXT         | 存放最大长度为 255 个字符的字符串。                          |\n| TEXT             | 存放最大长度为 65,535 个字符的字符串。                       |\n| BLOB             | 用于 BLOBs（Binary Large OBjects）。存放最多 65,535 字节的数据。 |\n| MEDIUMTEXT       | 存放最大长度为 16,777,215 个字符的字符串。                   |\n| MEDIUMBLOB       | 用于 BLOBs（Binary Large OBjects）。存放最多 16,777,215 字节的数据。 |\n| LONGTEXT         | 存放最大长度为 4,294,967,295 个字符的字符串。                |\n| LONGBLOB         | 用于 BLOBs (Binary Large OBjects)。存放最多 4,294,967,295 字节的数据。 |\n| ENUM(x,y,z,etc.) | 允许您输入可能值的列表。可以在 ENUM 列表中列出最大 65535 个值。如果列表中不存在插入的值，则插入空值。 **注释：**这些值是按照您输入的顺序排序的。 可以按照此格式输入可能的值： ENUM('X','Y','Z') |\n| SET              | 与 ENUM 类似，不同的是，SET 最多只能包含 64 个列表项且 SET 可存储一个以上的选择。 |\n\n\n\n**　Number 类型：**\n\n| 数据类型        | 描述                                                         |\n| :-------------- | :----------------------------------------------------------- |\n| TINYINT(size)   | -128 到 127 常规。0 到 255 无符号*。在括号中规定最大位数。   |\n| SMALLINT(size)  | -32768 到 32767 常规。0 到 65535 无符号*。在括号中规定最大位数。 |\n| MEDIUMINT(size) | -8388608 到 8388607 普通。0 to 16777215 无符号*。在括号中规定最大位数。 |\n| INT(size)       | -2147483648 到 2147483647 常规。0 到 4294967295 无符号*。在括号中规定最大位数。 |\n| BIGINT(size)    | -9223372036854775808 到 9223372036854775807 常规。0 到 18446744073709551615 无符号*。在括号中规定最大位数。 |\n| FLOAT(size,d)   | 带有浮动小数点的小数字。在 size 参数中规定最大位数。在 d 参数中规定小数点右侧的最大位数。 |\n| DOUBLE(size,d)  | 带有浮动小数点的大数字。在 size 参数中规定最大位数。在 d 参数中规定小数点右侧的最大位数。 |\n| DECIMAL(size,d) | 作为字符串存储的 DOUBLE 类型，允许固定的小数点。在 size 参数中规定最大位数。在 d 参数中规定小数点右侧的最大位数。 |\n\n> **注意：**这些整数类型拥有额外的选项 UNSIGNED。通常，整数可以是负数或正数。如果添加 UNSIGNED 属性，那么范围将从 0 开始，而不是某个负数。\n\n\n\n**　Date 类型：**\n\n| 数据类型    | 描述                                                         |\n| :---------- | :----------------------------------------------------------- |\n| DATE()      | 日期。格式：YYYY-MM-DD **注释：**支持的范围是从 '1000-01-01' 到 '9999-12-31' |\n| DATETIME()  | *日期和时间的组合。格式：YYYY-MM-DD HH:MM:SS **注释：**支持的范围是从 '1000-01-01 00:00:00' 到 '9999-12-31 23:59:59' |\n| TIMESTAMP() | *时间戳。TIMESTAMP 值使用 Unix 纪元('1970-01-01 00:00:00' UTC) 至今的秒数来存储。格式：YYYY-MM-DD HH:MM:SS **注释：**支持的范围是从 '1970-01-01 00:00:01' UTC 到 '2038-01-09 03:14:07' UTC |\n| TIME()      | 时间。格式：HH:MM:SS **注释：**支持的范围是从 '-838:59:59' 到 '838:59:59' |\n| YEAR()      | 2 位或 4 位格式的年。 **注释：**4 位格式所允许的值：1901 到 2155。2 位格式所允许的值：70 到 69，表示从 1970 到 2069。 |\n\n> **注意：**即便 DATETIME 和 TIMESTAMP 返回相同的格式，它们的工作方式很不同。在 INSERT 或 UPDATE 查询中，TIMESTAMP 自动把自身设置为当前的日期和时间。TIMESTAMP 也接受不同的格式，比如 YYYYMMDDHHMMSS、YYMMDDHHMMSS、YYYYMMDD 或 YYMMDD。\n\n\n\n## SQL Server 数据类型\n\n------\n\n**　String 类型：**\n\n| 数据类型       | 描述                                                 | 存储                      |\n| :------------- | :--------------------------------------------------- | :------------------------ |\n| char(n)        | 固定长度的字符串。最多 8,000 个字符。                | Defined width             |\n| varchar(n)     | 可变长度的字符串。最多 8,000 个字符。                | 2 bytes + number of chars |\n| varchar(max)   | 可变长度的字符串。最多 1,073,741,824 个字符。        | 2 bytes + number of chars |\n| text           | 可变长度的字符串。最多 2GB 文本数据。                | 4 bytes + number of chars |\n| nchar          | 固定长度的 Unicode 字符串。最多 4,000 个字符。       | Defined width x 2         |\n| nvarchar       | 可变长度的 Unicode 字符串。最多 4,000 个字符。       |                           |\n| nvarchar(max)  | 可变长度的 Unicode 字符串。最多 536,870,912 个字符。 |                           |\n| ntext          | 可变长度的 Unicode 字符串。最多 2GB 文本数据。       |                           |\n| bit            | 允许 0、1 或 NULL                                    |                           |\n| binary(n)      | 固定长度的二进制字符串。最多 8,000 字节。            |                           |\n| varbinary      | 可变长度的二进制字符串。最多 8,000 字节。            |                           |\n| varbinary(max) | 可变长度的二进制字符串。最多 2GB。                   |                           |\n| image          | 可变长度的二进制字符串。最多 2GB。                   |                           |\n\n\n\n**　Number 类型：**\n\n| 数据类型     | 描述                                                         | 存储        |\n| :----------- | :----------------------------------------------------------- | :---------- |\n| tinyint      | 允许从 0 到 255 的所有数字。                                 | 1 字节      |\n| smallint     | 允许介于 -32,768 与 32,767 的所有数字。                      | 2 字节      |\n| int          | 允许介于 -2,147,483,648 与 2,147,483,647 的所有数字。        | 4 字节      |\n| bigint       | 允许介于 -9,223,372,036,854,775,808 与 9,223,372,036,854,775,807 之间的所有数字。 | 8 字节      |\n| decimal(p,s) | 固定精度和比例的数字。 允许从 -10^38 +1 到 10^38 -1 之间的数字。 p 参数指示可以存储的最大位数（小数点左侧和右侧）。p 必须是 1 到 38 之间的值。默认是 18。 s 参数指示小数点右侧存储的最大位数。s 必须是 0 到 p 之间的值。默认是 0。 | 5-17 字节   |\n| numeric(p,s) | 固定精度和比例的数字。 允许从 -10^38 +1 到 10^38 -1 之间的数字。 p 参数指示可以存储的最大位数（小数点左侧和右侧）。p 必须是 1 到 38 之间的值。默认是 18。 s 参数指示小数点右侧存储的最大位数。s 必须是 0 到 p 之间的值。默认是 0。 | 5-17 字节   |\n| smallmoney   | 介于 -214,748.3648 与 214,748.3647 之间的货币数据。          | 4 字节      |\n| money        | 介于 -922,337,203,685,477.5808 与 922,337,203,685,477.5807 之间的货币数据。 | 8 字节      |\n| float(n)     | 从 -1.79E + 308 到 1.79E + 308 的浮动精度数字数据。 n 参数指示该字段保存 4 字节还是 8 字节。float(24) 保存 4 字节，而 float(53) 保存 8 字节。n 的默认值是 53。 | 4 或 8 字节 |\n| real         | 从 -3.40E + 38 到 3.40E + 38 的浮动精度数字数据。            | 4 字节      |\n\n\n\n**　Date 类型：**\n\n| 数据类型       | 描述                                                         | 存储      |\n| :------------- | :----------------------------------------------------------- | :-------- |\n| datetime       | 从 1753 年 1 月 1 日 到 9999 年 12 月 31 日，精度为 3.33 毫秒。 | 8 字节    |\n| datetime2      | 从 1753 年 1 月 1 日 到 9999 年 12 月 31 日，精度为 100 纳秒。 | 6-8 字节  |\n| smalldatetime  | 从 1900 年 1 月 1 日 到 2079 年 6 月 6 日，精度为 1 分钟。   | 4 字节    |\n| date           | 仅存储日期。从 0001 年 1 月 1 日 到 9999 年 12 月 31 日。    | 3 bytes   |\n| time           | 仅存储时间。精度为 100 纳秒。                                | 3-5 字节  |\n| datetimeoffset | 与 datetime2 相同，外加时区偏移。                            | 8-10 字节 |\n| timestamp      | 存储唯一的数字，每当创建或修改某行时，该数字会更新。timestamp 值基于内部时钟，不对应真实时间。每个表只能有一个 timestamp 变量。 |           |\n\n\n\n**　其他数据类型：**\n\n| 数据类型         | 描述                                                         |\n| :--------------- | :----------------------------------------------------------- |\n| sql_variant      | 存储最多 8,000 字节不同数据类型的数据，除了 text、ntext 以及 timestamp。 |\n| uniqueidentifier | 存储全局唯一标识符 (GUID)。                                  |\n| xml              | 存储 XML 格式化数据。最多 2GB。                              |\n| cursor           | 存储对用于数据库操作的指针的引用。                           |\n| table            | 存储结果集，供稍后处理。                                     |\n","source":"wiki/sql/sentence/summary.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 各种数据库的数据类型\norder: 56\n---\n\n## SQL 各种数据库的数据类型\n\n------\n\nMicrosoft Access、MySQL 和 SQL Server 所使用的数据类型和范围。\n\n## Microsoft Access 数据类型\n\n------\n\n| 数据类型      | 描述                                                         | 存储     |\n| :------------ | :----------------------------------------------------------- | :------- |\n| Text          | 用于文本或文本与数字的组合。最多 255 个字符。                |          |\n| Memo          | Memo 用于更大数量的文本。最多存储 65,536 个字符。**注释：**无法对 memo 字段进行排序。不过它们是可搜索的。 |          |\n| Byte          | 允许 0 到 255 的数字。                                       | 1 字节   |\n| Integer       | 允许介于 -32,768 与 32,767 之间的全部数字。                  | 2 字节   |\n| Long          | 允许介于 -2,147,483,648 与 2,147,483,647 之间的全部数字。    | 4 字节   |\n| Single        | 单精度浮点。处理大多数小数。                                 | 4 字节   |\n| Double        | 双精度浮点。处理大多数小数。                                 | 8 字节   |\n| Currency      | 用于货币。支持 15 位的元，外加 4 位小数。**提示：**您可以选择使用哪个国家的货币。 | 8 字节   |\n| AutoNumber    | AutoNumber 字段自动为每条记录分配数字，通常从 1 开始。       | 4 字节   |\n| Date/Time     | 用于日期和时间                                               | 8 字节   |\n| Yes/No        | 逻辑字段，可以显示为 Yes/No、True/False 或 On/Off。在代码中，使用常量 True 和 False （等价于 1 和 0）。**注释：**Yes/No 字段中不允许 Null 值 | 1 比特   |\n| Ole Object    | 可以存储图片、音频、视频或其他 BLOBs（Binary Large OBjects）。 | 最多 1GB |\n| Hyperlink     | 包含指向其他文件的链接，包括网页。                           |          |\n| Lookup Wizard | 允许您创建一个可从下拉列表中进行选择的选项列表。             | 4 字节   |\n\n\n\n## MySQL 数据类型\n\n------\n\n在 MySQL 中，有三种主要的类型：Text（文本）、Number（数字）和 Date/Time（日期/时间）类型。\n\n**　Text 类型：**\n\n| 数据类型         | 描述                                                         |\n| :--------------- | :----------------------------------------------------------- |\n| CHAR(size)       | 保存固定长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的长度。最多 255 个字符。 |\n| VARCHAR(size)    | 保存可变长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的最大长度。最多 255 个字符。**注释：**如果值的长度大于 255，则被转换为 TEXT 类型。 |\n| TINYTEXT         | 存放最大长度为 255 个字符的字符串。                          |\n| TEXT             | 存放最大长度为 65,535 个字符的字符串。                       |\n| BLOB             | 用于 BLOBs（Binary Large OBjects）。存放最多 65,535 字节的数据。 |\n| MEDIUMTEXT       | 存放最大长度为 16,777,215 个字符的字符串。                   |\n| MEDIUMBLOB       | 用于 BLOBs（Binary Large OBjects）。存放最多 16,777,215 字节的数据。 |\n| LONGTEXT         | 存放最大长度为 4,294,967,295 个字符的字符串。                |\n| LONGBLOB         | 用于 BLOBs (Binary Large OBjects)。存放最多 4,294,967,295 字节的数据。 |\n| ENUM(x,y,z,etc.) | 允许您输入可能值的列表。可以在 ENUM 列表中列出最大 65535 个值。如果列表中不存在插入的值，则插入空值。 **注释：**这些值是按照您输入的顺序排序的。 可以按照此格式输入可能的值： ENUM('X','Y','Z') |\n| SET              | 与 ENUM 类似，不同的是，SET 最多只能包含 64 个列表项且 SET 可存储一个以上的选择。 |\n\n\n\n**　Number 类型：**\n\n| 数据类型        | 描述                                                         |\n| :-------------- | :----------------------------------------------------------- |\n| TINYINT(size)   | -128 到 127 常规。0 到 255 无符号*。在括号中规定最大位数。   |\n| SMALLINT(size)  | -32768 到 32767 常规。0 到 65535 无符号*。在括号中规定最大位数。 |\n| MEDIUMINT(size) | -8388608 到 8388607 普通。0 to 16777215 无符号*。在括号中规定最大位数。 |\n| INT(size)       | -2147483648 到 2147483647 常规。0 到 4294967295 无符号*。在括号中规定最大位数。 |\n| BIGINT(size)    | -9223372036854775808 到 9223372036854775807 常规。0 到 18446744073709551615 无符号*。在括号中规定最大位数。 |\n| FLOAT(size,d)   | 带有浮动小数点的小数字。在 size 参数中规定最大位数。在 d 参数中规定小数点右侧的最大位数。 |\n| DOUBLE(size,d)  | 带有浮动小数点的大数字。在 size 参数中规定最大位数。在 d 参数中规定小数点右侧的最大位数。 |\n| DECIMAL(size,d) | 作为字符串存储的 DOUBLE 类型，允许固定的小数点。在 size 参数中规定最大位数。在 d 参数中规定小数点右侧的最大位数。 |\n\n> **注意：**这些整数类型拥有额外的选项 UNSIGNED。通常，整数可以是负数或正数。如果添加 UNSIGNED 属性，那么范围将从 0 开始，而不是某个负数。\n\n\n\n**　Date 类型：**\n\n| 数据类型    | 描述                                                         |\n| :---------- | :----------------------------------------------------------- |\n| DATE()      | 日期。格式：YYYY-MM-DD **注释：**支持的范围是从 '1000-01-01' 到 '9999-12-31' |\n| DATETIME()  | *日期和时间的组合。格式：YYYY-MM-DD HH:MM:SS **注释：**支持的范围是从 '1000-01-01 00:00:00' 到 '9999-12-31 23:59:59' |\n| TIMESTAMP() | *时间戳。TIMESTAMP 值使用 Unix 纪元('1970-01-01 00:00:00' UTC) 至今的秒数来存储。格式：YYYY-MM-DD HH:MM:SS **注释：**支持的范围是从 '1970-01-01 00:00:01' UTC 到 '2038-01-09 03:14:07' UTC |\n| TIME()      | 时间。格式：HH:MM:SS **注释：**支持的范围是从 '-838:59:59' 到 '838:59:59' |\n| YEAR()      | 2 位或 4 位格式的年。 **注释：**4 位格式所允许的值：1901 到 2155。2 位格式所允许的值：70 到 69，表示从 1970 到 2069。 |\n\n> **注意：**即便 DATETIME 和 TIMESTAMP 返回相同的格式，它们的工作方式很不同。在 INSERT 或 UPDATE 查询中，TIMESTAMP 自动把自身设置为当前的日期和时间。TIMESTAMP 也接受不同的格式，比如 YYYYMMDDHHMMSS、YYMMDDHHMMSS、YYYYMMDD 或 YYMMDD。\n\n\n\n## SQL Server 数据类型\n\n------\n\n**　String 类型：**\n\n| 数据类型       | 描述                                                 | 存储                      |\n| :------------- | :--------------------------------------------------- | :------------------------ |\n| char(n)        | 固定长度的字符串。最多 8,000 个字符。                | Defined width             |\n| varchar(n)     | 可变长度的字符串。最多 8,000 个字符。                | 2 bytes + number of chars |\n| varchar(max)   | 可变长度的字符串。最多 1,073,741,824 个字符。        | 2 bytes + number of chars |\n| text           | 可变长度的字符串。最多 2GB 文本数据。                | 4 bytes + number of chars |\n| nchar          | 固定长度的 Unicode 字符串。最多 4,000 个字符。       | Defined width x 2         |\n| nvarchar       | 可变长度的 Unicode 字符串。最多 4,000 个字符。       |                           |\n| nvarchar(max)  | 可变长度的 Unicode 字符串。最多 536,870,912 个字符。 |                           |\n| ntext          | 可变长度的 Unicode 字符串。最多 2GB 文本数据。       |                           |\n| bit            | 允许 0、1 或 NULL                                    |                           |\n| binary(n)      | 固定长度的二进制字符串。最多 8,000 字节。            |                           |\n| varbinary      | 可变长度的二进制字符串。最多 8,000 字节。            |                           |\n| varbinary(max) | 可变长度的二进制字符串。最多 2GB。                   |                           |\n| image          | 可变长度的二进制字符串。最多 2GB。                   |                           |\n\n\n\n**　Number 类型：**\n\n| 数据类型     | 描述                                                         | 存储        |\n| :----------- | :----------------------------------------------------------- | :---------- |\n| tinyint      | 允许从 0 到 255 的所有数字。                                 | 1 字节      |\n| smallint     | 允许介于 -32,768 与 32,767 的所有数字。                      | 2 字节      |\n| int          | 允许介于 -2,147,483,648 与 2,147,483,647 的所有数字。        | 4 字节      |\n| bigint       | 允许介于 -9,223,372,036,854,775,808 与 9,223,372,036,854,775,807 之间的所有数字。 | 8 字节      |\n| decimal(p,s) | 固定精度和比例的数字。 允许从 -10^38 +1 到 10^38 -1 之间的数字。 p 参数指示可以存储的最大位数（小数点左侧和右侧）。p 必须是 1 到 38 之间的值。默认是 18。 s 参数指示小数点右侧存储的最大位数。s 必须是 0 到 p 之间的值。默认是 0。 | 5-17 字节   |\n| numeric(p,s) | 固定精度和比例的数字。 允许从 -10^38 +1 到 10^38 -1 之间的数字。 p 参数指示可以存储的最大位数（小数点左侧和右侧）。p 必须是 1 到 38 之间的值。默认是 18。 s 参数指示小数点右侧存储的最大位数。s 必须是 0 到 p 之间的值。默认是 0。 | 5-17 字节   |\n| smallmoney   | 介于 -214,748.3648 与 214,748.3647 之间的货币数据。          | 4 字节      |\n| money        | 介于 -922,337,203,685,477.5808 与 922,337,203,685,477.5807 之间的货币数据。 | 8 字节      |\n| float(n)     | 从 -1.79E + 308 到 1.79E + 308 的浮动精度数字数据。 n 参数指示该字段保存 4 字节还是 8 字节。float(24) 保存 4 字节，而 float(53) 保存 8 字节。n 的默认值是 53。 | 4 或 8 字节 |\n| real         | 从 -3.40E + 38 到 3.40E + 38 的浮动精度数字数据。            | 4 字节      |\n\n\n\n**　Date 类型：**\n\n| 数据类型       | 描述                                                         | 存储      |\n| :------------- | :----------------------------------------------------------- | :-------- |\n| datetime       | 从 1753 年 1 月 1 日 到 9999 年 12 月 31 日，精度为 3.33 毫秒。 | 8 字节    |\n| datetime2      | 从 1753 年 1 月 1 日 到 9999 年 12 月 31 日，精度为 100 纳秒。 | 6-8 字节  |\n| smalldatetime  | 从 1900 年 1 月 1 日 到 2079 年 6 月 6 日，精度为 1 分钟。   | 4 字节    |\n| date           | 仅存储日期。从 0001 年 1 月 1 日 到 9999 年 12 月 31 日。    | 3 bytes   |\n| time           | 仅存储时间。精度为 100 纳秒。                                | 3-5 字节  |\n| datetimeoffset | 与 datetime2 相同，外加时区偏移。                            | 8-10 字节 |\n| timestamp      | 存储唯一的数字，每当创建或修改某行时，该数字会更新。timestamp 值基于内部时钟，不对应真实时间。每个表只能有一个 timestamp 变量。 |           |\n\n\n\n**　其他数据类型：**\n\n| 数据类型         | 描述                                                         |\n| :--------------- | :----------------------------------------------------------- |\n| sql_variant      | 存储最多 8,000 字节不同数据类型的数据，除了 text、ntext 以及 timestamp。 |\n| uniqueidentifier | 存储全局唯一标识符 (GUID)。                                  |\n| xml              | 存储 XML 格式化数据。最多 2GB。                              |\n| cursor           | 存储对用于数据库操作的指针的引用。                           |\n| table            | 存储结果集，供稍后处理。                                     |\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T03:16:52.767Z","path":"wiki/sql/sentence/summary.html","comments":1,"_id":"cmbreopj2001265x02c7f8gyb","content":"<h2 id=\"SQL-各种数据库的数据类型\"><a href=\"#SQL-各种数据库的数据类型\" class=\"headerlink\" title=\"SQL 各种数据库的数据类型\"></a>SQL 各种数据库的数据类型</h2><hr>\n<p>Microsoft Access、MySQL 和 SQL Server 所使用的数据类型和范围。</p>\n<h2 id=\"Microsoft-Access-数据类型\"><a href=\"#Microsoft-Access-数据类型\" class=\"headerlink\" title=\"Microsoft Access 数据类型\"></a>Microsoft Access 数据类型</h2><hr>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">存储</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Text</td>\n<td align=\"left\">用于文本或文本与数字的组合。最多 255 个字符。</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Memo</td>\n<td align=\"left\">Memo 用于更大数量的文本。最多存储 65,536 个字符。**注释：**无法对 memo 字段进行排序。不过它们是可搜索的。</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Byte</td>\n<td align=\"left\">允许 0 到 255 的数字。</td>\n<td align=\"left\">1 字节</td>\n</tr>\n<tr>\n<td align=\"left\">Integer</td>\n<td align=\"left\">允许介于 -32,768 与 32,767 之间的全部数字。</td>\n<td align=\"left\">2 字节</td>\n</tr>\n<tr>\n<td align=\"left\">Long</td>\n<td align=\"left\">允许介于 -2,147,483,648 与 2,147,483,647 之间的全部数字。</td>\n<td align=\"left\">4 字节</td>\n</tr>\n<tr>\n<td align=\"left\">Single</td>\n<td align=\"left\">单精度浮点。处理大多数小数。</td>\n<td align=\"left\">4 字节</td>\n</tr>\n<tr>\n<td align=\"left\">Double</td>\n<td align=\"left\">双精度浮点。处理大多数小数。</td>\n<td align=\"left\">8 字节</td>\n</tr>\n<tr>\n<td align=\"left\">Currency</td>\n<td align=\"left\">用于货币。支持 15 位的元，外加 4 位小数。**提示：**您可以选择使用哪个国家的货币。</td>\n<td align=\"left\">8 字节</td>\n</tr>\n<tr>\n<td align=\"left\">AutoNumber</td>\n<td align=\"left\">AutoNumber 字段自动为每条记录分配数字，通常从 1 开始。</td>\n<td align=\"left\">4 字节</td>\n</tr>\n<tr>\n<td align=\"left\">Date&#x2F;Time</td>\n<td align=\"left\">用于日期和时间</td>\n<td align=\"left\">8 字节</td>\n</tr>\n<tr>\n<td align=\"left\">Yes&#x2F;No</td>\n<td align=\"left\">逻辑字段，可以显示为 Yes&#x2F;No、True&#x2F;False 或 On&#x2F;Off。在代码中，使用常量 True 和 False （等价于 1 和 0）。**注释：**Yes&#x2F;No 字段中不允许 Null 值</td>\n<td align=\"left\">1 比特</td>\n</tr>\n<tr>\n<td align=\"left\">Ole Object</td>\n<td align=\"left\">可以存储图片、音频、视频或其他 BLOBs（Binary Large OBjects）。</td>\n<td align=\"left\">最多 1GB</td>\n</tr>\n<tr>\n<td align=\"left\">Hyperlink</td>\n<td align=\"left\">包含指向其他文件的链接，包括网页。</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Lookup Wizard</td>\n<td align=\"left\">允许您创建一个可从下拉列表中进行选择的选项列表。</td>\n<td align=\"left\">4 字节</td>\n</tr>\n</tbody></table>\n<h2 id=\"MySQL-数据类型\"><a href=\"#MySQL-数据类型\" class=\"headerlink\" title=\"MySQL 数据类型\"></a>MySQL 数据类型</h2><hr>\n<p>在 MySQL 中，有三种主要的类型：Text（文本）、Number（数字）和 Date&#x2F;Time（日期&#x2F;时间）类型。</p>\n<p>**　Text 类型：**</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">CHAR(size)</td>\n<td align=\"left\">保存固定长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的长度。最多 255 个字符。</td>\n</tr>\n<tr>\n<td align=\"left\">VARCHAR(size)</td>\n<td align=\"left\">保存可变长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的最大长度。最多 255 个字符。**注释：**如果值的长度大于 255，则被转换为 TEXT 类型。</td>\n</tr>\n<tr>\n<td align=\"left\">TINYTEXT</td>\n<td align=\"left\">存放最大长度为 255 个字符的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">TEXT</td>\n<td align=\"left\">存放最大长度为 65,535 个字符的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">BLOB</td>\n<td align=\"left\">用于 BLOBs（Binary Large OBjects）。存放最多 65,535 字节的数据。</td>\n</tr>\n<tr>\n<td align=\"left\">MEDIUMTEXT</td>\n<td align=\"left\">存放最大长度为 16,777,215 个字符的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">MEDIUMBLOB</td>\n<td align=\"left\">用于 BLOBs（Binary Large OBjects）。存放最多 16,777,215 字节的数据。</td>\n</tr>\n<tr>\n<td align=\"left\">LONGTEXT</td>\n<td align=\"left\">存放最大长度为 4,294,967,295 个字符的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">LONGBLOB</td>\n<td align=\"left\">用于 BLOBs (Binary Large OBjects)。存放最多 4,294,967,295 字节的数据。</td>\n</tr>\n<tr>\n<td align=\"left\">ENUM(x,y,z,etc.)</td>\n<td align=\"left\">允许您输入可能值的列表。可以在 ENUM 列表中列出最大 65535 个值。如果列表中不存在插入的值，则插入空值。 **注释：**这些值是按照您输入的顺序排序的。 可以按照此格式输入可能的值： ENUM(‘X’,’Y’,’Z’)</td>\n</tr>\n<tr>\n<td align=\"left\">SET</td>\n<td align=\"left\">与 ENUM 类似，不同的是，SET 最多只能包含 64 个列表项且 SET 可存储一个以上的选择。</td>\n</tr>\n</tbody></table>\n<p>**　Number 类型：**</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">TINYINT(size)</td>\n<td align=\"left\">-128 到 127 常规。0 到 255 无符号*。在括号中规定最大位数。</td>\n</tr>\n<tr>\n<td align=\"left\">SMALLINT(size)</td>\n<td align=\"left\">-32768 到 32767 常规。0 到 65535 无符号*。在括号中规定最大位数。</td>\n</tr>\n<tr>\n<td align=\"left\">MEDIUMINT(size)</td>\n<td align=\"left\">-8388608 到 8388607 普通。0 to 16777215 无符号*。在括号中规定最大位数。</td>\n</tr>\n<tr>\n<td align=\"left\">INT(size)</td>\n<td align=\"left\">-2147483648 到 2147483647 常规。0 到 4294967295 无符号*。在括号中规定最大位数。</td>\n</tr>\n<tr>\n<td align=\"left\">BIGINT(size)</td>\n<td align=\"left\">-9223372036854775808 到 9223372036854775807 常规。0 到 18446744073709551615 无符号*。在括号中规定最大位数。</td>\n</tr>\n<tr>\n<td align=\"left\">FLOAT(size,d)</td>\n<td align=\"left\">带有浮动小数点的小数字。在 size 参数中规定最大位数。在 d 参数中规定小数点右侧的最大位数。</td>\n</tr>\n<tr>\n<td align=\"left\">DOUBLE(size,d)</td>\n<td align=\"left\">带有浮动小数点的大数字。在 size 参数中规定最大位数。在 d 参数中规定小数点右侧的最大位数。</td>\n</tr>\n<tr>\n<td align=\"left\">DECIMAL(size,d)</td>\n<td align=\"left\">作为字符串存储的 DOUBLE 类型，允许固定的小数点。在 size 参数中规定最大位数。在 d 参数中规定小数点右侧的最大位数。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>**注意：**这些整数类型拥有额外的选项 UNSIGNED。通常，整数可以是负数或正数。如果添加 UNSIGNED 属性，那么范围将从 0 开始，而不是某个负数。</p>\n</blockquote>\n<p>**　Date 类型：**</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">DATE()</td>\n<td align=\"left\">日期。格式：YYYY-MM-DD **注释：**支持的范围是从 ‘1000-01-01’ 到 ‘9999-12-31’</td>\n</tr>\n<tr>\n<td align=\"left\">DATETIME()</td>\n<td align=\"left\">*日期和时间的组合。格式：YYYY-MM-DD HH:MM:SS **注释：**支持的范围是从 ‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’</td>\n</tr>\n<tr>\n<td align=\"left\">TIMESTAMP()</td>\n<td align=\"left\">*时间戳。TIMESTAMP 值使用 Unix 纪元(‘1970-01-01 00:00:00’ UTC) 至今的秒数来存储。格式：YYYY-MM-DD HH:MM:SS **注释：**支持的范围是从 ‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-09 03:14:07’ UTC</td>\n</tr>\n<tr>\n<td align=\"left\">TIME()</td>\n<td align=\"left\">时间。格式：HH:MM:SS **注释：**支持的范围是从 ‘-838:59:59’ 到 ‘838:59:59’</td>\n</tr>\n<tr>\n<td align=\"left\">YEAR()</td>\n<td align=\"left\">2 位或 4 位格式的年。 **注释：**4 位格式所允许的值：1901 到 2155。2 位格式所允许的值：70 到 69，表示从 1970 到 2069。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>**注意：**即便 DATETIME 和 TIMESTAMP 返回相同的格式，它们的工作方式很不同。在 INSERT 或 UPDATE 查询中，TIMESTAMP 自动把自身设置为当前的日期和时间。TIMESTAMP 也接受不同的格式，比如 YYYYMMDDHHMMSS、YYMMDDHHMMSS、YYYYMMDD 或 YYMMDD。</p>\n</blockquote>\n<h2 id=\"SQL-Server-数据类型\"><a href=\"#SQL-Server-数据类型\" class=\"headerlink\" title=\"SQL Server 数据类型\"></a>SQL Server 数据类型</h2><hr>\n<p>**　String 类型：**</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">存储</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">char(n)</td>\n<td align=\"left\">固定长度的字符串。最多 8,000 个字符。</td>\n<td align=\"left\">Defined width</td>\n</tr>\n<tr>\n<td align=\"left\">varchar(n)</td>\n<td align=\"left\">可变长度的字符串。最多 8,000 个字符。</td>\n<td align=\"left\">2 bytes + number of chars</td>\n</tr>\n<tr>\n<td align=\"left\">varchar(max)</td>\n<td align=\"left\">可变长度的字符串。最多 1,073,741,824 个字符。</td>\n<td align=\"left\">2 bytes + number of chars</td>\n</tr>\n<tr>\n<td align=\"left\">text</td>\n<td align=\"left\">可变长度的字符串。最多 2GB 文本数据。</td>\n<td align=\"left\">4 bytes + number of chars</td>\n</tr>\n<tr>\n<td align=\"left\">nchar</td>\n<td align=\"left\">固定长度的 Unicode 字符串。最多 4,000 个字符。</td>\n<td align=\"left\">Defined width x 2</td>\n</tr>\n<tr>\n<td align=\"left\">nvarchar</td>\n<td align=\"left\">可变长度的 Unicode 字符串。最多 4,000 个字符。</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">nvarchar(max)</td>\n<td align=\"left\">可变长度的 Unicode 字符串。最多 536,870,912 个字符。</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">ntext</td>\n<td align=\"left\">可变长度的 Unicode 字符串。最多 2GB 文本数据。</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">bit</td>\n<td align=\"left\">允许 0、1 或 NULL</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">binary(n)</td>\n<td align=\"left\">固定长度的二进制字符串。最多 8,000 字节。</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">varbinary</td>\n<td align=\"left\">可变长度的二进制字符串。最多 8,000 字节。</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">varbinary(max)</td>\n<td align=\"left\">可变长度的二进制字符串。最多 2GB。</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">image</td>\n<td align=\"left\">可变长度的二进制字符串。最多 2GB。</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>**　Number 类型：**</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">存储</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">tinyint</td>\n<td align=\"left\">允许从 0 到 255 的所有数字。</td>\n<td align=\"left\">1 字节</td>\n</tr>\n<tr>\n<td align=\"left\">smallint</td>\n<td align=\"left\">允许介于 -32,768 与 32,767 的所有数字。</td>\n<td align=\"left\">2 字节</td>\n</tr>\n<tr>\n<td align=\"left\">int</td>\n<td align=\"left\">允许介于 -2,147,483,648 与 2,147,483,647 的所有数字。</td>\n<td align=\"left\">4 字节</td>\n</tr>\n<tr>\n<td align=\"left\">bigint</td>\n<td align=\"left\">允许介于 -9,223,372,036,854,775,808 与 9,223,372,036,854,775,807 之间的所有数字。</td>\n<td align=\"left\">8 字节</td>\n</tr>\n<tr>\n<td align=\"left\">decimal(p,s)</td>\n<td align=\"left\">固定精度和比例的数字。 允许从 -10^38 +1 到 10^38 -1 之间的数字。 p 参数指示可以存储的最大位数（小数点左侧和右侧）。p 必须是 1 到 38 之间的值。默认是 18。 s 参数指示小数点右侧存储的最大位数。s 必须是 0 到 p 之间的值。默认是 0。</td>\n<td align=\"left\">5-17 字节</td>\n</tr>\n<tr>\n<td align=\"left\">numeric(p,s)</td>\n<td align=\"left\">固定精度和比例的数字。 允许从 -10^38 +1 到 10^38 -1 之间的数字。 p 参数指示可以存储的最大位数（小数点左侧和右侧）。p 必须是 1 到 38 之间的值。默认是 18。 s 参数指示小数点右侧存储的最大位数。s 必须是 0 到 p 之间的值。默认是 0。</td>\n<td align=\"left\">5-17 字节</td>\n</tr>\n<tr>\n<td align=\"left\">smallmoney</td>\n<td align=\"left\">介于 -214,748.3648 与 214,748.3647 之间的货币数据。</td>\n<td align=\"left\">4 字节</td>\n</tr>\n<tr>\n<td align=\"left\">money</td>\n<td align=\"left\">介于 -922,337,203,685,477.5808 与 922,337,203,685,477.5807 之间的货币数据。</td>\n<td align=\"left\">8 字节</td>\n</tr>\n<tr>\n<td align=\"left\">float(n)</td>\n<td align=\"left\">从 -1.79E + 308 到 1.79E + 308 的浮动精度数字数据。 n 参数指示该字段保存 4 字节还是 8 字节。float(24) 保存 4 字节，而 float(53) 保存 8 字节。n 的默认值是 53。</td>\n<td align=\"left\">4 或 8 字节</td>\n</tr>\n<tr>\n<td align=\"left\">real</td>\n<td align=\"left\">从 -3.40E + 38 到 3.40E + 38 的浮动精度数字数据。</td>\n<td align=\"left\">4 字节</td>\n</tr>\n</tbody></table>\n<p>**　Date 类型：**</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">存储</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">datetime</td>\n<td align=\"left\">从 1753 年 1 月 1 日 到 9999 年 12 月 31 日，精度为 3.33 毫秒。</td>\n<td align=\"left\">8 字节</td>\n</tr>\n<tr>\n<td align=\"left\">datetime2</td>\n<td align=\"left\">从 1753 年 1 月 1 日 到 9999 年 12 月 31 日，精度为 100 纳秒。</td>\n<td align=\"left\">6-8 字节</td>\n</tr>\n<tr>\n<td align=\"left\">smalldatetime</td>\n<td align=\"left\">从 1900 年 1 月 1 日 到 2079 年 6 月 6 日，精度为 1 分钟。</td>\n<td align=\"left\">4 字节</td>\n</tr>\n<tr>\n<td align=\"left\">date</td>\n<td align=\"left\">仅存储日期。从 0001 年 1 月 1 日 到 9999 年 12 月 31 日。</td>\n<td align=\"left\">3 bytes</td>\n</tr>\n<tr>\n<td align=\"left\">time</td>\n<td align=\"left\">仅存储时间。精度为 100 纳秒。</td>\n<td align=\"left\">3-5 字节</td>\n</tr>\n<tr>\n<td align=\"left\">datetimeoffset</td>\n<td align=\"left\">与 datetime2 相同，外加时区偏移。</td>\n<td align=\"left\">8-10 字节</td>\n</tr>\n<tr>\n<td align=\"left\">timestamp</td>\n<td align=\"left\">存储唯一的数字，每当创建或修改某行时，该数字会更新。timestamp 值基于内部时钟，不对应真实时间。每个表只能有一个 timestamp 变量。</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>**　其他数据类型：**</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">sql_variant</td>\n<td align=\"left\">存储最多 8,000 字节不同数据类型的数据，除了 text、ntext 以及 timestamp。</td>\n</tr>\n<tr>\n<td align=\"left\">uniqueidentifier</td>\n<td align=\"left\">存储全局唯一标识符 (GUID)。</td>\n</tr>\n<tr>\n<td align=\"left\">xml</td>\n<td align=\"left\">存储 XML 格式化数据。最多 2GB。</td>\n</tr>\n<tr>\n<td align=\"left\">cursor</td>\n<td align=\"left\">存储对用于数据库操作的指针的引用。</td>\n</tr>\n<tr>\n<td align=\"left\">table</td>\n<td align=\"left\">存储结果集，供稍后处理。</td>\n</tr>\n</tbody></table>\n","excerpt":"","more":"<h2 id=\"SQL-各种数据库的数据类型\"><a href=\"#SQL-各种数据库的数据类型\" class=\"headerlink\" title=\"SQL 各种数据库的数据类型\"></a>SQL 各种数据库的数据类型</h2><hr>\n<p>Microsoft Access、MySQL 和 SQL Server 所使用的数据类型和范围。</p>\n<h2 id=\"Microsoft-Access-数据类型\"><a href=\"#Microsoft-Access-数据类型\" class=\"headerlink\" title=\"Microsoft Access 数据类型\"></a>Microsoft Access 数据类型</h2><hr>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">存储</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Text</td>\n<td align=\"left\">用于文本或文本与数字的组合。最多 255 个字符。</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Memo</td>\n<td align=\"left\">Memo 用于更大数量的文本。最多存储 65,536 个字符。**注释：**无法对 memo 字段进行排序。不过它们是可搜索的。</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Byte</td>\n<td align=\"left\">允许 0 到 255 的数字。</td>\n<td align=\"left\">1 字节</td>\n</tr>\n<tr>\n<td align=\"left\">Integer</td>\n<td align=\"left\">允许介于 -32,768 与 32,767 之间的全部数字。</td>\n<td align=\"left\">2 字节</td>\n</tr>\n<tr>\n<td align=\"left\">Long</td>\n<td align=\"left\">允许介于 -2,147,483,648 与 2,147,483,647 之间的全部数字。</td>\n<td align=\"left\">4 字节</td>\n</tr>\n<tr>\n<td align=\"left\">Single</td>\n<td align=\"left\">单精度浮点。处理大多数小数。</td>\n<td align=\"left\">4 字节</td>\n</tr>\n<tr>\n<td align=\"left\">Double</td>\n<td align=\"left\">双精度浮点。处理大多数小数。</td>\n<td align=\"left\">8 字节</td>\n</tr>\n<tr>\n<td align=\"left\">Currency</td>\n<td align=\"left\">用于货币。支持 15 位的元，外加 4 位小数。**提示：**您可以选择使用哪个国家的货币。</td>\n<td align=\"left\">8 字节</td>\n</tr>\n<tr>\n<td align=\"left\">AutoNumber</td>\n<td align=\"left\">AutoNumber 字段自动为每条记录分配数字，通常从 1 开始。</td>\n<td align=\"left\">4 字节</td>\n</tr>\n<tr>\n<td align=\"left\">Date&#x2F;Time</td>\n<td align=\"left\">用于日期和时间</td>\n<td align=\"left\">8 字节</td>\n</tr>\n<tr>\n<td align=\"left\">Yes&#x2F;No</td>\n<td align=\"left\">逻辑字段，可以显示为 Yes&#x2F;No、True&#x2F;False 或 On&#x2F;Off。在代码中，使用常量 True 和 False （等价于 1 和 0）。**注释：**Yes&#x2F;No 字段中不允许 Null 值</td>\n<td align=\"left\">1 比特</td>\n</tr>\n<tr>\n<td align=\"left\">Ole Object</td>\n<td align=\"left\">可以存储图片、音频、视频或其他 BLOBs（Binary Large OBjects）。</td>\n<td align=\"left\">最多 1GB</td>\n</tr>\n<tr>\n<td align=\"left\">Hyperlink</td>\n<td align=\"left\">包含指向其他文件的链接，包括网页。</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Lookup Wizard</td>\n<td align=\"left\">允许您创建一个可从下拉列表中进行选择的选项列表。</td>\n<td align=\"left\">4 字节</td>\n</tr>\n</tbody></table>\n<h2 id=\"MySQL-数据类型\"><a href=\"#MySQL-数据类型\" class=\"headerlink\" title=\"MySQL 数据类型\"></a>MySQL 数据类型</h2><hr>\n<p>在 MySQL 中，有三种主要的类型：Text（文本）、Number（数字）和 Date&#x2F;Time（日期&#x2F;时间）类型。</p>\n<p>**　Text 类型：**</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">CHAR(size)</td>\n<td align=\"left\">保存固定长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的长度。最多 255 个字符。</td>\n</tr>\n<tr>\n<td align=\"left\">VARCHAR(size)</td>\n<td align=\"left\">保存可变长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的最大长度。最多 255 个字符。**注释：**如果值的长度大于 255，则被转换为 TEXT 类型。</td>\n</tr>\n<tr>\n<td align=\"left\">TINYTEXT</td>\n<td align=\"left\">存放最大长度为 255 个字符的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">TEXT</td>\n<td align=\"left\">存放最大长度为 65,535 个字符的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">BLOB</td>\n<td align=\"left\">用于 BLOBs（Binary Large OBjects）。存放最多 65,535 字节的数据。</td>\n</tr>\n<tr>\n<td align=\"left\">MEDIUMTEXT</td>\n<td align=\"left\">存放最大长度为 16,777,215 个字符的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">MEDIUMBLOB</td>\n<td align=\"left\">用于 BLOBs（Binary Large OBjects）。存放最多 16,777,215 字节的数据。</td>\n</tr>\n<tr>\n<td align=\"left\">LONGTEXT</td>\n<td align=\"left\">存放最大长度为 4,294,967,295 个字符的字符串。</td>\n</tr>\n<tr>\n<td align=\"left\">LONGBLOB</td>\n<td align=\"left\">用于 BLOBs (Binary Large OBjects)。存放最多 4,294,967,295 字节的数据。</td>\n</tr>\n<tr>\n<td align=\"left\">ENUM(x,y,z,etc.)</td>\n<td align=\"left\">允许您输入可能值的列表。可以在 ENUM 列表中列出最大 65535 个值。如果列表中不存在插入的值，则插入空值。 **注释：**这些值是按照您输入的顺序排序的。 可以按照此格式输入可能的值： ENUM(‘X’,’Y’,’Z’)</td>\n</tr>\n<tr>\n<td align=\"left\">SET</td>\n<td align=\"left\">与 ENUM 类似，不同的是，SET 最多只能包含 64 个列表项且 SET 可存储一个以上的选择。</td>\n</tr>\n</tbody></table>\n<p>**　Number 类型：**</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">TINYINT(size)</td>\n<td align=\"left\">-128 到 127 常规。0 到 255 无符号*。在括号中规定最大位数。</td>\n</tr>\n<tr>\n<td align=\"left\">SMALLINT(size)</td>\n<td align=\"left\">-32768 到 32767 常规。0 到 65535 无符号*。在括号中规定最大位数。</td>\n</tr>\n<tr>\n<td align=\"left\">MEDIUMINT(size)</td>\n<td align=\"left\">-8388608 到 8388607 普通。0 to 16777215 无符号*。在括号中规定最大位数。</td>\n</tr>\n<tr>\n<td align=\"left\">INT(size)</td>\n<td align=\"left\">-2147483648 到 2147483647 常规。0 到 4294967295 无符号*。在括号中规定最大位数。</td>\n</tr>\n<tr>\n<td align=\"left\">BIGINT(size)</td>\n<td align=\"left\">-9223372036854775808 到 9223372036854775807 常规。0 到 18446744073709551615 无符号*。在括号中规定最大位数。</td>\n</tr>\n<tr>\n<td align=\"left\">FLOAT(size,d)</td>\n<td align=\"left\">带有浮动小数点的小数字。在 size 参数中规定最大位数。在 d 参数中规定小数点右侧的最大位数。</td>\n</tr>\n<tr>\n<td align=\"left\">DOUBLE(size,d)</td>\n<td align=\"left\">带有浮动小数点的大数字。在 size 参数中规定最大位数。在 d 参数中规定小数点右侧的最大位数。</td>\n</tr>\n<tr>\n<td align=\"left\">DECIMAL(size,d)</td>\n<td align=\"left\">作为字符串存储的 DOUBLE 类型，允许固定的小数点。在 size 参数中规定最大位数。在 d 参数中规定小数点右侧的最大位数。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>**注意：**这些整数类型拥有额外的选项 UNSIGNED。通常，整数可以是负数或正数。如果添加 UNSIGNED 属性，那么范围将从 0 开始，而不是某个负数。</p>\n</blockquote>\n<p>**　Date 类型：**</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">DATE()</td>\n<td align=\"left\">日期。格式：YYYY-MM-DD **注释：**支持的范围是从 ‘1000-01-01’ 到 ‘9999-12-31’</td>\n</tr>\n<tr>\n<td align=\"left\">DATETIME()</td>\n<td align=\"left\">*日期和时间的组合。格式：YYYY-MM-DD HH:MM:SS **注释：**支持的范围是从 ‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’</td>\n</tr>\n<tr>\n<td align=\"left\">TIMESTAMP()</td>\n<td align=\"left\">*时间戳。TIMESTAMP 值使用 Unix 纪元(‘1970-01-01 00:00:00’ UTC) 至今的秒数来存储。格式：YYYY-MM-DD HH:MM:SS **注释：**支持的范围是从 ‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-09 03:14:07’ UTC</td>\n</tr>\n<tr>\n<td align=\"left\">TIME()</td>\n<td align=\"left\">时间。格式：HH:MM:SS **注释：**支持的范围是从 ‘-838:59:59’ 到 ‘838:59:59’</td>\n</tr>\n<tr>\n<td align=\"left\">YEAR()</td>\n<td align=\"left\">2 位或 4 位格式的年。 **注释：**4 位格式所允许的值：1901 到 2155。2 位格式所允许的值：70 到 69，表示从 1970 到 2069。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>**注意：**即便 DATETIME 和 TIMESTAMP 返回相同的格式，它们的工作方式很不同。在 INSERT 或 UPDATE 查询中，TIMESTAMP 自动把自身设置为当前的日期和时间。TIMESTAMP 也接受不同的格式，比如 YYYYMMDDHHMMSS、YYMMDDHHMMSS、YYYYMMDD 或 YYMMDD。</p>\n</blockquote>\n<h2 id=\"SQL-Server-数据类型\"><a href=\"#SQL-Server-数据类型\" class=\"headerlink\" title=\"SQL Server 数据类型\"></a>SQL Server 数据类型</h2><hr>\n<p>**　String 类型：**</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">存储</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">char(n)</td>\n<td align=\"left\">固定长度的字符串。最多 8,000 个字符。</td>\n<td align=\"left\">Defined width</td>\n</tr>\n<tr>\n<td align=\"left\">varchar(n)</td>\n<td align=\"left\">可变长度的字符串。最多 8,000 个字符。</td>\n<td align=\"left\">2 bytes + number of chars</td>\n</tr>\n<tr>\n<td align=\"left\">varchar(max)</td>\n<td align=\"left\">可变长度的字符串。最多 1,073,741,824 个字符。</td>\n<td align=\"left\">2 bytes + number of chars</td>\n</tr>\n<tr>\n<td align=\"left\">text</td>\n<td align=\"left\">可变长度的字符串。最多 2GB 文本数据。</td>\n<td align=\"left\">4 bytes + number of chars</td>\n</tr>\n<tr>\n<td align=\"left\">nchar</td>\n<td align=\"left\">固定长度的 Unicode 字符串。最多 4,000 个字符。</td>\n<td align=\"left\">Defined width x 2</td>\n</tr>\n<tr>\n<td align=\"left\">nvarchar</td>\n<td align=\"left\">可变长度的 Unicode 字符串。最多 4,000 个字符。</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">nvarchar(max)</td>\n<td align=\"left\">可变长度的 Unicode 字符串。最多 536,870,912 个字符。</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">ntext</td>\n<td align=\"left\">可变长度的 Unicode 字符串。最多 2GB 文本数据。</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">bit</td>\n<td align=\"left\">允许 0、1 或 NULL</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">binary(n)</td>\n<td align=\"left\">固定长度的二进制字符串。最多 8,000 字节。</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">varbinary</td>\n<td align=\"left\">可变长度的二进制字符串。最多 8,000 字节。</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">varbinary(max)</td>\n<td align=\"left\">可变长度的二进制字符串。最多 2GB。</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">image</td>\n<td align=\"left\">可变长度的二进制字符串。最多 2GB。</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>**　Number 类型：**</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">存储</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">tinyint</td>\n<td align=\"left\">允许从 0 到 255 的所有数字。</td>\n<td align=\"left\">1 字节</td>\n</tr>\n<tr>\n<td align=\"left\">smallint</td>\n<td align=\"left\">允许介于 -32,768 与 32,767 的所有数字。</td>\n<td align=\"left\">2 字节</td>\n</tr>\n<tr>\n<td align=\"left\">int</td>\n<td align=\"left\">允许介于 -2,147,483,648 与 2,147,483,647 的所有数字。</td>\n<td align=\"left\">4 字节</td>\n</tr>\n<tr>\n<td align=\"left\">bigint</td>\n<td align=\"left\">允许介于 -9,223,372,036,854,775,808 与 9,223,372,036,854,775,807 之间的所有数字。</td>\n<td align=\"left\">8 字节</td>\n</tr>\n<tr>\n<td align=\"left\">decimal(p,s)</td>\n<td align=\"left\">固定精度和比例的数字。 允许从 -10^38 +1 到 10^38 -1 之间的数字。 p 参数指示可以存储的最大位数（小数点左侧和右侧）。p 必须是 1 到 38 之间的值。默认是 18。 s 参数指示小数点右侧存储的最大位数。s 必须是 0 到 p 之间的值。默认是 0。</td>\n<td align=\"left\">5-17 字节</td>\n</tr>\n<tr>\n<td align=\"left\">numeric(p,s)</td>\n<td align=\"left\">固定精度和比例的数字。 允许从 -10^38 +1 到 10^38 -1 之间的数字。 p 参数指示可以存储的最大位数（小数点左侧和右侧）。p 必须是 1 到 38 之间的值。默认是 18。 s 参数指示小数点右侧存储的最大位数。s 必须是 0 到 p 之间的值。默认是 0。</td>\n<td align=\"left\">5-17 字节</td>\n</tr>\n<tr>\n<td align=\"left\">smallmoney</td>\n<td align=\"left\">介于 -214,748.3648 与 214,748.3647 之间的货币数据。</td>\n<td align=\"left\">4 字节</td>\n</tr>\n<tr>\n<td align=\"left\">money</td>\n<td align=\"left\">介于 -922,337,203,685,477.5808 与 922,337,203,685,477.5807 之间的货币数据。</td>\n<td align=\"left\">8 字节</td>\n</tr>\n<tr>\n<td align=\"left\">float(n)</td>\n<td align=\"left\">从 -1.79E + 308 到 1.79E + 308 的浮动精度数字数据。 n 参数指示该字段保存 4 字节还是 8 字节。float(24) 保存 4 字节，而 float(53) 保存 8 字节。n 的默认值是 53。</td>\n<td align=\"left\">4 或 8 字节</td>\n</tr>\n<tr>\n<td align=\"left\">real</td>\n<td align=\"left\">从 -3.40E + 38 到 3.40E + 38 的浮动精度数字数据。</td>\n<td align=\"left\">4 字节</td>\n</tr>\n</tbody></table>\n<p>**　Date 类型：**</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">存储</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">datetime</td>\n<td align=\"left\">从 1753 年 1 月 1 日 到 9999 年 12 月 31 日，精度为 3.33 毫秒。</td>\n<td align=\"left\">8 字节</td>\n</tr>\n<tr>\n<td align=\"left\">datetime2</td>\n<td align=\"left\">从 1753 年 1 月 1 日 到 9999 年 12 月 31 日，精度为 100 纳秒。</td>\n<td align=\"left\">6-8 字节</td>\n</tr>\n<tr>\n<td align=\"left\">smalldatetime</td>\n<td align=\"left\">从 1900 年 1 月 1 日 到 2079 年 6 月 6 日，精度为 1 分钟。</td>\n<td align=\"left\">4 字节</td>\n</tr>\n<tr>\n<td align=\"left\">date</td>\n<td align=\"left\">仅存储日期。从 0001 年 1 月 1 日 到 9999 年 12 月 31 日。</td>\n<td align=\"left\">3 bytes</td>\n</tr>\n<tr>\n<td align=\"left\">time</td>\n<td align=\"left\">仅存储时间。精度为 100 纳秒。</td>\n<td align=\"left\">3-5 字节</td>\n</tr>\n<tr>\n<td align=\"left\">datetimeoffset</td>\n<td align=\"left\">与 datetime2 相同，外加时区偏移。</td>\n<td align=\"left\">8-10 字节</td>\n</tr>\n<tr>\n<td align=\"left\">timestamp</td>\n<td align=\"left\">存储唯一的数字，每当创建或修改某行时，该数字会更新。timestamp 值基于内部时钟，不对应真实时间。每个表只能有一个 timestamp 变量。</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>**　其他数据类型：**</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">数据类型</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">sql_variant</td>\n<td align=\"left\">存储最多 8,000 字节不同数据类型的数据，除了 text、ntext 以及 timestamp。</td>\n</tr>\n<tr>\n<td align=\"left\">uniqueidentifier</td>\n<td align=\"left\">存储全局唯一标识符 (GUID)。</td>\n</tr>\n<tr>\n<td align=\"left\">xml</td>\n<td align=\"left\">存储 XML 格式化数据。最多 2GB。</td>\n</tr>\n<tr>\n<td align=\"left\">cursor</td>\n<td align=\"left\">存储对用于数据库操作的指针的引用。</td>\n</tr>\n<tr>\n<td align=\"left\">table</td>\n<td align=\"left\">存储结果集，供稍后处理。</td>\n</tr>\n</tbody></table>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 子查询","order":45,"_content":"\n## SQL 子查询\n\n------\n\n子查询（Sub Query）或者说内查询（Inner Query），也可以称作嵌套查询（Nested Query），是一种嵌套在其他 SQL 查询的 WHERE 子句中的查询。\n\n子查询用于为主查询返回其所需数据，或者对检索数据进行进一步的限制。\n\n子查询可以在 SELECT、INSERT、UPDATE 和 DELETE 语句中，同 =、<、>、>=、<=、IN、BETWEEN 等运算符一起使用。\n\n使用子查询必须遵循以下几个规则：\n\n- 子查询必须括在圆括号中。\n- 子查询的 SELECT 子句中只能有一个列，除非主查询中有多个列，用于与子查询选中的列相比较。\n- 子查询不能使用 ORDER BY，不过主查询可以。在子查询中，GROUP BY 可以起到同 ORDER BY 相同的作用。\n- 返回多行数据的子查询只能同多值操作符一起使用，比如 IN 操作符。\n- SELECT 列表中不能包含任何对 BLOB、ARRAY、CLOB 或者 NCLOB 类型值的引用。\n- 子查询不能直接用在聚合函数中。\n- BETWEEN 操作符不能同子查询一起使用，但是 BETWEEN 操作符可以用在子查询中。\n\n## SELECT 语句中的子查询\n\n------\n\n通常情况下子查询都与 SELECT 语句一起使用，其基本语法如下所示：\n\n```\nSELECT column_name [, column_name ]\nFROM   table1 [, table2 ]\nWHERE  column_name OPERATOR\n      (SELECT column_name [, column_name ]\n      FROM table1 [, table2 ]\n      [WHERE])\n```\n\n示例：\n\n------\n\n考虑 CUSTOMERS 表，表中记录如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  35 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n现在，让我们试一下在 SELECT 语句中进行子查询：\n\n```\nSQL> SELECT * \n     FROM CUSTOMERS \n     WHERE ID IN (SELECT ID \n                  FROM CUSTOMERS \n                  WHERE SALARY > 4500) ;\n```\n\n上述语句的执行结果如下所示：\n\n```\n+----+----------+-----+---------+----------+\n| ID | NAME     | AGE | ADDRESS | SALARY   |\n+----+----------+-----+---------+----------+\n|  4 | Chaitali |  25 | Mumbai  |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal  |  8500.00 |\n|  7 | Muffy    |  24 | Indore  | 10000.00 |\n+----+----------+-----+---------+----------+\n```\n\n## INSERT 语句中的子查询：\n\n------\n\n子查询还可以用在 INSERT 语句中。INSERT 语句可以将子查询返回的数据插入到其他表中。子查询中选取的数据可以被任何字符、日期或者数值函数所修饰。\n\n其基本语法如下所示：\n\n```\nINSERT INTO table_name [ (column1 [, column2 ]) ]\n           SELECT [ *|column1 [, column2 ]\n           FROM table1 [, table2 ]\n           [ WHERE VALUE OPERATOR ]\n```\n\n示例：\n\n------\n\n考虑与 CUSTOMERS 表拥有相似结构的 CUSTOMERS_BKP 表。现在要将 CUSTOMER 表中所有的数据复制到 CUSTOMERS_BKP 表中，代码如下：\n\n```\nSQL> INSERT INTO CUSTOMERS_BKP\n     SELECT * FROM CUSTOMERS \n     WHERE ID IN (SELECT ID \n                  FROM CUSTOMERS) ;\n```\n\n## UPDATE 语句中的子查询：\n\n------\n\n子查询可以用在 UPDATE 语句中。当子查询同 UPDATE 一起使用的时候，既可以更新单个列，也可更新多个列。\n\n其基本语法如下：\n\n```\nUPDATE table\nSET column_name = new_value\n[ WHERE OPERATOR [ VALUE ]\n   (SELECT COLUMN_NAME\n   FROM TABLE_NAME)\n   [ WHERE) ]\n```\n\n示例：\n\n------\n\n假设我们有一份 CUSTOMERS_BKP 表作为 CUSTOMERS 表的备份。\n\n下面的示例将 CUSTOMERS 表中所有 AGE 大于或者等于 27 的客户的 SALARY 字段都变为了原来的 0.25 倍：\n\n```\nSQL> UPDATE CUSTOMERS\n     SET SALARY = SALARY * 0.25\n     WHERE AGE IN (SELECT AGE FROM CUSTOMERS_BKP\n                   WHERE AGE >= 27 );\n```\n\n这将影响两行数据，随后 CUSTOMERS 表中的记录将如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  35 | Ahmedabad |   125.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  2125.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n## DELETE 语句中的子查询：\n\n------\n\n如同前面提到的其他语句一样，子查询还可以同 DELETE 语句一起使用。\n\n其基本语法如下所示：\n\n```\nDELETE FROM TABLE_NAME\n[ WHERE OPERATOR [ VALUE ]\n   (SELECT COLUMN_NAME\n   FROM TABLE_NAME)\n   [ WHERE) ]\n```\n\n示例：\n\n------\n\n假设我们有一份 CUSTOMERS_BKP 表作为 CUSTOMERS 表的备份。\n\n下面的示例将从 CUSTOMERS 表中删除所有 AGE 大于或者等于 27 的记录：\n\n```\nSQL> DELETE FROM CUSTOMERS\n     WHERE AGE IN (SELECT AGE FROM CUSTOMERS_BKP\n                   WHERE AGE > 27 );\n```\n\n这将影响两行数据，随后 CUSTOMERS 表中的记录将如下所示：\n\n```\n+----+----------+-----+---------+----------+\n| ID | NAME     | AGE | ADDRESS | SALARY   |\n+----+----------+-----+---------+----------+\n|  2 | Khilan   |  25 | Delhi   |  1500.00 |\n|  3 | kaushik  |  23 | Kota    |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai  |  6500.00 |\n|  6 | Komal    |  22 | MP      |  4500.00 |\n|  7 | Muffy    |  24 | Indore  | 10000.00 |\n+----+----------+-----+---------+----------+\n```\n","source":"wiki/sql/sentence/subquery.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 子查询\norder: 45\n---\n\n## SQL 子查询\n\n------\n\n子查询（Sub Query）或者说内查询（Inner Query），也可以称作嵌套查询（Nested Query），是一种嵌套在其他 SQL 查询的 WHERE 子句中的查询。\n\n子查询用于为主查询返回其所需数据，或者对检索数据进行进一步的限制。\n\n子查询可以在 SELECT、INSERT、UPDATE 和 DELETE 语句中，同 =、<、>、>=、<=、IN、BETWEEN 等运算符一起使用。\n\n使用子查询必须遵循以下几个规则：\n\n- 子查询必须括在圆括号中。\n- 子查询的 SELECT 子句中只能有一个列，除非主查询中有多个列，用于与子查询选中的列相比较。\n- 子查询不能使用 ORDER BY，不过主查询可以。在子查询中，GROUP BY 可以起到同 ORDER BY 相同的作用。\n- 返回多行数据的子查询只能同多值操作符一起使用，比如 IN 操作符。\n- SELECT 列表中不能包含任何对 BLOB、ARRAY、CLOB 或者 NCLOB 类型值的引用。\n- 子查询不能直接用在聚合函数中。\n- BETWEEN 操作符不能同子查询一起使用，但是 BETWEEN 操作符可以用在子查询中。\n\n## SELECT 语句中的子查询\n\n------\n\n通常情况下子查询都与 SELECT 语句一起使用，其基本语法如下所示：\n\n```\nSELECT column_name [, column_name ]\nFROM   table1 [, table2 ]\nWHERE  column_name OPERATOR\n      (SELECT column_name [, column_name ]\n      FROM table1 [, table2 ]\n      [WHERE])\n```\n\n示例：\n\n------\n\n考虑 CUSTOMERS 表，表中记录如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  35 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n现在，让我们试一下在 SELECT 语句中进行子查询：\n\n```\nSQL> SELECT * \n     FROM CUSTOMERS \n     WHERE ID IN (SELECT ID \n                  FROM CUSTOMERS \n                  WHERE SALARY > 4500) ;\n```\n\n上述语句的执行结果如下所示：\n\n```\n+----+----------+-----+---------+----------+\n| ID | NAME     | AGE | ADDRESS | SALARY   |\n+----+----------+-----+---------+----------+\n|  4 | Chaitali |  25 | Mumbai  |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal  |  8500.00 |\n|  7 | Muffy    |  24 | Indore  | 10000.00 |\n+----+----------+-----+---------+----------+\n```\n\n## INSERT 语句中的子查询：\n\n------\n\n子查询还可以用在 INSERT 语句中。INSERT 语句可以将子查询返回的数据插入到其他表中。子查询中选取的数据可以被任何字符、日期或者数值函数所修饰。\n\n其基本语法如下所示：\n\n```\nINSERT INTO table_name [ (column1 [, column2 ]) ]\n           SELECT [ *|column1 [, column2 ]\n           FROM table1 [, table2 ]\n           [ WHERE VALUE OPERATOR ]\n```\n\n示例：\n\n------\n\n考虑与 CUSTOMERS 表拥有相似结构的 CUSTOMERS_BKP 表。现在要将 CUSTOMER 表中所有的数据复制到 CUSTOMERS_BKP 表中，代码如下：\n\n```\nSQL> INSERT INTO CUSTOMERS_BKP\n     SELECT * FROM CUSTOMERS \n     WHERE ID IN (SELECT ID \n                  FROM CUSTOMERS) ;\n```\n\n## UPDATE 语句中的子查询：\n\n------\n\n子查询可以用在 UPDATE 语句中。当子查询同 UPDATE 一起使用的时候，既可以更新单个列，也可更新多个列。\n\n其基本语法如下：\n\n```\nUPDATE table\nSET column_name = new_value\n[ WHERE OPERATOR [ VALUE ]\n   (SELECT COLUMN_NAME\n   FROM TABLE_NAME)\n   [ WHERE) ]\n```\n\n示例：\n\n------\n\n假设我们有一份 CUSTOMERS_BKP 表作为 CUSTOMERS 表的备份。\n\n下面的示例将 CUSTOMERS 表中所有 AGE 大于或者等于 27 的客户的 SALARY 字段都变为了原来的 0.25 倍：\n\n```\nSQL> UPDATE CUSTOMERS\n     SET SALARY = SALARY * 0.25\n     WHERE AGE IN (SELECT AGE FROM CUSTOMERS_BKP\n                   WHERE AGE >= 27 );\n```\n\n这将影响两行数据，随后 CUSTOMERS 表中的记录将如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  35 | Ahmedabad |   125.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  2125.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n## DELETE 语句中的子查询：\n\n------\n\n如同前面提到的其他语句一样，子查询还可以同 DELETE 语句一起使用。\n\n其基本语法如下所示：\n\n```\nDELETE FROM TABLE_NAME\n[ WHERE OPERATOR [ VALUE ]\n   (SELECT COLUMN_NAME\n   FROM TABLE_NAME)\n   [ WHERE) ]\n```\n\n示例：\n\n------\n\n假设我们有一份 CUSTOMERS_BKP 表作为 CUSTOMERS 表的备份。\n\n下面的示例将从 CUSTOMERS 表中删除所有 AGE 大于或者等于 27 的记录：\n\n```\nSQL> DELETE FROM CUSTOMERS\n     WHERE AGE IN (SELECT AGE FROM CUSTOMERS_BKP\n                   WHERE AGE > 27 );\n```\n\n这将影响两行数据，随后 CUSTOMERS 表中的记录将如下所示：\n\n```\n+----+----------+-----+---------+----------+\n| ID | NAME     | AGE | ADDRESS | SALARY   |\n+----+----------+-----+---------+----------+\n|  2 | Khilan   |  25 | Delhi   |  1500.00 |\n|  3 | kaushik  |  23 | Kota    |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai  |  6500.00 |\n|  6 | Komal    |  22 | MP      |  4500.00 |\n|  7 | Muffy    |  24 | Indore  | 10000.00 |\n+----+----------+-----+---------+----------+\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T02:34:24.150Z","path":"wiki/sql/sentence/subquery.html","comments":1,"_id":"cmbreopj3001365x0g2g1fyif","content":"<h2 id=\"SQL-子查询\"><a href=\"#SQL-子查询\" class=\"headerlink\" title=\"SQL 子查询\"></a>SQL 子查询</h2><hr>\n<p>子查询（Sub Query）或者说内查询（Inner Query），也可以称作嵌套查询（Nested Query），是一种嵌套在其他 SQL 查询的 WHERE 子句中的查询。</p>\n<p>子查询用于为主查询返回其所需数据，或者对检索数据进行进一步的限制。</p>\n<p>子查询可以在 SELECT、INSERT、UPDATE 和 DELETE 语句中，同 &#x3D;、&lt;、&gt;、&gt;&#x3D;、&lt;&#x3D;、IN、BETWEEN 等运算符一起使用。</p>\n<p>使用子查询必须遵循以下几个规则：</p>\n<ul>\n<li>子查询必须括在圆括号中。</li>\n<li>子查询的 SELECT 子句中只能有一个列，除非主查询中有多个列，用于与子查询选中的列相比较。</li>\n<li>子查询不能使用 ORDER BY，不过主查询可以。在子查询中，GROUP BY 可以起到同 ORDER BY 相同的作用。</li>\n<li>返回多行数据的子查询只能同多值操作符一起使用，比如 IN 操作符。</li>\n<li>SELECT 列表中不能包含任何对 BLOB、ARRAY、CLOB 或者 NCLOB 类型值的引用。</li>\n<li>子查询不能直接用在聚合函数中。</li>\n<li>BETWEEN 操作符不能同子查询一起使用，但是 BETWEEN 操作符可以用在子查询中。</li>\n</ul>\n<h2 id=\"SELECT-语句中的子查询\"><a href=\"#SELECT-语句中的子查询\" class=\"headerlink\" title=\"SELECT 语句中的子查询\"></a>SELECT 语句中的子查询</h2><hr>\n<p>通常情况下子查询都与 SELECT 语句一起使用，其基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name [, column_name ]</span><br><span class=\"line\">FROM   table1 [, table2 ]</span><br><span class=\"line\">WHERE  column_name OPERATOR</span><br><span class=\"line\">      (SELECT column_name [, column_name ]</span><br><span class=\"line\">      FROM table1 [, table2 ]</span><br><span class=\"line\">      [WHERE])</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<hr>\n<p>考虑 CUSTOMERS 表，表中记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  35 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我们试一下在 SELECT 语句中进行子查询：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT * </span><br><span class=\"line\">     FROM CUSTOMERS </span><br><span class=\"line\">     WHERE ID IN (SELECT ID </span><br><span class=\"line\">                  FROM CUSTOMERS </span><br><span class=\"line\">                  WHERE SALARY &gt; 4500) ;</span><br></pre></td></tr></table></figure>\n\n<p>上述语句的执行结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+---------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS | SALARY   |</span><br><span class=\"line\">+----+----------+-----+---------+----------+</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai  |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal  |  8500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore  | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+---------+----------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"INSERT-语句中的子查询：\"><a href=\"#INSERT-语句中的子查询：\" class=\"headerlink\" title=\"INSERT 语句中的子查询：\"></a>INSERT 语句中的子查询：</h2><hr>\n<p>子查询还可以用在 INSERT 语句中。INSERT 语句可以将子查询返回的数据插入到其他表中。子查询中选取的数据可以被任何字符、日期或者数值函数所修饰。</p>\n<p>其基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO table_name [ (column1 [, column2 ]) ]</span><br><span class=\"line\">           SELECT [ *|column1 [, column2 ]</span><br><span class=\"line\">           FROM table1 [, table2 ]</span><br><span class=\"line\">           [ WHERE VALUE OPERATOR ]</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<hr>\n<p>考虑与 CUSTOMERS 表拥有相似结构的 CUSTOMERS_BKP 表。现在要将 CUSTOMER 表中所有的数据复制到 CUSTOMERS_BKP 表中，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; INSERT INTO CUSTOMERS_BKP</span><br><span class=\"line\">     SELECT * FROM CUSTOMERS </span><br><span class=\"line\">     WHERE ID IN (SELECT ID </span><br><span class=\"line\">                  FROM CUSTOMERS) ;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"UPDATE-语句中的子查询：\"><a href=\"#UPDATE-语句中的子查询：\" class=\"headerlink\" title=\"UPDATE 语句中的子查询：\"></a>UPDATE 语句中的子查询：</h2><hr>\n<p>子查询可以用在 UPDATE 语句中。当子查询同 UPDATE 一起使用的时候，既可以更新单个列，也可更新多个列。</p>\n<p>其基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">UPDATE table</span><br><span class=\"line\">SET column_name = new_value</span><br><span class=\"line\">[ WHERE OPERATOR [ VALUE ]</span><br><span class=\"line\">   (SELECT COLUMN_NAME</span><br><span class=\"line\">   FROM TABLE_NAME)</span><br><span class=\"line\">   [ WHERE) ]</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<hr>\n<p>假设我们有一份 CUSTOMERS_BKP 表作为 CUSTOMERS 表的备份。</p>\n<p>下面的示例将 CUSTOMERS 表中所有 AGE 大于或者等于 27 的客户的 SALARY 字段都变为了原来的 0.25 倍：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; UPDATE CUSTOMERS</span><br><span class=\"line\">     SET SALARY = SALARY * 0.25</span><br><span class=\"line\">     WHERE AGE IN (SELECT AGE FROM CUSTOMERS_BKP</span><br><span class=\"line\">                   WHERE AGE &gt;= 27 );</span><br></pre></td></tr></table></figure>\n\n<p>这将影响两行数据，随后 CUSTOMERS 表中的记录将如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  35 | Ahmedabad |   125.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  2125.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DELETE-语句中的子查询：\"><a href=\"#DELETE-语句中的子查询：\" class=\"headerlink\" title=\"DELETE 语句中的子查询：\"></a>DELETE 语句中的子查询：</h2><hr>\n<p>如同前面提到的其他语句一样，子查询还可以同 DELETE 语句一起使用。</p>\n<p>其基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DELETE FROM TABLE_NAME</span><br><span class=\"line\">[ WHERE OPERATOR [ VALUE ]</span><br><span class=\"line\">   (SELECT COLUMN_NAME</span><br><span class=\"line\">   FROM TABLE_NAME)</span><br><span class=\"line\">   [ WHERE) ]</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<hr>\n<p>假设我们有一份 CUSTOMERS_BKP 表作为 CUSTOMERS 表的备份。</p>\n<p>下面的示例将从 CUSTOMERS 表中删除所有 AGE 大于或者等于 27 的记录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; DELETE FROM CUSTOMERS</span><br><span class=\"line\">     WHERE AGE IN (SELECT AGE FROM CUSTOMERS_BKP</span><br><span class=\"line\">                   WHERE AGE &gt; 27 );</span><br></pre></td></tr></table></figure>\n\n<p>这将影响两行数据，随后 CUSTOMERS 表中的记录将如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+---------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS | SALARY   |</span><br><span class=\"line\">+----+----------+-----+---------+----------+</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi   |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota    |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai  |  6500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP      |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore  | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+---------+----------+</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-子查询\"><a href=\"#SQL-子查询\" class=\"headerlink\" title=\"SQL 子查询\"></a>SQL 子查询</h2><hr>\n<p>子查询（Sub Query）或者说内查询（Inner Query），也可以称作嵌套查询（Nested Query），是一种嵌套在其他 SQL 查询的 WHERE 子句中的查询。</p>\n<p>子查询用于为主查询返回其所需数据，或者对检索数据进行进一步的限制。</p>\n<p>子查询可以在 SELECT、INSERT、UPDATE 和 DELETE 语句中，同 &#x3D;、&lt;、&gt;、&gt;&#x3D;、&lt;&#x3D;、IN、BETWEEN 等运算符一起使用。</p>\n<p>使用子查询必须遵循以下几个规则：</p>\n<ul>\n<li>子查询必须括在圆括号中。</li>\n<li>子查询的 SELECT 子句中只能有一个列，除非主查询中有多个列，用于与子查询选中的列相比较。</li>\n<li>子查询不能使用 ORDER BY，不过主查询可以。在子查询中，GROUP BY 可以起到同 ORDER BY 相同的作用。</li>\n<li>返回多行数据的子查询只能同多值操作符一起使用，比如 IN 操作符。</li>\n<li>SELECT 列表中不能包含任何对 BLOB、ARRAY、CLOB 或者 NCLOB 类型值的引用。</li>\n<li>子查询不能直接用在聚合函数中。</li>\n<li>BETWEEN 操作符不能同子查询一起使用，但是 BETWEEN 操作符可以用在子查询中。</li>\n</ul>\n<h2 id=\"SELECT-语句中的子查询\"><a href=\"#SELECT-语句中的子查询\" class=\"headerlink\" title=\"SELECT 语句中的子查询\"></a>SELECT 语句中的子查询</h2><hr>\n<p>通常情况下子查询都与 SELECT 语句一起使用，其基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name [, column_name ]</span><br><span class=\"line\">FROM   table1 [, table2 ]</span><br><span class=\"line\">WHERE  column_name OPERATOR</span><br><span class=\"line\">      (SELECT column_name [, column_name ]</span><br><span class=\"line\">      FROM table1 [, table2 ]</span><br><span class=\"line\">      [WHERE])</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<hr>\n<p>考虑 CUSTOMERS 表，表中记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  35 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我们试一下在 SELECT 语句中进行子查询：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT * </span><br><span class=\"line\">     FROM CUSTOMERS </span><br><span class=\"line\">     WHERE ID IN (SELECT ID </span><br><span class=\"line\">                  FROM CUSTOMERS </span><br><span class=\"line\">                  WHERE SALARY &gt; 4500) ;</span><br></pre></td></tr></table></figure>\n\n<p>上述语句的执行结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+---------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS | SALARY   |</span><br><span class=\"line\">+----+----------+-----+---------+----------+</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai  |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal  |  8500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore  | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+---------+----------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"INSERT-语句中的子查询：\"><a href=\"#INSERT-语句中的子查询：\" class=\"headerlink\" title=\"INSERT 语句中的子查询：\"></a>INSERT 语句中的子查询：</h2><hr>\n<p>子查询还可以用在 INSERT 语句中。INSERT 语句可以将子查询返回的数据插入到其他表中。子查询中选取的数据可以被任何字符、日期或者数值函数所修饰。</p>\n<p>其基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO table_name [ (column1 [, column2 ]) ]</span><br><span class=\"line\">           SELECT [ *|column1 [, column2 ]</span><br><span class=\"line\">           FROM table1 [, table2 ]</span><br><span class=\"line\">           [ WHERE VALUE OPERATOR ]</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<hr>\n<p>考虑与 CUSTOMERS 表拥有相似结构的 CUSTOMERS_BKP 表。现在要将 CUSTOMER 表中所有的数据复制到 CUSTOMERS_BKP 表中，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; INSERT INTO CUSTOMERS_BKP</span><br><span class=\"line\">     SELECT * FROM CUSTOMERS </span><br><span class=\"line\">     WHERE ID IN (SELECT ID </span><br><span class=\"line\">                  FROM CUSTOMERS) ;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"UPDATE-语句中的子查询：\"><a href=\"#UPDATE-语句中的子查询：\" class=\"headerlink\" title=\"UPDATE 语句中的子查询：\"></a>UPDATE 语句中的子查询：</h2><hr>\n<p>子查询可以用在 UPDATE 语句中。当子查询同 UPDATE 一起使用的时候，既可以更新单个列，也可更新多个列。</p>\n<p>其基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">UPDATE table</span><br><span class=\"line\">SET column_name = new_value</span><br><span class=\"line\">[ WHERE OPERATOR [ VALUE ]</span><br><span class=\"line\">   (SELECT COLUMN_NAME</span><br><span class=\"line\">   FROM TABLE_NAME)</span><br><span class=\"line\">   [ WHERE) ]</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<hr>\n<p>假设我们有一份 CUSTOMERS_BKP 表作为 CUSTOMERS 表的备份。</p>\n<p>下面的示例将 CUSTOMERS 表中所有 AGE 大于或者等于 27 的客户的 SALARY 字段都变为了原来的 0.25 倍：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; UPDATE CUSTOMERS</span><br><span class=\"line\">     SET SALARY = SALARY * 0.25</span><br><span class=\"line\">     WHERE AGE IN (SELECT AGE FROM CUSTOMERS_BKP</span><br><span class=\"line\">                   WHERE AGE &gt;= 27 );</span><br></pre></td></tr></table></figure>\n\n<p>这将影响两行数据，随后 CUSTOMERS 表中的记录将如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  35 | Ahmedabad |   125.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  2125.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DELETE-语句中的子查询：\"><a href=\"#DELETE-语句中的子查询：\" class=\"headerlink\" title=\"DELETE 语句中的子查询：\"></a>DELETE 语句中的子查询：</h2><hr>\n<p>如同前面提到的其他语句一样，子查询还可以同 DELETE 语句一起使用。</p>\n<p>其基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DELETE FROM TABLE_NAME</span><br><span class=\"line\">[ WHERE OPERATOR [ VALUE ]</span><br><span class=\"line\">   (SELECT COLUMN_NAME</span><br><span class=\"line\">   FROM TABLE_NAME)</span><br><span class=\"line\">   [ WHERE) ]</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<hr>\n<p>假设我们有一份 CUSTOMERS_BKP 表作为 CUSTOMERS 表的备份。</p>\n<p>下面的示例将从 CUSTOMERS 表中删除所有 AGE 大于或者等于 27 的记录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; DELETE FROM CUSTOMERS</span><br><span class=\"line\">     WHERE AGE IN (SELECT AGE FROM CUSTOMERS_BKP</span><br><span class=\"line\">                   WHERE AGE &gt; 27 );</span><br></pre></td></tr></table></figure>\n\n<p>这将影响两行数据，随后 CUSTOMERS 表中的记录将如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+---------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS | SALARY   |</span><br><span class=\"line\">+----+----------+-----+---------+----------+</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi   |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota    |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai  |  6500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP      |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore  | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+---------+----------+</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL SELECT INTO语句","order":30,"_content":"\n## SQL SELECT INTO 语句\n\n------\n\n使用 SQL，您可以将信息从一个表中复制到另一个表中。\n\nSELECT INTO 语句从一个表中复制数据，然后将数据插入到另一个新表中。\n\n### SQL SELECT INTO 语法\n\n我们可以把所有的列都复制到新表中：\n\n```\nSELECT *\nINTO newtable [IN externaldb]\nFROM table1;\n```\n\n或者只复制希望的列插入到新表中：\n\n```\nSELECT column_name(s)\nINTO newtable [IN externaldb]\nFROM table1;\n```\n\n| **提示：**将使用SELECT语句中定义的列名和类型创建新表。您可以使用AS子句来应用一个新名称。 |\n| :----------------------------------------------------------- |\n\n## SQL SELECT INTO 实例\n\n------\n\n创建 Customers 的备份复件：\n\n```\nSELECT *\nINTO CustomersBackup2013\nFROM Customers;\n```\n\n请使用 IN 子句来复制表到另一个数据库中：\n\n```\nSELECT *\nINTO CustomersBackup2013 IN 'Backup.mdb'\nFROM Customers;\n```\n\n只复制一些列插入到新表中：\n\n```\nSELECT CustomerName,\nContactName\nINTO CustomersBackup2013\nFROM Customers;\n```\n\n只复制德国的客户插入到新表中：\n\n```\nSELECT *\nINTO CustomersBackup2013\nFROM Customers\nWHERE Country='Germany';\n```\n\n复制多个表中的数据插入到新表中：\n\n```\nSELECT Customers.CustomerName, Orders.OrderID\nINTO CustomersOrderBackup2013\nFROM Customers\nLEFT JOIN Orders\nON Customers.CustomerID=Orders.CustomerID;\n```\n\n**　提示：**SELECT INTO 语句可以用于在另一种模式下创建一个新的空表。只需添加WHERE子句，使查询返回时没有数据：\n\n```\nSELECT *\nINTO newtable\nFROM table1\nWHERE 1=0;\n```\n","source":"wiki/sql/sentence/selectinto.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL SELECT INTO语句\norder: 30\n---\n\n## SQL SELECT INTO 语句\n\n------\n\n使用 SQL，您可以将信息从一个表中复制到另一个表中。\n\nSELECT INTO 语句从一个表中复制数据，然后将数据插入到另一个新表中。\n\n### SQL SELECT INTO 语法\n\n我们可以把所有的列都复制到新表中：\n\n```\nSELECT *\nINTO newtable [IN externaldb]\nFROM table1;\n```\n\n或者只复制希望的列插入到新表中：\n\n```\nSELECT column_name(s)\nINTO newtable [IN externaldb]\nFROM table1;\n```\n\n| **提示：**将使用SELECT语句中定义的列名和类型创建新表。您可以使用AS子句来应用一个新名称。 |\n| :----------------------------------------------------------- |\n\n## SQL SELECT INTO 实例\n\n------\n\n创建 Customers 的备份复件：\n\n```\nSELECT *\nINTO CustomersBackup2013\nFROM Customers;\n```\n\n请使用 IN 子句来复制表到另一个数据库中：\n\n```\nSELECT *\nINTO CustomersBackup2013 IN 'Backup.mdb'\nFROM Customers;\n```\n\n只复制一些列插入到新表中：\n\n```\nSELECT CustomerName,\nContactName\nINTO CustomersBackup2013\nFROM Customers;\n```\n\n只复制德国的客户插入到新表中：\n\n```\nSELECT *\nINTO CustomersBackup2013\nFROM Customers\nWHERE Country='Germany';\n```\n\n复制多个表中的数据插入到新表中：\n\n```\nSELECT Customers.CustomerName, Orders.OrderID\nINTO CustomersOrderBackup2013\nFROM Customers\nLEFT JOIN Orders\nON Customers.CustomerID=Orders.CustomerID;\n```\n\n**　提示：**SELECT INTO 语句可以用于在另一种模式下创建一个新的空表。只需添加WHERE子句，使查询返回时没有数据：\n\n```\nSELECT *\nINTO newtable\nFROM table1\nWHERE 1=0;\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T01:32:18.795Z","path":"wiki/sql/sentence/selectinto.html","comments":1,"_id":"cmbreopj4001465x0b6n6fhc2","content":"<h2 id=\"SQL-SELECT-INTO-语句\"><a href=\"#SQL-SELECT-INTO-语句\" class=\"headerlink\" title=\"SQL SELECT INTO 语句\"></a>SQL SELECT INTO 语句</h2><hr>\n<p>使用 SQL，您可以将信息从一个表中复制到另一个表中。</p>\n<p>SELECT INTO 语句从一个表中复制数据，然后将数据插入到另一个新表中。</p>\n<h3 id=\"SQL-SELECT-INTO-语法\"><a href=\"#SQL-SELECT-INTO-语法\" class=\"headerlink\" title=\"SQL SELECT INTO 语法\"></a>SQL SELECT INTO 语法</h3><p>我们可以把所有的列都复制到新表中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT *</span><br><span class=\"line\">INTO newtable [IN externaldb]</span><br><span class=\"line\">FROM table1;</span><br></pre></td></tr></table></figure>\n\n<p>或者只复制希望的列插入到新表中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">INTO newtable [IN externaldb]</span><br><span class=\"line\">FROM table1;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">**提示：**将使用SELECT语句中定义的列名和类型创建新表。您可以使用AS子句来应用一个新名称。</th>\n</tr>\n</thead>\n</table>\n<h2 id=\"SQL-SELECT-INTO-实例\"><a href=\"#SQL-SELECT-INTO-实例\" class=\"headerlink\" title=\"SQL SELECT INTO 实例\"></a>SQL SELECT INTO 实例</h2><hr>\n<p>创建 Customers 的备份复件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT *</span><br><span class=\"line\">INTO CustomersBackup2013</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>请使用 IN 子句来复制表到另一个数据库中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT *</span><br><span class=\"line\">INTO CustomersBackup2013 IN &#x27;Backup.mdb&#x27;</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>只复制一些列插入到新表中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerName,</span><br><span class=\"line\">ContactName</span><br><span class=\"line\">INTO CustomersBackup2013</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>只复制德国的客户插入到新表中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT *</span><br><span class=\"line\">INTO CustomersBackup2013</span><br><span class=\"line\">FROM Customers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>复制多个表中的数据插入到新表中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Customers.CustomerName, Orders.OrderID</span><br><span class=\"line\">INTO CustomersOrderBackup2013</span><br><span class=\"line\">FROM Customers</span><br><span class=\"line\">LEFT JOIN Orders</span><br><span class=\"line\">ON Customers.CustomerID=Orders.CustomerID;</span><br></pre></td></tr></table></figure>\n\n<p>**　提示：**SELECT INTO 语句可以用于在另一种模式下创建一个新的空表。只需添加WHERE子句，使查询返回时没有数据：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT *</span><br><span class=\"line\">INTO newtable</span><br><span class=\"line\">FROM table1</span><br><span class=\"line\">WHERE 1=0;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-SELECT-INTO-语句\"><a href=\"#SQL-SELECT-INTO-语句\" class=\"headerlink\" title=\"SQL SELECT INTO 语句\"></a>SQL SELECT INTO 语句</h2><hr>\n<p>使用 SQL，您可以将信息从一个表中复制到另一个表中。</p>\n<p>SELECT INTO 语句从一个表中复制数据，然后将数据插入到另一个新表中。</p>\n<h3 id=\"SQL-SELECT-INTO-语法\"><a href=\"#SQL-SELECT-INTO-语法\" class=\"headerlink\" title=\"SQL SELECT INTO 语法\"></a>SQL SELECT INTO 语法</h3><p>我们可以把所有的列都复制到新表中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT *</span><br><span class=\"line\">INTO newtable [IN externaldb]</span><br><span class=\"line\">FROM table1;</span><br></pre></td></tr></table></figure>\n\n<p>或者只复制希望的列插入到新表中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">INTO newtable [IN externaldb]</span><br><span class=\"line\">FROM table1;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">**提示：**将使用SELECT语句中定义的列名和类型创建新表。您可以使用AS子句来应用一个新名称。</th>\n</tr>\n</thead>\n</table>\n<h2 id=\"SQL-SELECT-INTO-实例\"><a href=\"#SQL-SELECT-INTO-实例\" class=\"headerlink\" title=\"SQL SELECT INTO 实例\"></a>SQL SELECT INTO 实例</h2><hr>\n<p>创建 Customers 的备份复件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT *</span><br><span class=\"line\">INTO CustomersBackup2013</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>请使用 IN 子句来复制表到另一个数据库中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT *</span><br><span class=\"line\">INTO CustomersBackup2013 IN &#x27;Backup.mdb&#x27;</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>只复制一些列插入到新表中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerName,</span><br><span class=\"line\">ContactName</span><br><span class=\"line\">INTO CustomersBackup2013</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>只复制德国的客户插入到新表中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT *</span><br><span class=\"line\">INTO CustomersBackup2013</span><br><span class=\"line\">FROM Customers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>复制多个表中的数据插入到新表中：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Customers.CustomerName, Orders.OrderID</span><br><span class=\"line\">INTO CustomersOrderBackup2013</span><br><span class=\"line\">FROM Customers</span><br><span class=\"line\">LEFT JOIN Orders</span><br><span class=\"line\">ON Customers.CustomerID=Orders.CustomerID;</span><br></pre></td></tr></table></figure>\n\n<p>**　提示：**SELECT INTO 语句可以用于在另一种模式下创建一个新的空表。只需添加WHERE子句，使查询返回时没有数据：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT *</span><br><span class=\"line\">INTO newtable</span><br><span class=\"line\">FROM table1</span><br><span class=\"line\">WHERE 1=0;</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL TRUNCATE TABLE 命令","order":47,"_content":"\n## SQL TRUNCATE TABLE 命令\n\n------\n\nSQL **TRUNCATE TABLE** 命令用于删除现有数据表中的所有数据。\n\n你也可以使用 DROP TABLE 命令来删除整个数据表，不过 DROP TABLE 命令不但会删除表中所有数据，还会将整个表结构从数据库中移除。如果想要重新向表中存储数据的话，必须重建该数据表。\n\n## 语法\n\n------\n\n**　TRUNCATE TABLE** 的基本语法如下所示：\n\n```\nTRUNCATE TABLE  table_name;\n```\n\n示例：\n\n------\n\n考虑 CUSTOMERS 表，表中的记录如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n下面的示例展示了 TRUNCATE 命令的用法：\n\n```\nTRUNCATE TABLE CUSTOMERS;\n```\n\n现在，CUSTOMERS 表已经被清空了，SELECT 语句的输出应当如下所示：\n\n```\nSQL> SELECT * FROM CUSTOMERS;\nEmpty set (0.00 sec)\n```\n","source":"wiki/sql/sentence/truncate.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL TRUNCATE TABLE 命令\norder: 47\n---\n\n## SQL TRUNCATE TABLE 命令\n\n------\n\nSQL **TRUNCATE TABLE** 命令用于删除现有数据表中的所有数据。\n\n你也可以使用 DROP TABLE 命令来删除整个数据表，不过 DROP TABLE 命令不但会删除表中所有数据，还会将整个表结构从数据库中移除。如果想要重新向表中存储数据的话，必须重建该数据表。\n\n## 语法\n\n------\n\n**　TRUNCATE TABLE** 的基本语法如下所示：\n\n```\nTRUNCATE TABLE  table_name;\n```\n\n示例：\n\n------\n\n考虑 CUSTOMERS 表，表中的记录如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n下面的示例展示了 TRUNCATE 命令的用法：\n\n```\nTRUNCATE TABLE CUSTOMERS;\n```\n\n现在，CUSTOMERS 表已经被清空了，SELECT 语句的输出应当如下所示：\n\n```\nSQL> SELECT * FROM CUSTOMERS;\nEmpty set (0.00 sec)\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T02:41:30.610Z","path":"wiki/sql/sentence/truncate.html","comments":1,"_id":"cmbreopj5001565x06snv3bm6","content":"<h2 id=\"SQL-TRUNCATE-TABLE-命令\"><a href=\"#SQL-TRUNCATE-TABLE-命令\" class=\"headerlink\" title=\"SQL TRUNCATE TABLE 命令\"></a>SQL TRUNCATE TABLE 命令</h2><hr>\n<p>SQL <strong>TRUNCATE TABLE</strong> 命令用于删除现有数据表中的所有数据。</p>\n<p>你也可以使用 DROP TABLE 命令来删除整个数据表，不过 DROP TABLE 命令不但会删除表中所有数据，还会将整个表结构从数据库中移除。如果想要重新向表中存储数据的话，必须重建该数据表。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><hr>\n<p>**　TRUNCATE TABLE** 的基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">TRUNCATE TABLE  table_name;</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<hr>\n<p>考虑 CUSTOMERS 表，表中的记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>下面的示例展示了 TRUNCATE 命令的用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">TRUNCATE TABLE CUSTOMERS;</span><br></pre></td></tr></table></figure>\n\n<p>现在，CUSTOMERS 表已经被清空了，SELECT 语句的输出应当如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT * FROM CUSTOMERS;</span><br><span class=\"line\">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-TRUNCATE-TABLE-命令\"><a href=\"#SQL-TRUNCATE-TABLE-命令\" class=\"headerlink\" title=\"SQL TRUNCATE TABLE 命令\"></a>SQL TRUNCATE TABLE 命令</h2><hr>\n<p>SQL <strong>TRUNCATE TABLE</strong> 命令用于删除现有数据表中的所有数据。</p>\n<p>你也可以使用 DROP TABLE 命令来删除整个数据表，不过 DROP TABLE 命令不但会删除表中所有数据，还会将整个表结构从数据库中移除。如果想要重新向表中存储数据的话，必须重建该数据表。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><hr>\n<p>**　TRUNCATE TABLE** 的基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">TRUNCATE TABLE  table_name;</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<hr>\n<p>考虑 CUSTOMERS 表，表中的记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>下面的示例展示了 TRUNCATE 命令的用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">TRUNCATE TABLE CUSTOMERS;</span><br></pre></td></tr></table></figure>\n\n<p>现在，CUSTOMERS 表已经被清空了，SELECT 语句的输出应当如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT * FROM CUSTOMERS;</span><br><span class=\"line\">Empty set (0.00 sec)</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL UNION运算符","order":29,"_content":"\n## SQL UNION 运算符\n\n------\n\nUNION运算符用于组合两个或更多SELECT语句的结果集，而不返回任何重复的行。\n\n- UNION中的每个SELECT语句必须具有相同的列数\n- 这些列也必须具有相似的数据类型\n- 每个SELECT语句中的列也必须以相同的顺序排列\n- 每个SELECT语句必须有相同数目的列表达式\n- 但是每个SELECT语句的长度不必相同\n\n### SQL UNION 语法1\n\n```\nSELECT column_name(s) FROM table1\nUNION\nSELECT column_name(s) FROM table2;\n```\n\n> **注释：**默认情况下，UNION 运算符选择一个不同的值。如果允许重复值，请使用 UNION ALL。\n\n### SQL UNION 语法2\n\n```\nSELECT column_name(s) FROM table1\n[WHERE condition]\n\nUNION\nSELECT column_name(s) FROM table2\n[WHERE condition];\n```\n\n给定的条件可以是基于您的需求的任何给定表达式。\n\n### SQL UNION ALL 语法1\n\nUNION All运算符用于组合两个SELECT语句(包括重复行)的结果。\n\n适用于UNION子句的相同规则将适用于UNION All操作符。\n\n```\nSELECT column_name(s) FROM table1\nUNION ALL\nSELECT column_name(s) FROM table2;\n```\n\n> **注释：**UNION结果集中的列名总是等于UNION中第一个SELECT语句中的列名。\n\n### SQL UNION ALL 语法2\n\n```\nSELECT column_name(s) FROM table1\n[WHERE condition]\nUNION ALL\nSELECT column_name(s) FROM table2\n[WHERE condition];\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是\"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName    | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders   | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo   | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n\n选自 \"Suppliers\" 表的数据：\n\n| SupplierID | SupplierName               | ContactName      | Address        | City        | PostalCode | Country |\n| :--------- | :------------------------- | :--------------- | :------------- | :---------- | :--------- | :------ |\n| 1          | Exotic Liquid              | Charlotte Cooper | 49 Gilbert St. | Londona     | EC1 4SD    | UK      |\n| 2          | New Orleans Cajun Delights | Shelley Burke    | P.O. Box 78934 | New Orleans | 70117      | USA     |\n| 3          | Grandma Kelly's Homestead  | Regina Murphy    | 707 Oxford Rd. | Ann Arbor   | 48104      | USA     |\n\n------\n\n## SQL UNION 实例\n\n下面的 SQL 语句从 \"Customers\" 和 \"Suppliers\" 表中选取所有**不同的**城市（只有不同的值）：\n\n示例：\n\n```\nSELECT City FROM Customers\nUNION\nSELECT City FROM Suppliers\nORDER BY City;\n```\n\n**注释：**不能用 UNION 来列出两个表中的所有城市。如果一些客户和供应商来自同一个城市，每个城市将只被列入一个列表。UNION将只选择不同的值。请使用UNION ALL选择重复值!\n\n## SQL UNION ALL 实例\n\n------\n\n以下SQL语句使用 UNION ALL 从 \"Customers\"和\"Suppliers\" 表中选择所有城市（也是重复的值）：\n\n示例：\n\n```\nSELECT City FROM Customers\nUNION ALL\nSELECT City FROM Suppliers\nORDER BY City;\n```\n\n## 带有 WHERE 的 SQL UNION ALL\n\n------\n\n以下SQL语句使用UNIONALL从\"Customers\"和 \"Suppliers\" 表中选择所有德国城市（也是重复数值）：\n\n示例：\n\n```\nSELECT City, Country FROM Customers\nWHERE Country='Germany'\nUNION ALL\nSELECT City, Country FROM Suppliers\nWHERE Country='Germany'\nORDER BY City;\n```\n\n\n\n## SQL UNION与WHERE\n\n------\n\n以下SQL语句从\"客户\"和\"供应商\"中选择所有不同的德国城市（只有不同的值）：\n\n```\nSELECT City, Country FROM Customers\nWHERE Country='Germany'\nUNION\nSELECT City, Country FROM Suppliers\nWHERE Country='Germany'\nORDER BY City;\n```\n\n## 另一个UNION示例\n\n------\n\n以下SQL语句列出了所有客户和供应商：\n\n```\nSELECT 'Customer' As Type, ContactName, City, Country\nFROM Customers\nUNION\nSELECT 'Supplier', ContactName, City, Country\nFROM Suppliers;\n```\n\n还有另外两个子句(即运算符)，它们类似于UNION子句：\n\n- **SQL INTERSECT子句**\n  用于组合两个SELECT语句，但只返回与第二个SELECT语句中的一行相同的第一个SELECT语句中的行。\n- **SQL EXCEPT子句**\n  用于组合两个SELECT语句，并返回第一个SELECT语句中没有由第二个SELECT语句返回的行。\n","source":"wiki/sql/sentence/union.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL UNION运算符\norder: 29\n---\n\n## SQL UNION 运算符\n\n------\n\nUNION运算符用于组合两个或更多SELECT语句的结果集，而不返回任何重复的行。\n\n- UNION中的每个SELECT语句必须具有相同的列数\n- 这些列也必须具有相似的数据类型\n- 每个SELECT语句中的列也必须以相同的顺序排列\n- 每个SELECT语句必须有相同数目的列表达式\n- 但是每个SELECT语句的长度不必相同\n\n### SQL UNION 语法1\n\n```\nSELECT column_name(s) FROM table1\nUNION\nSELECT column_name(s) FROM table2;\n```\n\n> **注释：**默认情况下，UNION 运算符选择一个不同的值。如果允许重复值，请使用 UNION ALL。\n\n### SQL UNION 语法2\n\n```\nSELECT column_name(s) FROM table1\n[WHERE condition]\n\nUNION\nSELECT column_name(s) FROM table2\n[WHERE condition];\n```\n\n给定的条件可以是基于您的需求的任何给定表达式。\n\n### SQL UNION ALL 语法1\n\nUNION All运算符用于组合两个SELECT语句(包括重复行)的结果。\n\n适用于UNION子句的相同规则将适用于UNION All操作符。\n\n```\nSELECT column_name(s) FROM table1\nUNION ALL\nSELECT column_name(s) FROM table2;\n```\n\n> **注释：**UNION结果集中的列名总是等于UNION中第一个SELECT语句中的列名。\n\n### SQL UNION ALL 语法2\n\n```\nSELECT column_name(s) FROM table1\n[WHERE condition]\nUNION ALL\nSELECT column_name(s) FROM table2\n[WHERE condition];\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是\"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName    | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders   | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo   | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n\n选自 \"Suppliers\" 表的数据：\n\n| SupplierID | SupplierName               | ContactName      | Address        | City        | PostalCode | Country |\n| :--------- | :------------------------- | :--------------- | :------------- | :---------- | :--------- | :------ |\n| 1          | Exotic Liquid              | Charlotte Cooper | 49 Gilbert St. | Londona     | EC1 4SD    | UK      |\n| 2          | New Orleans Cajun Delights | Shelley Burke    | P.O. Box 78934 | New Orleans | 70117      | USA     |\n| 3          | Grandma Kelly's Homestead  | Regina Murphy    | 707 Oxford Rd. | Ann Arbor   | 48104      | USA     |\n\n------\n\n## SQL UNION 实例\n\n下面的 SQL 语句从 \"Customers\" 和 \"Suppliers\" 表中选取所有**不同的**城市（只有不同的值）：\n\n示例：\n\n```\nSELECT City FROM Customers\nUNION\nSELECT City FROM Suppliers\nORDER BY City;\n```\n\n**注释：**不能用 UNION 来列出两个表中的所有城市。如果一些客户和供应商来自同一个城市，每个城市将只被列入一个列表。UNION将只选择不同的值。请使用UNION ALL选择重复值!\n\n## SQL UNION ALL 实例\n\n------\n\n以下SQL语句使用 UNION ALL 从 \"Customers\"和\"Suppliers\" 表中选择所有城市（也是重复的值）：\n\n示例：\n\n```\nSELECT City FROM Customers\nUNION ALL\nSELECT City FROM Suppliers\nORDER BY City;\n```\n\n## 带有 WHERE 的 SQL UNION ALL\n\n------\n\n以下SQL语句使用UNIONALL从\"Customers\"和 \"Suppliers\" 表中选择所有德国城市（也是重复数值）：\n\n示例：\n\n```\nSELECT City, Country FROM Customers\nWHERE Country='Germany'\nUNION ALL\nSELECT City, Country FROM Suppliers\nWHERE Country='Germany'\nORDER BY City;\n```\n\n\n\n## SQL UNION与WHERE\n\n------\n\n以下SQL语句从\"客户\"和\"供应商\"中选择所有不同的德国城市（只有不同的值）：\n\n```\nSELECT City, Country FROM Customers\nWHERE Country='Germany'\nUNION\nSELECT City, Country FROM Suppliers\nWHERE Country='Germany'\nORDER BY City;\n```\n\n## 另一个UNION示例\n\n------\n\n以下SQL语句列出了所有客户和供应商：\n\n```\nSELECT 'Customer' As Type, ContactName, City, Country\nFROM Customers\nUNION\nSELECT 'Supplier', ContactName, City, Country\nFROM Suppliers;\n```\n\n还有另外两个子句(即运算符)，它们类似于UNION子句：\n\n- **SQL INTERSECT子句**\n  用于组合两个SELECT语句，但只返回与第二个SELECT语句中的一行相同的第一个SELECT语句中的行。\n- **SQL EXCEPT子句**\n  用于组合两个SELECT语句，并返回第一个SELECT语句中没有由第二个SELECT语句返回的行。\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T01:27:50.993Z","path":"wiki/sql/sentence/union.html","comments":1,"_id":"cmbreopj5001665x0c2677wai","content":"<h2 id=\"SQL-UNION-运算符\"><a href=\"#SQL-UNION-运算符\" class=\"headerlink\" title=\"SQL UNION 运算符\"></a>SQL UNION 运算符</h2><hr>\n<p>UNION运算符用于组合两个或更多SELECT语句的结果集，而不返回任何重复的行。</p>\n<ul>\n<li>UNION中的每个SELECT语句必须具有相同的列数</li>\n<li>这些列也必须具有相似的数据类型</li>\n<li>每个SELECT语句中的列也必须以相同的顺序排列</li>\n<li>每个SELECT语句必须有相同数目的列表达式</li>\n<li>但是每个SELECT语句的长度不必相同</li>\n</ul>\n<h3 id=\"SQL-UNION-语法1\"><a href=\"#SQL-UNION-语法1\" class=\"headerlink\" title=\"SQL UNION 语法1\"></a>SQL UNION 语法1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s) FROM table1</span><br><span class=\"line\">UNION</span><br><span class=\"line\">SELECT column_name(s) FROM table2;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注释：**默认情况下，UNION 运算符选择一个不同的值。如果允许重复值，请使用 UNION ALL。</p>\n</blockquote>\n<h3 id=\"SQL-UNION-语法2\"><a href=\"#SQL-UNION-语法2\" class=\"headerlink\" title=\"SQL UNION 语法2\"></a>SQL UNION 语法2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s) FROM table1</span><br><span class=\"line\">[WHERE condition]</span><br><span class=\"line\"></span><br><span class=\"line\">UNION</span><br><span class=\"line\">SELECT column_name(s) FROM table2</span><br><span class=\"line\">[WHERE condition];</span><br></pre></td></tr></table></figure>\n\n<p>给定的条件可以是基于您的需求的任何给定表达式。</p>\n<h3 id=\"SQL-UNION-ALL-语法1\"><a href=\"#SQL-UNION-ALL-语法1\" class=\"headerlink\" title=\"SQL UNION ALL 语法1\"></a>SQL UNION ALL 语法1</h3><p>UNION All运算符用于组合两个SELECT语句(包括重复行)的结果。</p>\n<p>适用于UNION子句的相同规则将适用于UNION All操作符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s) FROM table1</span><br><span class=\"line\">UNION ALL</span><br><span class=\"line\">SELECT column_name(s) FROM table2;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注释：**UNION结果集中的列名总是等于UNION中第一个SELECT语句中的列名。</p>\n</blockquote>\n<h3 id=\"SQL-UNION-ALL-语法2\"><a href=\"#SQL-UNION-ALL-语法2\" class=\"headerlink\" title=\"SQL UNION ALL 语法2\"></a>SQL UNION ALL 语法2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s) FROM table1</span><br><span class=\"line\">[WHERE condition]</span><br><span class=\"line\">UNION ALL</span><br><span class=\"line\">SELECT column_name(s) FROM table2</span><br><span class=\"line\">[WHERE condition];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是”Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n</tbody></table>\n<p>选自 “Suppliers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">SupplierID</th>\n<th align=\"left\">SupplierName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Exotic Liquid</td>\n<td align=\"left\">Charlotte Cooper</td>\n<td align=\"left\">49 Gilbert St.</td>\n<td align=\"left\">Londona</td>\n<td align=\"left\">EC1 4SD</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">New Orleans Cajun Delights</td>\n<td align=\"left\">Shelley Burke</td>\n<td align=\"left\">P.O. Box 78934</td>\n<td align=\"left\">New Orleans</td>\n<td align=\"left\">70117</td>\n<td align=\"left\">USA</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Grandma Kelly’s Homestead</td>\n<td align=\"left\">Regina Murphy</td>\n<td align=\"left\">707 Oxford Rd.</td>\n<td align=\"left\">Ann Arbor</td>\n<td align=\"left\">48104</td>\n<td align=\"left\">USA</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"SQL-UNION-实例\"><a href=\"#SQL-UNION-实例\" class=\"headerlink\" title=\"SQL UNION 实例\"></a>SQL UNION 实例</h2><p>下面的 SQL 语句从 “Customers” 和 “Suppliers” 表中选取所有<strong>不同的</strong>城市（只有不同的值）：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT City FROM Customers</span><br><span class=\"line\">UNION</span><br><span class=\"line\">SELECT City FROM Suppliers</span><br><span class=\"line\">ORDER BY City;</span><br></pre></td></tr></table></figure>\n\n<p>**注释：**不能用 UNION 来列出两个表中的所有城市。如果一些客户和供应商来自同一个城市，每个城市将只被列入一个列表。UNION将只选择不同的值。请使用UNION ALL选择重复值!</p>\n<h2 id=\"SQL-UNION-ALL-实例\"><a href=\"#SQL-UNION-ALL-实例\" class=\"headerlink\" title=\"SQL UNION ALL 实例\"></a>SQL UNION ALL 实例</h2><hr>\n<p>以下SQL语句使用 UNION ALL 从 “Customers”和”Suppliers” 表中选择所有城市（也是重复的值）：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT City FROM Customers</span><br><span class=\"line\">UNION ALL</span><br><span class=\"line\">SELECT City FROM Suppliers</span><br><span class=\"line\">ORDER BY City;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"带有-WHERE-的-SQL-UNION-ALL\"><a href=\"#带有-WHERE-的-SQL-UNION-ALL\" class=\"headerlink\" title=\"带有 WHERE 的 SQL UNION ALL\"></a>带有 WHERE 的 SQL UNION ALL</h2><hr>\n<p>以下SQL语句使用UNIONALL从”Customers”和 “Suppliers” 表中选择所有德国城市（也是重复数值）：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT City, Country FROM Customers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27;</span><br><span class=\"line\">UNION ALL</span><br><span class=\"line\">SELECT City, Country FROM Suppliers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27;</span><br><span class=\"line\">ORDER BY City;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"SQL-UNION与WHERE\"><a href=\"#SQL-UNION与WHERE\" class=\"headerlink\" title=\"SQL UNION与WHERE\"></a>SQL UNION与WHERE</h2><hr>\n<p>以下SQL语句从”客户”和”供应商”中选择所有不同的德国城市（只有不同的值）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT City, Country FROM Customers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27;</span><br><span class=\"line\">UNION</span><br><span class=\"line\">SELECT City, Country FROM Suppliers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27;</span><br><span class=\"line\">ORDER BY City;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"另一个UNION示例\"><a href=\"#另一个UNION示例\" class=\"headerlink\" title=\"另一个UNION示例\"></a>另一个UNION示例</h2><hr>\n<p>以下SQL语句列出了所有客户和供应商：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT &#x27;Customer&#x27; As Type, ContactName, City, Country</span><br><span class=\"line\">FROM Customers</span><br><span class=\"line\">UNION</span><br><span class=\"line\">SELECT &#x27;Supplier&#x27;, ContactName, City, Country</span><br><span class=\"line\">FROM Suppliers;</span><br></pre></td></tr></table></figure>\n\n<p>还有另外两个子句(即运算符)，它们类似于UNION子句：</p>\n<ul>\n<li><strong>SQL INTERSECT子句</strong><br>用于组合两个SELECT语句，但只返回与第二个SELECT语句中的一行相同的第一个SELECT语句中的行。</li>\n<li><strong>SQL EXCEPT子句</strong><br>用于组合两个SELECT语句，并返回第一个SELECT语句中没有由第二个SELECT语句返回的行。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"SQL-UNION-运算符\"><a href=\"#SQL-UNION-运算符\" class=\"headerlink\" title=\"SQL UNION 运算符\"></a>SQL UNION 运算符</h2><hr>\n<p>UNION运算符用于组合两个或更多SELECT语句的结果集，而不返回任何重复的行。</p>\n<ul>\n<li>UNION中的每个SELECT语句必须具有相同的列数</li>\n<li>这些列也必须具有相似的数据类型</li>\n<li>每个SELECT语句中的列也必须以相同的顺序排列</li>\n<li>每个SELECT语句必须有相同数目的列表达式</li>\n<li>但是每个SELECT语句的长度不必相同</li>\n</ul>\n<h3 id=\"SQL-UNION-语法1\"><a href=\"#SQL-UNION-语法1\" class=\"headerlink\" title=\"SQL UNION 语法1\"></a>SQL UNION 语法1</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s) FROM table1</span><br><span class=\"line\">UNION</span><br><span class=\"line\">SELECT column_name(s) FROM table2;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注释：**默认情况下，UNION 运算符选择一个不同的值。如果允许重复值，请使用 UNION ALL。</p>\n</blockquote>\n<h3 id=\"SQL-UNION-语法2\"><a href=\"#SQL-UNION-语法2\" class=\"headerlink\" title=\"SQL UNION 语法2\"></a>SQL UNION 语法2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s) FROM table1</span><br><span class=\"line\">[WHERE condition]</span><br><span class=\"line\"></span><br><span class=\"line\">UNION</span><br><span class=\"line\">SELECT column_name(s) FROM table2</span><br><span class=\"line\">[WHERE condition];</span><br></pre></td></tr></table></figure>\n\n<p>给定的条件可以是基于您的需求的任何给定表达式。</p>\n<h3 id=\"SQL-UNION-ALL-语法1\"><a href=\"#SQL-UNION-ALL-语法1\" class=\"headerlink\" title=\"SQL UNION ALL 语法1\"></a>SQL UNION ALL 语法1</h3><p>UNION All运算符用于组合两个SELECT语句(包括重复行)的结果。</p>\n<p>适用于UNION子句的相同规则将适用于UNION All操作符。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s) FROM table1</span><br><span class=\"line\">UNION ALL</span><br><span class=\"line\">SELECT column_name(s) FROM table2;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注释：**UNION结果集中的列名总是等于UNION中第一个SELECT语句中的列名。</p>\n</blockquote>\n<h3 id=\"SQL-UNION-ALL-语法2\"><a href=\"#SQL-UNION-ALL-语法2\" class=\"headerlink\" title=\"SQL UNION ALL 语法2\"></a>SQL UNION ALL 语法2</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s) FROM table1</span><br><span class=\"line\">[WHERE condition]</span><br><span class=\"line\">UNION ALL</span><br><span class=\"line\">SELECT column_name(s) FROM table2</span><br><span class=\"line\">[WHERE condition];</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是”Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n</tbody></table>\n<p>选自 “Suppliers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">SupplierID</th>\n<th align=\"left\">SupplierName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Exotic Liquid</td>\n<td align=\"left\">Charlotte Cooper</td>\n<td align=\"left\">49 Gilbert St.</td>\n<td align=\"left\">Londona</td>\n<td align=\"left\">EC1 4SD</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">New Orleans Cajun Delights</td>\n<td align=\"left\">Shelley Burke</td>\n<td align=\"left\">P.O. Box 78934</td>\n<td align=\"left\">New Orleans</td>\n<td align=\"left\">70117</td>\n<td align=\"left\">USA</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Grandma Kelly’s Homestead</td>\n<td align=\"left\">Regina Murphy</td>\n<td align=\"left\">707 Oxford Rd.</td>\n<td align=\"left\">Ann Arbor</td>\n<td align=\"left\">48104</td>\n<td align=\"left\">USA</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"SQL-UNION-实例\"><a href=\"#SQL-UNION-实例\" class=\"headerlink\" title=\"SQL UNION 实例\"></a>SQL UNION 实例</h2><p>下面的 SQL 语句从 “Customers” 和 “Suppliers” 表中选取所有<strong>不同的</strong>城市（只有不同的值）：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT City FROM Customers</span><br><span class=\"line\">UNION</span><br><span class=\"line\">SELECT City FROM Suppliers</span><br><span class=\"line\">ORDER BY City;</span><br></pre></td></tr></table></figure>\n\n<p>**注释：**不能用 UNION 来列出两个表中的所有城市。如果一些客户和供应商来自同一个城市，每个城市将只被列入一个列表。UNION将只选择不同的值。请使用UNION ALL选择重复值!</p>\n<h2 id=\"SQL-UNION-ALL-实例\"><a href=\"#SQL-UNION-ALL-实例\" class=\"headerlink\" title=\"SQL UNION ALL 实例\"></a>SQL UNION ALL 实例</h2><hr>\n<p>以下SQL语句使用 UNION ALL 从 “Customers”和”Suppliers” 表中选择所有城市（也是重复的值）：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT City FROM Customers</span><br><span class=\"line\">UNION ALL</span><br><span class=\"line\">SELECT City FROM Suppliers</span><br><span class=\"line\">ORDER BY City;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"带有-WHERE-的-SQL-UNION-ALL\"><a href=\"#带有-WHERE-的-SQL-UNION-ALL\" class=\"headerlink\" title=\"带有 WHERE 的 SQL UNION ALL\"></a>带有 WHERE 的 SQL UNION ALL</h2><hr>\n<p>以下SQL语句使用UNIONALL从”Customers”和 “Suppliers” 表中选择所有德国城市（也是重复数值）：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT City, Country FROM Customers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27;</span><br><span class=\"line\">UNION ALL</span><br><span class=\"line\">SELECT City, Country FROM Suppliers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27;</span><br><span class=\"line\">ORDER BY City;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"SQL-UNION与WHERE\"><a href=\"#SQL-UNION与WHERE\" class=\"headerlink\" title=\"SQL UNION与WHERE\"></a>SQL UNION与WHERE</h2><hr>\n<p>以下SQL语句从”客户”和”供应商”中选择所有不同的德国城市（只有不同的值）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT City, Country FROM Customers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27;</span><br><span class=\"line\">UNION</span><br><span class=\"line\">SELECT City, Country FROM Suppliers</span><br><span class=\"line\">WHERE Country=&#x27;Germany&#x27;</span><br><span class=\"line\">ORDER BY City;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"另一个UNION示例\"><a href=\"#另一个UNION示例\" class=\"headerlink\" title=\"另一个UNION示例\"></a>另一个UNION示例</h2><hr>\n<p>以下SQL语句列出了所有客户和供应商：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT &#x27;Customer&#x27; As Type, ContactName, City, Country</span><br><span class=\"line\">FROM Customers</span><br><span class=\"line\">UNION</span><br><span class=\"line\">SELECT &#x27;Supplier&#x27;, ContactName, City, Country</span><br><span class=\"line\">FROM Suppliers;</span><br></pre></td></tr></table></figure>\n\n<p>还有另外两个子句(即运算符)，它们类似于UNION子句：</p>\n<ul>\n<li><strong>SQL INTERSECT子句</strong><br>用于组合两个SELECT语句，但只返回与第二个SELECT语句中的一行相同的第一个SELECT语句中的行。</li>\n<li><strong>SQL EXCEPT子句</strong><br>用于组合两个SELECT语句，并返回第一个SELECT语句中没有由第二个SELECT语句返回的行。</li>\n</ul>\n"},{"layout":"wiki","wiki":"sql","title":"SQL UNION子句","order":42,"_content":"\n## SQL UNION 子句\n\n------\n\nSQL **UNION** 子句/运算符用于将两个或者更多的 SELECT 语句的运算结果组合起来。\n\n在使用 UNION 的时候，每个 SELECT 语句必须有相同数量的选中列、相同数量的列表达式、相同的数据类型，并且它们出现的次序要一致，不过长度不一定要相同。\n\n## 语法\n\n**　UNION** 子句的基本语法如下所示：\n\n```\n    SELECT column1 [, column2 ]\n    FROM table1 [, table2 ]\n    [WHERE condition]\n\n    UNION\n\n    SELECT column1 [, column2 ]\n    FROM table1 [, table2 ]\n    [WHERE condition]\n```\n\n这里的条件可以是任何根据你的需要而设的条件。\n\n## 示例\n\n------\n\n考虑如下两张表，（a）CUSTOMERS 表：\n\n```\n    +----+----------+-----+-----------+----------+\n    | ID | NAME     | AGE | ADDRESS   | SALARY |\n    +----+----------+-----+-----------+----------+\n    | 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |\n    | 2 | Khilan   | 25 | Delhi     | 1500.00 |\n    | 3 | kaushik  | 23 | Kota      | 2000.00 |\n    | 4 | Chaitali | 25 | Mumbai    | 6500.00 |\n    | 5 | Hardik   | 27 | Bhopal    | 8500.00 |\n    | 6 | Komal    | 22 | MP        | 4500.00 |\n    | 7 | Muffy    | 24 | Indore    | 10000.00 |\n    +----+----------+-----+-----------+----------+\n```\n\n（b）另一张表是 ORDERS 表，如下所示：\n\n```\n    +-----+---------------------+-------------+--------+\n    |OID | DATE                | CUSTOMER_ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |\n    | 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |\n    | 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+\n```\n\n现在，让我们用 SELECT 语句将这两张表连接起来：\n\n```\n    SQL> SELECT  ID, NAME, AMOUNT, DATE\n         FROM CUSTOMERS\n         LEFT JOIN ORDERS\n         ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID\n    UNION\n         SELECT  ID, NAME, AMOUNT, DATE\n         FROM CUSTOMERS\n         RIGHT JOIN ORDERS\n         ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;\n```\n\n结果如下所示：\n\n```\n    +------+----------+--------+---------------------+\n    | ID | NAME     | AMOUNT | DATE                | +------+----------+--------+---------------------+ |    1 | Ramesh |   NULL | NULL |\n    | 2 | Khilan   | 1560 | 2009-11-20 00:00:00 | |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |\n    | 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    4 | Chaitali |   2060 | 2008-05-20 00:00:00 |\n    | 5 | Hardik   | NULL | NULL                | |    6 | Komal |   NULL | NULL |\n    | 7 | Muffy    | NULL | NULL                | +------+----------+--------+---------------------+\n```\n\n## UNION ALL 子句：\n\n------\n\nUNION ALL 运算符用于将两个 SELECT 语句的结果组合在一起，重复行也包含在内。\n\nUNION ALL 运算符所遵从的规则与 UNION 一致。\n\n## 语法：\n\n**　UNION ALL**的基本语法如下：\n\n```\n    SELECT column1 [, column2 ]\n    FROM table1 [, table2 ]\n    [WHERE condition]\n\n    UNION ALL\n\n    SELECT column1 [, column2 ]\n    FROM table1 [, table2 ]\n    [WHERE condition]\n```\n\n## 示例：\n\n考虑如下两张表，（a）CUSTOMERS 表：\n\n```\n    +----+----------+-----+-----------+----------+\n    | ID | NAME     | AGE | ADDRESS   | SALARY |\n    +----+----------+-----+-----------+----------+\n    | 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |\n    | 2 | Khilan   | 25 | Delhi     | 1500.00 |\n    | 3 | kaushik  | 23 | Kota      | 2000.00 |\n    | 4 | Chaitali | 25 | Mumbai    | 6500.00 |\n    | 5 | Hardik   | 27 | Bhopal    | 8500.00 |\n    | 6 | Komal    | 22 | MP        | 4500.00 |\n    | 7 | Muffy    | 24 | Indore    | 10000.00 |\n    +----+----------+-----+-----------+----------+\n```\n\n（b）另一张表是 ORDERS 表，如下所示：\n\n```\n    +-----+---------------------+-------------+--------+\n    |OID | DATE                | CUSTOMER_ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |\n    | 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |\n    | 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+\n```\n\n现在，让我们用 SELECT 语句将这两张表连接起来：\n\n```\nSQL> SELECT  ID, NAME, AMOUNT, DATE\n     FROM CUSTOMERS\n     LEFT JOIN ORDERS\n     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID\nUNION ALL\n     SELECT  ID, NAME, AMOUNT, DATE\n     FROM CUSTOMERS\n     RIGHT JOIN ORDERS\n     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;\n```\n\n结果如下所示：\n\n```\n    +------+----------+--------+---------------------+\n    | ID | NAME     | AMOUNT | DATE                | +------+----------+--------+---------------------+ |    1 | Ramesh |   NULL | NULL |\n    | 2 | Khilan   | 1560 | 2009-11-20 00:00:00 | |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |\n    | 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    4 | Chaitali |   2060 | 2008-05-20 00:00:00 |\n    | 5 | Hardik   | NULL | NULL                | |    6 | Komal |   NULL | NULL |\n    | 7 | Muffy    | NULL | NULL                | |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |\n    | 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    2 | Khilan |   1560 | 2009-11-20 00:00:00 |\n    | 4 | Chaitali | 2060 | 2008-05-20 00:00:00 | +------+----------+--------+---------------------+\n```\n\n另外，还有两个子句（亦即运算法）与 UNION 子句非常相像：\n\n- SQL INTERSECT 子句：用于组合两个 SELECT 语句，但是只返回两个 SELECT 语句的结果中都有的行。\n- SQL EXCEPT 子句：组合两个 SELECT 语句，并将第一个 SELECT 语句的结果中存在，但是第二个 SELECT 语句的结果中不存在的行返回。\n","source":"wiki/sql/sentence/unionziju.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL UNION子句\norder: 42\n---\n\n## SQL UNION 子句\n\n------\n\nSQL **UNION** 子句/运算符用于将两个或者更多的 SELECT 语句的运算结果组合起来。\n\n在使用 UNION 的时候，每个 SELECT 语句必须有相同数量的选中列、相同数量的列表达式、相同的数据类型，并且它们出现的次序要一致，不过长度不一定要相同。\n\n## 语法\n\n**　UNION** 子句的基本语法如下所示：\n\n```\n    SELECT column1 [, column2 ]\n    FROM table1 [, table2 ]\n    [WHERE condition]\n\n    UNION\n\n    SELECT column1 [, column2 ]\n    FROM table1 [, table2 ]\n    [WHERE condition]\n```\n\n这里的条件可以是任何根据你的需要而设的条件。\n\n## 示例\n\n------\n\n考虑如下两张表，（a）CUSTOMERS 表：\n\n```\n    +----+----------+-----+-----------+----------+\n    | ID | NAME     | AGE | ADDRESS   | SALARY |\n    +----+----------+-----+-----------+----------+\n    | 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |\n    | 2 | Khilan   | 25 | Delhi     | 1500.00 |\n    | 3 | kaushik  | 23 | Kota      | 2000.00 |\n    | 4 | Chaitali | 25 | Mumbai    | 6500.00 |\n    | 5 | Hardik   | 27 | Bhopal    | 8500.00 |\n    | 6 | Komal    | 22 | MP        | 4500.00 |\n    | 7 | Muffy    | 24 | Indore    | 10000.00 |\n    +----+----------+-----+-----------+----------+\n```\n\n（b）另一张表是 ORDERS 表，如下所示：\n\n```\n    +-----+---------------------+-------------+--------+\n    |OID | DATE                | CUSTOMER_ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |\n    | 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |\n    | 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+\n```\n\n现在，让我们用 SELECT 语句将这两张表连接起来：\n\n```\n    SQL> SELECT  ID, NAME, AMOUNT, DATE\n         FROM CUSTOMERS\n         LEFT JOIN ORDERS\n         ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID\n    UNION\n         SELECT  ID, NAME, AMOUNT, DATE\n         FROM CUSTOMERS\n         RIGHT JOIN ORDERS\n         ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;\n```\n\n结果如下所示：\n\n```\n    +------+----------+--------+---------------------+\n    | ID | NAME     | AMOUNT | DATE                | +------+----------+--------+---------------------+ |    1 | Ramesh |   NULL | NULL |\n    | 2 | Khilan   | 1560 | 2009-11-20 00:00:00 | |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |\n    | 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    4 | Chaitali |   2060 | 2008-05-20 00:00:00 |\n    | 5 | Hardik   | NULL | NULL                | |    6 | Komal |   NULL | NULL |\n    | 7 | Muffy    | NULL | NULL                | +------+----------+--------+---------------------+\n```\n\n## UNION ALL 子句：\n\n------\n\nUNION ALL 运算符用于将两个 SELECT 语句的结果组合在一起，重复行也包含在内。\n\nUNION ALL 运算符所遵从的规则与 UNION 一致。\n\n## 语法：\n\n**　UNION ALL**的基本语法如下：\n\n```\n    SELECT column1 [, column2 ]\n    FROM table1 [, table2 ]\n    [WHERE condition]\n\n    UNION ALL\n\n    SELECT column1 [, column2 ]\n    FROM table1 [, table2 ]\n    [WHERE condition]\n```\n\n## 示例：\n\n考虑如下两张表，（a）CUSTOMERS 表：\n\n```\n    +----+----------+-----+-----------+----------+\n    | ID | NAME     | AGE | ADDRESS   | SALARY |\n    +----+----------+-----+-----------+----------+\n    | 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |\n    | 2 | Khilan   | 25 | Delhi     | 1500.00 |\n    | 3 | kaushik  | 23 | Kota      | 2000.00 |\n    | 4 | Chaitali | 25 | Mumbai    | 6500.00 |\n    | 5 | Hardik   | 27 | Bhopal    | 8500.00 |\n    | 6 | Komal    | 22 | MP        | 4500.00 |\n    | 7 | Muffy    | 24 | Indore    | 10000.00 |\n    +----+----------+-----+-----------+----------+\n```\n\n（b）另一张表是 ORDERS 表，如下所示：\n\n```\n    +-----+---------------------+-------------+--------+\n    |OID | DATE                | CUSTOMER_ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |\n    | 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |\n    | 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+\n```\n\n现在，让我们用 SELECT 语句将这两张表连接起来：\n\n```\nSQL> SELECT  ID, NAME, AMOUNT, DATE\n     FROM CUSTOMERS\n     LEFT JOIN ORDERS\n     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID\nUNION ALL\n     SELECT  ID, NAME, AMOUNT, DATE\n     FROM CUSTOMERS\n     RIGHT JOIN ORDERS\n     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;\n```\n\n结果如下所示：\n\n```\n    +------+----------+--------+---------------------+\n    | ID | NAME     | AMOUNT | DATE                | +------+----------+--------+---------------------+ |    1 | Ramesh |   NULL | NULL |\n    | 2 | Khilan   | 1560 | 2009-11-20 00:00:00 | |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |\n    | 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    4 | Chaitali |   2060 | 2008-05-20 00:00:00 |\n    | 5 | Hardik   | NULL | NULL                | |    6 | Komal |   NULL | NULL |\n    | 7 | Muffy    | NULL | NULL                | |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |\n    | 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    2 | Khilan |   1560 | 2009-11-20 00:00:00 |\n    | 4 | Chaitali | 2060 | 2008-05-20 00:00:00 | +------+----------+--------+---------------------+\n```\n\n另外，还有两个子句（亦即运算法）与 UNION 子句非常相像：\n\n- SQL INTERSECT 子句：用于组合两个 SELECT 语句，但是只返回两个 SELECT 语句的结果中都有的行。\n- SQL EXCEPT 子句：组合两个 SELECT 语句，并将第一个 SELECT 语句的结果中存在，但是第二个 SELECT 语句的结果中不存在的行返回。\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T02:26:15.726Z","path":"wiki/sql/sentence/unionziju.html","comments":1,"_id":"cmbreopj5001765x0fwgdg9ld","content":"<h2 id=\"SQL-UNION-子句\"><a href=\"#SQL-UNION-子句\" class=\"headerlink\" title=\"SQL UNION 子句\"></a>SQL UNION 子句</h2><hr>\n<p>SQL <strong>UNION</strong> 子句&#x2F;运算符用于将两个或者更多的 SELECT 语句的运算结果组合起来。</p>\n<p>在使用 UNION 的时候，每个 SELECT 语句必须有相同数量的选中列、相同数量的列表达式、相同的数据类型，并且它们出现的次序要一致，不过长度不一定要相同。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>**　UNION** 子句的基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1 [, column2 ]</span><br><span class=\"line\">FROM table1 [, table2 ]</span><br><span class=\"line\">[WHERE condition]</span><br><span class=\"line\"></span><br><span class=\"line\">UNION</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT column1 [, column2 ]</span><br><span class=\"line\">FROM table1 [, table2 ]</span><br><span class=\"line\">[WHERE condition]</span><br></pre></td></tr></table></figure>\n\n<p>这里的条件可以是任何根据你的需要而设的条件。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><hr>\n<p>考虑如下两张表，（a）CUSTOMERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |</span><br><span class=\"line\">| 2 | Khilan   | 25 | Delhi     | 1500.00 |</span><br><span class=\"line\">| 3 | kaushik  | 23 | Kota      | 2000.00 |</span><br><span class=\"line\">| 4 | Chaitali | 25 | Mumbai    | 6500.00 |</span><br><span class=\"line\">| 5 | Hardik   | 27 | Bhopal    | 8500.00 |</span><br><span class=\"line\">| 6 | Komal    | 22 | MP        | 4500.00 |</span><br><span class=\"line\">| 7 | Muffy    | 24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>（b）另一张表是 ORDERS 表，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-----+---------------------+-------------+--------+</span><br><span class=\"line\">|OID | DATE                | CUSTOMER_ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |</span><br><span class=\"line\">| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |</span><br><span class=\"line\">| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我们用 SELECT 语句将这两张表连接起来：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     LEFT JOIN ORDERS</span><br><span class=\"line\">     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID</span><br><span class=\"line\">UNION</span><br><span class=\"line\">     SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     RIGHT JOIN ORDERS</span><br><span class=\"line\">     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;</span><br></pre></td></tr></table></figure>\n\n<p>结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+------+----------+--------+---------------------+</span><br><span class=\"line\">| ID | NAME     | AMOUNT | DATE                | +------+----------+--------+---------------------+ |    1 | Ramesh |   NULL | NULL |</span><br><span class=\"line\">| 2 | Khilan   | 1560 | 2009-11-20 00:00:00 | |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    4 | Chaitali |   2060 | 2008-05-20 00:00:00 |</span><br><span class=\"line\">| 5 | Hardik   | NULL | NULL                | |    6 | Komal |   NULL | NULL |</span><br><span class=\"line\">| 7 | Muffy    | NULL | NULL                | +------+----------+--------+---------------------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"UNION-ALL-子句：\"><a href=\"#UNION-ALL-子句：\" class=\"headerlink\" title=\"UNION ALL 子句：\"></a>UNION ALL 子句：</h2><hr>\n<p>UNION ALL 运算符用于将两个 SELECT 语句的结果组合在一起，重复行也包含在内。</p>\n<p>UNION ALL 运算符所遵从的规则与 UNION 一致。</p>\n<h2 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h2><p>**　UNION ALL**的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1 [, column2 ]</span><br><span class=\"line\">FROM table1 [, table2 ]</span><br><span class=\"line\">[WHERE condition]</span><br><span class=\"line\"></span><br><span class=\"line\">UNION ALL</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT column1 [, column2 ]</span><br><span class=\"line\">FROM table1 [, table2 ]</span><br><span class=\"line\">[WHERE condition]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h2><p>考虑如下两张表，（a）CUSTOMERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |</span><br><span class=\"line\">| 2 | Khilan   | 25 | Delhi     | 1500.00 |</span><br><span class=\"line\">| 3 | kaushik  | 23 | Kota      | 2000.00 |</span><br><span class=\"line\">| 4 | Chaitali | 25 | Mumbai    | 6500.00 |</span><br><span class=\"line\">| 5 | Hardik   | 27 | Bhopal    | 8500.00 |</span><br><span class=\"line\">| 6 | Komal    | 22 | MP        | 4500.00 |</span><br><span class=\"line\">| 7 | Muffy    | 24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>（b）另一张表是 ORDERS 表，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-----+---------------------+-------------+--------+</span><br><span class=\"line\">|OID | DATE                | CUSTOMER_ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |</span><br><span class=\"line\">| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |</span><br><span class=\"line\">| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我们用 SELECT 语句将这两张表连接起来：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     LEFT JOIN ORDERS</span><br><span class=\"line\">     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID</span><br><span class=\"line\">UNION ALL</span><br><span class=\"line\">     SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     RIGHT JOIN ORDERS</span><br><span class=\"line\">     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;</span><br></pre></td></tr></table></figure>\n\n<p>结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+------+----------+--------+---------------------+</span><br><span class=\"line\">| ID | NAME     | AMOUNT | DATE                | +------+----------+--------+---------------------+ |    1 | Ramesh |   NULL | NULL |</span><br><span class=\"line\">| 2 | Khilan   | 1560 | 2009-11-20 00:00:00 | |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    4 | Chaitali |   2060 | 2008-05-20 00:00:00 |</span><br><span class=\"line\">| 5 | Hardik   | NULL | NULL                | |    6 | Komal |   NULL | NULL |</span><br><span class=\"line\">| 7 | Muffy    | NULL | NULL                | |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    2 | Khilan |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 4 | Chaitali | 2060 | 2008-05-20 00:00:00 | +------+----------+--------+---------------------+</span><br></pre></td></tr></table></figure>\n\n<p>另外，还有两个子句（亦即运算法）与 UNION 子句非常相像：</p>\n<ul>\n<li>SQL INTERSECT 子句：用于组合两个 SELECT 语句，但是只返回两个 SELECT 语句的结果中都有的行。</li>\n<li>SQL EXCEPT 子句：组合两个 SELECT 语句，并将第一个 SELECT 语句的结果中存在，但是第二个 SELECT 语句的结果中不存在的行返回。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"SQL-UNION-子句\"><a href=\"#SQL-UNION-子句\" class=\"headerlink\" title=\"SQL UNION 子句\"></a>SQL UNION 子句</h2><hr>\n<p>SQL <strong>UNION</strong> 子句&#x2F;运算符用于将两个或者更多的 SELECT 语句的运算结果组合起来。</p>\n<p>在使用 UNION 的时候，每个 SELECT 语句必须有相同数量的选中列、相同数量的列表达式、相同的数据类型，并且它们出现的次序要一致，不过长度不一定要相同。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>**　UNION** 子句的基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1 [, column2 ]</span><br><span class=\"line\">FROM table1 [, table2 ]</span><br><span class=\"line\">[WHERE condition]</span><br><span class=\"line\"></span><br><span class=\"line\">UNION</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT column1 [, column2 ]</span><br><span class=\"line\">FROM table1 [, table2 ]</span><br><span class=\"line\">[WHERE condition]</span><br></pre></td></tr></table></figure>\n\n<p>这里的条件可以是任何根据你的需要而设的条件。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><hr>\n<p>考虑如下两张表，（a）CUSTOMERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |</span><br><span class=\"line\">| 2 | Khilan   | 25 | Delhi     | 1500.00 |</span><br><span class=\"line\">| 3 | kaushik  | 23 | Kota      | 2000.00 |</span><br><span class=\"line\">| 4 | Chaitali | 25 | Mumbai    | 6500.00 |</span><br><span class=\"line\">| 5 | Hardik   | 27 | Bhopal    | 8500.00 |</span><br><span class=\"line\">| 6 | Komal    | 22 | MP        | 4500.00 |</span><br><span class=\"line\">| 7 | Muffy    | 24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>（b）另一张表是 ORDERS 表，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-----+---------------------+-------------+--------+</span><br><span class=\"line\">|OID | DATE                | CUSTOMER_ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |</span><br><span class=\"line\">| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |</span><br><span class=\"line\">| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我们用 SELECT 语句将这两张表连接起来：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     LEFT JOIN ORDERS</span><br><span class=\"line\">     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID</span><br><span class=\"line\">UNION</span><br><span class=\"line\">     SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     RIGHT JOIN ORDERS</span><br><span class=\"line\">     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;</span><br></pre></td></tr></table></figure>\n\n<p>结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+------+----------+--------+---------------------+</span><br><span class=\"line\">| ID | NAME     | AMOUNT | DATE                | +------+----------+--------+---------------------+ |    1 | Ramesh |   NULL | NULL |</span><br><span class=\"line\">| 2 | Khilan   | 1560 | 2009-11-20 00:00:00 | |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    4 | Chaitali |   2060 | 2008-05-20 00:00:00 |</span><br><span class=\"line\">| 5 | Hardik   | NULL | NULL                | |    6 | Komal |   NULL | NULL |</span><br><span class=\"line\">| 7 | Muffy    | NULL | NULL                | +------+----------+--------+---------------------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"UNION-ALL-子句：\"><a href=\"#UNION-ALL-子句：\" class=\"headerlink\" title=\"UNION ALL 子句：\"></a>UNION ALL 子句：</h2><hr>\n<p>UNION ALL 运算符用于将两个 SELECT 语句的结果组合在一起，重复行也包含在内。</p>\n<p>UNION ALL 运算符所遵从的规则与 UNION 一致。</p>\n<h2 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h2><p>**　UNION ALL**的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1 [, column2 ]</span><br><span class=\"line\">FROM table1 [, table2 ]</span><br><span class=\"line\">[WHERE condition]</span><br><span class=\"line\"></span><br><span class=\"line\">UNION ALL</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT column1 [, column2 ]</span><br><span class=\"line\">FROM table1 [, table2 ]</span><br><span class=\"line\">[WHERE condition]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h2><p>考虑如下两张表，（a）CUSTOMERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| 1 | Ramesh   | 32 | Ahmedabad | 2000.00 |</span><br><span class=\"line\">| 2 | Khilan   | 25 | Delhi     | 1500.00 |</span><br><span class=\"line\">| 3 | kaushik  | 23 | Kota      | 2000.00 |</span><br><span class=\"line\">| 4 | Chaitali | 25 | Mumbai    | 6500.00 |</span><br><span class=\"line\">| 5 | Hardik   | 27 | Bhopal    | 8500.00 |</span><br><span class=\"line\">| 6 | Komal    | 22 | MP        | 4500.00 |</span><br><span class=\"line\">| 7 | Muffy    | 24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>（b）另一张表是 ORDERS 表，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-----+---------------------+-------------+--------+</span><br><span class=\"line\">|OID | DATE                | CUSTOMER_ID | AMOUNT | +-----+---------------------+-------------+--------+ | 102 | 2009-10-08 00:00:00 |           3 | 3000 |</span><br><span class=\"line\">| 100 | 2009-10-08 00:00:00 | 3 |   1500 | | 101 | 2009-11-20 00:00:00 |           2 | 1560 |</span><br><span class=\"line\">| 103 | 2008-05-20 00:00:00 | 4 |   2060 | +-----+---------------------+-------------+--------+</span><br></pre></td></tr></table></figure>\n\n<p>现在，让我们用 SELECT 语句将这两张表连接起来：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     LEFT JOIN ORDERS</span><br><span class=\"line\">     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID</span><br><span class=\"line\">UNION ALL</span><br><span class=\"line\">     SELECT  ID, NAME, AMOUNT, DATE</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     RIGHT JOIN ORDERS</span><br><span class=\"line\">     ON CUSTOMERS.ID = ORDERS.CUSTOMER_ID;</span><br></pre></td></tr></table></figure>\n\n<p>结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+------+----------+--------+---------------------+</span><br><span class=\"line\">| ID | NAME     | AMOUNT | DATE                | +------+----------+--------+---------------------+ |    1 | Ramesh |   NULL | NULL |</span><br><span class=\"line\">| 2 | Khilan   | 1560 | 2009-11-20 00:00:00 | |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    4 | Chaitali |   2060 | 2008-05-20 00:00:00 |</span><br><span class=\"line\">| 5 | Hardik   | NULL | NULL                | |    6 | Komal |   NULL | NULL |</span><br><span class=\"line\">| 7 | Muffy    | NULL | NULL                | |    3 | kaushik |   3000 | 2009-10-08 00:00:00 |</span><br><span class=\"line\">| 3 | kaushik  | 1500 | 2009-10-08 00:00:00 | |    2 | Khilan |   1560 | 2009-11-20 00:00:00 |</span><br><span class=\"line\">| 4 | Chaitali | 2060 | 2008-05-20 00:00:00 | +------+----------+--------+---------------------+</span><br></pre></td></tr></table></figure>\n\n<p>另外，还有两个子句（亦即运算法）与 UNION 子句非常相像：</p>\n<ul>\n<li>SQL INTERSECT 子句：用于组合两个 SELECT 语句，但是只返回两个 SELECT 语句的结果中都有的行。</li>\n<li>SQL EXCEPT 子句：组合两个 SELECT 语句，并将第一个 SELECT 语句的结果中存在，但是第二个 SELECT 语句的结果中不存在的行返回。</li>\n</ul>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 临时表","order":55,"_content":"\n## SQL 临时表\n\n------\n\n某些关系型数据库管理系统支持临时表。临时表是一项很棒的特性，能够让你像操作普通的 SQL 数据表一样，使用 SELECT、UPDATE 和 JOIN 等功能来存储或者操作中间结果。\n\n临时表有时候对于保存临时数据非常有用。有关临时表你需要知道的最重要的一点是，它们会在当前的终端会话结束后被删除。\n\n临时表自 MySQL 3.23 起受到支持。如果你的 MySQL 版本比 3.23 还老，那么你就不能使用临时表了，不过你可以使用堆表（heap table）。\n\n如先前所言，临时表只在会话期间存在。如果你在 PHP 脚本中操作数据库，那么临时表将在脚本执行完毕时被自动销毁。如果你是通过 MySQL 的客户端程序连接到 MySQL 数据库服务器的，那么临时表将会存在到你关闭客户端或者手动将其删除。\n\n## 示例\n\n------\n\n下面的示例向你展示了如何使用临时表：\n\n```\nmysql> CREATE TEMPORARY TABLE SALESSUMMARY (\n    -> product_name VARCHAR(50) NOT NULL\n    -> , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00\n    -> , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00\n    -> , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0\n);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> INSERT INTO SALESSUMMARY\n    -> (product_name, total_sales, avg_unit_price, total_units_sold)\n    -> VALUES\n    -> ('cucumber', 100.25, 90, 2);\n\nmysql> SELECT * FROM SALESSUMMARY;\n+--------------+-------------+----------------+------------------+\n| product_name | total_sales | avg_unit_price | total_units_sold |\n+--------------+-------------+----------------+------------------+\n| cucumber     |      100.25 |          90.00 |                2 |\n+--------------+-------------+----------------+------------------+\n1 row in set (0.00 sec)\n```\n\n当你下达 **SHOW TABLES** 命令的时候，临时表是不会出现在结果列表当中的。现在，如果你退出 MySQL 会话，然后再执行 SELECT 命令的话，你将不能从数据库中取回任何数据，你的临时表也已经不复存在了。\n\n## 删除临时表\n\n------\n\n默认情况下，所有的临时表都由 MySQL 在数据库连接关闭时删除。不过，有时候你还是会想要在会话期间将其删除，此时你需要使用 DROP TABLE 命令来达到目的。\n\n下面是删除临时表的示例：\n\n```\nmysql> CREATE TEMPORARY TABLE SALESSUMMARY (\n    -> product_name VARCHAR(50) NOT NULL\n    -> , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00\n    -> , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00\n    -> , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0\n);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> INSERT INTO SALESSUMMARY\n    -> (product_name, total_sales, avg_unit_price, total_units_sold)\n    -> VALUES\n    -> ('cucumber', 100.25, 90, 2);\n\nmysql> SELECT * FROM SALESSUMMARY;\n+--------------+-------------+----------------+------------------+\n| product_name | total_sales | avg_unit_price | total_units_sold |\n+--------------+-------------+----------------+------------------+\n| cucumber     |      100.25 |          90.00 |                2 |\n+--------------+-------------+----------------+------------------+\n1 row in set (0.00 sec)\nmysql> DROP TABLE SALESSUMMARY;\nmysql>  SELECT * FROM SALESSUMMARY;\nERROR 1146: Table 'TUTORIALS.SALESSUMMARY' doesn't exist\n```\n","source":"wiki/sql/sentence/temp.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 临时表\norder: 55\n---\n\n## SQL 临时表\n\n------\n\n某些关系型数据库管理系统支持临时表。临时表是一项很棒的特性，能够让你像操作普通的 SQL 数据表一样，使用 SELECT、UPDATE 和 JOIN 等功能来存储或者操作中间结果。\n\n临时表有时候对于保存临时数据非常有用。有关临时表你需要知道的最重要的一点是，它们会在当前的终端会话结束后被删除。\n\n临时表自 MySQL 3.23 起受到支持。如果你的 MySQL 版本比 3.23 还老，那么你就不能使用临时表了，不过你可以使用堆表（heap table）。\n\n如先前所言，临时表只在会话期间存在。如果你在 PHP 脚本中操作数据库，那么临时表将在脚本执行完毕时被自动销毁。如果你是通过 MySQL 的客户端程序连接到 MySQL 数据库服务器的，那么临时表将会存在到你关闭客户端或者手动将其删除。\n\n## 示例\n\n------\n\n下面的示例向你展示了如何使用临时表：\n\n```\nmysql> CREATE TEMPORARY TABLE SALESSUMMARY (\n    -> product_name VARCHAR(50) NOT NULL\n    -> , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00\n    -> , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00\n    -> , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0\n);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> INSERT INTO SALESSUMMARY\n    -> (product_name, total_sales, avg_unit_price, total_units_sold)\n    -> VALUES\n    -> ('cucumber', 100.25, 90, 2);\n\nmysql> SELECT * FROM SALESSUMMARY;\n+--------------+-------------+----------------+------------------+\n| product_name | total_sales | avg_unit_price | total_units_sold |\n+--------------+-------------+----------------+------------------+\n| cucumber     |      100.25 |          90.00 |                2 |\n+--------------+-------------+----------------+------------------+\n1 row in set (0.00 sec)\n```\n\n当你下达 **SHOW TABLES** 命令的时候，临时表是不会出现在结果列表当中的。现在，如果你退出 MySQL 会话，然后再执行 SELECT 命令的话，你将不能从数据库中取回任何数据，你的临时表也已经不复存在了。\n\n## 删除临时表\n\n------\n\n默认情况下，所有的临时表都由 MySQL 在数据库连接关闭时删除。不过，有时候你还是会想要在会话期间将其删除，此时你需要使用 DROP TABLE 命令来达到目的。\n\n下面是删除临时表的示例：\n\n```\nmysql> CREATE TEMPORARY TABLE SALESSUMMARY (\n    -> product_name VARCHAR(50) NOT NULL\n    -> , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00\n    -> , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00\n    -> , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0\n);\nQuery OK, 0 rows affected (0.00 sec)\n\nmysql> INSERT INTO SALESSUMMARY\n    -> (product_name, total_sales, avg_unit_price, total_units_sold)\n    -> VALUES\n    -> ('cucumber', 100.25, 90, 2);\n\nmysql> SELECT * FROM SALESSUMMARY;\n+--------------+-------------+----------------+------------------+\n| product_name | total_sales | avg_unit_price | total_units_sold |\n+--------------+-------------+----------------+------------------+\n| cucumber     |      100.25 |          90.00 |                2 |\n+--------------+-------------+----------------+------------------+\n1 row in set (0.00 sec)\nmysql> DROP TABLE SALESSUMMARY;\nmysql>  SELECT * FROM SALESSUMMARY;\nERROR 1146: Table 'TUTORIALS.SALESSUMMARY' doesn't exist\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T03:13:47.738Z","path":"wiki/sql/sentence/temp.html","comments":1,"_id":"cmbreopj5001865x00s5nebow","content":"<h2 id=\"SQL-临时表\"><a href=\"#SQL-临时表\" class=\"headerlink\" title=\"SQL 临时表\"></a>SQL 临时表</h2><hr>\n<p>某些关系型数据库管理系统支持临时表。临时表是一项很棒的特性，能够让你像操作普通的 SQL 数据表一样，使用 SELECT、UPDATE 和 JOIN 等功能来存储或者操作中间结果。</p>\n<p>临时表有时候对于保存临时数据非常有用。有关临时表你需要知道的最重要的一点是，它们会在当前的终端会话结束后被删除。</p>\n<p>临时表自 MySQL 3.23 起受到支持。如果你的 MySQL 版本比 3.23 还老，那么你就不能使用临时表了，不过你可以使用堆表（heap table）。</p>\n<p>如先前所言，临时表只在会话期间存在。如果你在 PHP 脚本中操作数据库，那么临时表将在脚本执行完毕时被自动销毁。如果你是通过 MySQL 的客户端程序连接到 MySQL 数据库服务器的，那么临时表将会存在到你关闭客户端或者手动将其删除。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><hr>\n<p>下面的示例向你展示了如何使用临时表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE TEMPORARY TABLE SALESSUMMARY (</span><br><span class=\"line\">    -&gt; product_name VARCHAR(50) NOT NULL</span><br><span class=\"line\">    -&gt; , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00</span><br><span class=\"line\">    -&gt; , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00</span><br><span class=\"line\">    -&gt; , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0</span><br><span class=\"line\">);</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; INSERT INTO SALESSUMMARY</span><br><span class=\"line\">    -&gt; (product_name, total_sales, avg_unit_price, total_units_sold)</span><br><span class=\"line\">    -&gt; VALUES</span><br><span class=\"line\">    -&gt; (&#x27;cucumber&#x27;, 100.25, 90, 2);</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT * FROM SALESSUMMARY;</span><br><span class=\"line\">+--------------+-------------+----------------+------------------+</span><br><span class=\"line\">| product_name | total_sales | avg_unit_price | total_units_sold |</span><br><span class=\"line\">+--------------+-------------+----------------+------------------+</span><br><span class=\"line\">| cucumber     |      100.25 |          90.00 |                2 |</span><br><span class=\"line\">+--------------+-------------+----------------+------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>当你下达 <strong>SHOW TABLES</strong> 命令的时候，临时表是不会出现在结果列表当中的。现在，如果你退出 MySQL 会话，然后再执行 SELECT 命令的话，你将不能从数据库中取回任何数据，你的临时表也已经不复存在了。</p>\n<h2 id=\"删除临时表\"><a href=\"#删除临时表\" class=\"headerlink\" title=\"删除临时表\"></a>删除临时表</h2><hr>\n<p>默认情况下，所有的临时表都由 MySQL 在数据库连接关闭时删除。不过，有时候你还是会想要在会话期间将其删除，此时你需要使用 DROP TABLE 命令来达到目的。</p>\n<p>下面是删除临时表的示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE TEMPORARY TABLE SALESSUMMARY (</span><br><span class=\"line\">    -&gt; product_name VARCHAR(50) NOT NULL</span><br><span class=\"line\">    -&gt; , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00</span><br><span class=\"line\">    -&gt; , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00</span><br><span class=\"line\">    -&gt; , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0</span><br><span class=\"line\">);</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; INSERT INTO SALESSUMMARY</span><br><span class=\"line\">    -&gt; (product_name, total_sales, avg_unit_price, total_units_sold)</span><br><span class=\"line\">    -&gt; VALUES</span><br><span class=\"line\">    -&gt; (&#x27;cucumber&#x27;, 100.25, 90, 2);</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT * FROM SALESSUMMARY;</span><br><span class=\"line\">+--------------+-------------+----------------+------------------+</span><br><span class=\"line\">| product_name | total_sales | avg_unit_price | total_units_sold |</span><br><span class=\"line\">+--------------+-------------+----------------+------------------+</span><br><span class=\"line\">| cucumber     |      100.25 |          90.00 |                2 |</span><br><span class=\"line\">+--------------+-------------+----------------+------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\">mysql&gt; DROP TABLE SALESSUMMARY;</span><br><span class=\"line\">mysql&gt;  SELECT * FROM SALESSUMMARY;</span><br><span class=\"line\">ERROR 1146: Table &#x27;TUTORIALS.SALESSUMMARY&#x27; doesn&#x27;t exist</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-临时表\"><a href=\"#SQL-临时表\" class=\"headerlink\" title=\"SQL 临时表\"></a>SQL 临时表</h2><hr>\n<p>某些关系型数据库管理系统支持临时表。临时表是一项很棒的特性，能够让你像操作普通的 SQL 数据表一样，使用 SELECT、UPDATE 和 JOIN 等功能来存储或者操作中间结果。</p>\n<p>临时表有时候对于保存临时数据非常有用。有关临时表你需要知道的最重要的一点是，它们会在当前的终端会话结束后被删除。</p>\n<p>临时表自 MySQL 3.23 起受到支持。如果你的 MySQL 版本比 3.23 还老，那么你就不能使用临时表了，不过你可以使用堆表（heap table）。</p>\n<p>如先前所言，临时表只在会话期间存在。如果你在 PHP 脚本中操作数据库，那么临时表将在脚本执行完毕时被自动销毁。如果你是通过 MySQL 的客户端程序连接到 MySQL 数据库服务器的，那么临时表将会存在到你关闭客户端或者手动将其删除。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><hr>\n<p>下面的示例向你展示了如何使用临时表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE TEMPORARY TABLE SALESSUMMARY (</span><br><span class=\"line\">    -&gt; product_name VARCHAR(50) NOT NULL</span><br><span class=\"line\">    -&gt; , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00</span><br><span class=\"line\">    -&gt; , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00</span><br><span class=\"line\">    -&gt; , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0</span><br><span class=\"line\">);</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; INSERT INTO SALESSUMMARY</span><br><span class=\"line\">    -&gt; (product_name, total_sales, avg_unit_price, total_units_sold)</span><br><span class=\"line\">    -&gt; VALUES</span><br><span class=\"line\">    -&gt; (&#x27;cucumber&#x27;, 100.25, 90, 2);</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT * FROM SALESSUMMARY;</span><br><span class=\"line\">+--------------+-------------+----------------+------------------+</span><br><span class=\"line\">| product_name | total_sales | avg_unit_price | total_units_sold |</span><br><span class=\"line\">+--------------+-------------+----------------+------------------+</span><br><span class=\"line\">| cucumber     |      100.25 |          90.00 |                2 |</span><br><span class=\"line\">+--------------+-------------+----------------+------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>当你下达 <strong>SHOW TABLES</strong> 命令的时候，临时表是不会出现在结果列表当中的。现在，如果你退出 MySQL 会话，然后再执行 SELECT 命令的话，你将不能从数据库中取回任何数据，你的临时表也已经不复存在了。</p>\n<h2 id=\"删除临时表\"><a href=\"#删除临时表\" class=\"headerlink\" title=\"删除临时表\"></a>删除临时表</h2><hr>\n<p>默认情况下，所有的临时表都由 MySQL 在数据库连接关闭时删除。不过，有时候你还是会想要在会话期间将其删除，此时你需要使用 DROP TABLE 命令来达到目的。</p>\n<p>下面是删除临时表的示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; CREATE TEMPORARY TABLE SALESSUMMARY (</span><br><span class=\"line\">    -&gt; product_name VARCHAR(50) NOT NULL</span><br><span class=\"line\">    -&gt; , total_sales DECIMAL(12,2) NOT NULL DEFAULT 0.00</span><br><span class=\"line\">    -&gt; , avg_unit_price DECIMAL(7,2) NOT NULL DEFAULT 0.00</span><br><span class=\"line\">    -&gt; , total_units_sold INT UNSIGNED NOT NULL DEFAULT 0</span><br><span class=\"line\">);</span><br><span class=\"line\">Query OK, 0 rows affected (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; INSERT INTO SALESSUMMARY</span><br><span class=\"line\">    -&gt; (product_name, total_sales, avg_unit_price, total_units_sold)</span><br><span class=\"line\">    -&gt; VALUES</span><br><span class=\"line\">    -&gt; (&#x27;cucumber&#x27;, 100.25, 90, 2);</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT * FROM SALESSUMMARY;</span><br><span class=\"line\">+--------------+-------------+----------------+------------------+</span><br><span class=\"line\">| product_name | total_sales | avg_unit_price | total_units_sold |</span><br><span class=\"line\">+--------------+-------------+----------------+------------------+</span><br><span class=\"line\">| cucumber     |      100.25 |          90.00 |                2 |</span><br><span class=\"line\">+--------------+-------------+----------------+------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\">mysql&gt; DROP TABLE SALESSUMMARY;</span><br><span class=\"line\">mysql&gt;  SELECT * FROM SALESSUMMARY;</span><br><span class=\"line\">ERROR 1146: Table &#x27;TUTORIALS.SALESSUMMARY&#x27; doesn&#x27;t exist</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 更新","order":11,"_content":"\n## SQL UPDATE 语句\n\n------\n\nUPDATE 语句用于更新表中已存在的记录。\n\n还可以使用AND或OR运算符组合多个条件。\n\n### SQL UPDATE 语法\n\n具有WHERE子句的UPDATE查询的基本语法如下所示：\n\n```\nUPDATE table_name\nSET column1 = value1, column2 = value2, ...\nWHERE condition;\n```\n\n| **请注意** **更新表中的记录时要小心！** **要注意SQL UPDATE 语句中的 WHERE 子句！** WHERE子句指定哪些记录需要更新。如果省略WHERE子句，所有记录都将更新！ |\n| :----------------------------------------------------------- |\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是 \"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL UPDATE 实例\n\n------\n\n以下SQL语句为第一个客户（CustomerID = 1）更新了\"ContactName\"和\"City\"：\n\n示例：\n\n```\nUPDATE Customers\nSET ContactName = 'Alfred Schmidt', City= 'Frankfurt'\nWHERE CustomerID = 1;\n```\n\n现在，选自 \"Customers\" 表的数据如下所示：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Alfred Schmidt     | Obere Str. 57                 | Frankfurt   | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## 更新多个记录\n\n------\n\nWHERE子句决定了将要更新的记录数量。\n\n以下SQL语句将把国家/地区为\"Mexico\"的所有记录的联系人姓名更新为\"Juan\"：\n\n```\nUPDATE Customers\nSET ContactName='Juan'\nWHERE Country='Mexico';\n```\n\n\"Customers\"表中的选择现在看起来像这样：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Alfred Schmidt     | Obere Str. 57                 | Frankfurt   | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Juan               | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Juan               | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## Update 警告！\n\n------\n\n更新记录时要小心。如果您省略WHERE子句，所有记录将被更新！\n\n```\nUPDATE Customers\nSET ContactName='Juan';\n```\n\n\"Customers\" 表将如下所示：\n\n| CustomerID | CustomerName                       | ContactName | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :---------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Juan        | Obere Str. 57                 | Frankfurt   | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Juan        | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Juan        | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Juan        | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Juan        | Berguvsvägen 8                | Luleå       | S-958 22   |         |\n","source":"wiki/sql/sentence/update.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 更新\norder: 11\n---\n\n## SQL UPDATE 语句\n\n------\n\nUPDATE 语句用于更新表中已存在的记录。\n\n还可以使用AND或OR运算符组合多个条件。\n\n### SQL UPDATE 语法\n\n具有WHERE子句的UPDATE查询的基本语法如下所示：\n\n```\nUPDATE table_name\nSET column1 = value1, column2 = value2, ...\nWHERE condition;\n```\n\n| **请注意** **更新表中的记录时要小心！** **要注意SQL UPDATE 语句中的 WHERE 子句！** WHERE子句指定哪些记录需要更新。如果省略WHERE子句，所有记录都将更新！ |\n| :----------------------------------------------------------- |\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n\n以下是 \"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL UPDATE 实例\n\n------\n\n以下SQL语句为第一个客户（CustomerID = 1）更新了\"ContactName\"和\"City\"：\n\n示例：\n\n```\nUPDATE Customers\nSET ContactName = 'Alfred Schmidt', City= 'Frankfurt'\nWHERE CustomerID = 1;\n```\n\n现在，选自 \"Customers\" 表的数据如下所示：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Alfred Schmidt     | Obere Str. 57                 | Frankfurt   | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## 更新多个记录\n\n------\n\nWHERE子句决定了将要更新的记录数量。\n\n以下SQL语句将把国家/地区为\"Mexico\"的所有记录的联系人姓名更新为\"Juan\"：\n\n```\nUPDATE Customers\nSET ContactName='Juan'\nWHERE Country='Mexico';\n```\n\n\"Customers\"表中的选择现在看起来像这样：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Alfred Schmidt     | Obere Str. 57                 | Frankfurt   | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Juan               | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Juan               | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## Update 警告！\n\n------\n\n更新记录时要小心。如果您省略WHERE子句，所有记录将被更新！\n\n```\nUPDATE Customers\nSET ContactName='Juan';\n```\n\n\"Customers\" 表将如下所示：\n\n| CustomerID | CustomerName                       | ContactName | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :---------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Juan        | Obere Str. 57                 | Frankfurt   | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Juan        | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Juan        | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Juan        | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Juan        | Berguvsvägen 8                | Luleå       | S-958 22   |         |\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-10T14:10:41.858Z","path":"wiki/sql/sentence/update.html","comments":1,"_id":"cmbreopj6001965x0eceieko2","content":"<h2 id=\"SQL-UPDATE-语句\"><a href=\"#SQL-UPDATE-语句\" class=\"headerlink\" title=\"SQL UPDATE 语句\"></a>SQL UPDATE 语句</h2><hr>\n<p>UPDATE 语句用于更新表中已存在的记录。</p>\n<p>还可以使用AND或OR运算符组合多个条件。</p>\n<h3 id=\"SQL-UPDATE-语法\"><a href=\"#SQL-UPDATE-语法\" class=\"headerlink\" title=\"SQL UPDATE 语法\"></a>SQL UPDATE 语法</h3><p>具有WHERE子句的UPDATE查询的基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">UPDATE table_name</span><br><span class=\"line\">SET column1 = value1, column2 = value2, ...</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>请注意</strong> <strong>更新表中的记录时要小心！</strong> <strong>要注意SQL UPDATE 语句中的 WHERE 子句！</strong> WHERE子句指定哪些记录需要更新。如果省略WHERE子句，所有记录都将更新！</th>\n</tr>\n</thead>\n</table>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是 “Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-UPDATE-实例\"><a href=\"#SQL-UPDATE-实例\" class=\"headerlink\" title=\"SQL UPDATE 实例\"></a>SQL UPDATE 实例</h2><hr>\n<p>以下SQL语句为第一个客户（CustomerID &#x3D; 1）更新了”ContactName”和”City”：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">UPDATE Customers</span><br><span class=\"line\">SET ContactName = &#x27;Alfred Schmidt&#x27;, City= &#x27;Frankfurt&#x27;</span><br><span class=\"line\">WHERE CustomerID = 1;</span><br></pre></td></tr></table></figure>\n\n<p>现在，选自 “Customers” 表的数据如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Alfred Schmidt</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Frankfurt</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"更新多个记录\"><a href=\"#更新多个记录\" class=\"headerlink\" title=\"更新多个记录\"></a>更新多个记录</h2><hr>\n<p>WHERE子句决定了将要更新的记录数量。</p>\n<p>以下SQL语句将把国家&#x2F;地区为”Mexico”的所有记录的联系人姓名更新为”Juan”：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">UPDATE Customers</span><br><span class=\"line\">SET ContactName=&#x27;Juan&#x27;</span><br><span class=\"line\">WHERE Country=&#x27;Mexico&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>“Customers”表中的选择现在看起来像这样：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Alfred Schmidt</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Frankfurt</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Juan</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Juan</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"Update-警告！\"><a href=\"#Update-警告！\" class=\"headerlink\" title=\"Update 警告！\"></a>Update 警告！</h2><hr>\n<p>更新记录时要小心。如果您省略WHERE子句，所有记录将被更新！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">UPDATE Customers</span><br><span class=\"line\">SET ContactName=&#x27;Juan&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>“Customers” 表将如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Juan</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Frankfurt</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Juan</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Juan</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Juan</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Juan</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n","excerpt":"","more":"<h2 id=\"SQL-UPDATE-语句\"><a href=\"#SQL-UPDATE-语句\" class=\"headerlink\" title=\"SQL UPDATE 语句\"></a>SQL UPDATE 语句</h2><hr>\n<p>UPDATE 语句用于更新表中已存在的记录。</p>\n<p>还可以使用AND或OR运算符组合多个条件。</p>\n<h3 id=\"SQL-UPDATE-语法\"><a href=\"#SQL-UPDATE-语法\" class=\"headerlink\" title=\"SQL UPDATE 语法\"></a>SQL UPDATE 语法</h3><p>具有WHERE子句的UPDATE查询的基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">UPDATE table_name</span><br><span class=\"line\">SET column1 = value1, column2 = value2, ...</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>请注意</strong> <strong>更新表中的记录时要小心！</strong> <strong>要注意SQL UPDATE 语句中的 WHERE 子句！</strong> WHERE子句指定哪些记录需要更新。如果省略WHERE子句，所有记录都将更新！</th>\n</tr>\n</thead>\n</table>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。</p>\n<p>以下是 “Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-UPDATE-实例\"><a href=\"#SQL-UPDATE-实例\" class=\"headerlink\" title=\"SQL UPDATE 实例\"></a>SQL UPDATE 实例</h2><hr>\n<p>以下SQL语句为第一个客户（CustomerID &#x3D; 1）更新了”ContactName”和”City”：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">UPDATE Customers</span><br><span class=\"line\">SET ContactName = &#x27;Alfred Schmidt&#x27;, City= &#x27;Frankfurt&#x27;</span><br><span class=\"line\">WHERE CustomerID = 1;</span><br></pre></td></tr></table></figure>\n\n<p>现在，选自 “Customers” 表的数据如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Alfred Schmidt</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Frankfurt</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"更新多个记录\"><a href=\"#更新多个记录\" class=\"headerlink\" title=\"更新多个记录\"></a>更新多个记录</h2><hr>\n<p>WHERE子句决定了将要更新的记录数量。</p>\n<p>以下SQL语句将把国家&#x2F;地区为”Mexico”的所有记录的联系人姓名更新为”Juan”：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">UPDATE Customers</span><br><span class=\"line\">SET ContactName=&#x27;Juan&#x27;</span><br><span class=\"line\">WHERE Country=&#x27;Mexico&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>“Customers”表中的选择现在看起来像这样：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Alfred Schmidt</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Frankfurt</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Juan</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Juan</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"Update-警告！\"><a href=\"#Update-警告！\" class=\"headerlink\" title=\"Update 警告！\"></a>Update 警告！</h2><hr>\n<p>更新记录时要小心。如果您省略WHERE子句，所有记录将被更新！</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">UPDATE Customers</span><br><span class=\"line\">SET ContactName=&#x27;Juan&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>“Customers” 表将如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Juan</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Frankfurt</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Juan</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Juan</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Juan</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Juan</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n"},{"layout":"wiki","wiki":"sql","title":"SQL USE语句","order":15,"_content":"\n## SQL 选择数据库 USE语句\n\n------\n\n当SQL Schema中有多个数据库时，在开始操作之前，需要选择一个执行所有操作的数据库。\n\nSQL USE语句用于选择SQL架构中的任何现有数据库。\n\n### 句法\n\nUSE语句的基本语法如下所示 :\n\n```\nUSE DatabaseName;\n```\n\n数据库名称在RDBMS中必须是唯一的。\n\n## 实例\n\n------\n\n您可以查看可用的数据库，如下所示：\n\n```\nSQL> SHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| AMROOD             |\n| TUTORIALSPOINT     |\n| mysql              |\n| orig               |\n| test               |\n+--------------------+\n6 rows in set (0.00 sec)\n```\n\n现在，如果您想使用AMROOD数据库，那么您可以执行以下SQL命令并开始使用AMROOD数据库。\n\n```\nSQL> USE AMROOD;\n```\n","source":"wiki/sql/sentence/use.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL USE语句\norder: 15\n---\n\n## SQL 选择数据库 USE语句\n\n------\n\n当SQL Schema中有多个数据库时，在开始操作之前，需要选择一个执行所有操作的数据库。\n\nSQL USE语句用于选择SQL架构中的任何现有数据库。\n\n### 句法\n\nUSE语句的基本语法如下所示 :\n\n```\nUSE DatabaseName;\n```\n\n数据库名称在RDBMS中必须是唯一的。\n\n## 实例\n\n------\n\n您可以查看可用的数据库，如下所示：\n\n```\nSQL> SHOW DATABASES;\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| AMROOD             |\n| TUTORIALSPOINT     |\n| mysql              |\n| orig               |\n| test               |\n+--------------------+\n6 rows in set (0.00 sec)\n```\n\n现在，如果您想使用AMROOD数据库，那么您可以执行以下SQL命令并开始使用AMROOD数据库。\n\n```\nSQL> USE AMROOD;\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-10T14:27:46.882Z","path":"wiki/sql/sentence/use.html","comments":1,"_id":"cmbreopj6001a65x0hg182rq5","content":"<h2 id=\"SQL-选择数据库-USE语句\"><a href=\"#SQL-选择数据库-USE语句\" class=\"headerlink\" title=\"SQL 选择数据库 USE语句\"></a>SQL 选择数据库 USE语句</h2><hr>\n<p>当SQL Schema中有多个数据库时，在开始操作之前，需要选择一个执行所有操作的数据库。</p>\n<p>SQL USE语句用于选择SQL架构中的任何现有数据库。</p>\n<h3 id=\"句法\"><a href=\"#句法\" class=\"headerlink\" title=\"句法\"></a>句法</h3><p>USE语句的基本语法如下所示 :</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">USE DatabaseName;</span><br></pre></td></tr></table></figure>\n\n<p>数据库名称在RDBMS中必须是唯一的。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><hr>\n<p>您可以查看可用的数据库，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SHOW DATABASES;</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database           |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| AMROOD             |</span><br><span class=\"line\">| TUTORIALSPOINT     |</span><br><span class=\"line\">| mysql              |</span><br><span class=\"line\">| orig               |</span><br><span class=\"line\">| test               |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>现在，如果您想使用AMROOD数据库，那么您可以执行以下SQL命令并开始使用AMROOD数据库。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; USE AMROOD;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-选择数据库-USE语句\"><a href=\"#SQL-选择数据库-USE语句\" class=\"headerlink\" title=\"SQL 选择数据库 USE语句\"></a>SQL 选择数据库 USE语句</h2><hr>\n<p>当SQL Schema中有多个数据库时，在开始操作之前，需要选择一个执行所有操作的数据库。</p>\n<p>SQL USE语句用于选择SQL架构中的任何现有数据库。</p>\n<h3 id=\"句法\"><a href=\"#句法\" class=\"headerlink\" title=\"句法\"></a>句法</h3><p>USE语句的基本语法如下所示 :</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">USE DatabaseName;</span><br></pre></td></tr></table></figure>\n\n<p>数据库名称在RDBMS中必须是唯一的。</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><hr>\n<p>您可以查看可用的数据库，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SHOW DATABASES;</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| Database           |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">| AMROOD             |</span><br><span class=\"line\">| TUTORIALSPOINT     |</span><br><span class=\"line\">| mysql              |</span><br><span class=\"line\">| orig               |</span><br><span class=\"line\">| test               |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">6 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>现在，如果您想使用AMROOD数据库，那么您可以执行以下SQL命令并开始使用AMROOD数据库。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; USE AMROOD;</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 使用视图","order":49,"_content":"\n## SQL 使用视图\n\n------\n\n视图无非就是存储在数据库中并具有名字的 SQL 语句，或者说是以预定义的 SQL 查询的形式存在的数据表的成分。\n\n视图可以包含表中的所有列，或者仅包含选定的列。视图可以创建自一个或者多个表，这取决于创建该视图的 SQL 语句的写法。\n\n视图，一种虚拟的表，允许用户执行以下操作：\n\n- 以用户或者某些类型的用户感觉自然或者直观的方式来组织数据；\n- 限制对数据的访问，从而使得用户仅能够看到或者修改（某些情况下）他们需要的数据；\n- 从多个表中汇总数据，以产生报表。\n\n## 创建视图\n\n------\n\n在 SQL 中，视图是基于 SQL 语句的结果集的可视化表。\n\n数据库视图由 **CREATE VIEW** 语句创建。视图可以创建自单个表、多个表或者其他视图。\n\n视图中的字段是一个或多个数据库中真实表中的字段。\n\n在使用时视图可以被视为一个\"虚拟表\"。\n\n要创建视图的话，用户必须有适当的系统权限。具体需要何种权限随数据库系统实现的不同而不同。\n\nCREATE VIEW 语句的基本语法如下所示：\n\n```\nCREATE VIEW view_name AS\nSELECT column1, column2.....\nFROM table_name\nWHERE [condition];\n```\n\n和普通的 SQL SELECT 查询一样，你可以在上面的 SELECT 语句中包含多个数据表。\n\n> 注释：视图总是显示最新数据！每当用户查询视图时，数据库引擎就使用视图的 SQL 语句重新构建数据。\n\n## SQL CREATE VIEW 示例\n\n------\n\n### 示例一\n\n考虑 CUSTOMERS 表，表中的记录如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n下面是由 CUSTOMERS 表创建视图的例子。该视图包含来自 CUSTOMERS 表的顾客的名字（name）和年龄（age）：\n\n```\nSQL > CREATE VIEW CUSTOMERS_VIEW AS\nSELECT name, age\nFROM  CUSTOMERS;\n```\n\n现在，你就可以像查询普通的数据表一样查询 CUSTOMERS_VIEW 了：\n\n```\nSQL > SELECT * FROM CUSTOMERS_VIEW;\n```\n\n上述语句将会产生如下运行结果：\n\n```\n+----------+-----+\n| name     | age |\n+----------+-----+\n| Ramesh   |  32 |\n| Khilan   |  25 |\n| kaushik  |  23 |\n| Chaitali |  25 |\n| Hardik   |  27 |\n| Komal    |  22 |\n| Muffy    |  24 |\n+----------+-----+\n```\n\n### 示例２\n\n下面是由 CUSTOMERS 表创建视图的例子。该视图包含来自 CUSTOMERS 表中年龄（age）为25的顾客的ADDRESS信息：\n\n```\nSQL > CREATE VIEW CUSTOMERS_ADDRESS AS\nSELECT ADDRESS\nFROM  CUSTOMERS;\nWHERE AGE=25;\n```\n\n我们可以像这样查询上面这个 CUSTOMERS_ADDRESS 视图：\n\n```\nSQL > SELECT * FROM CUSTOMERS_ADDRESS;\n```\n\n我们也可以向查询添加条件。现在，我们仅仅需要查看 \"Delhi\" 的数据：\n\n```\nSELECT * FROM CUSTOMERS_ADDRESS\nWHERE ADDRESS='Delhi';\n```\n\n## WITH CHECK OPTION\n\n------\n\nWITH CHECK OPTION 是 CREATE VIEW 语句的一个可选项。\n\nWITH CHECK OPTION 用于保证所有的 UPDATE 和 INSERT 语句都满足视图定义中的条件。\n\n如果不能满足这些条件，UPDATE 或 INSERT 就会返回错误。\n\n下面的例子创建的也是 CUSTOMERS_VIEW 视图，不过这次 WITH CHECK OPTION 是打开的：\n\n```\nCREATE VIEW CUSTOMERS_VIEW AS\nSELECT name, age\nFROM  CUSTOMERS\nWHERE age IS NOT NULL\nWITH CHECK OPTION;\n```\n\n这里 WITH CHECK OPTION 使得视图拒绝任何 AGE 字段为 NULL 的条目，因为视图的定义中，AGE 字段不能为空。\n\n## 更新视图\n\n------\n\n在SQL视图上也可以使用修改数据的DML语句，如 INSERT、UPDATE和DELETE。\n\n视图可以在特定的情况下更新：\n\n- SELECT 子句不能包含 DISTINCT 关键字\n- SELECT 子句不能包含任何汇总函数（summary functions）\n- SELECT 子句不能包含任何集合函数（set functions）\n- SELECT 子句不能包含任何集合运算符（set operators）\n- SELECT 子句不能包含 ORDER BY 子句\n- 视图不能包含连接操作符\n- 视图不能包含伪列或表达式\n- FROM 子句中不能有多个数据表\n- WHERE 子句不能包含子查询（subquery）\n- 查询语句中不能有 GROUP BY 或者 HAVING\n- 计算得出的列不能更新\n- 视图必须包含原始数据表中所有的 NOT NULL 列，从而使 INSERT 查询生效。\n\n如果视图满足以上所有的条件，该视图就可以被更新。下面的例子中，Ramesh 的年龄被更新了：\n\n```\nSQL > UPDATE CUSTOMERS_VIEW\n      SET AGE = 35\n      WHERE name='Ramesh';\n```\n\n最终更新的还是原始数据表，只是其结果反应在了视图上。现在查询原始数据表，SELECT 语句将会产生以下结果：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  35 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n## 向视图中插入新行\n\n------\n\n可以向视图中插入新行，其规则同（使用 UPDATE 命令）更新视图所遵循的规则相同。\n\n这里我们不能向 CUSTOMERS_VIEW 视图中添加新行，因为该视图没有包含原始数据表中所有 NOT NULL 的列。否则的话，你就可以像在数据表中插入新行一样，向视图中插入新行。\n\n句法：\n\n```\nINSERT INTO view_name\nVALUES (value1, value2, value3, ...);\n```\n\n## 删除视图中的行\n\n------\n\n视图中的数据行可以被删除。删除数据行与更新视图和向视图中插入新行遵循相同的规则。\n\n下面的例子将删除 CUSTOMERS_VIEW 视图中 AGE=22 的数据行：\n\n```\nSQL > DELETE FROM CUSTOMERS_VIEW\n      WHERE age = 22;\n```\n\n该语句最终会将原始数据表中对应的数据行删除，只不过其结果反应在了视图上。现在查询原始数据表，SELECT 语句将会产生以下结果：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  35 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n## 删除视图\n\n------\n\n很明显，当我们不再需要某个视图的时候，需要有一种方式可以让我们将其删除。删除视图的语法非常简单，如下所示：\n\n```\nDROP VIEW view_name;\n```\n\n下面的例子展示了如何从 CUSTOMERS 表中删除 CUSTOMERS_VIEW 视图：\n\n```\nDROP VIEW CUSTOMERS_VIEW;\n```\n","source":"wiki/sql/sentence/useview.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 使用视图\norder: 49\n---\n\n## SQL 使用视图\n\n------\n\n视图无非就是存储在数据库中并具有名字的 SQL 语句，或者说是以预定义的 SQL 查询的形式存在的数据表的成分。\n\n视图可以包含表中的所有列，或者仅包含选定的列。视图可以创建自一个或者多个表，这取决于创建该视图的 SQL 语句的写法。\n\n视图，一种虚拟的表，允许用户执行以下操作：\n\n- 以用户或者某些类型的用户感觉自然或者直观的方式来组织数据；\n- 限制对数据的访问，从而使得用户仅能够看到或者修改（某些情况下）他们需要的数据；\n- 从多个表中汇总数据，以产生报表。\n\n## 创建视图\n\n------\n\n在 SQL 中，视图是基于 SQL 语句的结果集的可视化表。\n\n数据库视图由 **CREATE VIEW** 语句创建。视图可以创建自单个表、多个表或者其他视图。\n\n视图中的字段是一个或多个数据库中真实表中的字段。\n\n在使用时视图可以被视为一个\"虚拟表\"。\n\n要创建视图的话，用户必须有适当的系统权限。具体需要何种权限随数据库系统实现的不同而不同。\n\nCREATE VIEW 语句的基本语法如下所示：\n\n```\nCREATE VIEW view_name AS\nSELECT column1, column2.....\nFROM table_name\nWHERE [condition];\n```\n\n和普通的 SQL SELECT 查询一样，你可以在上面的 SELECT 语句中包含多个数据表。\n\n> 注释：视图总是显示最新数据！每当用户查询视图时，数据库引擎就使用视图的 SQL 语句重新构建数据。\n\n## SQL CREATE VIEW 示例\n\n------\n\n### 示例一\n\n考虑 CUSTOMERS 表，表中的记录如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n下面是由 CUSTOMERS 表创建视图的例子。该视图包含来自 CUSTOMERS 表的顾客的名字（name）和年龄（age）：\n\n```\nSQL > CREATE VIEW CUSTOMERS_VIEW AS\nSELECT name, age\nFROM  CUSTOMERS;\n```\n\n现在，你就可以像查询普通的数据表一样查询 CUSTOMERS_VIEW 了：\n\n```\nSQL > SELECT * FROM CUSTOMERS_VIEW;\n```\n\n上述语句将会产生如下运行结果：\n\n```\n+----------+-----+\n| name     | age |\n+----------+-----+\n| Ramesh   |  32 |\n| Khilan   |  25 |\n| kaushik  |  23 |\n| Chaitali |  25 |\n| Hardik   |  27 |\n| Komal    |  22 |\n| Muffy    |  24 |\n+----------+-----+\n```\n\n### 示例２\n\n下面是由 CUSTOMERS 表创建视图的例子。该视图包含来自 CUSTOMERS 表中年龄（age）为25的顾客的ADDRESS信息：\n\n```\nSQL > CREATE VIEW CUSTOMERS_ADDRESS AS\nSELECT ADDRESS\nFROM  CUSTOMERS;\nWHERE AGE=25;\n```\n\n我们可以像这样查询上面这个 CUSTOMERS_ADDRESS 视图：\n\n```\nSQL > SELECT * FROM CUSTOMERS_ADDRESS;\n```\n\n我们也可以向查询添加条件。现在，我们仅仅需要查看 \"Delhi\" 的数据：\n\n```\nSELECT * FROM CUSTOMERS_ADDRESS\nWHERE ADDRESS='Delhi';\n```\n\n## WITH CHECK OPTION\n\n------\n\nWITH CHECK OPTION 是 CREATE VIEW 语句的一个可选项。\n\nWITH CHECK OPTION 用于保证所有的 UPDATE 和 INSERT 语句都满足视图定义中的条件。\n\n如果不能满足这些条件，UPDATE 或 INSERT 就会返回错误。\n\n下面的例子创建的也是 CUSTOMERS_VIEW 视图，不过这次 WITH CHECK OPTION 是打开的：\n\n```\nCREATE VIEW CUSTOMERS_VIEW AS\nSELECT name, age\nFROM  CUSTOMERS\nWHERE age IS NOT NULL\nWITH CHECK OPTION;\n```\n\n这里 WITH CHECK OPTION 使得视图拒绝任何 AGE 字段为 NULL 的条目，因为视图的定义中，AGE 字段不能为空。\n\n## 更新视图\n\n------\n\n在SQL视图上也可以使用修改数据的DML语句，如 INSERT、UPDATE和DELETE。\n\n视图可以在特定的情况下更新：\n\n- SELECT 子句不能包含 DISTINCT 关键字\n- SELECT 子句不能包含任何汇总函数（summary functions）\n- SELECT 子句不能包含任何集合函数（set functions）\n- SELECT 子句不能包含任何集合运算符（set operators）\n- SELECT 子句不能包含 ORDER BY 子句\n- 视图不能包含连接操作符\n- 视图不能包含伪列或表达式\n- FROM 子句中不能有多个数据表\n- WHERE 子句不能包含子查询（subquery）\n- 查询语句中不能有 GROUP BY 或者 HAVING\n- 计算得出的列不能更新\n- 视图必须包含原始数据表中所有的 NOT NULL 列，从而使 INSERT 查询生效。\n\n如果视图满足以上所有的条件，该视图就可以被更新。下面的例子中，Ramesh 的年龄被更新了：\n\n```\nSQL > UPDATE CUSTOMERS_VIEW\n      SET AGE = 35\n      WHERE name='Ramesh';\n```\n\n最终更新的还是原始数据表，只是其结果反应在了视图上。现在查询原始数据表，SELECT 语句将会产生以下结果：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  35 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n## 向视图中插入新行\n\n------\n\n可以向视图中插入新行，其规则同（使用 UPDATE 命令）更新视图所遵循的规则相同。\n\n这里我们不能向 CUSTOMERS_VIEW 视图中添加新行，因为该视图没有包含原始数据表中所有 NOT NULL 的列。否则的话，你就可以像在数据表中插入新行一样，向视图中插入新行。\n\n句法：\n\n```\nINSERT INTO view_name\nVALUES (value1, value2, value3, ...);\n```\n\n## 删除视图中的行\n\n------\n\n视图中的数据行可以被删除。删除数据行与更新视图和向视图中插入新行遵循相同的规则。\n\n下面的例子将删除 CUSTOMERS_VIEW 视图中 AGE=22 的数据行：\n\n```\nSQL > DELETE FROM CUSTOMERS_VIEW\n      WHERE age = 22;\n```\n\n该语句最终会将原始数据表中对应的数据行删除，只不过其结果反应在了视图上。现在查询原始数据表，SELECT 语句将会产生以下结果：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  35 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n## 删除视图\n\n------\n\n很明显，当我们不再需要某个视图的时候，需要有一种方式可以让我们将其删除。删除视图的语法非常简单，如下所示：\n\n```\nDROP VIEW view_name;\n```\n\n下面的例子展示了如何从 CUSTOMERS 表中删除 CUSTOMERS_VIEW 视图：\n\n```\nDROP VIEW CUSTOMERS_VIEW;\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T02:47:04.705Z","path":"wiki/sql/sentence/useview.html","comments":1,"_id":"cmbreopj7001b65x0era9bpj8","content":"<h2 id=\"SQL-使用视图\"><a href=\"#SQL-使用视图\" class=\"headerlink\" title=\"SQL 使用视图\"></a>SQL 使用视图</h2><hr>\n<p>视图无非就是存储在数据库中并具有名字的 SQL 语句，或者说是以预定义的 SQL 查询的形式存在的数据表的成分。</p>\n<p>视图可以包含表中的所有列，或者仅包含选定的列。视图可以创建自一个或者多个表，这取决于创建该视图的 SQL 语句的写法。</p>\n<p>视图，一种虚拟的表，允许用户执行以下操作：</p>\n<ul>\n<li>以用户或者某些类型的用户感觉自然或者直观的方式来组织数据；</li>\n<li>限制对数据的访问，从而使得用户仅能够看到或者修改（某些情况下）他们需要的数据；</li>\n<li>从多个表中汇总数据，以产生报表。</li>\n</ul>\n<h2 id=\"创建视图\"><a href=\"#创建视图\" class=\"headerlink\" title=\"创建视图\"></a>创建视图</h2><hr>\n<p>在 SQL 中，视图是基于 SQL 语句的结果集的可视化表。</p>\n<p>数据库视图由 <strong>CREATE VIEW</strong> 语句创建。视图可以创建自单个表、多个表或者其他视图。</p>\n<p>视图中的字段是一个或多个数据库中真实表中的字段。</p>\n<p>在使用时视图可以被视为一个”虚拟表”。</p>\n<p>要创建视图的话，用户必须有适当的系统权限。具体需要何种权限随数据库系统实现的不同而不同。</p>\n<p>CREATE VIEW 语句的基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE VIEW view_name AS</span><br><span class=\"line\">SELECT column1, column2.....</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE [condition];</span><br></pre></td></tr></table></figure>\n\n<p>和普通的 SQL SELECT 查询一样，你可以在上面的 SELECT 语句中包含多个数据表。</p>\n<blockquote>\n<p>注释：视图总是显示最新数据！每当用户查询视图时，数据库引擎就使用视图的 SQL 语句重新构建数据。</p>\n</blockquote>\n<h2 id=\"SQL-CREATE-VIEW-示例\"><a href=\"#SQL-CREATE-VIEW-示例\" class=\"headerlink\" title=\"SQL CREATE VIEW 示例\"></a>SQL CREATE VIEW 示例</h2><hr>\n<h3 id=\"示例一\"><a href=\"#示例一\" class=\"headerlink\" title=\"示例一\"></a>示例一</h3><p>考虑 CUSTOMERS 表，表中的记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>下面是由 CUSTOMERS 表创建视图的例子。该视图包含来自 CUSTOMERS 表的顾客的名字（name）和年龄（age）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL &gt; CREATE VIEW CUSTOMERS_VIEW AS</span><br><span class=\"line\">SELECT name, age</span><br><span class=\"line\">FROM  CUSTOMERS;</span><br></pre></td></tr></table></figure>\n\n<p>现在，你就可以像查询普通的数据表一样查询 CUSTOMERS_VIEW 了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL &gt; SELECT * FROM CUSTOMERS_VIEW;</span><br></pre></td></tr></table></figure>\n\n<p>上述语句将会产生如下运行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----------+-----+</span><br><span class=\"line\">| name     | age |</span><br><span class=\"line\">+----------+-----+</span><br><span class=\"line\">| Ramesh   |  32 |</span><br><span class=\"line\">| Khilan   |  25 |</span><br><span class=\"line\">| kaushik  |  23 |</span><br><span class=\"line\">| Chaitali |  25 |</span><br><span class=\"line\">| Hardik   |  27 |</span><br><span class=\"line\">| Komal    |  22 |</span><br><span class=\"line\">| Muffy    |  24 |</span><br><span class=\"line\">+----------+-----+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例２\"><a href=\"#示例２\" class=\"headerlink\" title=\"示例２\"></a>示例２</h3><p>下面是由 CUSTOMERS 表创建视图的例子。该视图包含来自 CUSTOMERS 表中年龄（age）为25的顾客的ADDRESS信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL &gt; CREATE VIEW CUSTOMERS_ADDRESS AS</span><br><span class=\"line\">SELECT ADDRESS</span><br><span class=\"line\">FROM  CUSTOMERS;</span><br><span class=\"line\">WHERE AGE=25;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以像这样查询上面这个 CUSTOMERS_ADDRESS 视图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL &gt; SELECT * FROM CUSTOMERS_ADDRESS;</span><br></pre></td></tr></table></figure>\n\n<p>我们也可以向查询添加条件。现在，我们仅仅需要查看 “Delhi” 的数据：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM CUSTOMERS_ADDRESS</span><br><span class=\"line\">WHERE ADDRESS=&#x27;Delhi&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"WITH-CHECK-OPTION\"><a href=\"#WITH-CHECK-OPTION\" class=\"headerlink\" title=\"WITH CHECK OPTION\"></a>WITH CHECK OPTION</h2><hr>\n<p>WITH CHECK OPTION 是 CREATE VIEW 语句的一个可选项。</p>\n<p>WITH CHECK OPTION 用于保证所有的 UPDATE 和 INSERT 语句都满足视图定义中的条件。</p>\n<p>如果不能满足这些条件，UPDATE 或 INSERT 就会返回错误。</p>\n<p>下面的例子创建的也是 CUSTOMERS_VIEW 视图，不过这次 WITH CHECK OPTION 是打开的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE VIEW CUSTOMERS_VIEW AS</span><br><span class=\"line\">SELECT name, age</span><br><span class=\"line\">FROM  CUSTOMERS</span><br><span class=\"line\">WHERE age IS NOT NULL</span><br><span class=\"line\">WITH CHECK OPTION;</span><br></pre></td></tr></table></figure>\n\n<p>这里 WITH CHECK OPTION 使得视图拒绝任何 AGE 字段为 NULL 的条目，因为视图的定义中，AGE 字段不能为空。</p>\n<h2 id=\"更新视图\"><a href=\"#更新视图\" class=\"headerlink\" title=\"更新视图\"></a>更新视图</h2><hr>\n<p>在SQL视图上也可以使用修改数据的DML语句，如 INSERT、UPDATE和DELETE。</p>\n<p>视图可以在特定的情况下更新：</p>\n<ul>\n<li>SELECT 子句不能包含 DISTINCT 关键字</li>\n<li>SELECT 子句不能包含任何汇总函数（summary functions）</li>\n<li>SELECT 子句不能包含任何集合函数（set functions）</li>\n<li>SELECT 子句不能包含任何集合运算符（set operators）</li>\n<li>SELECT 子句不能包含 ORDER BY 子句</li>\n<li>视图不能包含连接操作符</li>\n<li>视图不能包含伪列或表达式</li>\n<li>FROM 子句中不能有多个数据表</li>\n<li>WHERE 子句不能包含子查询（subquery）</li>\n<li>查询语句中不能有 GROUP BY 或者 HAVING</li>\n<li>计算得出的列不能更新</li>\n<li>视图必须包含原始数据表中所有的 NOT NULL 列，从而使 INSERT 查询生效。</li>\n</ul>\n<p>如果视图满足以上所有的条件，该视图就可以被更新。下面的例子中，Ramesh 的年龄被更新了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL &gt; UPDATE CUSTOMERS_VIEW</span><br><span class=\"line\">      SET AGE = 35</span><br><span class=\"line\">      WHERE name=&#x27;Ramesh&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>最终更新的还是原始数据表，只是其结果反应在了视图上。现在查询原始数据表，SELECT 语句将会产生以下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  35 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"向视图中插入新行\"><a href=\"#向视图中插入新行\" class=\"headerlink\" title=\"向视图中插入新行\"></a>向视图中插入新行</h2><hr>\n<p>可以向视图中插入新行，其规则同（使用 UPDATE 命令）更新视图所遵循的规则相同。</p>\n<p>这里我们不能向 CUSTOMERS_VIEW 视图中添加新行，因为该视图没有包含原始数据表中所有 NOT NULL 的列。否则的话，你就可以像在数据表中插入新行一样，向视图中插入新行。</p>\n<p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO view_name</span><br><span class=\"line\">VALUES (value1, value2, value3, ...);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除视图中的行\"><a href=\"#删除视图中的行\" class=\"headerlink\" title=\"删除视图中的行\"></a>删除视图中的行</h2><hr>\n<p>视图中的数据行可以被删除。删除数据行与更新视图和向视图中插入新行遵循相同的规则。</p>\n<p>下面的例子将删除 CUSTOMERS_VIEW 视图中 AGE&#x3D;22 的数据行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL &gt; DELETE FROM CUSTOMERS_VIEW</span><br><span class=\"line\">      WHERE age = 22;</span><br></pre></td></tr></table></figure>\n\n<p>该语句最终会将原始数据表中对应的数据行删除，只不过其结果反应在了视图上。现在查询原始数据表，SELECT 语句将会产生以下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  35 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除视图\"><a href=\"#删除视图\" class=\"headerlink\" title=\"删除视图\"></a>删除视图</h2><hr>\n<p>很明显，当我们不再需要某个视图的时候，需要有一种方式可以让我们将其删除。删除视图的语法非常简单，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP VIEW view_name;</span><br></pre></td></tr></table></figure>\n\n<p>下面的例子展示了如何从 CUSTOMERS 表中删除 CUSTOMERS_VIEW 视图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP VIEW CUSTOMERS_VIEW;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-使用视图\"><a href=\"#SQL-使用视图\" class=\"headerlink\" title=\"SQL 使用视图\"></a>SQL 使用视图</h2><hr>\n<p>视图无非就是存储在数据库中并具有名字的 SQL 语句，或者说是以预定义的 SQL 查询的形式存在的数据表的成分。</p>\n<p>视图可以包含表中的所有列，或者仅包含选定的列。视图可以创建自一个或者多个表，这取决于创建该视图的 SQL 语句的写法。</p>\n<p>视图，一种虚拟的表，允许用户执行以下操作：</p>\n<ul>\n<li>以用户或者某些类型的用户感觉自然或者直观的方式来组织数据；</li>\n<li>限制对数据的访问，从而使得用户仅能够看到或者修改（某些情况下）他们需要的数据；</li>\n<li>从多个表中汇总数据，以产生报表。</li>\n</ul>\n<h2 id=\"创建视图\"><a href=\"#创建视图\" class=\"headerlink\" title=\"创建视图\"></a>创建视图</h2><hr>\n<p>在 SQL 中，视图是基于 SQL 语句的结果集的可视化表。</p>\n<p>数据库视图由 <strong>CREATE VIEW</strong> 语句创建。视图可以创建自单个表、多个表或者其他视图。</p>\n<p>视图中的字段是一个或多个数据库中真实表中的字段。</p>\n<p>在使用时视图可以被视为一个”虚拟表”。</p>\n<p>要创建视图的话，用户必须有适当的系统权限。具体需要何种权限随数据库系统实现的不同而不同。</p>\n<p>CREATE VIEW 语句的基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE VIEW view_name AS</span><br><span class=\"line\">SELECT column1, column2.....</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE [condition];</span><br></pre></td></tr></table></figure>\n\n<p>和普通的 SQL SELECT 查询一样，你可以在上面的 SELECT 语句中包含多个数据表。</p>\n<blockquote>\n<p>注释：视图总是显示最新数据！每当用户查询视图时，数据库引擎就使用视图的 SQL 语句重新构建数据。</p>\n</blockquote>\n<h2 id=\"SQL-CREATE-VIEW-示例\"><a href=\"#SQL-CREATE-VIEW-示例\" class=\"headerlink\" title=\"SQL CREATE VIEW 示例\"></a>SQL CREATE VIEW 示例</h2><hr>\n<h3 id=\"示例一\"><a href=\"#示例一\" class=\"headerlink\" title=\"示例一\"></a>示例一</h3><p>考虑 CUSTOMERS 表，表中的记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>下面是由 CUSTOMERS 表创建视图的例子。该视图包含来自 CUSTOMERS 表的顾客的名字（name）和年龄（age）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL &gt; CREATE VIEW CUSTOMERS_VIEW AS</span><br><span class=\"line\">SELECT name, age</span><br><span class=\"line\">FROM  CUSTOMERS;</span><br></pre></td></tr></table></figure>\n\n<p>现在，你就可以像查询普通的数据表一样查询 CUSTOMERS_VIEW 了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL &gt; SELECT * FROM CUSTOMERS_VIEW;</span><br></pre></td></tr></table></figure>\n\n<p>上述语句将会产生如下运行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----------+-----+</span><br><span class=\"line\">| name     | age |</span><br><span class=\"line\">+----------+-----+</span><br><span class=\"line\">| Ramesh   |  32 |</span><br><span class=\"line\">| Khilan   |  25 |</span><br><span class=\"line\">| kaushik  |  23 |</span><br><span class=\"line\">| Chaitali |  25 |</span><br><span class=\"line\">| Hardik   |  27 |</span><br><span class=\"line\">| Komal    |  22 |</span><br><span class=\"line\">| Muffy    |  24 |</span><br><span class=\"line\">+----------+-----+</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例２\"><a href=\"#示例２\" class=\"headerlink\" title=\"示例２\"></a>示例２</h3><p>下面是由 CUSTOMERS 表创建视图的例子。该视图包含来自 CUSTOMERS 表中年龄（age）为25的顾客的ADDRESS信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL &gt; CREATE VIEW CUSTOMERS_ADDRESS AS</span><br><span class=\"line\">SELECT ADDRESS</span><br><span class=\"line\">FROM  CUSTOMERS;</span><br><span class=\"line\">WHERE AGE=25;</span><br></pre></td></tr></table></figure>\n\n<p>我们可以像这样查询上面这个 CUSTOMERS_ADDRESS 视图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL &gt; SELECT * FROM CUSTOMERS_ADDRESS;</span><br></pre></td></tr></table></figure>\n\n<p>我们也可以向查询添加条件。现在，我们仅仅需要查看 “Delhi” 的数据：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM CUSTOMERS_ADDRESS</span><br><span class=\"line\">WHERE ADDRESS=&#x27;Delhi&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"WITH-CHECK-OPTION\"><a href=\"#WITH-CHECK-OPTION\" class=\"headerlink\" title=\"WITH CHECK OPTION\"></a>WITH CHECK OPTION</h2><hr>\n<p>WITH CHECK OPTION 是 CREATE VIEW 语句的一个可选项。</p>\n<p>WITH CHECK OPTION 用于保证所有的 UPDATE 和 INSERT 语句都满足视图定义中的条件。</p>\n<p>如果不能满足这些条件，UPDATE 或 INSERT 就会返回错误。</p>\n<p>下面的例子创建的也是 CUSTOMERS_VIEW 视图，不过这次 WITH CHECK OPTION 是打开的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE VIEW CUSTOMERS_VIEW AS</span><br><span class=\"line\">SELECT name, age</span><br><span class=\"line\">FROM  CUSTOMERS</span><br><span class=\"line\">WHERE age IS NOT NULL</span><br><span class=\"line\">WITH CHECK OPTION;</span><br></pre></td></tr></table></figure>\n\n<p>这里 WITH CHECK OPTION 使得视图拒绝任何 AGE 字段为 NULL 的条目，因为视图的定义中，AGE 字段不能为空。</p>\n<h2 id=\"更新视图\"><a href=\"#更新视图\" class=\"headerlink\" title=\"更新视图\"></a>更新视图</h2><hr>\n<p>在SQL视图上也可以使用修改数据的DML语句，如 INSERT、UPDATE和DELETE。</p>\n<p>视图可以在特定的情况下更新：</p>\n<ul>\n<li>SELECT 子句不能包含 DISTINCT 关键字</li>\n<li>SELECT 子句不能包含任何汇总函数（summary functions）</li>\n<li>SELECT 子句不能包含任何集合函数（set functions）</li>\n<li>SELECT 子句不能包含任何集合运算符（set operators）</li>\n<li>SELECT 子句不能包含 ORDER BY 子句</li>\n<li>视图不能包含连接操作符</li>\n<li>视图不能包含伪列或表达式</li>\n<li>FROM 子句中不能有多个数据表</li>\n<li>WHERE 子句不能包含子查询（subquery）</li>\n<li>查询语句中不能有 GROUP BY 或者 HAVING</li>\n<li>计算得出的列不能更新</li>\n<li>视图必须包含原始数据表中所有的 NOT NULL 列，从而使 INSERT 查询生效。</li>\n</ul>\n<p>如果视图满足以上所有的条件，该视图就可以被更新。下面的例子中，Ramesh 的年龄被更新了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL &gt; UPDATE CUSTOMERS_VIEW</span><br><span class=\"line\">      SET AGE = 35</span><br><span class=\"line\">      WHERE name=&#x27;Ramesh&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>最终更新的还是原始数据表，只是其结果反应在了视图上。现在查询原始数据表，SELECT 语句将会产生以下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  35 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"向视图中插入新行\"><a href=\"#向视图中插入新行\" class=\"headerlink\" title=\"向视图中插入新行\"></a>向视图中插入新行</h2><hr>\n<p>可以向视图中插入新行，其规则同（使用 UPDATE 命令）更新视图所遵循的规则相同。</p>\n<p>这里我们不能向 CUSTOMERS_VIEW 视图中添加新行，因为该视图没有包含原始数据表中所有 NOT NULL 的列。否则的话，你就可以像在数据表中插入新行一样，向视图中插入新行。</p>\n<p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO view_name</span><br><span class=\"line\">VALUES (value1, value2, value3, ...);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除视图中的行\"><a href=\"#删除视图中的行\" class=\"headerlink\" title=\"删除视图中的行\"></a>删除视图中的行</h2><hr>\n<p>视图中的数据行可以被删除。删除数据行与更新视图和向视图中插入新行遵循相同的规则。</p>\n<p>下面的例子将删除 CUSTOMERS_VIEW 视图中 AGE&#x3D;22 的数据行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL &gt; DELETE FROM CUSTOMERS_VIEW</span><br><span class=\"line\">      WHERE age = 22;</span><br></pre></td></tr></table></figure>\n\n<p>该语句最终会将原始数据表中对应的数据行删除，只不过其结果反应在了视图上。现在查询原始数据表，SELECT 语句将会产生以下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  35 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除视图\"><a href=\"#删除视图\" class=\"headerlink\" title=\"删除视图\"></a>删除视图</h2><hr>\n<p>很明显，当我们不再需要某个视图的时候，需要有一种方式可以让我们将其删除。删除视图的语法非常简单，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP VIEW view_name;</span><br></pre></td></tr></table></figure>\n\n<p>下面的例子展示了如何从 CUSTOMERS 表中删除 CUSTOMERS_VIEW 视图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP VIEW CUSTOMERS_VIEW;</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL NULL值处理","order":39,"_content":"\n## SQL NULL 值\n\n------\n\nNULL 空值代表丢失的未知数据。\n\n默认情况下，表列可以保存 NULL 值。\n\n本章解释 IS NULL 和 IS NOT NULL 操作符。\n\n## SQL NULL 值\n\n------\n\n如果表中的列是可选的，那么我们可以插入一个新记录或更新一个现有记录，而无需向列添加一个值。这意味着该字段将存储为 NULL 。\n\nNULL 值的处理与其他值不同。\n\nNULL 为未知或不适当值的占位符。\n\n**注释：**无法比较 NULL 和 0；它们是不等价的。\n\n## SQL 的 NULL 值处理\n\n------\n\n请看下面的 \"Persons\" 表：\n\n| P_Id | LastName  | FirstName | Address   | City      |\n| :--- | :-------- | :-------- | :-------- | :-------- |\n| 1    | Hansen    | Ola       |           | Sandnes   |\n| 2    | Svendson  | Tove      | Borgvn 23 | Sandnes   |\n| 3    | Pettersen | Kari      |           | Stavanger |\n\n如果 \"Persons\" 表 \"Address\" 一栏是可选的。这意味着，如果在 \"Address\" 列中插入一个没有值的记录，则 \"Address\" 列将用 NULL 值保存。\n\n那么如何测试null的值呢？\n\n您不能使用比较操作符测试 NULL 值，例如=、<或<>。\n\n我们必须使用 IS NULL 和 IS NOT NULL 操作符。\n\n## SQL IS NULL\n\n------\n\n我们如何才能选择 \"Address\" 列中有 NULL 值的记录？\n\n我们必须使用 IS NULL 操作符：\n\n```\nSELECT LastName,FirstName,Address FROM Persons\nWHERE Address IS NULL\n```\n\n结果集如下所示：\n\n| LastName  | FirstName | Address |\n| :-------- | :-------- | :------ |\n| Hansen    | Ola       |         |\n| Pettersen | Kari      |         |\n\n**提示：**总是使用 IS NULL 来查找 NULL 值。\n\n## SQL IS NOT NULL\n\n------\n\n我们如何才能选择 \"Address\" 列中没有 NULL 值的记录？\n\n我们必须使用 IS NOT NULL 操作符：\n\n```\nSELECT LastName,FirstName,Address FROM Persons\nWHERE Address IS NOT NULL\n```\n\n结果集如下所示：\n\n| LastName | FirstName | Address   |\n| :------- | :-------- | :-------- |\n| Svendson | Tove      | Borgvn 23 |\n\n在下一节中，我们将了解 ISNULL()、NVL()、IFNULL() 和 COALESCE() 函数。\n","source":"wiki/sql/sentence/valuenull.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL NULL值处理\norder: 39\n---\n\n## SQL NULL 值\n\n------\n\nNULL 空值代表丢失的未知数据。\n\n默认情况下，表列可以保存 NULL 值。\n\n本章解释 IS NULL 和 IS NOT NULL 操作符。\n\n## SQL NULL 值\n\n------\n\n如果表中的列是可选的，那么我们可以插入一个新记录或更新一个现有记录，而无需向列添加一个值。这意味着该字段将存储为 NULL 。\n\nNULL 值的处理与其他值不同。\n\nNULL 为未知或不适当值的占位符。\n\n**注释：**无法比较 NULL 和 0；它们是不等价的。\n\n## SQL 的 NULL 值处理\n\n------\n\n请看下面的 \"Persons\" 表：\n\n| P_Id | LastName  | FirstName | Address   | City      |\n| :--- | :-------- | :-------- | :-------- | :-------- |\n| 1    | Hansen    | Ola       |           | Sandnes   |\n| 2    | Svendson  | Tove      | Borgvn 23 | Sandnes   |\n| 3    | Pettersen | Kari      |           | Stavanger |\n\n如果 \"Persons\" 表 \"Address\" 一栏是可选的。这意味着，如果在 \"Address\" 列中插入一个没有值的记录，则 \"Address\" 列将用 NULL 值保存。\n\n那么如何测试null的值呢？\n\n您不能使用比较操作符测试 NULL 值，例如=、<或<>。\n\n我们必须使用 IS NULL 和 IS NOT NULL 操作符。\n\n## SQL IS NULL\n\n------\n\n我们如何才能选择 \"Address\" 列中有 NULL 值的记录？\n\n我们必须使用 IS NULL 操作符：\n\n```\nSELECT LastName,FirstName,Address FROM Persons\nWHERE Address IS NULL\n```\n\n结果集如下所示：\n\n| LastName  | FirstName | Address |\n| :-------- | :-------- | :------ |\n| Hansen    | Ola       |         |\n| Pettersen | Kari      |         |\n\n**提示：**总是使用 IS NULL 来查找 NULL 值。\n\n## SQL IS NOT NULL\n\n------\n\n我们如何才能选择 \"Address\" 列中没有 NULL 值的记录？\n\n我们必须使用 IS NOT NULL 操作符：\n\n```\nSELECT LastName,FirstName,Address FROM Persons\nWHERE Address IS NOT NULL\n```\n\n结果集如下所示：\n\n| LastName | FirstName | Address   |\n| :------- | :-------- | :-------- |\n| Svendson | Tove      | Borgvn 23 |\n\n在下一节中，我们将了解 ISNULL()、NVL()、IFNULL() 和 COALESCE() 函数。\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T01:57:59.013Z","path":"wiki/sql/sentence/valuenull.html","comments":1,"_id":"cmbreopj7001c65x03pqs9rwv","content":"<h2 id=\"SQL-NULL-值\"><a href=\"#SQL-NULL-值\" class=\"headerlink\" title=\"SQL NULL 值\"></a>SQL NULL 值</h2><hr>\n<p>NULL 空值代表丢失的未知数据。</p>\n<p>默认情况下，表列可以保存 NULL 值。</p>\n<p>本章解释 IS NULL 和 IS NOT NULL 操作符。</p>\n<h2 id=\"SQL-NULL-值-1\"><a href=\"#SQL-NULL-值-1\" class=\"headerlink\" title=\"SQL NULL 值\"></a>SQL NULL 值</h2><hr>\n<p>如果表中的列是可选的，那么我们可以插入一个新记录或更新一个现有记录，而无需向列添加一个值。这意味着该字段将存储为 NULL 。</p>\n<p>NULL 值的处理与其他值不同。</p>\n<p>NULL 为未知或不适当值的占位符。</p>\n<p>**注释：**无法比较 NULL 和 0；它们是不等价的。</p>\n<h2 id=\"SQL-的-NULL-值处理\"><a href=\"#SQL-的-NULL-值处理\" class=\"headerlink\" title=\"SQL 的 NULL 值处理\"></a>SQL 的 NULL 值处理</h2><hr>\n<p>请看下面的 “Persons” 表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">P_Id</th>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Hansen</td>\n<td align=\"left\">Ola</td>\n<td align=\"left\"></td>\n<td align=\"left\">Sandnes</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Svendson</td>\n<td align=\"left\">Tove</td>\n<td align=\"left\">Borgvn 23</td>\n<td align=\"left\">Sandnes</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Pettersen</td>\n<td align=\"left\">Kari</td>\n<td align=\"left\"></td>\n<td align=\"left\">Stavanger</td>\n</tr>\n</tbody></table>\n<p>如果 “Persons” 表 “Address” 一栏是可选的。这意味着，如果在 “Address” 列中插入一个没有值的记录，则 “Address” 列将用 NULL 值保存。</p>\n<p>那么如何测试null的值呢？</p>\n<p>您不能使用比较操作符测试 NULL 值，例如&#x3D;、&lt;或&lt;&gt;。</p>\n<p>我们必须使用 IS NULL 和 IS NOT NULL 操作符。</p>\n<h2 id=\"SQL-IS-NULL\"><a href=\"#SQL-IS-NULL\" class=\"headerlink\" title=\"SQL IS NULL\"></a>SQL IS NULL</h2><hr>\n<p>我们如何才能选择 “Address” 列中有 NULL 值的记录？</p>\n<p>我们必须使用 IS NULL 操作符：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LastName,FirstName,Address FROM Persons</span><br><span class=\"line\">WHERE Address IS NULL</span><br></pre></td></tr></table></figure>\n\n<p>结果集如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Hansen</td>\n<td align=\"left\">Ola</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Pettersen</td>\n<td align=\"left\">Kari</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>**提示：**总是使用 IS NULL 来查找 NULL 值。</p>\n<h2 id=\"SQL-IS-NOT-NULL\"><a href=\"#SQL-IS-NOT-NULL\" class=\"headerlink\" title=\"SQL IS NOT NULL\"></a>SQL IS NOT NULL</h2><hr>\n<p>我们如何才能选择 “Address” 列中没有 NULL 值的记录？</p>\n<p>我们必须使用 IS NOT NULL 操作符：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LastName,FirstName,Address FROM Persons</span><br><span class=\"line\">WHERE Address IS NOT NULL</span><br></pre></td></tr></table></figure>\n\n<p>结果集如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Svendson</td>\n<td align=\"left\">Tove</td>\n<td align=\"left\">Borgvn 23</td>\n</tr>\n</tbody></table>\n<p>在下一节中，我们将了解 ISNULL()、NVL()、IFNULL() 和 COALESCE() 函数。</p>\n","excerpt":"","more":"<h2 id=\"SQL-NULL-值\"><a href=\"#SQL-NULL-值\" class=\"headerlink\" title=\"SQL NULL 值\"></a>SQL NULL 值</h2><hr>\n<p>NULL 空值代表丢失的未知数据。</p>\n<p>默认情况下，表列可以保存 NULL 值。</p>\n<p>本章解释 IS NULL 和 IS NOT NULL 操作符。</p>\n<h2 id=\"SQL-NULL-值-1\"><a href=\"#SQL-NULL-值-1\" class=\"headerlink\" title=\"SQL NULL 值\"></a>SQL NULL 值</h2><hr>\n<p>如果表中的列是可选的，那么我们可以插入一个新记录或更新一个现有记录，而无需向列添加一个值。这意味着该字段将存储为 NULL 。</p>\n<p>NULL 值的处理与其他值不同。</p>\n<p>NULL 为未知或不适当值的占位符。</p>\n<p>**注释：**无法比较 NULL 和 0；它们是不等价的。</p>\n<h2 id=\"SQL-的-NULL-值处理\"><a href=\"#SQL-的-NULL-值处理\" class=\"headerlink\" title=\"SQL 的 NULL 值处理\"></a>SQL 的 NULL 值处理</h2><hr>\n<p>请看下面的 “Persons” 表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">P_Id</th>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Hansen</td>\n<td align=\"left\">Ola</td>\n<td align=\"left\"></td>\n<td align=\"left\">Sandnes</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Svendson</td>\n<td align=\"left\">Tove</td>\n<td align=\"left\">Borgvn 23</td>\n<td align=\"left\">Sandnes</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Pettersen</td>\n<td align=\"left\">Kari</td>\n<td align=\"left\"></td>\n<td align=\"left\">Stavanger</td>\n</tr>\n</tbody></table>\n<p>如果 “Persons” 表 “Address” 一栏是可选的。这意味着，如果在 “Address” 列中插入一个没有值的记录，则 “Address” 列将用 NULL 值保存。</p>\n<p>那么如何测试null的值呢？</p>\n<p>您不能使用比较操作符测试 NULL 值，例如&#x3D;、&lt;或&lt;&gt;。</p>\n<p>我们必须使用 IS NULL 和 IS NOT NULL 操作符。</p>\n<h2 id=\"SQL-IS-NULL\"><a href=\"#SQL-IS-NULL\" class=\"headerlink\" title=\"SQL IS NULL\"></a>SQL IS NULL</h2><hr>\n<p>我们如何才能选择 “Address” 列中有 NULL 值的记录？</p>\n<p>我们必须使用 IS NULL 操作符：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LastName,FirstName,Address FROM Persons</span><br><span class=\"line\">WHERE Address IS NULL</span><br></pre></td></tr></table></figure>\n\n<p>结果集如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Hansen</td>\n<td align=\"left\">Ola</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Pettersen</td>\n<td align=\"left\">Kari</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<p>**提示：**总是使用 IS NULL 来查找 NULL 值。</p>\n<h2 id=\"SQL-IS-NOT-NULL\"><a href=\"#SQL-IS-NOT-NULL\" class=\"headerlink\" title=\"SQL IS NOT NULL\"></a>SQL IS NOT NULL</h2><hr>\n<p>我们如何才能选择 “Address” 列中没有 NULL 值的记录？</p>\n<p>我们必须使用 IS NOT NULL 操作符：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LastName,FirstName,Address FROM Persons</span><br><span class=\"line\">WHERE Address IS NOT NULL</span><br></pre></td></tr></table></figure>\n\n<p>结果集如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Svendson</td>\n<td align=\"left\">Tove</td>\n<td align=\"left\">Borgvn 23</td>\n</tr>\n</tbody></table>\n<p>在下一节中，我们将了解 ISNULL()、NVL()、IFNULL() 和 COALESCE() 函数。</p>\n"},{"layout":"wiki","wiki":"sql","title":"SQL VIEW语句","order":37,"_content":"\n## SQL 视图（Views）\n\n------\n\n视图是可视化的表。\n\n本章讲解如何创建、更新和删除视图。\n\n## SQL CREATE VIEW 语句\n\n------\n\n在 SQL 中，视图是基于 SQL 语句的结果集的可视化表。\n\n视图包含行和列，就像真正的表一样。视图中的字段是一个或多个数据库中真实表中的字段。\n\n您可以添加 SQL 函数，在哪里添加，并将语句连接到视图，或者您可以呈现数据，就像数据来自单个表一样。\n\n### SQL CREATE VIEW 语法\n\n```\nCREATE VIEW view_name AS                \nSELECT column_name(s)                \nFROM table_name                \nWHERE condition\n```\n\n**　注释：**视图总是显示最新数据！每当用户查询视图时，数据库引擎就使用视图的 SQL 语句重新构建数据。\n\n## SQL CREATE VIEW 实例\n\n------\n\n示例数据库 Northwind 默认安装了一些视图。\n\n\"Current Product List\"(当前产品列表)视图从\"Products\"表中列出了所有正在使用的产品（未停产的产品）。这个视图使用下面的 SQL 创建：\n\n```\nCREATE VIEW [Current Product List] AS                \nSELECT ProductID,ProductName                \nFROM Products                \nWHERE Discontinued=No\n```\n\n我们可以像这样查询上面这个视图：\n\n```\nSELECT * FROM [Current Product List]\n```\n\nNorthwind 样本数据库的另一个视图会选取 \"Products\" 表中所有单位价格高于平均单位价格的产品：\n\n```\nCREATE VIEW [Products Above Average Price] AS                \nSELECT ProductName,UnitPrice                \nFROM Products                \nWHERE UnitPrice>(SELECT AVG(UnitPrice) FROM Products)\n```\n\n我们可以像这样查询上面这个视图：\n\n```\nSELECT * FROM [Products Above Average Price]\n```\n\nNorthwind 样本数据库的另一个视图会计算在 1997 年每个种类的销售总数。请注意，这个视图会从另一个名为 \"Product Sales for 1997\" 的视图那里选取数据：\n\n```\nCREATE VIEW [Category Sales For 1997] AS                \nSELECT DISTINCT CategoryName,Sum(ProductSales) AS CategorySales                \nFROM [Product Sales for 1997]                \nGROUP BY CategoryName\n```\n\n我们可以像这样查询上面这个视图：\n\n```\nSELECT * FROM [Category Sales For 1997]\n```\n\n我们也可以向查询添加条件。现在，我们仅仅需要查看 \"Beverages\" 类的销售总数：\n\n```\nSELECT * FROM [Category Sales For 1997]                \nWHERE CategoryName='Beverages'\n```\n\n## SQL 更新视图\n\n------\n\n您可以使用下面的语法来更新视图：\n\n### SQL CREATE OR REPLACE VIEW 语法\n\n```\nCREATE OR REPLACE VIEW view_name AS                \nSELECT column_name(s)                \nFROM table_name                \nWHERE condition\n```\n\n现在，我们希望向 \"Current Product List\" 视图添加 \"Category\" 列。我们将通过下列 SQL 更新视图：\n\n```\nCREATE OR REPLACE VIEW [Current Product List] AS                \nSELECT ProductID,ProductName,Category                \nFROM Products                \nWHERE Discontinued=No\n```\n\n## SQL 撤销视图\n\n------\n\n您可以通过 DROP VIEW 命令来删除视图。\n\n### SQL DROP VIEW 语法\n\n```\nDROP VIEW view_name\n```\n","source":"wiki/sql/sentence/view.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL VIEW语句\norder: 37\n---\n\n## SQL 视图（Views）\n\n------\n\n视图是可视化的表。\n\n本章讲解如何创建、更新和删除视图。\n\n## SQL CREATE VIEW 语句\n\n------\n\n在 SQL 中，视图是基于 SQL 语句的结果集的可视化表。\n\n视图包含行和列，就像真正的表一样。视图中的字段是一个或多个数据库中真实表中的字段。\n\n您可以添加 SQL 函数，在哪里添加，并将语句连接到视图，或者您可以呈现数据，就像数据来自单个表一样。\n\n### SQL CREATE VIEW 语法\n\n```\nCREATE VIEW view_name AS                \nSELECT column_name(s)                \nFROM table_name                \nWHERE condition\n```\n\n**　注释：**视图总是显示最新数据！每当用户查询视图时，数据库引擎就使用视图的 SQL 语句重新构建数据。\n\n## SQL CREATE VIEW 实例\n\n------\n\n示例数据库 Northwind 默认安装了一些视图。\n\n\"Current Product List\"(当前产品列表)视图从\"Products\"表中列出了所有正在使用的产品（未停产的产品）。这个视图使用下面的 SQL 创建：\n\n```\nCREATE VIEW [Current Product List] AS                \nSELECT ProductID,ProductName                \nFROM Products                \nWHERE Discontinued=No\n```\n\n我们可以像这样查询上面这个视图：\n\n```\nSELECT * FROM [Current Product List]\n```\n\nNorthwind 样本数据库的另一个视图会选取 \"Products\" 表中所有单位价格高于平均单位价格的产品：\n\n```\nCREATE VIEW [Products Above Average Price] AS                \nSELECT ProductName,UnitPrice                \nFROM Products                \nWHERE UnitPrice>(SELECT AVG(UnitPrice) FROM Products)\n```\n\n我们可以像这样查询上面这个视图：\n\n```\nSELECT * FROM [Products Above Average Price]\n```\n\nNorthwind 样本数据库的另一个视图会计算在 1997 年每个种类的销售总数。请注意，这个视图会从另一个名为 \"Product Sales for 1997\" 的视图那里选取数据：\n\n```\nCREATE VIEW [Category Sales For 1997] AS                \nSELECT DISTINCT CategoryName,Sum(ProductSales) AS CategorySales                \nFROM [Product Sales for 1997]                \nGROUP BY CategoryName\n```\n\n我们可以像这样查询上面这个视图：\n\n```\nSELECT * FROM [Category Sales For 1997]\n```\n\n我们也可以向查询添加条件。现在，我们仅仅需要查看 \"Beverages\" 类的销售总数：\n\n```\nSELECT * FROM [Category Sales For 1997]                \nWHERE CategoryName='Beverages'\n```\n\n## SQL 更新视图\n\n------\n\n您可以使用下面的语法来更新视图：\n\n### SQL CREATE OR REPLACE VIEW 语法\n\n```\nCREATE OR REPLACE VIEW view_name AS                \nSELECT column_name(s)                \nFROM table_name                \nWHERE condition\n```\n\n现在，我们希望向 \"Current Product List\" 视图添加 \"Category\" 列。我们将通过下列 SQL 更新视图：\n\n```\nCREATE OR REPLACE VIEW [Current Product List] AS                \nSELECT ProductID,ProductName,Category                \nFROM Products                \nWHERE Discontinued=No\n```\n\n## SQL 撤销视图\n\n------\n\n您可以通过 DROP VIEW 命令来删除视图。\n\n### SQL DROP VIEW 语法\n\n```\nDROP VIEW view_name\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T01:51:57.962Z","path":"wiki/sql/sentence/view.html","comments":1,"_id":"cmbreopj8001d65x06vgmeyw2","content":"<h2 id=\"SQL-视图（Views）\"><a href=\"#SQL-视图（Views）\" class=\"headerlink\" title=\"SQL 视图（Views）\"></a>SQL 视图（Views）</h2><hr>\n<p>视图是可视化的表。</p>\n<p>本章讲解如何创建、更新和删除视图。</p>\n<h2 id=\"SQL-CREATE-VIEW-语句\"><a href=\"#SQL-CREATE-VIEW-语句\" class=\"headerlink\" title=\"SQL CREATE VIEW 语句\"></a>SQL CREATE VIEW 语句</h2><hr>\n<p>在 SQL 中，视图是基于 SQL 语句的结果集的可视化表。</p>\n<p>视图包含行和列，就像真正的表一样。视图中的字段是一个或多个数据库中真实表中的字段。</p>\n<p>您可以添加 SQL 函数，在哪里添加，并将语句连接到视图，或者您可以呈现数据，就像数据来自单个表一样。</p>\n<h3 id=\"SQL-CREATE-VIEW-语法\"><a href=\"#SQL-CREATE-VIEW-语法\" class=\"headerlink\" title=\"SQL CREATE VIEW 语法\"></a>SQL CREATE VIEW 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE VIEW view_name AS                </span><br><span class=\"line\">SELECT column_name(s)                </span><br><span class=\"line\">FROM table_name                </span><br><span class=\"line\">WHERE condition</span><br></pre></td></tr></table></figure>\n\n<p>**　注释：**视图总是显示最新数据！每当用户查询视图时，数据库引擎就使用视图的 SQL 语句重新构建数据。</p>\n<h2 id=\"SQL-CREATE-VIEW-实例\"><a href=\"#SQL-CREATE-VIEW-实例\" class=\"headerlink\" title=\"SQL CREATE VIEW 实例\"></a>SQL CREATE VIEW 实例</h2><hr>\n<p>示例数据库 Northwind 默认安装了一些视图。</p>\n<p>“Current Product List”(当前产品列表)视图从”Products”表中列出了所有正在使用的产品（未停产的产品）。这个视图使用下面的 SQL 创建：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE VIEW [Current Product List] AS                </span><br><span class=\"line\">SELECT ProductID,ProductName                </span><br><span class=\"line\">FROM Products                </span><br><span class=\"line\">WHERE Discontinued=No</span><br></pre></td></tr></table></figure>\n\n<p>我们可以像这样查询上面这个视图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM [Current Product List]</span><br></pre></td></tr></table></figure>\n\n<p>Northwind 样本数据库的另一个视图会选取 “Products” 表中所有单位价格高于平均单位价格的产品：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE VIEW [Products Above Average Price] AS                </span><br><span class=\"line\">SELECT ProductName,UnitPrice                </span><br><span class=\"line\">FROM Products                </span><br><span class=\"line\">WHERE UnitPrice&gt;(SELECT AVG(UnitPrice) FROM Products)</span><br></pre></td></tr></table></figure>\n\n<p>我们可以像这样查询上面这个视图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM [Products Above Average Price]</span><br></pre></td></tr></table></figure>\n\n<p>Northwind 样本数据库的另一个视图会计算在 1997 年每个种类的销售总数。请注意，这个视图会从另一个名为 “Product Sales for 1997” 的视图那里选取数据：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE VIEW [Category Sales For 1997] AS                </span><br><span class=\"line\">SELECT DISTINCT CategoryName,Sum(ProductSales) AS CategorySales                </span><br><span class=\"line\">FROM [Product Sales for 1997]                </span><br><span class=\"line\">GROUP BY CategoryName</span><br></pre></td></tr></table></figure>\n\n<p>我们可以像这样查询上面这个视图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM [Category Sales For 1997]</span><br></pre></td></tr></table></figure>\n\n<p>我们也可以向查询添加条件。现在，我们仅仅需要查看 “Beverages” 类的销售总数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM [Category Sales For 1997]                </span><br><span class=\"line\">WHERE CategoryName=&#x27;Beverages&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SQL-更新视图\"><a href=\"#SQL-更新视图\" class=\"headerlink\" title=\"SQL 更新视图\"></a>SQL 更新视图</h2><hr>\n<p>您可以使用下面的语法来更新视图：</p>\n<h3 id=\"SQL-CREATE-OR-REPLACE-VIEW-语法\"><a href=\"#SQL-CREATE-OR-REPLACE-VIEW-语法\" class=\"headerlink\" title=\"SQL CREATE OR REPLACE VIEW 语法\"></a>SQL CREATE OR REPLACE VIEW 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE OR REPLACE VIEW view_name AS                </span><br><span class=\"line\">SELECT column_name(s)                </span><br><span class=\"line\">FROM table_name                </span><br><span class=\"line\">WHERE condition</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们希望向 “Current Product List” 视图添加 “Category” 列。我们将通过下列 SQL 更新视图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE OR REPLACE VIEW [Current Product List] AS                </span><br><span class=\"line\">SELECT ProductID,ProductName,Category                </span><br><span class=\"line\">FROM Products                </span><br><span class=\"line\">WHERE Discontinued=No</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SQL-撤销视图\"><a href=\"#SQL-撤销视图\" class=\"headerlink\" title=\"SQL 撤销视图\"></a>SQL 撤销视图</h2><hr>\n<p>您可以通过 DROP VIEW 命令来删除视图。</p>\n<h3 id=\"SQL-DROP-VIEW-语法\"><a href=\"#SQL-DROP-VIEW-语法\" class=\"headerlink\" title=\"SQL DROP VIEW 语法\"></a>SQL DROP VIEW 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP VIEW view_name</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-视图（Views）\"><a href=\"#SQL-视图（Views）\" class=\"headerlink\" title=\"SQL 视图（Views）\"></a>SQL 视图（Views）</h2><hr>\n<p>视图是可视化的表。</p>\n<p>本章讲解如何创建、更新和删除视图。</p>\n<h2 id=\"SQL-CREATE-VIEW-语句\"><a href=\"#SQL-CREATE-VIEW-语句\" class=\"headerlink\" title=\"SQL CREATE VIEW 语句\"></a>SQL CREATE VIEW 语句</h2><hr>\n<p>在 SQL 中，视图是基于 SQL 语句的结果集的可视化表。</p>\n<p>视图包含行和列，就像真正的表一样。视图中的字段是一个或多个数据库中真实表中的字段。</p>\n<p>您可以添加 SQL 函数，在哪里添加，并将语句连接到视图，或者您可以呈现数据，就像数据来自单个表一样。</p>\n<h3 id=\"SQL-CREATE-VIEW-语法\"><a href=\"#SQL-CREATE-VIEW-语法\" class=\"headerlink\" title=\"SQL CREATE VIEW 语法\"></a>SQL CREATE VIEW 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE VIEW view_name AS                </span><br><span class=\"line\">SELECT column_name(s)                </span><br><span class=\"line\">FROM table_name                </span><br><span class=\"line\">WHERE condition</span><br></pre></td></tr></table></figure>\n\n<p>**　注释：**视图总是显示最新数据！每当用户查询视图时，数据库引擎就使用视图的 SQL 语句重新构建数据。</p>\n<h2 id=\"SQL-CREATE-VIEW-实例\"><a href=\"#SQL-CREATE-VIEW-实例\" class=\"headerlink\" title=\"SQL CREATE VIEW 实例\"></a>SQL CREATE VIEW 实例</h2><hr>\n<p>示例数据库 Northwind 默认安装了一些视图。</p>\n<p>“Current Product List”(当前产品列表)视图从”Products”表中列出了所有正在使用的产品（未停产的产品）。这个视图使用下面的 SQL 创建：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE VIEW [Current Product List] AS                </span><br><span class=\"line\">SELECT ProductID,ProductName                </span><br><span class=\"line\">FROM Products                </span><br><span class=\"line\">WHERE Discontinued=No</span><br></pre></td></tr></table></figure>\n\n<p>我们可以像这样查询上面这个视图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM [Current Product List]</span><br></pre></td></tr></table></figure>\n\n<p>Northwind 样本数据库的另一个视图会选取 “Products” 表中所有单位价格高于平均单位价格的产品：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE VIEW [Products Above Average Price] AS                </span><br><span class=\"line\">SELECT ProductName,UnitPrice                </span><br><span class=\"line\">FROM Products                </span><br><span class=\"line\">WHERE UnitPrice&gt;(SELECT AVG(UnitPrice) FROM Products)</span><br></pre></td></tr></table></figure>\n\n<p>我们可以像这样查询上面这个视图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM [Products Above Average Price]</span><br></pre></td></tr></table></figure>\n\n<p>Northwind 样本数据库的另一个视图会计算在 1997 年每个种类的销售总数。请注意，这个视图会从另一个名为 “Product Sales for 1997” 的视图那里选取数据：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE VIEW [Category Sales For 1997] AS                </span><br><span class=\"line\">SELECT DISTINCT CategoryName,Sum(ProductSales) AS CategorySales                </span><br><span class=\"line\">FROM [Product Sales for 1997]                </span><br><span class=\"line\">GROUP BY CategoryName</span><br></pre></td></tr></table></figure>\n\n<p>我们可以像这样查询上面这个视图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM [Category Sales For 1997]</span><br></pre></td></tr></table></figure>\n\n<p>我们也可以向查询添加条件。现在，我们仅仅需要查看 “Beverages” 类的销售总数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM [Category Sales For 1997]                </span><br><span class=\"line\">WHERE CategoryName=&#x27;Beverages&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SQL-更新视图\"><a href=\"#SQL-更新视图\" class=\"headerlink\" title=\"SQL 更新视图\"></a>SQL 更新视图</h2><hr>\n<p>您可以使用下面的语法来更新视图：</p>\n<h3 id=\"SQL-CREATE-OR-REPLACE-VIEW-语法\"><a href=\"#SQL-CREATE-OR-REPLACE-VIEW-语法\" class=\"headerlink\" title=\"SQL CREATE OR REPLACE VIEW 语法\"></a>SQL CREATE OR REPLACE VIEW 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE OR REPLACE VIEW view_name AS                </span><br><span class=\"line\">SELECT column_name(s)                </span><br><span class=\"line\">FROM table_name                </span><br><span class=\"line\">WHERE condition</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们希望向 “Current Product List” 视图添加 “Category” 列。我们将通过下列 SQL 更新视图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE OR REPLACE VIEW [Current Product List] AS                </span><br><span class=\"line\">SELECT ProductID,ProductName,Category                </span><br><span class=\"line\">FROM Products                </span><br><span class=\"line\">WHERE Discontinued=No</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SQL-撤销视图\"><a href=\"#SQL-撤销视图\" class=\"headerlink\" title=\"SQL 撤销视图\"></a>SQL 撤销视图</h2><hr>\n<p>您可以通过 DROP VIEW 命令来删除视图。</p>\n<h3 id=\"SQL-DROP-VIEW-语法\"><a href=\"#SQL-DROP-VIEW-语法\" class=\"headerlink\" title=\"SQL DROP VIEW 语法\"></a>SQL DROP VIEW 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP VIEW view_name</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 通配符","order":54,"_content":"\n## SQL 通配符\n\n------\n\n我们已经讨论过 SQL 的 **LIKE** 操作符了，它可以利用通配符来对两个相似的值作比较。\n\nSQL 支持以下两个通配符与 LIKE 操作符一起使用：\n\n|--------|-------------------------------------------------------------| | 通配符 | 描述 | | 百分号（%） | 匹配一个或者多个字符。注意：MS Access 使用星号（*）作为匹配一个或者多个字符的通配符，而不是百分号（%）。 | | 下划线（_） | 匹配一个字符。注意：MS Access 使用问号（?），而不是下划线，来匹配任一字符。 |\n\n百分号代表零个、一个或者多个字符。下划线代表单一的字符。这些符号可以组合在一起使用。\n\n## 语法\n\n\"%\" 和 \"_\" 的基本语法如下所示：\n\n```\nSELECT FROM table_name\nWHERE column LIKE 'XXXX%'\n\nor \n\nSELECT FROM table_name\nWHERE column LIKE '%XXXX%'\n\nor\n\nSELECT FROM table_name\nWHERE column LIKE 'XXXX_'\n\nor\n\nSELECT FROM table_name\nWHERE column LIKE '_XXXX'\n\nor\n\nSELECT FROM table_name\nWHERE column LIKE '_XXXX_'\n```\n\n你可以用 AND 或 OR 操作符将多个条件合并在一起。这里，XXXX 可以为任何数值或者字符串。\n\n## 示例\n\n------\n\n|---------------------------|--------------------------| | 语句 | 描述 | | WHERE SALARY LIKE '200%' | 找出任何以 200 开头的值。 | | WHERE SALARY LIKE '%200%' | 找出任何存在 200 的值。 | | WHERE SALARY LIKE '*00%' | 找出任何第二个位置和第三个位置为 0 的值。 | | WHERE SALARY LIKE '2*%_%' | 找出任何以 2 开始，并且长度至少为 3 的值。 | | WHERE SALARY LIKE '%2' | 找出任何以 2 结尾的值。 | | WHERE SALARY LIKE '_2%3' | 找出任何第二个位置为 2，并且以 3 结束的值。 | | WHERE SALARY LIKE '2___3' | 找出任何以 2 开始，以 3 结束的五位数。 |\n\n让我们来看一个真实的例子，考虑拥有如下记录的 CUSTOMERS 表：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n下面的示例将会找到 CUSTOMER 表中所有 SALARY 以 200 开头的记录，并显示出来：\n\n```\nSQL> SELECT * FROM CUSTOMERS\nWHERE SALARY LIKE '200%';\n```\n\n结果如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n+----+----------+-----+-----------+----------+\n```\n","source":"wiki/sql/sentence/wild.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 通配符\norder: 54\n---\n\n## SQL 通配符\n\n------\n\n我们已经讨论过 SQL 的 **LIKE** 操作符了，它可以利用通配符来对两个相似的值作比较。\n\nSQL 支持以下两个通配符与 LIKE 操作符一起使用：\n\n|--------|-------------------------------------------------------------| | 通配符 | 描述 | | 百分号（%） | 匹配一个或者多个字符。注意：MS Access 使用星号（*）作为匹配一个或者多个字符的通配符，而不是百分号（%）。 | | 下划线（_） | 匹配一个字符。注意：MS Access 使用问号（?），而不是下划线，来匹配任一字符。 |\n\n百分号代表零个、一个或者多个字符。下划线代表单一的字符。这些符号可以组合在一起使用。\n\n## 语法\n\n\"%\" 和 \"_\" 的基本语法如下所示：\n\n```\nSELECT FROM table_name\nWHERE column LIKE 'XXXX%'\n\nor \n\nSELECT FROM table_name\nWHERE column LIKE '%XXXX%'\n\nor\n\nSELECT FROM table_name\nWHERE column LIKE 'XXXX_'\n\nor\n\nSELECT FROM table_name\nWHERE column LIKE '_XXXX'\n\nor\n\nSELECT FROM table_name\nWHERE column LIKE '_XXXX_'\n```\n\n你可以用 AND 或 OR 操作符将多个条件合并在一起。这里，XXXX 可以为任何数值或者字符串。\n\n## 示例\n\n------\n\n|---------------------------|--------------------------| | 语句 | 描述 | | WHERE SALARY LIKE '200%' | 找出任何以 200 开头的值。 | | WHERE SALARY LIKE '%200%' | 找出任何存在 200 的值。 | | WHERE SALARY LIKE '*00%' | 找出任何第二个位置和第三个位置为 0 的值。 | | WHERE SALARY LIKE '2*%_%' | 找出任何以 2 开始，并且长度至少为 3 的值。 | | WHERE SALARY LIKE '%2' | 找出任何以 2 结尾的值。 | | WHERE SALARY LIKE '_2%3' | 找出任何第二个位置为 2，并且以 3 结束的值。 | | WHERE SALARY LIKE '2___3' | 找出任何以 2 开始，以 3 结束的五位数。 |\n\n让我们来看一个真实的例子，考虑拥有如下记录的 CUSTOMERS 表：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n下面的示例将会找到 CUSTOMER 表中所有 SALARY 以 200 开头的记录，并显示出来：\n\n```\nSQL> SELECT * FROM CUSTOMERS\nWHERE SALARY LIKE '200%';\n```\n\n结果如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n+----+----------+-----+-----------+----------+\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-11T03:11:52.645Z","path":"wiki/sql/sentence/wild.html","comments":1,"_id":"cmbreopj9001e65x048hv30hu","content":"<h2 id=\"SQL-通配符\"><a href=\"#SQL-通配符\" class=\"headerlink\" title=\"SQL 通配符\"></a>SQL 通配符</h2><hr>\n<p>我们已经讨论过 SQL 的 <strong>LIKE</strong> 操作符了，它可以利用通配符来对两个相似的值作比较。</p>\n<p>SQL 支持以下两个通配符与 LIKE 操作符一起使用：</p>\n<p>|——–|————————————————————-| | 通配符 | 描述 | | 百分号（%） | 匹配一个或者多个字符。注意：MS Access 使用星号（*）作为匹配一个或者多个字符的通配符，而不是百分号（%）。 | | 下划线（_） | 匹配一个字符。注意：MS Access 使用问号（?），而不是下划线，来匹配任一字符。 |</p>\n<p>百分号代表零个、一个或者多个字符。下划线代表单一的字符。这些符号可以组合在一起使用。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>“%” 和 “_” 的基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT FROM table_name</span><br><span class=\"line\">WHERE column LIKE &#x27;XXXX%&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">or </span><br><span class=\"line\"></span><br><span class=\"line\">SELECT FROM table_name</span><br><span class=\"line\">WHERE column LIKE &#x27;%XXXX%&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">or</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT FROM table_name</span><br><span class=\"line\">WHERE column LIKE &#x27;XXXX_&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">or</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT FROM table_name</span><br><span class=\"line\">WHERE column LIKE &#x27;_XXXX&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">or</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT FROM table_name</span><br><span class=\"line\">WHERE column LIKE &#x27;_XXXX_&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>你可以用 AND 或 OR 操作符将多个条件合并在一起。这里，XXXX 可以为任何数值或者字符串。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><hr>\n<p>|—————————|————————–| | 语句 | 描述 | | WHERE SALARY LIKE ‘200%’ | 找出任何以 200 开头的值。 | | WHERE SALARY LIKE ‘%200%’ | 找出任何存在 200 的值。 | | WHERE SALARY LIKE ‘<em>00%’ | 找出任何第二个位置和第三个位置为 0 的值。 | | WHERE SALARY LIKE ‘2</em>%_%’ | 找出任何以 2 开始，并且长度至少为 3 的值。 | | WHERE SALARY LIKE ‘%2’ | 找出任何以 2 结尾的值。 | | WHERE SALARY LIKE ‘_2%3’ | 找出任何第二个位置为 2，并且以 3 结束的值。 | | WHERE SALARY LIKE ‘2___3’ | 找出任何以 2 开始，以 3 结束的五位数。 |</p>\n<p>让我们来看一个真实的例子，考虑拥有如下记录的 CUSTOMERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>下面的示例将会找到 CUSTOMER 表中所有 SALARY 以 200 开头的记录，并显示出来：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT * FROM CUSTOMERS</span><br><span class=\"line\">WHERE SALARY LIKE &#x27;200%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-通配符\"><a href=\"#SQL-通配符\" class=\"headerlink\" title=\"SQL 通配符\"></a>SQL 通配符</h2><hr>\n<p>我们已经讨论过 SQL 的 <strong>LIKE</strong> 操作符了，它可以利用通配符来对两个相似的值作比较。</p>\n<p>SQL 支持以下两个通配符与 LIKE 操作符一起使用：</p>\n<p>|——–|————————————————————-| | 通配符 | 描述 | | 百分号（%） | 匹配一个或者多个字符。注意：MS Access 使用星号（*）作为匹配一个或者多个字符的通配符，而不是百分号（%）。 | | 下划线（_） | 匹配一个字符。注意：MS Access 使用问号（?），而不是下划线，来匹配任一字符。 |</p>\n<p>百分号代表零个、一个或者多个字符。下划线代表单一的字符。这些符号可以组合在一起使用。</p>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>“%” 和 “_” 的基本语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT FROM table_name</span><br><span class=\"line\">WHERE column LIKE &#x27;XXXX%&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">or </span><br><span class=\"line\"></span><br><span class=\"line\">SELECT FROM table_name</span><br><span class=\"line\">WHERE column LIKE &#x27;%XXXX%&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">or</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT FROM table_name</span><br><span class=\"line\">WHERE column LIKE &#x27;XXXX_&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">or</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT FROM table_name</span><br><span class=\"line\">WHERE column LIKE &#x27;_XXXX&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">or</span><br><span class=\"line\"></span><br><span class=\"line\">SELECT FROM table_name</span><br><span class=\"line\">WHERE column LIKE &#x27;_XXXX_&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>你可以用 AND 或 OR 操作符将多个条件合并在一起。这里，XXXX 可以为任何数值或者字符串。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><hr>\n<p>|—————————|————————–| | 语句 | 描述 | | WHERE SALARY LIKE ‘200%’ | 找出任何以 200 开头的值。 | | WHERE SALARY LIKE ‘%200%’ | 找出任何存在 200 的值。 | | WHERE SALARY LIKE ‘<em>00%’ | 找出任何第二个位置和第三个位置为 0 的值。 | | WHERE SALARY LIKE ‘2</em>%_%’ | 找出任何以 2 开始，并且长度至少为 3 的值。 | | WHERE SALARY LIKE ‘%2’ | 找出任何以 2 结尾的值。 | | WHERE SALARY LIKE ‘_2%3’ | 找出任何第二个位置为 2，并且以 3 结束的值。 | | WHERE SALARY LIKE ‘2___3’ | 找出任何以 2 开始，以 3 结束的五位数。 |</p>\n<p>让我们来看一个真实的例子，考虑拥有如下记录的 CUSTOMERS 表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>下面的示例将会找到 CUSTOMER 表中所有 SALARY 以 200 开头的记录，并显示出来：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT * FROM CUSTOMERS</span><br><span class=\"line\">WHERE SALARY LIKE &#x27;200%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL Wildcards通配符","order":18,"_content":"\n## SQL Wildcards 通配符\n\n------\n\n通配符用于替换字符串中的任何其他字符。\n\n通配符与 运算符一起使用。在 WHERE 子句中使用LIKE运算符来搜索列中的指定模式。\n\n有两个通配符与 LIKE 运算符一起使用：\n\n- `％` - 百分号表示零个，一个或多个字符\n- `_` - 下划线表示单个字符\n\n**　注意：**\n\n- MS Access 使用星号(`*`）通配符而不是百分比符号(`%`)通配符。\n- MS Access 使用问号（`?`）而不是下划线（`_`）。\n\n在MS Access和SQL Server中，你也可以使用：\n\n- [ charlist ] - 定义要匹配的字符的集合和范围\n- [^ charlist ]或[！charlist ] - 定义不匹配字符的集合和范围\n\n通配符也可以组合使用！\n\n下面是一些使用'`％`'和'`_`'通配符显示不同LIKE运算符的例子：\n\n| LIKE运算符                      | 描述                                   |\n| :------------------------------ | :------------------------------------- |\n| WHERE CustomerName LIKE 'a%'    | 查找以\"a\"开头的任何值                  |\n| WHERE CustomerName LIKE '%a'    | 查找以\"a\"结尾的任何值                  |\n| WHERE CustomerName LIKE '%or%'  | 在任何位置查找任何具有\"or\"的值         |\n| WHERE CustomerName LIKE '_r%'   | 在第二个位置查找任何具有\"r\"的值        |\n| WHERE CustomerName LIKE 'a_%_%' | 查找以\"a\"开头并且长度至少为3个字符的值 |\n| WHERE ContactName LIKE 'a%o'    | 查找以\"a\"开始并以\"o\"结尾的任何值       |\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的 Northwind 示例数据库。\n\n以下是 \"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## 使用 SQL % 通配符\n\n------\n\n以下 SQL 语句选择所有客户 City 以字母\"ber\"开头：\n\n示例：\n\n```\nSELECT * FROM Customers\nWHERE City LIKE 'ber%';\n```\n\n以下 SQL 语句选择 City 中包含\"es\"模式的所有客户：\n\n示例：\n\n```\nSELECT * FROM Customers\nWHERE City LIKE '%es%';\n```\n\n## 使用 SQL _ 通配符\n\n------\n\n以下 SQL 语句选择 City 以任意字符开头，然后是\"erlin\"的所有客户：\n\n示例：\n\n```\nSELECT * FROM Customers\nWHERE City LIKE '_erlin';\n```\n\n以下 SQL 语句选择 City 开头为\"L\"，后面是任意字符，后面是\"n\"，后面是任意字符，加\"on\"的所有客户：\n\n示例：\n\n```\nSELECT * FROM Customers\nWHERE City LIKE 'L_n_on';\n```\n\n\n\n## 使用 SQL [charlist] 通配符\n\n------\n\n以下 SQL 语句选择所有客户 City 以\"b\"、\"s\"或\"p\"开头：\n\n示例：\n\n```\nSELECT * FROM Customers\nWHERE City LIKE '[bsp]%';\n```\n\n以下 SQL 语句选择\"City\"以\"a\"、\"b\"或\"c\"开头的所有客户：\n\n示例：\n\n```\nSELECT * FROM Customers\nWHERE City LIKE '[a-c]%';\n```\n\n以下 SQL 语句选择所有客户 City 不以\"b\"、\"s\"或\"p\"开头：\n\n示例：\n\n```\nSELECT * FROM Customers\nWHERE City LIKE '[!bsp]%';\n```\n\n\n\n## 使用[！charlist]通配符\n\n------\n\n以下两个 SQL 语句选择所有客户的城市不以\"b\"，\"s\"或\"p\"开头：\n\n**代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE City LIKE '[!bsp]%';\n```\n\n要么：\n\n**代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE City NOT LIKE '[bsp]%';\n```\n","source":"wiki/sql/sentence/wildcards.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL Wildcards通配符\norder: 18\n---\n\n## SQL Wildcards 通配符\n\n------\n\n通配符用于替换字符串中的任何其他字符。\n\n通配符与 运算符一起使用。在 WHERE 子句中使用LIKE运算符来搜索列中的指定模式。\n\n有两个通配符与 LIKE 运算符一起使用：\n\n- `％` - 百分号表示零个，一个或多个字符\n- `_` - 下划线表示单个字符\n\n**　注意：**\n\n- MS Access 使用星号(`*`）通配符而不是百分比符号(`%`)通配符。\n- MS Access 使用问号（`?`）而不是下划线（`_`）。\n\n在MS Access和SQL Server中，你也可以使用：\n\n- [ charlist ] - 定义要匹配的字符的集合和范围\n- [^ charlist ]或[！charlist ] - 定义不匹配字符的集合和范围\n\n通配符也可以组合使用！\n\n下面是一些使用'`％`'和'`_`'通配符显示不同LIKE运算符的例子：\n\n| LIKE运算符                      | 描述                                   |\n| :------------------------------ | :------------------------------------- |\n| WHERE CustomerName LIKE 'a%'    | 查找以\"a\"开头的任何值                  |\n| WHERE CustomerName LIKE '%a'    | 查找以\"a\"结尾的任何值                  |\n| WHERE CustomerName LIKE '%or%'  | 在任何位置查找任何具有\"or\"的值         |\n| WHERE CustomerName LIKE '_r%'   | 在第二个位置查找任何具有\"r\"的值        |\n| WHERE CustomerName LIKE 'a_%_%' | 查找以\"a\"开头并且长度至少为3个字符的值 |\n| WHERE ContactName LIKE 'a%o'    | 查找以\"a\"开始并以\"o\"结尾的任何值       |\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的 Northwind 示例数据库。\n\n以下是 \"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## 使用 SQL % 通配符\n\n------\n\n以下 SQL 语句选择所有客户 City 以字母\"ber\"开头：\n\n示例：\n\n```\nSELECT * FROM Customers\nWHERE City LIKE 'ber%';\n```\n\n以下 SQL 语句选择 City 中包含\"es\"模式的所有客户：\n\n示例：\n\n```\nSELECT * FROM Customers\nWHERE City LIKE '%es%';\n```\n\n## 使用 SQL _ 通配符\n\n------\n\n以下 SQL 语句选择 City 以任意字符开头，然后是\"erlin\"的所有客户：\n\n示例：\n\n```\nSELECT * FROM Customers\nWHERE City LIKE '_erlin';\n```\n\n以下 SQL 语句选择 City 开头为\"L\"，后面是任意字符，后面是\"n\"，后面是任意字符，加\"on\"的所有客户：\n\n示例：\n\n```\nSELECT * FROM Customers\nWHERE City LIKE 'L_n_on';\n```\n\n\n\n## 使用 SQL [charlist] 通配符\n\n------\n\n以下 SQL 语句选择所有客户 City 以\"b\"、\"s\"或\"p\"开头：\n\n示例：\n\n```\nSELECT * FROM Customers\nWHERE City LIKE '[bsp]%';\n```\n\n以下 SQL 语句选择\"City\"以\"a\"、\"b\"或\"c\"开头的所有客户：\n\n示例：\n\n```\nSELECT * FROM Customers\nWHERE City LIKE '[a-c]%';\n```\n\n以下 SQL 语句选择所有客户 City 不以\"b\"、\"s\"或\"p\"开头：\n\n示例：\n\n```\nSELECT * FROM Customers\nWHERE City LIKE '[!bsp]%';\n```\n\n\n\n## 使用[！charlist]通配符\n\n------\n\n以下两个 SQL 语句选择所有客户的城市不以\"b\"，\"s\"或\"p\"开头：\n\n**代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE City LIKE '[!bsp]%';\n```\n\n要么：\n\n**代码示例：**\n\n```\nSELECT * FROM Customers\nWHERE City NOT LIKE '[bsp]%';\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-10T15:18:42.139Z","path":"wiki/sql/sentence/wildcards.html","comments":1,"_id":"cmbreopja001f65x05fbk8dkr","content":"<h2 id=\"SQL-Wildcards-通配符\"><a href=\"#SQL-Wildcards-通配符\" class=\"headerlink\" title=\"SQL Wildcards 通配符\"></a>SQL Wildcards 通配符</h2><hr>\n<p>通配符用于替换字符串中的任何其他字符。</p>\n<p>通配符与 运算符一起使用。在 WHERE 子句中使用LIKE运算符来搜索列中的指定模式。</p>\n<p>有两个通配符与 LIKE 运算符一起使用：</p>\n<ul>\n<li><code>％</code> - 百分号表示零个，一个或多个字符</li>\n<li><code>_</code> - 下划线表示单个字符</li>\n</ul>\n<p>**　注意：**</p>\n<ul>\n<li>MS Access 使用星号(<code>*</code>）通配符而不是百分比符号(<code>%</code>)通配符。</li>\n<li>MS Access 使用问号（<code>?</code>）而不是下划线（<code>_</code>）。</li>\n</ul>\n<p>在MS Access和SQL Server中，你也可以使用：</p>\n<ul>\n<li>[ charlist ] - 定义要匹配的字符的集合和范围</li>\n<li>[^ charlist ]或[！charlist ] - 定义不匹配字符的集合和范围</li>\n</ul>\n<p>通配符也可以组合使用！</p>\n<p>下面是一些使用’<code>％</code>‘和’<code>_</code>‘通配符显示不同LIKE运算符的例子：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">LIKE运算符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">WHERE CustomerName LIKE ‘a%’</td>\n<td align=\"left\">查找以”a”开头的任何值</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE CustomerName LIKE ‘%a’</td>\n<td align=\"left\">查找以”a”结尾的任何值</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE CustomerName LIKE ‘%or%’</td>\n<td align=\"left\">在任何位置查找任何具有”or”的值</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE CustomerName LIKE ‘_r%’</td>\n<td align=\"left\">在第二个位置查找任何具有”r”的值</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE CustomerName LIKE ‘a_%_%’</td>\n<td align=\"left\">查找以”a”开头并且长度至少为3个字符的值</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE ContactName LIKE ‘a%o’</td>\n<td align=\"left\">查找以”a”开始并以”o”结尾的任何值</td>\n</tr>\n</tbody></table>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的 Northwind 示例数据库。</p>\n<p>以下是 “Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"使用-SQL-通配符\"><a href=\"#使用-SQL-通配符\" class=\"headerlink\" title=\"使用 SQL % 通配符\"></a>使用 SQL % 通配符</h2><hr>\n<p>以下 SQL 语句选择所有客户 City 以字母”ber”开头：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE City LIKE &#x27;ber%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下 SQL 语句选择 City 中包含”es”模式的所有客户：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE City LIKE &#x27;%es%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-SQL-通配符-1\"><a href=\"#使用-SQL-通配符-1\" class=\"headerlink\" title=\"使用 SQL _ 通配符\"></a>使用 SQL _ 通配符</h2><hr>\n<p>以下 SQL 语句选择 City 以任意字符开头，然后是”erlin”的所有客户：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE City LIKE &#x27;_erlin&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下 SQL 语句选择 City 开头为”L”，后面是任意字符，后面是”n”，后面是任意字符，加”on”的所有客户：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE City LIKE &#x27;L_n_on&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"使用-SQL-charlist-通配符\"><a href=\"#使用-SQL-charlist-通配符\" class=\"headerlink\" title=\"使用 SQL [charlist] 通配符\"></a>使用 SQL [charlist] 通配符</h2><hr>\n<p>以下 SQL 语句选择所有客户 City 以”b”、”s”或”p”开头：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE City LIKE &#x27;[bsp]%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下 SQL 语句选择”City”以”a”、”b”或”c”开头的所有客户：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE City LIKE &#x27;[a-c]%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下 SQL 语句选择所有客户 City 不以”b”、”s”或”p”开头：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE City LIKE &#x27;[!bsp]%&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"使用-！charlist-通配符\"><a href=\"#使用-！charlist-通配符\" class=\"headerlink\" title=\"使用[！charlist]通配符\"></a>使用[！charlist]通配符</h2><hr>\n<p>以下两个 SQL 语句选择所有客户的城市不以”b”，”s”或”p”开头：</p>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE City LIKE &#x27;[!bsp]%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>要么：</p>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE City NOT LIKE &#x27;[bsp]%&#x27;;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-Wildcards-通配符\"><a href=\"#SQL-Wildcards-通配符\" class=\"headerlink\" title=\"SQL Wildcards 通配符\"></a>SQL Wildcards 通配符</h2><hr>\n<p>通配符用于替换字符串中的任何其他字符。</p>\n<p>通配符与 运算符一起使用。在 WHERE 子句中使用LIKE运算符来搜索列中的指定模式。</p>\n<p>有两个通配符与 LIKE 运算符一起使用：</p>\n<ul>\n<li><code>％</code> - 百分号表示零个，一个或多个字符</li>\n<li><code>_</code> - 下划线表示单个字符</li>\n</ul>\n<p>**　注意：**</p>\n<ul>\n<li>MS Access 使用星号(<code>*</code>）通配符而不是百分比符号(<code>%</code>)通配符。</li>\n<li>MS Access 使用问号（<code>?</code>）而不是下划线（<code>_</code>）。</li>\n</ul>\n<p>在MS Access和SQL Server中，你也可以使用：</p>\n<ul>\n<li>[ charlist ] - 定义要匹配的字符的集合和范围</li>\n<li>[^ charlist ]或[！charlist ] - 定义不匹配字符的集合和范围</li>\n</ul>\n<p>通配符也可以组合使用！</p>\n<p>下面是一些使用’<code>％</code>‘和’<code>_</code>‘通配符显示不同LIKE运算符的例子：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">LIKE运算符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">WHERE CustomerName LIKE ‘a%’</td>\n<td align=\"left\">查找以”a”开头的任何值</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE CustomerName LIKE ‘%a’</td>\n<td align=\"left\">查找以”a”结尾的任何值</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE CustomerName LIKE ‘%or%’</td>\n<td align=\"left\">在任何位置查找任何具有”or”的值</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE CustomerName LIKE ‘_r%’</td>\n<td align=\"left\">在第二个位置查找任何具有”r”的值</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE CustomerName LIKE ‘a_%_%’</td>\n<td align=\"left\">查找以”a”开头并且长度至少为3个字符的值</td>\n</tr>\n<tr>\n<td align=\"left\">WHERE ContactName LIKE ‘a%o’</td>\n<td align=\"left\">查找以”a”开始并以”o”结尾的任何值</td>\n</tr>\n</tbody></table>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的 Northwind 示例数据库。</p>\n<p>以下是 “Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"使用-SQL-通配符\"><a href=\"#使用-SQL-通配符\" class=\"headerlink\" title=\"使用 SQL % 通配符\"></a>使用 SQL % 通配符</h2><hr>\n<p>以下 SQL 语句选择所有客户 City 以字母”ber”开头：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE City LIKE &#x27;ber%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下 SQL 语句选择 City 中包含”es”模式的所有客户：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE City LIKE &#x27;%es%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-SQL-通配符-1\"><a href=\"#使用-SQL-通配符-1\" class=\"headerlink\" title=\"使用 SQL _ 通配符\"></a>使用 SQL _ 通配符</h2><hr>\n<p>以下 SQL 语句选择 City 以任意字符开头，然后是”erlin”的所有客户：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE City LIKE &#x27;_erlin&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下 SQL 语句选择 City 开头为”L”，后面是任意字符，后面是”n”，后面是任意字符，加”on”的所有客户：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE City LIKE &#x27;L_n_on&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"使用-SQL-charlist-通配符\"><a href=\"#使用-SQL-charlist-通配符\" class=\"headerlink\" title=\"使用 SQL [charlist] 通配符\"></a>使用 SQL [charlist] 通配符</h2><hr>\n<p>以下 SQL 语句选择所有客户 City 以”b”、”s”或”p”开头：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE City LIKE &#x27;[bsp]%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下 SQL 语句选择”City”以”a”、”b”或”c”开头的所有客户：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE City LIKE &#x27;[a-c]%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>以下 SQL 语句选择所有客户 City 不以”b”、”s”或”p”开头：</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE City LIKE &#x27;[!bsp]%&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"使用-！charlist-通配符\"><a href=\"#使用-！charlist-通配符\" class=\"headerlink\" title=\"使用[！charlist]通配符\"></a>使用[！charlist]通配符</h2><hr>\n<p>以下两个 SQL 语句选择所有客户的城市不以”b”，”s”或”p”开头：</p>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE City LIKE &#x27;[!bsp]%&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>要么：</p>\n<p><strong>代码示例：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers</span><br><span class=\"line\">WHERE City NOT LIKE &#x27;[bsp]%&#x27;;</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 语法","order":3,"_content":"\n## SQL 语法规则\n\n------\n\n- SQL语句总是以关键字开始，如SELECT、INSERT、UPDATE、DELETE、DROP、CREATE。\n- SQL语句以分号结尾。\n- SQL不区分大小写，意味着update与UPDATE相同。\n\n## 数据库表\n\n------\n\n数据库通常包含一个或多个表。每个表都用一个名称标识（例如，\"Customers\"或\"Orders\"）。该表包含带有数据（行）的记录。\n　在本教程中，我们将使用著名的Northwind示例数据库（包括MSAccess和MSSQLServer）。\n\n下面是选自 \"Customers\" 表的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n上面的表包含五条记录（每一条对应一个客户）和七个列（CustomerID、CustomerName、ContactName、Address、City、PostalCode 和 Country）。\n\n## SQL 语句\n\n------\n\n您需要在数据库上执行的大部分操作都是使用SQL语句完成的。\n\n以下SQL语句选择\"Customers\"表中的所有记录：\n\n## 实例\n\nSELECT * FROM Customers;\n\n在本教程中，我们将向您解释各种不同的SQL语句。\n\n## 请记住...\n\n------\n\n- SQL 对大小写不敏感：SELECT 与 select 是相同的。\n- 在本教程中，我们将以大写形式编写所有SQL关键字。\n\n## SQL 语句后面的分号？\n\n------\n\n- 一些数据库系统需要在每个SQL语句的末尾使用分号。\n- 分号是分离数据库系统中每个SQL语句的标准方法，这样您就可以在对服务器的同一请求中执行多个SQL语句。\n- 在本教程中，我们将在每个SQL语句的末尾使用分号。\n\n## 一些最重要的 SQL 命令\n\n------\n\n- **SELECT** - 从数据库中提取数据\n- **UPDATE** - 更新数据库中的数据\n- **DELETE** - 从数据库中删除数据\n- **INSERT INTO** - 向数据库中插入新数据\n- **CREATE DATABASE** - 创建新数据库\n- **ALTER DATABASE** - 修改数据库\n- **CREATE TABLE** - 创建新表\n- **ALTER TABLE** - 变更（改变）数据库表\n- **DROP TABLE** - 删除表\n- **CREATE INDEX** - 创建索引（搜索键）\n- **DROP INDEX** - 删除索引\n\n### **SELECT语句**\n\n句法：\n\n```\nSELECT column_name(s) FROM table_name\n```\n\n### SELECT语句和WHERE子句\n\n句法：\n\n```\nSELECT [*] FROM [TableName] WHERE [condition1]\n```\n\n### SELECT语句与WHERE和/或子句[\n\n句法：\n\n```\nSELECT [*] FROM [TableName] WHERE [condition1] [AND [OR]] [condition2]...\n```\n\n### SELECT语句与ORDER BY\n\n句法：\n\n```\nSELECT column_name()\nFROM table_name\nORDER BY column_name() ASC or DESC\n```\n\n### SELECT DISTINCT(区分)子句\n\n句法：\n\n```\nSELECT DISTINCT column1, column2....columnN\nFROM   table_name;\n```\n\n### SELECT IN子句\n\n句法：\n\n```\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name IN (val-1, val-2,...val-N);\n```\n\n### SELECT LIKE (类)子句\n\n句法：\n\n```\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name LIKE { PATTERN };\n```\n\n### SELECT COUNT(计数)子句\n\n句法：\n\n```\nSELECT COUNT(column_name)\nFROM   table_name\nWHERE  CONDITION;\n```\n\n### SELECT与HAVING子句\n\n句法：\n\n```\nSELECT SUM(column_name)\nFROM   table_name\nWHERE  CONDITION\nGROUP BY column_name\nHAVING (arithematic function condition);\n```\n\n### INSERT INTO语句\n\n句法：\n\n```\nINSERT INTO table_name (column, column1, column2, column3, ...)\nVALUES (value, value1, value2, value3 ...)\n```\n\n### UPDATE语句\n\n句法：\n\n```\nUPDATE table_name\nSET column=value, column1=value1,...\nWHERE someColumn=someValue\n```\n\n### DELETE语句\n\n句法：\n\n```\nDELETE FROM tableName\nWHERE someColumn = someValue\n```\n\n### CREATE 语句\n\n句法：\n\n```\nCREATE TABLE table_name(\ncolumn1 datatype,\ncolumn2 datatype,\ncolumn3 datatype,\n.....\ncolumnN datatype,\nPRIMARY KEY( one or more columns )\n);\n```\n\n### DROP 语句\n\n句法：\n\n```\nDROP TABLE table_name;\n```\n\n### CREATE INDEX语句\n\n句法：\n\n```\nCREATE UNIQUE INDEX index_name\nON table_name ( column1, column2,...columnN);\n```\n\n### DROP INDEX语句\n\n句法：\n\n```\nALTER TABLE table_name\nDROP INDEX index_name;\n```\n\n### DESC语句\n\n句法：\n\n```\nDESC table_name;\n```\n\n### TRUNCATE 截断表语句\n\n句法：\n\n```\nTRUNCATE TABLE table_name;\n```\n\n### ALTER TABLE语句\n\n句法：\n\nsql\n\n```\nALTER TABLE table_name {ADD|DROP|MODIFY} column_name {data_ype};\n```\n\n### ALTER TABLE语句(对表名重命名)\n\n句法：\n\n```\nALTER TABLE table_name RENAME TO new_table_name;\n```\n\n### Use语句\n\n句法：\n\n```\nUSE database_name;\n```\n\n### COMMIT语句\n\n句法：\n\n```\nCOMMIT;\n```\n\n### ROLLBACK语句\n\n句法：\n\n```\nROLLBACK;\n```\n","source":"wiki/sql/sentence/yufa.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 语法\norder: 3\n---\n\n## SQL 语法规则\n\n------\n\n- SQL语句总是以关键字开始，如SELECT、INSERT、UPDATE、DELETE、DROP、CREATE。\n- SQL语句以分号结尾。\n- SQL不区分大小写，意味着update与UPDATE相同。\n\n## 数据库表\n\n------\n\n数据库通常包含一个或多个表。每个表都用一个名称标识（例如，\"Customers\"或\"Orders\"）。该表包含带有数据（行）的记录。\n　在本教程中，我们将使用著名的Northwind示例数据库（包括MSAccess和MSSQLServer）。\n\n下面是选自 \"Customers\" 表的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n上面的表包含五条记录（每一条对应一个客户）和七个列（CustomerID、CustomerName、ContactName、Address、City、PostalCode 和 Country）。\n\n## SQL 语句\n\n------\n\n您需要在数据库上执行的大部分操作都是使用SQL语句完成的。\n\n以下SQL语句选择\"Customers\"表中的所有记录：\n\n## 实例\n\nSELECT * FROM Customers;\n\n在本教程中，我们将向您解释各种不同的SQL语句。\n\n## 请记住...\n\n------\n\n- SQL 对大小写不敏感：SELECT 与 select 是相同的。\n- 在本教程中，我们将以大写形式编写所有SQL关键字。\n\n## SQL 语句后面的分号？\n\n------\n\n- 一些数据库系统需要在每个SQL语句的末尾使用分号。\n- 分号是分离数据库系统中每个SQL语句的标准方法，这样您就可以在对服务器的同一请求中执行多个SQL语句。\n- 在本教程中，我们将在每个SQL语句的末尾使用分号。\n\n## 一些最重要的 SQL 命令\n\n------\n\n- **SELECT** - 从数据库中提取数据\n- **UPDATE** - 更新数据库中的数据\n- **DELETE** - 从数据库中删除数据\n- **INSERT INTO** - 向数据库中插入新数据\n- **CREATE DATABASE** - 创建新数据库\n- **ALTER DATABASE** - 修改数据库\n- **CREATE TABLE** - 创建新表\n- **ALTER TABLE** - 变更（改变）数据库表\n- **DROP TABLE** - 删除表\n- **CREATE INDEX** - 创建索引（搜索键）\n- **DROP INDEX** - 删除索引\n\n### **SELECT语句**\n\n句法：\n\n```\nSELECT column_name(s) FROM table_name\n```\n\n### SELECT语句和WHERE子句\n\n句法：\n\n```\nSELECT [*] FROM [TableName] WHERE [condition1]\n```\n\n### SELECT语句与WHERE和/或子句[\n\n句法：\n\n```\nSELECT [*] FROM [TableName] WHERE [condition1] [AND [OR]] [condition2]...\n```\n\n### SELECT语句与ORDER BY\n\n句法：\n\n```\nSELECT column_name()\nFROM table_name\nORDER BY column_name() ASC or DESC\n```\n\n### SELECT DISTINCT(区分)子句\n\n句法：\n\n```\nSELECT DISTINCT column1, column2....columnN\nFROM   table_name;\n```\n\n### SELECT IN子句\n\n句法：\n\n```\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name IN (val-1, val-2,...val-N);\n```\n\n### SELECT LIKE (类)子句\n\n句法：\n\n```\nSELECT column1, column2....columnN\nFROM   table_name\nWHERE  column_name LIKE { PATTERN };\n```\n\n### SELECT COUNT(计数)子句\n\n句法：\n\n```\nSELECT COUNT(column_name)\nFROM   table_name\nWHERE  CONDITION;\n```\n\n### SELECT与HAVING子句\n\n句法：\n\n```\nSELECT SUM(column_name)\nFROM   table_name\nWHERE  CONDITION\nGROUP BY column_name\nHAVING (arithematic function condition);\n```\n\n### INSERT INTO语句\n\n句法：\n\n```\nINSERT INTO table_name (column, column1, column2, column3, ...)\nVALUES (value, value1, value2, value3 ...)\n```\n\n### UPDATE语句\n\n句法：\n\n```\nUPDATE table_name\nSET column=value, column1=value1,...\nWHERE someColumn=someValue\n```\n\n### DELETE语句\n\n句法：\n\n```\nDELETE FROM tableName\nWHERE someColumn = someValue\n```\n\n### CREATE 语句\n\n句法：\n\n```\nCREATE TABLE table_name(\ncolumn1 datatype,\ncolumn2 datatype,\ncolumn3 datatype,\n.....\ncolumnN datatype,\nPRIMARY KEY( one or more columns )\n);\n```\n\n### DROP 语句\n\n句法：\n\n```\nDROP TABLE table_name;\n```\n\n### CREATE INDEX语句\n\n句法：\n\n```\nCREATE UNIQUE INDEX index_name\nON table_name ( column1, column2,...columnN);\n```\n\n### DROP INDEX语句\n\n句法：\n\n```\nALTER TABLE table_name\nDROP INDEX index_name;\n```\n\n### DESC语句\n\n句法：\n\n```\nDESC table_name;\n```\n\n### TRUNCATE 截断表语句\n\n句法：\n\n```\nTRUNCATE TABLE table_name;\n```\n\n### ALTER TABLE语句\n\n句法：\n\nsql\n\n```\nALTER TABLE table_name {ADD|DROP|MODIFY} column_name {data_ype};\n```\n\n### ALTER TABLE语句(对表名重命名)\n\n句法：\n\n```\nALTER TABLE table_name RENAME TO new_table_name;\n```\n\n### Use语句\n\n句法：\n\n```\nUSE database_name;\n```\n\n### COMMIT语句\n\n句法：\n\n```\nCOMMIT;\n```\n\n### ROLLBACK语句\n\n句法：\n\n```\nROLLBACK;\n```\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-10T09:59:57.596Z","path":"wiki/sql/sentence/yufa.html","comments":1,"_id":"cmbreopja001g65x033uigi6q","content":"<h2 id=\"SQL-语法规则\"><a href=\"#SQL-语法规则\" class=\"headerlink\" title=\"SQL 语法规则\"></a>SQL 语法规则</h2><hr>\n<ul>\n<li>SQL语句总是以关键字开始，如SELECT、INSERT、UPDATE、DELETE、DROP、CREATE。</li>\n<li>SQL语句以分号结尾。</li>\n<li>SQL不区分大小写，意味着update与UPDATE相同。</li>\n</ul>\n<h2 id=\"数据库表\"><a href=\"#数据库表\" class=\"headerlink\" title=\"数据库表\"></a>数据库表</h2><hr>\n<p>数据库通常包含一个或多个表。每个表都用一个名称标识（例如，”Customers”或”Orders”）。该表包含带有数据（行）的记录。<br>　在本教程中，我们将使用著名的Northwind示例数据库（包括MSAccess和MSSQLServer）。</p>\n<p>下面是选自 “Customers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<p>上面的表包含五条记录（每一条对应一个客户）和七个列（CustomerID、CustomerName、ContactName、Address、City、PostalCode 和 Country）。</p>\n<h2 id=\"SQL-语句\"><a href=\"#SQL-语句\" class=\"headerlink\" title=\"SQL 语句\"></a>SQL 语句</h2><hr>\n<p>您需要在数据库上执行的大部分操作都是使用SQL语句完成的。</p>\n<p>以下SQL语句选择”Customers”表中的所有记录：</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>SELECT * FROM Customers;</p>\n<p>在本教程中，我们将向您解释各种不同的SQL语句。</p>\n<h2 id=\"请记住…\"><a href=\"#请记住…\" class=\"headerlink\" title=\"请记住…\"></a>请记住…</h2><hr>\n<ul>\n<li>SQL 对大小写不敏感：SELECT 与 select 是相同的。</li>\n<li>在本教程中，我们将以大写形式编写所有SQL关键字。</li>\n</ul>\n<h2 id=\"SQL-语句后面的分号？\"><a href=\"#SQL-语句后面的分号？\" class=\"headerlink\" title=\"SQL 语句后面的分号？\"></a>SQL 语句后面的分号？</h2><hr>\n<ul>\n<li>一些数据库系统需要在每个SQL语句的末尾使用分号。</li>\n<li>分号是分离数据库系统中每个SQL语句的标准方法，这样您就可以在对服务器的同一请求中执行多个SQL语句。</li>\n<li>在本教程中，我们将在每个SQL语句的末尾使用分号。</li>\n</ul>\n<h2 id=\"一些最重要的-SQL-命令\"><a href=\"#一些最重要的-SQL-命令\" class=\"headerlink\" title=\"一些最重要的 SQL 命令\"></a>一些最重要的 SQL 命令</h2><hr>\n<ul>\n<li><strong>SELECT</strong> - 从数据库中提取数据</li>\n<li><strong>UPDATE</strong> - 更新数据库中的数据</li>\n<li><strong>DELETE</strong> - 从数据库中删除数据</li>\n<li><strong>INSERT INTO</strong> - 向数据库中插入新数据</li>\n<li><strong>CREATE DATABASE</strong> - 创建新数据库</li>\n<li><strong>ALTER DATABASE</strong> - 修改数据库</li>\n<li><strong>CREATE TABLE</strong> - 创建新表</li>\n<li><strong>ALTER TABLE</strong> - 变更（改变）数据库表</li>\n<li><strong>DROP TABLE</strong> - 删除表</li>\n<li><strong>CREATE INDEX</strong> - 创建索引（搜索键）</li>\n<li><strong>DROP INDEX</strong> - 删除索引</li>\n</ul>\n<h3 id=\"SELECT语句\"><a href=\"#SELECT语句\" class=\"headerlink\" title=\"SELECT语句\"></a><strong>SELECT语句</strong></h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s) FROM table_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SELECT语句和WHERE子句\"><a href=\"#SELECT语句和WHERE子句\" class=\"headerlink\" title=\"SELECT语句和WHERE子句\"></a>SELECT语句和WHERE子句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT [*] FROM [TableName] WHERE [condition1]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SELECT语句与WHERE和-或子句\"><a href=\"#SELECT语句与WHERE和-或子句\" class=\"headerlink\" title=\"SELECT语句与WHERE和&#x2F;或子句[\"></a>SELECT语句与WHERE和&#x2F;或子句[</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT [*] FROM [TableName] WHERE [condition1] [AND [OR]] [condition2]...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SELECT语句与ORDER-BY\"><a href=\"#SELECT语句与ORDER-BY\" class=\"headerlink\" title=\"SELECT语句与ORDER BY\"></a>SELECT语句与ORDER BY</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name()</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">ORDER BY column_name() ASC or DESC</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SELECT-DISTINCT-区分-子句\"><a href=\"#SELECT-DISTINCT-区分-子句\" class=\"headerlink\" title=\"SELECT DISTINCT(区分)子句\"></a>SELECT DISTINCT(区分)子句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT column1, column2....columnN</span><br><span class=\"line\">FROM   table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SELECT-IN子句\"><a href=\"#SELECT-IN子句\" class=\"headerlink\" title=\"SELECT IN子句\"></a>SELECT IN子句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2....columnN</span><br><span class=\"line\">FROM   table_name</span><br><span class=\"line\">WHERE  column_name IN (val-1, val-2,...val-N);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SELECT-LIKE-类-子句\"><a href=\"#SELECT-LIKE-类-子句\" class=\"headerlink\" title=\"SELECT LIKE (类)子句\"></a>SELECT LIKE (类)子句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2....columnN</span><br><span class=\"line\">FROM   table_name</span><br><span class=\"line\">WHERE  column_name LIKE &#123; PATTERN &#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SELECT-COUNT-计数-子句\"><a href=\"#SELECT-COUNT-计数-子句\" class=\"headerlink\" title=\"SELECT COUNT(计数)子句\"></a>SELECT COUNT(计数)子句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(column_name)</span><br><span class=\"line\">FROM   table_name</span><br><span class=\"line\">WHERE  CONDITION;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SELECT与HAVING子句\"><a href=\"#SELECT与HAVING子句\" class=\"headerlink\" title=\"SELECT与HAVING子句\"></a>SELECT与HAVING子句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT SUM(column_name)</span><br><span class=\"line\">FROM   table_name</span><br><span class=\"line\">WHERE  CONDITION</span><br><span class=\"line\">GROUP BY column_name</span><br><span class=\"line\">HAVING (arithematic function condition);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"INSERT-INTO语句\"><a href=\"#INSERT-INTO语句\" class=\"headerlink\" title=\"INSERT INTO语句\"></a>INSERT INTO语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO table_name (column, column1, column2, column3, ...)</span><br><span class=\"line\">VALUES (value, value1, value2, value3 ...)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"UPDATE语句\"><a href=\"#UPDATE语句\" class=\"headerlink\" title=\"UPDATE语句\"></a>UPDATE语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">UPDATE table_name</span><br><span class=\"line\">SET column=value, column1=value1,...</span><br><span class=\"line\">WHERE someColumn=someValue</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DELETE语句\"><a href=\"#DELETE语句\" class=\"headerlink\" title=\"DELETE语句\"></a>DELETE语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DELETE FROM tableName</span><br><span class=\"line\">WHERE someColumn = someValue</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CREATE-语句\"><a href=\"#CREATE-语句\" class=\"headerlink\" title=\"CREATE 语句\"></a>CREATE 语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE table_name(</span><br><span class=\"line\">column1 datatype,</span><br><span class=\"line\">column2 datatype,</span><br><span class=\"line\">column3 datatype,</span><br><span class=\"line\">.....</span><br><span class=\"line\">columnN datatype,</span><br><span class=\"line\">PRIMARY KEY( one or more columns )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DROP-语句\"><a href=\"#DROP-语句\" class=\"headerlink\" title=\"DROP 语句\"></a>DROP 语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP TABLE table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CREATE-INDEX语句\"><a href=\"#CREATE-INDEX语句\" class=\"headerlink\" title=\"CREATE INDEX语句\"></a>CREATE INDEX语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE UNIQUE INDEX index_name</span><br><span class=\"line\">ON table_name ( column1, column2,...columnN);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DROP-INDEX语句\"><a href=\"#DROP-INDEX语句\" class=\"headerlink\" title=\"DROP INDEX语句\"></a>DROP INDEX语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name</span><br><span class=\"line\">DROP INDEX index_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DESC语句\"><a href=\"#DESC语句\" class=\"headerlink\" title=\"DESC语句\"></a>DESC语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DESC table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"TRUNCATE-截断表语句\"><a href=\"#TRUNCATE-截断表语句\" class=\"headerlink\" title=\"TRUNCATE 截断表语句\"></a>TRUNCATE 截断表语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">TRUNCATE TABLE table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ALTER-TABLE语句\"><a href=\"#ALTER-TABLE语句\" class=\"headerlink\" title=\"ALTER TABLE语句\"></a>ALTER TABLE语句</h3><p>句法：</p>\n<p>sql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name &#123;ADD|DROP|MODIFY&#125; column_name &#123;data_ype&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ALTER-TABLE语句-对表名重命名\"><a href=\"#ALTER-TABLE语句-对表名重命名\" class=\"headerlink\" title=\"ALTER TABLE语句(对表名重命名)\"></a>ALTER TABLE语句(对表名重命名)</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name RENAME TO new_table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Use语句\"><a href=\"#Use语句\" class=\"headerlink\" title=\"Use语句\"></a>Use语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">USE database_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"COMMIT语句\"><a href=\"#COMMIT语句\" class=\"headerlink\" title=\"COMMIT语句\"></a>COMMIT语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">COMMIT;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ROLLBACK语句\"><a href=\"#ROLLBACK语句\" class=\"headerlink\" title=\"ROLLBACK语句\"></a>ROLLBACK语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ROLLBACK;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-语法规则\"><a href=\"#SQL-语法规则\" class=\"headerlink\" title=\"SQL 语法规则\"></a>SQL 语法规则</h2><hr>\n<ul>\n<li>SQL语句总是以关键字开始，如SELECT、INSERT、UPDATE、DELETE、DROP、CREATE。</li>\n<li>SQL语句以分号结尾。</li>\n<li>SQL不区分大小写，意味着update与UPDATE相同。</li>\n</ul>\n<h2 id=\"数据库表\"><a href=\"#数据库表\" class=\"headerlink\" title=\"数据库表\"></a>数据库表</h2><hr>\n<p>数据库通常包含一个或多个表。每个表都用一个名称标识（例如，”Customers”或”Orders”）。该表包含带有数据（行）的记录。<br>　在本教程中，我们将使用著名的Northwind示例数据库（包括MSAccess和MSSQLServer）。</p>\n<p>下面是选自 “Customers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<p>上面的表包含五条记录（每一条对应一个客户）和七个列（CustomerID、CustomerName、ContactName、Address、City、PostalCode 和 Country）。</p>\n<h2 id=\"SQL-语句\"><a href=\"#SQL-语句\" class=\"headerlink\" title=\"SQL 语句\"></a>SQL 语句</h2><hr>\n<p>您需要在数据库上执行的大部分操作都是使用SQL语句完成的。</p>\n<p>以下SQL语句选择”Customers”表中的所有记录：</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>SELECT * FROM Customers;</p>\n<p>在本教程中，我们将向您解释各种不同的SQL语句。</p>\n<h2 id=\"请记住…\"><a href=\"#请记住…\" class=\"headerlink\" title=\"请记住…\"></a>请记住…</h2><hr>\n<ul>\n<li>SQL 对大小写不敏感：SELECT 与 select 是相同的。</li>\n<li>在本教程中，我们将以大写形式编写所有SQL关键字。</li>\n</ul>\n<h2 id=\"SQL-语句后面的分号？\"><a href=\"#SQL-语句后面的分号？\" class=\"headerlink\" title=\"SQL 语句后面的分号？\"></a>SQL 语句后面的分号？</h2><hr>\n<ul>\n<li>一些数据库系统需要在每个SQL语句的末尾使用分号。</li>\n<li>分号是分离数据库系统中每个SQL语句的标准方法，这样您就可以在对服务器的同一请求中执行多个SQL语句。</li>\n<li>在本教程中，我们将在每个SQL语句的末尾使用分号。</li>\n</ul>\n<h2 id=\"一些最重要的-SQL-命令\"><a href=\"#一些最重要的-SQL-命令\" class=\"headerlink\" title=\"一些最重要的 SQL 命令\"></a>一些最重要的 SQL 命令</h2><hr>\n<ul>\n<li><strong>SELECT</strong> - 从数据库中提取数据</li>\n<li><strong>UPDATE</strong> - 更新数据库中的数据</li>\n<li><strong>DELETE</strong> - 从数据库中删除数据</li>\n<li><strong>INSERT INTO</strong> - 向数据库中插入新数据</li>\n<li><strong>CREATE DATABASE</strong> - 创建新数据库</li>\n<li><strong>ALTER DATABASE</strong> - 修改数据库</li>\n<li><strong>CREATE TABLE</strong> - 创建新表</li>\n<li><strong>ALTER TABLE</strong> - 变更（改变）数据库表</li>\n<li><strong>DROP TABLE</strong> - 删除表</li>\n<li><strong>CREATE INDEX</strong> - 创建索引（搜索键）</li>\n<li><strong>DROP INDEX</strong> - 删除索引</li>\n</ul>\n<h3 id=\"SELECT语句\"><a href=\"#SELECT语句\" class=\"headerlink\" title=\"SELECT语句\"></a><strong>SELECT语句</strong></h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s) FROM table_name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SELECT语句和WHERE子句\"><a href=\"#SELECT语句和WHERE子句\" class=\"headerlink\" title=\"SELECT语句和WHERE子句\"></a>SELECT语句和WHERE子句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT [*] FROM [TableName] WHERE [condition1]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SELECT语句与WHERE和-或子句\"><a href=\"#SELECT语句与WHERE和-或子句\" class=\"headerlink\" title=\"SELECT语句与WHERE和&#x2F;或子句[\"></a>SELECT语句与WHERE和&#x2F;或子句[</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT [*] FROM [TableName] WHERE [condition1] [AND [OR]] [condition2]...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SELECT语句与ORDER-BY\"><a href=\"#SELECT语句与ORDER-BY\" class=\"headerlink\" title=\"SELECT语句与ORDER BY\"></a>SELECT语句与ORDER BY</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name()</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">ORDER BY column_name() ASC or DESC</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SELECT-DISTINCT-区分-子句\"><a href=\"#SELECT-DISTINCT-区分-子句\" class=\"headerlink\" title=\"SELECT DISTINCT(区分)子句\"></a>SELECT DISTINCT(区分)子句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT DISTINCT column1, column2....columnN</span><br><span class=\"line\">FROM   table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SELECT-IN子句\"><a href=\"#SELECT-IN子句\" class=\"headerlink\" title=\"SELECT IN子句\"></a>SELECT IN子句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2....columnN</span><br><span class=\"line\">FROM   table_name</span><br><span class=\"line\">WHERE  column_name IN (val-1, val-2,...val-N);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SELECT-LIKE-类-子句\"><a href=\"#SELECT-LIKE-类-子句\" class=\"headerlink\" title=\"SELECT LIKE (类)子句\"></a>SELECT LIKE (类)子句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2....columnN</span><br><span class=\"line\">FROM   table_name</span><br><span class=\"line\">WHERE  column_name LIKE &#123; PATTERN &#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SELECT-COUNT-计数-子句\"><a href=\"#SELECT-COUNT-计数-子句\" class=\"headerlink\" title=\"SELECT COUNT(计数)子句\"></a>SELECT COUNT(计数)子句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(column_name)</span><br><span class=\"line\">FROM   table_name</span><br><span class=\"line\">WHERE  CONDITION;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SELECT与HAVING子句\"><a href=\"#SELECT与HAVING子句\" class=\"headerlink\" title=\"SELECT与HAVING子句\"></a>SELECT与HAVING子句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT SUM(column_name)</span><br><span class=\"line\">FROM   table_name</span><br><span class=\"line\">WHERE  CONDITION</span><br><span class=\"line\">GROUP BY column_name</span><br><span class=\"line\">HAVING (arithematic function condition);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"INSERT-INTO语句\"><a href=\"#INSERT-INTO语句\" class=\"headerlink\" title=\"INSERT INTO语句\"></a>INSERT INTO语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">INSERT INTO table_name (column, column1, column2, column3, ...)</span><br><span class=\"line\">VALUES (value, value1, value2, value3 ...)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"UPDATE语句\"><a href=\"#UPDATE语句\" class=\"headerlink\" title=\"UPDATE语句\"></a>UPDATE语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">UPDATE table_name</span><br><span class=\"line\">SET column=value, column1=value1,...</span><br><span class=\"line\">WHERE someColumn=someValue</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DELETE语句\"><a href=\"#DELETE语句\" class=\"headerlink\" title=\"DELETE语句\"></a>DELETE语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DELETE FROM tableName</span><br><span class=\"line\">WHERE someColumn = someValue</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CREATE-语句\"><a href=\"#CREATE-语句\" class=\"headerlink\" title=\"CREATE 语句\"></a>CREATE 语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE TABLE table_name(</span><br><span class=\"line\">column1 datatype,</span><br><span class=\"line\">column2 datatype,</span><br><span class=\"line\">column3 datatype,</span><br><span class=\"line\">.....</span><br><span class=\"line\">columnN datatype,</span><br><span class=\"line\">PRIMARY KEY( one or more columns )</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DROP-语句\"><a href=\"#DROP-语句\" class=\"headerlink\" title=\"DROP 语句\"></a>DROP 语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP TABLE table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"CREATE-INDEX语句\"><a href=\"#CREATE-INDEX语句\" class=\"headerlink\" title=\"CREATE INDEX语句\"></a>CREATE INDEX语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE UNIQUE INDEX index_name</span><br><span class=\"line\">ON table_name ( column1, column2,...columnN);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DROP-INDEX语句\"><a href=\"#DROP-INDEX语句\" class=\"headerlink\" title=\"DROP INDEX语句\"></a>DROP INDEX语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name</span><br><span class=\"line\">DROP INDEX index_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"DESC语句\"><a href=\"#DESC语句\" class=\"headerlink\" title=\"DESC语句\"></a>DESC语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DESC table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"TRUNCATE-截断表语句\"><a href=\"#TRUNCATE-截断表语句\" class=\"headerlink\" title=\"TRUNCATE 截断表语句\"></a>TRUNCATE 截断表语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">TRUNCATE TABLE table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ALTER-TABLE语句\"><a href=\"#ALTER-TABLE语句\" class=\"headerlink\" title=\"ALTER TABLE语句\"></a>ALTER TABLE语句</h3><p>句法：</p>\n<p>sql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name &#123;ADD|DROP|MODIFY&#125; column_name &#123;data_ype&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ALTER-TABLE语句-对表名重命名\"><a href=\"#ALTER-TABLE语句-对表名重命名\" class=\"headerlink\" title=\"ALTER TABLE语句(对表名重命名)\"></a>ALTER TABLE语句(对表名重命名)</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER TABLE table_name RENAME TO new_table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Use语句\"><a href=\"#Use语句\" class=\"headerlink\" title=\"Use语句\"></a>Use语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">USE database_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"COMMIT语句\"><a href=\"#COMMIT语句\" class=\"headerlink\" title=\"COMMIT语句\"></a>COMMIT语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">COMMIT;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ROLLBACK语句\"><a href=\"#ROLLBACK语句\" class=\"headerlink\" title=\"ROLLBACK语句\"></a>ROLLBACK语句</h3><p>句法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ROLLBACK;</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 运算符","order":13,"_content":"\n## SQL 运算符\n\n------\n\n运算符是保留字或主要用于 SQL 语句的 中的字符，用于执行操作，例如：比较和算术运算。 这些运算符用于指定 SQL 语句中的条件，并用作语句中多个条件的连词。\n\n常见运算符有以下几种：\n\n- 算术运算符\n- 比较运算符\n- 逻辑运算符\n- 否定条件运算符\n\n## SQL 算术运算符\n\n------\n\n假设变量 a 的值是：10，变量 b 的值是：20，以下为各运算符执行结果：\n\n| 运算符 | 描述                               | 例子           |\n| :----- | :--------------------------------- | :------------- |\n| +      | 加法，执行加法运算。               | a + b 得到 30  |\n| -      | 减法，执行减法运算。               | a - b 得到 -10 |\n| *      | 乘法，执行乘法运算。               | a * b 得到 200 |\n| /      | 用左操作数除以右操作数。           | b / a 得到 2   |\n| %      | 用左操作数除以右操作数并返回余数。 | b % a 得到 0   |\n\n## SQL 比较运算符\n\n------\n\n假设变量 a 的值是：10，变量 b 的值是：20，以下为各运算符执行结果：\n\n| 运算符 | 描述                                                         | 例子               |\n| :----- | :----------------------------------------------------------- | :----------------- |\n| =      | 检查两个操作数的值是否相等，如果是，则条件为真(true)。       | (a = b) is false.  |\n| !=     | 检查两个操作数的值是否相等，如果值不相等则条件为真(true)。   | (a != b) is true.  |\n| <>     | 检查两个操作数的值是否相等，如果值不相等则条件为真(true)。   | (a <> b) is true.  |\n| >      | 检查左操作数的值是否大于右操作数的值，如果是，则条件为真(true)。 | (a > b) is false.  |\n| <      | 检查左操作数的值是否小于右操作数的值，如果是，则条件为真(true)。 | (a < b) is true.   |\n| >=     | 检查左操作数的值是否大于或等于右操作数的值，如果是，则条件为真(true)。 | (a >= b) is false  |\n| <=     | 检查左操作数的值是否小于或等于右操作数的值，如果是，则条件为真(true)。 | (a <= b) is true.  |\n| !<     | 检查左操作数的值是否不小于右操作数的值，如果是，则条件变为真(true)。 | (a !< b) is false. |\n| !>     | 检查左操作数的值是否不大于右操作数的值，如果是，则条件变为真(true)。 | (a !> b) is true.  |\n\n## SQL 逻辑运算符：\n\n------\n\n这是在 SQL 所有的逻辑运算符的列表。\n\n| 运算符  | 描述                                                         |\n| :------ | :----------------------------------------------------------- |\n| ALL     | ALL运算符用于将值与另一个值集中的所有值进行比较。            |\n| AND     | AND运算符允许在SQL语句的WHERE子句中指定多个条件。            |\n| ANY     | ANY运算符用于根据条件将值与列表中的任何适用值进行比较。      |\n| BETWEEN | BETWEEN运算符用于搜索在给定最小值和最大值内的值。            |\n| EXISTS  | EXISTS运算符用于搜索指定表中是否存在满足特定条件的行。       |\n|         | IN运算符用于将值与已指定的文字值列表进行比较。               |\n| LIKE    | LIKE运算符用于使用通配符运算符将值与类似值进行比较。         |\n| NOT     | NOT运算符反转使用它的逻辑运算符的含义。 例如：NOT EXISTS, NOT BETWEEN, NOT IN等等，这是一个否定运算符。 |\n| OR      | OR运算符用于组合SQL语句的WHERE子句中的多个条件。             |\n| IS NULL | IS NULL运算符用于将值与NULL值进行比较。                      |\n| UNIQUE  | UNIQUE运算符搜索指定表的每一行的唯一性(无重复项)。           |\n","source":"wiki/sql/sentence/yunsf.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 运算符\norder: 13\n---\n\n## SQL 运算符\n\n------\n\n运算符是保留字或主要用于 SQL 语句的 中的字符，用于执行操作，例如：比较和算术运算。 这些运算符用于指定 SQL 语句中的条件，并用作语句中多个条件的连词。\n\n常见运算符有以下几种：\n\n- 算术运算符\n- 比较运算符\n- 逻辑运算符\n- 否定条件运算符\n\n## SQL 算术运算符\n\n------\n\n假设变量 a 的值是：10，变量 b 的值是：20，以下为各运算符执行结果：\n\n| 运算符 | 描述                               | 例子           |\n| :----- | :--------------------------------- | :------------- |\n| +      | 加法，执行加法运算。               | a + b 得到 30  |\n| -      | 减法，执行减法运算。               | a - b 得到 -10 |\n| *      | 乘法，执行乘法运算。               | a * b 得到 200 |\n| /      | 用左操作数除以右操作数。           | b / a 得到 2   |\n| %      | 用左操作数除以右操作数并返回余数。 | b % a 得到 0   |\n\n## SQL 比较运算符\n\n------\n\n假设变量 a 的值是：10，变量 b 的值是：20，以下为各运算符执行结果：\n\n| 运算符 | 描述                                                         | 例子               |\n| :----- | :----------------------------------------------------------- | :----------------- |\n| =      | 检查两个操作数的值是否相等，如果是，则条件为真(true)。       | (a = b) is false.  |\n| !=     | 检查两个操作数的值是否相等，如果值不相等则条件为真(true)。   | (a != b) is true.  |\n| <>     | 检查两个操作数的值是否相等，如果值不相等则条件为真(true)。   | (a <> b) is true.  |\n| >      | 检查左操作数的值是否大于右操作数的值，如果是，则条件为真(true)。 | (a > b) is false.  |\n| <      | 检查左操作数的值是否小于右操作数的值，如果是，则条件为真(true)。 | (a < b) is true.   |\n| >=     | 检查左操作数的值是否大于或等于右操作数的值，如果是，则条件为真(true)。 | (a >= b) is false  |\n| <=     | 检查左操作数的值是否小于或等于右操作数的值，如果是，则条件为真(true)。 | (a <= b) is true.  |\n| !<     | 检查左操作数的值是否不小于右操作数的值，如果是，则条件变为真(true)。 | (a !< b) is false. |\n| !>     | 检查左操作数的值是否不大于右操作数的值，如果是，则条件变为真(true)。 | (a !> b) is true.  |\n\n## SQL 逻辑运算符：\n\n------\n\n这是在 SQL 所有的逻辑运算符的列表。\n\n| 运算符  | 描述                                                         |\n| :------ | :----------------------------------------------------------- |\n| ALL     | ALL运算符用于将值与另一个值集中的所有值进行比较。            |\n| AND     | AND运算符允许在SQL语句的WHERE子句中指定多个条件。            |\n| ANY     | ANY运算符用于根据条件将值与列表中的任何适用值进行比较。      |\n| BETWEEN | BETWEEN运算符用于搜索在给定最小值和最大值内的值。            |\n| EXISTS  | EXISTS运算符用于搜索指定表中是否存在满足特定条件的行。       |\n|         | IN运算符用于将值与已指定的文字值列表进行比较。               |\n| LIKE    | LIKE运算符用于使用通配符运算符将值与类似值进行比较。         |\n| NOT     | NOT运算符反转使用它的逻辑运算符的含义。 例如：NOT EXISTS, NOT BETWEEN, NOT IN等等，这是一个否定运算符。 |\n| OR      | OR运算符用于组合SQL语句的WHERE子句中的多个条件。             |\n| IS NULL | IS NULL运算符用于将值与NULL值进行比较。                      |\n| UNIQUE  | UNIQUE运算符搜索指定表的每一行的唯一性(无重复项)。           |\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-10T14:20:06.702Z","path":"wiki/sql/sentence/yunsf.html","comments":1,"_id":"cmbreopjb001h65x05yfa6r0n","content":"<h2 id=\"SQL-运算符\"><a href=\"#SQL-运算符\" class=\"headerlink\" title=\"SQL 运算符\"></a>SQL 运算符</h2><hr>\n<p>运算符是保留字或主要用于 SQL 语句的 中的字符，用于执行操作，例如：比较和算术运算。 这些运算符用于指定 SQL 语句中的条件，并用作语句中多个条件的连词。</p>\n<p>常见运算符有以下几种：</p>\n<ul>\n<li>算术运算符</li>\n<li>比较运算符</li>\n<li>逻辑运算符</li>\n<li>否定条件运算符</li>\n</ul>\n<h2 id=\"SQL-算术运算符\"><a href=\"#SQL-算术运算符\" class=\"headerlink\" title=\"SQL 算术运算符\"></a>SQL 算术运算符</h2><hr>\n<p>假设变量 a 的值是：10，变量 b 的值是：20，以下为各运算符执行结果：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">+</td>\n<td align=\"left\">加法，执行加法运算。</td>\n<td align=\"left\">a + b 得到 30</td>\n</tr>\n<tr>\n<td align=\"left\">-</td>\n<td align=\"left\">减法，执行减法运算。</td>\n<td align=\"left\">a - b 得到 -10</td>\n</tr>\n<tr>\n<td align=\"left\">*</td>\n<td align=\"left\">乘法，执行乘法运算。</td>\n<td align=\"left\">a * b 得到 200</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;</td>\n<td align=\"left\">用左操作数除以右操作数。</td>\n<td align=\"left\">b &#x2F; a 得到 2</td>\n</tr>\n<tr>\n<td align=\"left\">%</td>\n<td align=\"left\">用左操作数除以右操作数并返回余数。</td>\n<td align=\"left\">b % a 得到 0</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-比较运算符\"><a href=\"#SQL-比较运算符\" class=\"headerlink\" title=\"SQL 比较运算符\"></a>SQL 比较运算符</h2><hr>\n<p>假设变量 a 的值是：10，变量 b 的值是：20，以下为各运算符执行结果：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&#x3D;</td>\n<td align=\"left\">检查两个操作数的值是否相等，如果是，则条件为真(true)。</td>\n<td align=\"left\">(a &#x3D; b) is false.</td>\n</tr>\n<tr>\n<td align=\"left\">!&#x3D;</td>\n<td align=\"left\">检查两个操作数的值是否相等，如果值不相等则条件为真(true)。</td>\n<td align=\"left\">(a !&#x3D; b) is true.</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&gt;</td>\n<td align=\"left\">检查两个操作数的值是否相等，如果值不相等则条件为真(true)。</td>\n<td align=\"left\">(a &lt;&gt; b) is true.</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;</td>\n<td align=\"left\">检查左操作数的值是否大于右操作数的值，如果是，则条件为真(true)。</td>\n<td align=\"left\">(a &gt; b) is false.</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;</td>\n<td align=\"left\">检查左操作数的值是否小于右操作数的值，如果是，则条件为真(true)。</td>\n<td align=\"left\">(a &lt; b) is true.</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;&#x3D;</td>\n<td align=\"left\">检查左操作数的值是否大于或等于右操作数的值，如果是，则条件为真(true)。</td>\n<td align=\"left\">(a &gt;&#x3D; b) is false</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&#x3D;</td>\n<td align=\"left\">检查左操作数的值是否小于或等于右操作数的值，如果是，则条件为真(true)。</td>\n<td align=\"left\">(a &lt;&#x3D; b) is true.</td>\n</tr>\n<tr>\n<td align=\"left\">!&lt;</td>\n<td align=\"left\">检查左操作数的值是否不小于右操作数的值，如果是，则条件变为真(true)。</td>\n<td align=\"left\">(a !&lt; b) is false.</td>\n</tr>\n<tr>\n<td align=\"left\">!&gt;</td>\n<td align=\"left\">检查左操作数的值是否不大于右操作数的值，如果是，则条件变为真(true)。</td>\n<td align=\"left\">(a !&gt; b) is true.</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-逻辑运算符：\"><a href=\"#SQL-逻辑运算符：\" class=\"headerlink\" title=\"SQL 逻辑运算符：\"></a>SQL 逻辑运算符：</h2><hr>\n<p>这是在 SQL 所有的逻辑运算符的列表。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">ALL</td>\n<td align=\"left\">ALL运算符用于将值与另一个值集中的所有值进行比较。</td>\n</tr>\n<tr>\n<td align=\"left\">AND</td>\n<td align=\"left\">AND运算符允许在SQL语句的WHERE子句中指定多个条件。</td>\n</tr>\n<tr>\n<td align=\"left\">ANY</td>\n<td align=\"left\">ANY运算符用于根据条件将值与列表中的任何适用值进行比较。</td>\n</tr>\n<tr>\n<td align=\"left\">BETWEEN</td>\n<td align=\"left\">BETWEEN运算符用于搜索在给定最小值和最大值内的值。</td>\n</tr>\n<tr>\n<td align=\"left\">EXISTS</td>\n<td align=\"left\">EXISTS运算符用于搜索指定表中是否存在满足特定条件的行。</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">IN运算符用于将值与已指定的文字值列表进行比较。</td>\n</tr>\n<tr>\n<td align=\"left\">LIKE</td>\n<td align=\"left\">LIKE运算符用于使用通配符运算符将值与类似值进行比较。</td>\n</tr>\n<tr>\n<td align=\"left\">NOT</td>\n<td align=\"left\">NOT运算符反转使用它的逻辑运算符的含义。 例如：NOT EXISTS, NOT BETWEEN, NOT IN等等，这是一个否定运算符。</td>\n</tr>\n<tr>\n<td align=\"left\">OR</td>\n<td align=\"left\">OR运算符用于组合SQL语句的WHERE子句中的多个条件。</td>\n</tr>\n<tr>\n<td align=\"left\">IS NULL</td>\n<td align=\"left\">IS NULL运算符用于将值与NULL值进行比较。</td>\n</tr>\n<tr>\n<td align=\"left\">UNIQUE</td>\n<td align=\"left\">UNIQUE运算符搜索指定表的每一行的唯一性(无重复项)。</td>\n</tr>\n</tbody></table>\n","excerpt":"","more":"<h2 id=\"SQL-运算符\"><a href=\"#SQL-运算符\" class=\"headerlink\" title=\"SQL 运算符\"></a>SQL 运算符</h2><hr>\n<p>运算符是保留字或主要用于 SQL 语句的 中的字符，用于执行操作，例如：比较和算术运算。 这些运算符用于指定 SQL 语句中的条件，并用作语句中多个条件的连词。</p>\n<p>常见运算符有以下几种：</p>\n<ul>\n<li>算术运算符</li>\n<li>比较运算符</li>\n<li>逻辑运算符</li>\n<li>否定条件运算符</li>\n</ul>\n<h2 id=\"SQL-算术运算符\"><a href=\"#SQL-算术运算符\" class=\"headerlink\" title=\"SQL 算术运算符\"></a>SQL 算术运算符</h2><hr>\n<p>假设变量 a 的值是：10，变量 b 的值是：20，以下为各运算符执行结果：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">+</td>\n<td align=\"left\">加法，执行加法运算。</td>\n<td align=\"left\">a + b 得到 30</td>\n</tr>\n<tr>\n<td align=\"left\">-</td>\n<td align=\"left\">减法，执行减法运算。</td>\n<td align=\"left\">a - b 得到 -10</td>\n</tr>\n<tr>\n<td align=\"left\">*</td>\n<td align=\"left\">乘法，执行乘法运算。</td>\n<td align=\"left\">a * b 得到 200</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;</td>\n<td align=\"left\">用左操作数除以右操作数。</td>\n<td align=\"left\">b &#x2F; a 得到 2</td>\n</tr>\n<tr>\n<td align=\"left\">%</td>\n<td align=\"left\">用左操作数除以右操作数并返回余数。</td>\n<td align=\"left\">b % a 得到 0</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-比较运算符\"><a href=\"#SQL-比较运算符\" class=\"headerlink\" title=\"SQL 比较运算符\"></a>SQL 比较运算符</h2><hr>\n<p>假设变量 a 的值是：10，变量 b 的值是：20，以下为各运算符执行结果：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">例子</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&#x3D;</td>\n<td align=\"left\">检查两个操作数的值是否相等，如果是，则条件为真(true)。</td>\n<td align=\"left\">(a &#x3D; b) is false.</td>\n</tr>\n<tr>\n<td align=\"left\">!&#x3D;</td>\n<td align=\"left\">检查两个操作数的值是否相等，如果值不相等则条件为真(true)。</td>\n<td align=\"left\">(a !&#x3D; b) is true.</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&gt;</td>\n<td align=\"left\">检查两个操作数的值是否相等，如果值不相等则条件为真(true)。</td>\n<td align=\"left\">(a &lt;&gt; b) is true.</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;</td>\n<td align=\"left\">检查左操作数的值是否大于右操作数的值，如果是，则条件为真(true)。</td>\n<td align=\"left\">(a &gt; b) is false.</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;</td>\n<td align=\"left\">检查左操作数的值是否小于右操作数的值，如果是，则条件为真(true)。</td>\n<td align=\"left\">(a &lt; b) is true.</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;&#x3D;</td>\n<td align=\"left\">检查左操作数的值是否大于或等于右操作数的值，如果是，则条件为真(true)。</td>\n<td align=\"left\">(a &gt;&#x3D; b) is false</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&#x3D;</td>\n<td align=\"left\">检查左操作数的值是否小于或等于右操作数的值，如果是，则条件为真(true)。</td>\n<td align=\"left\">(a &lt;&#x3D; b) is true.</td>\n</tr>\n<tr>\n<td align=\"left\">!&lt;</td>\n<td align=\"left\">检查左操作数的值是否不小于右操作数的值，如果是，则条件变为真(true)。</td>\n<td align=\"left\">(a !&lt; b) is false.</td>\n</tr>\n<tr>\n<td align=\"left\">!&gt;</td>\n<td align=\"left\">检查左操作数的值是否不大于右操作数的值，如果是，则条件变为真(true)。</td>\n<td align=\"left\">(a !&gt; b) is true.</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-逻辑运算符：\"><a href=\"#SQL-逻辑运算符：\" class=\"headerlink\" title=\"SQL 逻辑运算符：\"></a>SQL 逻辑运算符：</h2><hr>\n<p>这是在 SQL 所有的逻辑运算符的列表。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">ALL</td>\n<td align=\"left\">ALL运算符用于将值与另一个值集中的所有值进行比较。</td>\n</tr>\n<tr>\n<td align=\"left\">AND</td>\n<td align=\"left\">AND运算符允许在SQL语句的WHERE子句中指定多个条件。</td>\n</tr>\n<tr>\n<td align=\"left\">ANY</td>\n<td align=\"left\">ANY运算符用于根据条件将值与列表中的任何适用值进行比较。</td>\n</tr>\n<tr>\n<td align=\"left\">BETWEEN</td>\n<td align=\"left\">BETWEEN运算符用于搜索在给定最小值和最大值内的值。</td>\n</tr>\n<tr>\n<td align=\"left\">EXISTS</td>\n<td align=\"left\">EXISTS运算符用于搜索指定表中是否存在满足特定条件的行。</td>\n</tr>\n<tr>\n<td align=\"left\"></td>\n<td align=\"left\">IN运算符用于将值与已指定的文字值列表进行比较。</td>\n</tr>\n<tr>\n<td align=\"left\">LIKE</td>\n<td align=\"left\">LIKE运算符用于使用通配符运算符将值与类似值进行比较。</td>\n</tr>\n<tr>\n<td align=\"left\">NOT</td>\n<td align=\"left\">NOT运算符反转使用它的逻辑运算符的含义。 例如：NOT EXISTS, NOT BETWEEN, NOT IN等等，这是一个否定运算符。</td>\n</tr>\n<tr>\n<td align=\"left\">OR</td>\n<td align=\"left\">OR运算符用于组合SQL语句的WHERE子句中的多个条件。</td>\n</tr>\n<tr>\n<td align=\"left\">IS NULL</td>\n<td align=\"left\">IS NULL运算符用于将值与NULL值进行比较。</td>\n</tr>\n<tr>\n<td align=\"left\">UNIQUE</td>\n<td align=\"left\">UNIQUE运算符搜索指定表的每一行的唯一性(无重复项)。</td>\n</tr>\n</tbody></table>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 查询子句","order":6,"_content":"\n## SQL WHERE 子句\n\n------\n\nWHERE 子句用于过滤记录。\n\nWHERE 子句用于提取满足指定标准的记录。\n\n\n\n### SQL WHERE 语法\n\n```\nSELECT column1, column2, ...\nFROM table_name\nWHERE condition;\n```\n\n**注意：** WHERE子句不仅用于SELECT语法，还用于UPDATE，DELETE语法等！\n\nWHERE子句可以与以下类型的SQL语句一起使用：\n\n- UPDATE\n- DELETE\n\nUPDATE语句：\n\n```\nUPDATE \"table_name\"\nSET \"column_1\" = [new value]\nWHERE \"condition\";\n```\n\nDELETE语句：\n\n```\nDELETE FROM \"table_name\" WHERE \"condition\";\n```\n\n\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n　以下是 \"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n\n\n## WHERE 子句实例\n\n------\n\n以下SQL语句从\"Customers\"表中选择其国家为\"Mexico\"的所有客户：\n\n示例:\n\n```\nSELECT * FROM Customers WHERE Country='Mexico';\n```\n\n你也可以使用OR运算符的查询子句：\n\n示例:\n\n```\nSELECT * FROM Customers WHERE Country='Mexico' OR PostalCode='05021';\n```\n\n\n\n## 文本字段与数值字段\n\n------\n\nSQL在文本值周围使用单引号（大多数数据库系统也接受双引号）。\n\n如果是数值字段，则不要使用引号。\n\n示例:\n\n```\nSELECT * FROM Customers WHERE CustomerID=1;\n```\n\n\n\n## WHERE 子句中的运算符\n\n------\n\nWHERE子句中可以使用以下运算符：\n\n| 运算符  | 描述                                                        |\n| :------ | :---------------------------------------------------------- |\n| =       | 等于                                                        |\n| <>      | 不等于。 **注意** ：在某些版本的SQL中，这个操作符可能写成!= |\n| >       | 大于                                                        |\n| <       | 小于                                                        |\n| >=      | 大于等于                                                    |\n| <=      | 小于等于                                                    |\n| BETWEEN | 在某个范围内                                                |\n| LIKE    | 搜索某种模式                                                |\n| IN      | 为列指定多个可能的值                                        |\n","source":"wiki/sql/sentence/ziju.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 查询子句\norder: 6\n---\n\n## SQL WHERE 子句\n\n------\n\nWHERE 子句用于过滤记录。\n\nWHERE 子句用于提取满足指定标准的记录。\n\n\n\n### SQL WHERE 语法\n\n```\nSELECT column1, column2, ...\nFROM table_name\nWHERE condition;\n```\n\n**注意：** WHERE子句不仅用于SELECT语法，还用于UPDATE，DELETE语法等！\n\nWHERE子句可以与以下类型的SQL语句一起使用：\n\n- UPDATE\n- DELETE\n\nUPDATE语句：\n\n```\nUPDATE \"table_name\"\nSET \"column_1\" = [new value]\nWHERE \"condition\";\n```\n\nDELETE语句：\n\n```\nDELETE FROM \"table_name\" WHERE \"condition\";\n```\n\n\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的Northwind示例数据库。\n　以下是 \"Customers\" 表中的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n\n\n## WHERE 子句实例\n\n------\n\n以下SQL语句从\"Customers\"表中选择其国家为\"Mexico\"的所有客户：\n\n示例:\n\n```\nSELECT * FROM Customers WHERE Country='Mexico';\n```\n\n你也可以使用OR运算符的查询子句：\n\n示例:\n\n```\nSELECT * FROM Customers WHERE Country='Mexico' OR PostalCode='05021';\n```\n\n\n\n## 文本字段与数值字段\n\n------\n\nSQL在文本值周围使用单引号（大多数数据库系统也接受双引号）。\n\n如果是数值字段，则不要使用引号。\n\n示例:\n\n```\nSELECT * FROM Customers WHERE CustomerID=1;\n```\n\n\n\n## WHERE 子句中的运算符\n\n------\n\nWHERE子句中可以使用以下运算符：\n\n| 运算符  | 描述                                                        |\n| :------ | :---------------------------------------------------------- |\n| =       | 等于                                                        |\n| <>      | 不等于。 **注意** ：在某些版本的SQL中，这个操作符可能写成!= |\n| >       | 大于                                                        |\n| <       | 小于                                                        |\n| >=      | 大于等于                                                    |\n| <=      | 小于等于                                                    |\n| BETWEEN | 在某个范围内                                                |\n| LIKE    | 搜索某种模式                                                |\n| IN      | 为列指定多个可能的值                                        |\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-10T13:04:30.996Z","path":"wiki/sql/sentence/ziju.html","comments":1,"_id":"cmbreopjc001i65x0gryj6o42","content":"<h2 id=\"SQL-WHERE-子句\"><a href=\"#SQL-WHERE-子句\" class=\"headerlink\" title=\"SQL WHERE 子句\"></a>SQL WHERE 子句</h2><hr>\n<p>WHERE 子句用于过滤记录。</p>\n<p>WHERE 子句用于提取满足指定标准的记录。</p>\n<h3 id=\"SQL-WHERE-语法\"><a href=\"#SQL-WHERE-语法\" class=\"headerlink\" title=\"SQL WHERE 语法\"></a>SQL WHERE 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2, ...</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong> WHERE子句不仅用于SELECT语法，还用于UPDATE，DELETE语法等！</p>\n<p>WHERE子句可以与以下类型的SQL语句一起使用：</p>\n<ul>\n<li>UPDATE</li>\n<li>DELETE</li>\n</ul>\n<p>UPDATE语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">UPDATE &quot;table_name&quot;</span><br><span class=\"line\">SET &quot;column_1&quot; = [new value]</span><br><span class=\"line\">WHERE &quot;condition&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>DELETE语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DELETE FROM &quot;table_name&quot; WHERE &quot;condition&quot;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。<br>　以下是 “Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"WHERE-子句实例\"><a href=\"#WHERE-子句实例\" class=\"headerlink\" title=\"WHERE 子句实例\"></a>WHERE 子句实例</h2><hr>\n<p>以下SQL语句从”Customers”表中选择其国家为”Mexico”的所有客户：</p>\n<p>示例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers WHERE Country=&#x27;Mexico&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>你也可以使用OR运算符的查询子句：</p>\n<p>示例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers WHERE Country=&#x27;Mexico&#x27; OR PostalCode=&#x27;05021&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"文本字段与数值字段\"><a href=\"#文本字段与数值字段\" class=\"headerlink\" title=\"文本字段与数值字段\"></a>文本字段与数值字段</h2><hr>\n<p>SQL在文本值周围使用单引号（大多数数据库系统也接受双引号）。</p>\n<p>如果是数值字段，则不要使用引号。</p>\n<p>示例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers WHERE CustomerID=1;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"WHERE-子句中的运算符\"><a href=\"#WHERE-子句中的运算符\" class=\"headerlink\" title=\"WHERE 子句中的运算符\"></a>WHERE 子句中的运算符</h2><hr>\n<p>WHERE子句中可以使用以下运算符：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&#x3D;</td>\n<td align=\"left\">等于</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&gt;</td>\n<td align=\"left\">不等于。 <strong>注意</strong> ：在某些版本的SQL中，这个操作符可能写成!&#x3D;</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;</td>\n<td align=\"left\">大于</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;</td>\n<td align=\"left\">小于</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;&#x3D;</td>\n<td align=\"left\">大于等于</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&#x3D;</td>\n<td align=\"left\">小于等于</td>\n</tr>\n<tr>\n<td align=\"left\">BETWEEN</td>\n<td align=\"left\">在某个范围内</td>\n</tr>\n<tr>\n<td align=\"left\">LIKE</td>\n<td align=\"left\">搜索某种模式</td>\n</tr>\n<tr>\n<td align=\"left\">IN</td>\n<td align=\"left\">为列指定多个可能的值</td>\n</tr>\n</tbody></table>\n","excerpt":"","more":"<h2 id=\"SQL-WHERE-子句\"><a href=\"#SQL-WHERE-子句\" class=\"headerlink\" title=\"SQL WHERE 子句\"></a>SQL WHERE 子句</h2><hr>\n<p>WHERE 子句用于过滤记录。</p>\n<p>WHERE 子句用于提取满足指定标准的记录。</p>\n<h3 id=\"SQL-WHERE-语法\"><a href=\"#SQL-WHERE-语法\" class=\"headerlink\" title=\"SQL WHERE 语法\"></a>SQL WHERE 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2, ...</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong> WHERE子句不仅用于SELECT语法，还用于UPDATE，DELETE语法等！</p>\n<p>WHERE子句可以与以下类型的SQL语句一起使用：</p>\n<ul>\n<li>UPDATE</li>\n<li>DELETE</li>\n</ul>\n<p>UPDATE语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">UPDATE &quot;table_name&quot;</span><br><span class=\"line\">SET &quot;column_1&quot; = [new value]</span><br><span class=\"line\">WHERE &quot;condition&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>DELETE语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DELETE FROM &quot;table_name&quot; WHERE &quot;condition&quot;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的Northwind示例数据库。<br>　以下是 “Customers” 表中的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"WHERE-子句实例\"><a href=\"#WHERE-子句实例\" class=\"headerlink\" title=\"WHERE 子句实例\"></a>WHERE 子句实例</h2><hr>\n<p>以下SQL语句从”Customers”表中选择其国家为”Mexico”的所有客户：</p>\n<p>示例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers WHERE Country=&#x27;Mexico&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>你也可以使用OR运算符的查询子句：</p>\n<p>示例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers WHERE Country=&#x27;Mexico&#x27; OR PostalCode=&#x27;05021&#x27;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"文本字段与数值字段\"><a href=\"#文本字段与数值字段\" class=\"headerlink\" title=\"文本字段与数值字段\"></a>文本字段与数值字段</h2><hr>\n<p>SQL在文本值周围使用单引号（大多数数据库系统也接受双引号）。</p>\n<p>如果是数值字段，则不要使用引号。</p>\n<p>示例:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers WHERE CustomerID=1;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"WHERE-子句中的运算符\"><a href=\"#WHERE-子句中的运算符\" class=\"headerlink\" title=\"WHERE 子句中的运算符\"></a>WHERE 子句中的运算符</h2><hr>\n<p>WHERE子句中可以使用以下运算符：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">运算符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">&#x3D;</td>\n<td align=\"left\">等于</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&gt;</td>\n<td align=\"left\">不等于。 <strong>注意</strong> ：在某些版本的SQL中，这个操作符可能写成!&#x3D;</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;</td>\n<td align=\"left\">大于</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;</td>\n<td align=\"left\">小于</td>\n</tr>\n<tr>\n<td align=\"left\">&gt;&#x3D;</td>\n<td align=\"left\">大于等于</td>\n</tr>\n<tr>\n<td align=\"left\">&lt;&#x3D;</td>\n<td align=\"left\">小于等于</td>\n</tr>\n<tr>\n<td align=\"left\">BETWEEN</td>\n<td align=\"left\">在某个范围内</td>\n</tr>\n<tr>\n<td align=\"left\">LIKE</td>\n<td align=\"left\">搜索某种模式</td>\n</tr>\n<tr>\n<td align=\"left\">IN</td>\n<td align=\"left\">为列指定多个可能的值</td>\n</tr>\n</tbody></table>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 选择","order":4,"_content":"\n## SQL SELECT 语法\n\n------\n\nSELECT 语法用于从数据库中选择数据。\n\n返回的数据存储在结果表中，称为结果集。\n\n### 基本语法：SELECT和FROM\n\n在任何SQL查询语句中都：SELECT和FROM他们必须按顺序排列。SELECT指示要查看哪些列，FROM标识它们所在的表。\n\nSQL SELECT 语法如下所示：\n\n```\nSELECT column1, column2, ...\nFROM table_name;\n```\n\n这里，column1，column2，...是要从中选择数据的表的字段名称。如果要选择表中可用的所有字段，请使用以下语法：\n\n```\nSELECT * FROM table_name;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是罗斯文示例数据库中\"Customers\"表的一个选择：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SELECT Column 实例\n\n------\n\n我们将为以下三种用例提供实例\n\n> 1、检索一列\n> 2、检索多列\n> 3、检索所有列\n\n我们将用上述的\"Customers\"表来说明三种用例的使用。\n\n### SELECT 检索一列\n\n下面的 SQL 语句从 \"Customers\" 表中选取 \"City\" 列：\n\n## 实例\n\n```\nSELECT City FROM Customers;\n```\n\n\n\n### SELECT 检索多列\n\n下面的 SQL 语句从 \"Customers\" 表中选取 \"CustomerName\" 和 \"City\" 列：\n\n## 实例\n\n```\nSELECT CustomerName, City FROM Customers;\n```\n\n\n\n> **注意：**这两个列名在查询中用逗号分隔。每当您选择多个列时，它们必须用逗号分隔，但最后一列名称之后不能添加逗号。\n\n### SELECT * 实例 - 检索所有列\n\n下面的 SQL 语句从 \"Customers\" 表中选取所有列：\n\n## 实例\n\n```\nSELECT * FROM Customers;\n```\n\n如果要选择表中的所有列，则可以使用 * 而不需要把所有列名罗列查询。\n\n## 结果集中的导航\n\n------\n\n大多数数据库软件系统都允许使用编程函数在结果集中进行导航，例如：Move-To-First-Record、Get-Record-Content、Move-To-Next-Record 等等。\n\n本教程中不包括与这些编程函数类似的功能。要了解如何通过函数调用访问数据，请访问我们的 或者 。\n","source":"wiki/sql/sentence/xuanze.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 选择\norder: 4\n---\n\n## SQL SELECT 语法\n\n------\n\nSELECT 语法用于从数据库中选择数据。\n\n返回的数据存储在结果表中，称为结果集。\n\n### 基本语法：SELECT和FROM\n\n在任何SQL查询语句中都：SELECT和FROM他们必须按顺序排列。SELECT指示要查看哪些列，FROM标识它们所在的表。\n\nSQL SELECT 语法如下所示：\n\n```\nSELECT column1, column2, ...\nFROM table_name;\n```\n\n这里，column1，column2，...是要从中选择数据的表的字段名称。如果要选择表中可用的所有字段，请使用以下语法：\n\n```\nSELECT * FROM table_name;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是罗斯文示例数据库中\"Customers\"表的一个选择：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SELECT Column 实例\n\n------\n\n我们将为以下三种用例提供实例\n\n> 1、检索一列\n> 2、检索多列\n> 3、检索所有列\n\n我们将用上述的\"Customers\"表来说明三种用例的使用。\n\n### SELECT 检索一列\n\n下面的 SQL 语句从 \"Customers\" 表中选取 \"City\" 列：\n\n## 实例\n\n```\nSELECT City FROM Customers;\n```\n\n\n\n### SELECT 检索多列\n\n下面的 SQL 语句从 \"Customers\" 表中选取 \"CustomerName\" 和 \"City\" 列：\n\n## 实例\n\n```\nSELECT CustomerName, City FROM Customers;\n```\n\n\n\n> **注意：**这两个列名在查询中用逗号分隔。每当您选择多个列时，它们必须用逗号分隔，但最后一列名称之后不能添加逗号。\n\n### SELECT * 实例 - 检索所有列\n\n下面的 SQL 语句从 \"Customers\" 表中选取所有列：\n\n## 实例\n\n```\nSELECT * FROM Customers;\n```\n\n如果要选择表中的所有列，则可以使用 * 而不需要把所有列名罗列查询。\n\n## 结果集中的导航\n\n------\n\n大多数数据库软件系统都允许使用编程函数在结果集中进行导航，例如：Move-To-First-Record、Get-Record-Content、Move-To-Next-Record 等等。\n\n本教程中不包括与这些编程函数类似的功能。要了解如何通过函数调用访问数据，请访问我们的 或者 。\n","date":"2025-06-11T03:39:55.331Z","updated":"2025-06-10T10:07:29.785Z","path":"wiki/sql/sentence/xuanze.html","comments":1,"_id":"cmbreopjc001j65x050t1e4bd","content":"<h2 id=\"SQL-SELECT-语法\"><a href=\"#SQL-SELECT-语法\" class=\"headerlink\" title=\"SQL SELECT 语法\"></a>SQL SELECT 语法</h2><hr>\n<p>SELECT 语法用于从数据库中选择数据。</p>\n<p>返回的数据存储在结果表中，称为结果集。</p>\n<h3 id=\"基本语法：SELECT和FROM\"><a href=\"#基本语法：SELECT和FROM\" class=\"headerlink\" title=\"基本语法：SELECT和FROM\"></a>基本语法：SELECT和FROM</h3><p>在任何SQL查询语句中都：SELECT和FROM他们必须按顺序排列。SELECT指示要查看哪些列，FROM标识它们所在的表。</p>\n<p>SQL SELECT 语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2, ...</span><br><span class=\"line\">FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<p>这里，column1，column2，…是要从中选择数据的表的字段名称。如果要选择表中可用的所有字段，请使用以下语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是罗斯文示例数据库中”Customers”表的一个选择：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SELECT-Column-实例\"><a href=\"#SELECT-Column-实例\" class=\"headerlink\" title=\"SELECT Column 实例\"></a>SELECT Column 实例</h2><hr>\n<p>我们将为以下三种用例提供实例</p>\n<blockquote>\n<p>1、检索一列<br>2、检索多列<br>3、检索所有列</p>\n</blockquote>\n<p>我们将用上述的”Customers”表来说明三种用例的使用。</p>\n<h3 id=\"SELECT-检索一列\"><a href=\"#SELECT-检索一列\" class=\"headerlink\" title=\"SELECT 检索一列\"></a>SELECT 检索一列</h3><p>下面的 SQL 语句从 “Customers” 表中选取 “City” 列：</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT City FROM Customers;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"SELECT-检索多列\"><a href=\"#SELECT-检索多列\" class=\"headerlink\" title=\"SELECT 检索多列\"></a>SELECT 检索多列</h3><p>下面的 SQL 语句从 “Customers” 表中选取 “CustomerName” 和 “City” 列：</p>\n<h2 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerName, City FROM Customers;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>**注意：**这两个列名在查询中用逗号分隔。每当您选择多个列时，它们必须用逗号分隔，但最后一列名称之后不能添加逗号。</p>\n</blockquote>\n<h3 id=\"SELECT-实例-检索所有列\"><a href=\"#SELECT-实例-检索所有列\" class=\"headerlink\" title=\"SELECT * 实例 - 检索所有列\"></a>SELECT * 实例 - 检索所有列</h3><p>下面的 SQL 语句从 “Customers” 表中选取所有列：</p>\n<h2 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>如果要选择表中的所有列，则可以使用 * 而不需要把所有列名罗列查询。</p>\n<h2 id=\"结果集中的导航\"><a href=\"#结果集中的导航\" class=\"headerlink\" title=\"结果集中的导航\"></a>结果集中的导航</h2><hr>\n<p>大多数数据库软件系统都允许使用编程函数在结果集中进行导航，例如：Move-To-First-Record、Get-Record-Content、Move-To-Next-Record 等等。</p>\n<p>本教程中不包括与这些编程函数类似的功能。要了解如何通过函数调用访问数据，请访问我们的 或者 。</p>\n","excerpt":"","more":"<h2 id=\"SQL-SELECT-语法\"><a href=\"#SQL-SELECT-语法\" class=\"headerlink\" title=\"SQL SELECT 语法\"></a>SQL SELECT 语法</h2><hr>\n<p>SELECT 语法用于从数据库中选择数据。</p>\n<p>返回的数据存储在结果表中，称为结果集。</p>\n<h3 id=\"基本语法：SELECT和FROM\"><a href=\"#基本语法：SELECT和FROM\" class=\"headerlink\" title=\"基本语法：SELECT和FROM\"></a>基本语法：SELECT和FROM</h3><p>在任何SQL查询语句中都：SELECT和FROM他们必须按顺序排列。SELECT指示要查看哪些列，FROM标识它们所在的表。</p>\n<p>SQL SELECT 语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2, ...</span><br><span class=\"line\">FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<p>这里，column1，column2，…是要从中选择数据的表的字段名称。如果要选择表中可用的所有字段，请使用以下语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是罗斯文示例数据库中”Customers”表的一个选择：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SELECT-Column-实例\"><a href=\"#SELECT-Column-实例\" class=\"headerlink\" title=\"SELECT Column 实例\"></a>SELECT Column 实例</h2><hr>\n<p>我们将为以下三种用例提供实例</p>\n<blockquote>\n<p>1、检索一列<br>2、检索多列<br>3、检索所有列</p>\n</blockquote>\n<p>我们将用上述的”Customers”表来说明三种用例的使用。</p>\n<h3 id=\"SELECT-检索一列\"><a href=\"#SELECT-检索一列\" class=\"headerlink\" title=\"SELECT 检索一列\"></a>SELECT 检索一列</h3><p>下面的 SQL 语句从 “Customers” 表中选取 “City” 列：</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT City FROM Customers;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"SELECT-检索多列\"><a href=\"#SELECT-检索多列\" class=\"headerlink\" title=\"SELECT 检索多列\"></a>SELECT 检索多列</h3><p>下面的 SQL 语句从 “Customers” 表中选取 “CustomerName” 和 “City” 列：</p>\n<h2 id=\"实例-1\"><a href=\"#实例-1\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerName, City FROM Customers;</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>**注意：**这两个列名在查询中用逗号分隔。每当您选择多个列时，它们必须用逗号分隔，但最后一列名称之后不能添加逗号。</p>\n</blockquote>\n<h3 id=\"SELECT-实例-检索所有列\"><a href=\"#SELECT-实例-检索所有列\" class=\"headerlink\" title=\"SELECT * 实例 - 检索所有列\"></a>SELECT * 实例 - 检索所有列</h3><p>下面的 SQL 语句从 “Customers” 表中选取所有列：</p>\n<h2 id=\"实例-2\"><a href=\"#实例-2\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT * FROM Customers;</span><br></pre></td></tr></table></figure>\n\n<p>如果要选择表中的所有列，则可以使用 * 而不需要把所有列名罗列查询。</p>\n<h2 id=\"结果集中的导航\"><a href=\"#结果集中的导航\" class=\"headerlink\" title=\"结果集中的导航\"></a>结果集中的导航</h2><hr>\n<p>大多数数据库软件系统都允许使用编程函数在结果集中进行导航，例如：Move-To-First-Record、Get-Record-Content、Move-To-Next-Record 等等。</p>\n<p>本教程中不包括与这些编程函数类似的功能。要了解如何通过函数调用访问数据，请访问我们的 或者 。</p>\n"},{"layout":"wiki","wiki":"sql","title":"SQL COUNT() 函数","order":4,"_content":"\n## COUNT() 函数\n\nCOUNT() 函数返回匹配指定条件的行数。\n\n\n\n### SQL COUNT(column_name) 语法\n\nCOUNT(column_name) 函数返回指定列的值的数目（NULL 不计入）：\n\n```\nSELECT COUNT(column_name) FROM table_name;\n```\n\n\n\n### SQL COUNT(*) 语法\n\nCOUNT(*) 函数返回表中的记录数：\n\n```\nSELECT COUNT(*) FROM table_name;\n```\n\n\n\n### SQL COUNT(DISTINCT column_name) 语法\n\nCOUNT(DISTINCT column_name) 函数返回指定列的不同值的数目：\n\n```\nSELECT COUNT(DISTINCT column_name) FROM table_name;\n```\n\n\n\n注释：COUNT(DISTINCT) 适用于 ORACLE 和 Microsoft SQL Server，但是无法用于 Microsoft Access。\n\n## 演示数据库[](https://ngrok.cn/sql/sql-629.html#演示数据库)\n\n在本教程中，我们将使用 ngrok 样本数据库。\n\n下面是选自 \"access_log\" 表的数据：\n\n\n\n```\n+-----+---------+-------+------------+\n| aid | site_id | count | date       |\n+-----+---------+-------+------------+\n|   1 |       1 |    45 | 2016-05-10 |\n|   2 |       3 |   100 | 2016-05-13 |\n|   3 |       1 |   230 | 2016-05-14 |\n|   4 |       2 |    10 | 2016-05-14 |\n|   5 |       5 |   205 | 2016-05-14 |\n|   6 |       4 |    13 | 2016-05-15 |\n|   7 |       3 |   220 | 2016-05-15 |\n|   8 |       5 |   545 | 2016-05-16 |\n|   9 |       3 |   201 | 2016-05-17 |\n+-----+---------+-------+------------+\n```\n\n## SQL COUNT(column_name) 实例\n\n下面的 SQL 语句计算 \"access_log\" 表中 \"site_id\"=3 的总访问量：\n\n示例\n\n```\nSELECT COUNT(count) AS nums FROM access_log\nWHERE site_id=3;\n```\n\n\n\n## SQL COUNT(*) 实例\n\n下面的 SQL 语句计算 \"access_log\" 表中总记录数：\n\n示例\n\n```\nSELECT COUNT(*) AS nums FROM access_log;\n```\n\n\n\n执行以上 SQL 输出结果如下：\n\n## SQL COUNT(DISTINCT column_name) 实例mn-name-实例)\n\n下面的 SQL 语句计算 \"access_log\" 表中不同 site_id 的记录数：\n\n示例\n\n```\nSELECT COUNT(DISTINCT site_id) AS nums FROM access_log;\n```\n","source":"wiki/sql/function/count.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL COUNT() 函数\norder: 4\n---\n\n## COUNT() 函数\n\nCOUNT() 函数返回匹配指定条件的行数。\n\n\n\n### SQL COUNT(column_name) 语法\n\nCOUNT(column_name) 函数返回指定列的值的数目（NULL 不计入）：\n\n```\nSELECT COUNT(column_name) FROM table_name;\n```\n\n\n\n### SQL COUNT(*) 语法\n\nCOUNT(*) 函数返回表中的记录数：\n\n```\nSELECT COUNT(*) FROM table_name;\n```\n\n\n\n### SQL COUNT(DISTINCT column_name) 语法\n\nCOUNT(DISTINCT column_name) 函数返回指定列的不同值的数目：\n\n```\nSELECT COUNT(DISTINCT column_name) FROM table_name;\n```\n\n\n\n注释：COUNT(DISTINCT) 适用于 ORACLE 和 Microsoft SQL Server，但是无法用于 Microsoft Access。\n\n## 演示数据库[](https://ngrok.cn/sql/sql-629.html#演示数据库)\n\n在本教程中，我们将使用 ngrok 样本数据库。\n\n下面是选自 \"access_log\" 表的数据：\n\n\n\n```\n+-----+---------+-------+------------+\n| aid | site_id | count | date       |\n+-----+---------+-------+------------+\n|   1 |       1 |    45 | 2016-05-10 |\n|   2 |       3 |   100 | 2016-05-13 |\n|   3 |       1 |   230 | 2016-05-14 |\n|   4 |       2 |    10 | 2016-05-14 |\n|   5 |       5 |   205 | 2016-05-14 |\n|   6 |       4 |    13 | 2016-05-15 |\n|   7 |       3 |   220 | 2016-05-15 |\n|   8 |       5 |   545 | 2016-05-16 |\n|   9 |       3 |   201 | 2016-05-17 |\n+-----+---------+-------+------------+\n```\n\n## SQL COUNT(column_name) 实例\n\n下面的 SQL 语句计算 \"access_log\" 表中 \"site_id\"=3 的总访问量：\n\n示例\n\n```\nSELECT COUNT(count) AS nums FROM access_log\nWHERE site_id=3;\n```\n\n\n\n## SQL COUNT(*) 实例\n\n下面的 SQL 语句计算 \"access_log\" 表中总记录数：\n\n示例\n\n```\nSELECT COUNT(*) AS nums FROM access_log;\n```\n\n\n\n执行以上 SQL 输出结果如下：\n\n## SQL COUNT(DISTINCT column_name) 实例mn-name-实例)\n\n下面的 SQL 语句计算 \"access_log\" 表中不同 site_id 的记录数：\n\n示例\n\n```\nSELECT COUNT(DISTINCT site_id) AS nums FROM access_log;\n```\n","date":"2025-06-11T03:59:52.569Z","updated":"2025-06-11T03:59:52.565Z","path":"wiki/sql/function/count.html","comments":1,"_id":"cmbrf8odg0000onx0dbtfg1iu","content":"<h2 id=\"COUNT-函数\"><a href=\"#COUNT-函数\" class=\"headerlink\" title=\"COUNT() 函数\"></a>COUNT() 函数</h2><p>COUNT() 函数返回匹配指定条件的行数。</p>\n<h3 id=\"SQL-COUNT-column-name-语法\"><a href=\"#SQL-COUNT-column-name-语法\" class=\"headerlink\" title=\"SQL COUNT(column_name) 语法\"></a>SQL COUNT(column_name) 语法</h3><p>COUNT(column_name) 函数返回指定列的值的数目（NULL 不计入）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(column_name) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"SQL-COUNT-语法\"><a href=\"#SQL-COUNT-语法\" class=\"headerlink\" title=\"SQL COUNT(*) 语法\"></a>SQL COUNT(*) 语法</h3><p>COUNT(*) 函数返回表中的记录数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(*) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"SQL-COUNT-DISTINCT-column-name-语法\"><a href=\"#SQL-COUNT-DISTINCT-column-name-语法\" class=\"headerlink\" title=\"SQL COUNT(DISTINCT column_name) 语法\"></a>SQL COUNT(DISTINCT column_name) 语法</h3><p>COUNT(DISTINCT column_name) 函数返回指定列的不同值的数目：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(DISTINCT column_name) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>注释：COUNT(DISTINCT) 适用于 ORACLE 和 Microsoft SQL Server，但是无法用于 Microsoft Access。</p>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库<a href=\"https://ngrok.cn/sql/sql-629.html#%E6%BC%94%E7%A4%BA%E6%95%B0%E6%8D%AE%E5%BA%93\"></a></h2><p>在本教程中，我们将使用 ngrok 样本数据库。</p>\n<p>下面是选自 “access_log” 表的数据：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-----+---------+-------+------------+</span><br><span class=\"line\">| aid | site_id | count | date       |</span><br><span class=\"line\">+-----+---------+-------+------------+</span><br><span class=\"line\">|   1 |       1 |    45 | 2016-05-10 |</span><br><span class=\"line\">|   2 |       3 |   100 | 2016-05-13 |</span><br><span class=\"line\">|   3 |       1 |   230 | 2016-05-14 |</span><br><span class=\"line\">|   4 |       2 |    10 | 2016-05-14 |</span><br><span class=\"line\">|   5 |       5 |   205 | 2016-05-14 |</span><br><span class=\"line\">|   6 |       4 |    13 | 2016-05-15 |</span><br><span class=\"line\">|   7 |       3 |   220 | 2016-05-15 |</span><br><span class=\"line\">|   8 |       5 |   545 | 2016-05-16 |</span><br><span class=\"line\">|   9 |       3 |   201 | 2016-05-17 |</span><br><span class=\"line\">+-----+---------+-------+------------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SQL-COUNT-column-name-实例\"><a href=\"#SQL-COUNT-column-name-实例\" class=\"headerlink\" title=\"SQL COUNT(column_name) 实例\"></a>SQL COUNT(column_name) 实例</h2><p>下面的 SQL 语句计算 “access_log” 表中 “site_id”&#x3D;3 的总访问量：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(count) AS nums FROM access_log</span><br><span class=\"line\">WHERE site_id=3;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"SQL-COUNT-实例\"><a href=\"#SQL-COUNT-实例\" class=\"headerlink\" title=\"SQL COUNT(*) 实例\"></a>SQL COUNT(*) 实例</h2><p>下面的 SQL 语句计算 “access_log” 表中总记录数：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(*) AS nums FROM access_log;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行以上 SQL 输出结果如下：</p>\n<h2 id=\"SQL-COUNT-DISTINCT-column-name-实例mn-name-实例\"><a href=\"#SQL-COUNT-DISTINCT-column-name-实例mn-name-实例\" class=\"headerlink\" title=\"SQL COUNT(DISTINCT column_name) 实例mn-name-实例)\"></a>SQL COUNT(DISTINCT column_name) 实例mn-name-实例)</h2><p>下面的 SQL 语句计算 “access_log” 表中不同 site_id 的记录数：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(DISTINCT site_id) AS nums FROM access_log;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"COUNT-函数\"><a href=\"#COUNT-函数\" class=\"headerlink\" title=\"COUNT() 函数\"></a>COUNT() 函数</h2><p>COUNT() 函数返回匹配指定条件的行数。</p>\n<h3 id=\"SQL-COUNT-column-name-语法\"><a href=\"#SQL-COUNT-column-name-语法\" class=\"headerlink\" title=\"SQL COUNT(column_name) 语法\"></a>SQL COUNT(column_name) 语法</h3><p>COUNT(column_name) 函数返回指定列的值的数目（NULL 不计入）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(column_name) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"SQL-COUNT-语法\"><a href=\"#SQL-COUNT-语法\" class=\"headerlink\" title=\"SQL COUNT(*) 语法\"></a>SQL COUNT(*) 语法</h3><p>COUNT(*) 函数返回表中的记录数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(*) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"SQL-COUNT-DISTINCT-column-name-语法\"><a href=\"#SQL-COUNT-DISTINCT-column-name-语法\" class=\"headerlink\" title=\"SQL COUNT(DISTINCT column_name) 语法\"></a>SQL COUNT(DISTINCT column_name) 语法</h3><p>COUNT(DISTINCT column_name) 函数返回指定列的不同值的数目：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(DISTINCT column_name) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>注释：COUNT(DISTINCT) 适用于 ORACLE 和 Microsoft SQL Server，但是无法用于 Microsoft Access。</p>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库<a href=\"https://ngrok.cn/sql/sql-629.html#%E6%BC%94%E7%A4%BA%E6%95%B0%E6%8D%AE%E5%BA%93\"></a></h2><p>在本教程中，我们将使用 ngrok 样本数据库。</p>\n<p>下面是选自 “access_log” 表的数据：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+-----+---------+-------+------------+</span><br><span class=\"line\">| aid | site_id | count | date       |</span><br><span class=\"line\">+-----+---------+-------+------------+</span><br><span class=\"line\">|   1 |       1 |    45 | 2016-05-10 |</span><br><span class=\"line\">|   2 |       3 |   100 | 2016-05-13 |</span><br><span class=\"line\">|   3 |       1 |   230 | 2016-05-14 |</span><br><span class=\"line\">|   4 |       2 |    10 | 2016-05-14 |</span><br><span class=\"line\">|   5 |       5 |   205 | 2016-05-14 |</span><br><span class=\"line\">|   6 |       4 |    13 | 2016-05-15 |</span><br><span class=\"line\">|   7 |       3 |   220 | 2016-05-15 |</span><br><span class=\"line\">|   8 |       5 |   545 | 2016-05-16 |</span><br><span class=\"line\">|   9 |       3 |   201 | 2016-05-17 |</span><br><span class=\"line\">+-----+---------+-------+------------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SQL-COUNT-column-name-实例\"><a href=\"#SQL-COUNT-column-name-实例\" class=\"headerlink\" title=\"SQL COUNT(column_name) 实例\"></a>SQL COUNT(column_name) 实例</h2><p>下面的 SQL 语句计算 “access_log” 表中 “site_id”&#x3D;3 的总访问量：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(count) AS nums FROM access_log</span><br><span class=\"line\">WHERE site_id=3;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"SQL-COUNT-实例\"><a href=\"#SQL-COUNT-实例\" class=\"headerlink\" title=\"SQL COUNT(*) 实例\"></a>SQL COUNT(*) 实例</h2><p>下面的 SQL 语句计算 “access_log” 表中总记录数：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(*) AS nums FROM access_log;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行以上 SQL 输出结果如下：</p>\n<h2 id=\"SQL-COUNT-DISTINCT-column-name-实例mn-name-实例\"><a href=\"#SQL-COUNT-DISTINCT-column-name-实例mn-name-实例\" class=\"headerlink\" title=\"SQL COUNT(DISTINCT column_name) 实例mn-name-实例)\"></a>SQL COUNT(DISTINCT column_name) 实例mn-name-实例)</h2><p>下面的 SQL 语句计算 “access_log” 表中不同 site_id 的记录数：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(DISTINCT site_id) AS nums FROM access_log;</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL AVG() 函数","order":5,"_content":"\n## SQL AVG() 函数\n\n------\n\n### AVG() 函数\n\nAVG() 函数返回数字列的平均值。\n\n\n\n### AVG() 语法\n\n```\nSELECT AVG(column_name)\nFROM table_name\nWHERE condition;\n```\n\n\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的 Northwind 样本数据库。\n\n下面是选自 \"Products\" 表的数据：\n\n| ProductID | ProductName                  | SupplierID | CategoryID | Unit                | Price |\n| :-------- | :--------------------------- | :--------- | :--------- | :------------------ | :---- |\n| 1         | Chais                        | 1          | 1          | 10 boxes x 20 bags  | 18    |\n| 2         | Chang                        | 1          | 1          | 24 - 12 oz bottles  | 19    |\n| 3         | Aniseed Syrup                | 1          | 2          | 12 - 550 ml bottles | 10    |\n| 4         | Chef Anton's Cajun Seasoning | 2          | 2          | 48 - 6 oz jars      | 22    |\n| 5         | Chef Anton's Gumbo Mix       | 2          | 2          | 36 boxes            | 21.35 |\n\n\n\n## SQL AVG() 实例\n\n------\n\n以下SQL语句查找所有产品的平均价格：\n\n示例\n\n```\nSELECT AVG(Price)\nFROM Products;\n```\n\n下面的 SQL 语句选择价格高于平均价格的 \"ProductName\" 和 \"Price\" 记录：\n\n示例\n\n```\nSELECT ProductName, Price FROM Products\nWHERE Price>(SELECT AVG(Price) FROM Products);\n```\n\n","source":"wiki/sql/function/avg.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL AVG() 函数\norder: 5\n---\n\n## SQL AVG() 函数\n\n------\n\n### AVG() 函数\n\nAVG() 函数返回数字列的平均值。\n\n\n\n### AVG() 语法\n\n```\nSELECT AVG(column_name)\nFROM table_name\nWHERE condition;\n```\n\n\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用著名的 Northwind 样本数据库。\n\n下面是选自 \"Products\" 表的数据：\n\n| ProductID | ProductName                  | SupplierID | CategoryID | Unit                | Price |\n| :-------- | :--------------------------- | :--------- | :--------- | :------------------ | :---- |\n| 1         | Chais                        | 1          | 1          | 10 boxes x 20 bags  | 18    |\n| 2         | Chang                        | 1          | 1          | 24 - 12 oz bottles  | 19    |\n| 3         | Aniseed Syrup                | 1          | 2          | 12 - 550 ml bottles | 10    |\n| 4         | Chef Anton's Cajun Seasoning | 2          | 2          | 48 - 6 oz jars      | 22    |\n| 5         | Chef Anton's Gumbo Mix       | 2          | 2          | 36 boxes            | 21.35 |\n\n\n\n## SQL AVG() 实例\n\n------\n\n以下SQL语句查找所有产品的平均价格：\n\n示例\n\n```\nSELECT AVG(Price)\nFROM Products;\n```\n\n下面的 SQL 语句选择价格高于平均价格的 \"ProductName\" 和 \"Price\" 记录：\n\n示例\n\n```\nSELECT ProductName, Price FROM Products\nWHERE Price>(SELECT AVG(Price) FROM Products);\n```\n\n","date":"2025-06-11T06:10:38.950Z","updated":"2025-06-11T06:10:38.950Z","path":"wiki/sql/function/avg.html","comments":1,"_id":"cmbrkcwvf00009dx01z0vc680","content":"<h2 id=\"SQL-AVG-函数\"><a href=\"#SQL-AVG-函数\" class=\"headerlink\" title=\"SQL AVG() 函数\"></a>SQL AVG() 函数</h2><hr>\n<h3 id=\"AVG-函数\"><a href=\"#AVG-函数\" class=\"headerlink\" title=\"AVG() 函数\"></a>AVG() 函数</h3><p>AVG() 函数返回数字列的平均值。</p>\n<h3 id=\"AVG-语法\"><a href=\"#AVG-语法\" class=\"headerlink\" title=\"AVG() 语法\"></a>AVG() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT AVG(column_name)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的 Northwind 样本数据库。</p>\n<p>下面是选自 “Products” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">ProductID</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">SupplierID</th>\n<th align=\"left\">CategoryID</th>\n<th align=\"left\">Unit</th>\n<th align=\"left\">Price</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Chais</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">10 boxes x 20 bags</td>\n<td align=\"left\">18</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Chang</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">24 - 12 oz bottles</td>\n<td align=\"left\">19</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Aniseed Syrup</td>\n<td align=\"left\">1</td>\n<td align=\"left\">2</td>\n<td align=\"left\">12 - 550 ml bottles</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Chef Anton’s Cajun Seasoning</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">48 - 6 oz jars</td>\n<td align=\"left\">22</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Chef Anton’s Gumbo Mix</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">36 boxes</td>\n<td align=\"left\">21.35</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-AVG-实例\"><a href=\"#SQL-AVG-实例\" class=\"headerlink\" title=\"SQL AVG() 实例\"></a>SQL AVG() 实例</h2><hr>\n<p>以下SQL语句查找所有产品的平均价格：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT AVG(Price)</span><br><span class=\"line\">FROM Products;</span><br></pre></td></tr></table></figure>\n\n<p>下面的 SQL 语句选择价格高于平均价格的 “ProductName” 和 “Price” 记录：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ProductName, Price FROM Products</span><br><span class=\"line\">WHERE Price&gt;(SELECT AVG(Price) FROM Products);</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"SQL-AVG-函数\"><a href=\"#SQL-AVG-函数\" class=\"headerlink\" title=\"SQL AVG() 函数\"></a>SQL AVG() 函数</h2><hr>\n<h3 id=\"AVG-函数\"><a href=\"#AVG-函数\" class=\"headerlink\" title=\"AVG() 函数\"></a>AVG() 函数</h3><p>AVG() 函数返回数字列的平均值。</p>\n<h3 id=\"AVG-语法\"><a href=\"#AVG-语法\" class=\"headerlink\" title=\"AVG() 语法\"></a>AVG() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT AVG(column_name)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用著名的 Northwind 样本数据库。</p>\n<p>下面是选自 “Products” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">ProductID</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">SupplierID</th>\n<th align=\"left\">CategoryID</th>\n<th align=\"left\">Unit</th>\n<th align=\"left\">Price</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Chais</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">10 boxes x 20 bags</td>\n<td align=\"left\">18</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Chang</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">24 - 12 oz bottles</td>\n<td align=\"left\">19</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Aniseed Syrup</td>\n<td align=\"left\">1</td>\n<td align=\"left\">2</td>\n<td align=\"left\">12 - 550 ml bottles</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Chef Anton’s Cajun Seasoning</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">48 - 6 oz jars</td>\n<td align=\"left\">22</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Chef Anton’s Gumbo Mix</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">36 boxes</td>\n<td align=\"left\">21.35</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-AVG-实例\"><a href=\"#SQL-AVG-实例\" class=\"headerlink\" title=\"SQL AVG() 实例\"></a>SQL AVG() 实例</h2><hr>\n<p>以下SQL语句查找所有产品的平均价格：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT AVG(Price)</span><br><span class=\"line\">FROM Products;</span><br></pre></td></tr></table></figure>\n\n<p>下面的 SQL 语句选择价格高于平均价格的 “ProductName” 和 “Price” 记录：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ProductName, Price FROM Products</span><br><span class=\"line\">WHERE Price&gt;(SELECT AVG(Price) FROM Products);</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"wiki","wiki":"sql","title":"SQL 日期函数","order":7,"_content":"\n## SQL 日期函数\n\n------\n\n下面的列表中是 SQL 中所有与日期和时间相关的重要函数。你所用的 RDBMS 可能会支持更多其他的函数。下面的列表基于 MySQL 关系型数据库管理系统。\n\n|----------------------------------------|-----------------------------------------------------| | 名称 | 描述 | | ADDDATE() | 增加日期 | | ADDTIME() | 增加时间 | | CONVERT_TZ() | 将当前时区更改为另一时区 | | CURDATE() | 返回当前日期 | | CURRENT_DATE(), CURRENT_DATE | CURDATE() 的别名 | | CURRENT_TIME(), CURRENT_TIME | CURTIME() 的别名 | | CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP | NOW() 的别名 | | CURTIME() | 返回当前时间 | | DATE_ADD() | 将两个日期相加 | | DATE_FORMAT() | 按照指定格式格式化日期 | | DATE_SUB() | 将两个日期相减 | | DATE() | 从 date 或者 datetime 表达式中提取出日期部分 | | DATEDIFF() | 将两个日期相减 | | DAY() | DAYOFMONTH() 的别名 | | DAYNAME() | 返回某天在用星期中的名称 | | DAYOFMONTH() | 返回某天是当月的第几天 （1-31） | | DAYOFWEEK() | 返回某天是该星期的第几天 | | DAYOFYEAR() | 返回某天是一年中的第几天（1-366） | | EXTRACT | 提取日期中的某一部分 | | FROM_DAYS() | 将天数转换为日期 | | FROM_UNIXTIME() | 将某个日期格式化为 UNIX 时间戳 | | HOUR() | 提取小时 | | LAST_DAY | 返回参数日期所在月份的最后一天 | | LOCALTIME(), LOCALTIME | NOW() 的别名 | | LOCALTIMESTAMP, LOCALTIMESTAMP() | NOW() 的别名 | | MAKEDATE() | 利用年份和某天在该年所处的天数来创建日期 | | MAKETIME | MAKETIME() | | MICROSECOND() | 由参数返回微秒 | | MINUTE() | 由参数返回分钟 | | MONTH() | 返回日期参数的月份 | | MONTHNAME() | 返回月份的名字 | | NOW() | 返回当前日期和时间 | | PERIOD_ADD() | 向年月格式的日期数据之间添加一段时间 | | PERIOD_DIFF() | 返回两个年月格式的日期数据之间的月份数 | | QUARTER() | 返回日期参数所在的季度 | | SEC_TO_TIME() | 将秒数转换为 'HH:MM:SS' 格式 | | SECOND() | 返回参数中的秒数 (0-59) | | STR_TO_DATE() | 将字符串转换为日期数据 | | SUBDATE() | 以三个参数调用的时候是 DATE_SUB() 的同义词 | | SUBTIME() | 减去时间 | | SYSDATE() | 返回函数执行的时的时刻 | | TIME_FORMAT() | 格式化时间 | | TIME_TO_SEC() | 将时间参数转换为秒数 | | TIME() | 返回参数表达式中的时间部分 | | TIMEDIFF() | 将两个时间相减 | | TIMESTAMP() | 只有一个参数时，该函数返回 date 或者 datetime 表达式。当有两个参数时，将两个参数相加。 | | TIMESTAMPADD() | 在 datetime 表达式上加上一段时间 | | TIMESTAMPDIFF() | 在 datetime 表达式上减去一段时间 | | TO_DAYS() | 将日期参数转换为天数 | | UNIX_TIMESTAMP() | 返回 UNIX 时间戳 | | UTC_DATE() | 返回当前 UTC 日期 | | UTC_TIME() | 返回当前 UTC 时间 | | UTC_TIMESTAMP() | 返回当前 UTC 日期和时间 | | WEEK() | 返回参数的星期数 | | WEEKDAY() | 返回日期参数时一个星期中的第几天 | | WEEKOFYEAR() | 返回日期参数是日历上的第几周 (1-53) | | YEAR() | 返回日期参数中的年份 | | YEARWEEK() | 返回年份和星期 |\n\n## ADDDATE(date, INTERVAL expr unit), ADDDATE(expr, days)\n\n------\n\n如果调用时第二个参数为 INTERVAL 形式的话，ADDDATE() 就是 DATE_ADD() 的同义词。同样的情况下，SUBDATE() 是 DATE_SUB() 的同义词。有关 INTERVAL 单位参数的信息，见有关 DATE_ADD() 的讨论。\n\n```\nmysql> SELECT DATE_ADD('1998-01-02', INTERVAL 31 DAY);\n+---------------------------------------------------------+\n| DATE_ADD('1998-01-02', INTERVAL 31 DAY)                 |\n+---------------------------------------------------------+\n| 1998-02-02                                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT ADDDATE('1998-01-02', INTERVAL 31 DAY);\n+---------------------------------------------------------+\n| ADDDATE('1998-01-02', INTERVAL 31 DAY)                  |\n+---------------------------------------------------------+\n| 1998-02-02                                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n如果调用时第二个参数为天数形式的话，则 MySQL 会将其作为整数加到 expr 上。\n\n```\nmysql> SELECT ADDDATE('1998-01-02', 31);\n+---------------------------------------------------------+\n| DATE_ADD('1998-01-02', INTERVAL 31 DAY)                 |\n+---------------------------------------------------------+\n| 1998-02-02                                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## ADDTIME(expr1,expr2)\n\n------\n\nADDTIME() 将 expr2 加到 expr1 上，并返回结果。expr1 为 time 或者 datetime 表达式，expr2 为 time 表达式。\n\n```\nmysql> SELECT ADDTIME('1997-12-31 23:59:59.999999','1 1:1:1.000002');\n+---------------------------------------------------------+\n| DATE_ADD('1997-12-31 23:59:59.999999','1 1:1:1.000002') |\n+---------------------------------------------------------+\n| 1998-01-02 01:01:01.000001                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## CONVERT_TZ(dt,from_tz,to_tz)\n\n------\n\n该函数将 datetime 类型的值 dt 的时区从 from_dt 转换为 to_dt，并返回结果。如果参数无效，则函数返回 NULL。\n\n```\nmysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','GMT','MET');\n+---------------------------------------------------------+\n| CONVERT_TZ('2004-01-01 12:00:00','GMT','MET')           |\n+---------------------------------------------------------+\n| 2004-01-01 13:00:00                                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','+00:00','+10:00');\n+---------------------------------------------------------+\n| CONVERT_TZ('2004-01-01 12:00:00','+00:00','+10:00')     |\n+---------------------------------------------------------+\n| 2004-01-01 22:00:00                                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## CURDATE()\n\n------\n\n以 'YYYY-MM-DD'（字符串） 或者 YYYYMMDD（数值） 的形式返回当前日期， 具体形式取决于函数处于字符串还是数值型的上下文环境中。\n\n```\nmysql> SELECT CURDATE();\n+---------------------------------------------------------+\n| CURDATE()                                               |\n+---------------------------------------------------------+\n| 1997-12-15                                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT CURDATE() + 0;\n+---------------------------------------------------------+\n| CURDATE() + 0                                           |\n+---------------------------------------------------------+\n| 19971215                                                |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## CURRENT_DATE and CURRENT_DATE()\n\n------\n\nCURRENT_DATE 和 CURRENT_DATE() 是 CURDATE() 的别名。\n\n## CURTIME()\n\n------\n\n以 'HH:MM:SS'（字符串） 或者 HHMMSS（数值） 的形式返回当前时间， 具体形式取决于函数处于字符串还是数值型的上下文环境中。该函数按照当前时区来表示返回值。\n\n```\nmysql> SELECT CURTIME();\n+---------------------------------------------------------+\n| CURTIME()                                               |\n+---------------------------------------------------------+\n| 23:50:26                                                |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT CURTIME() + 0;\n+---------------------------------------------------------+\n| CURTIME() + 0                                           |\n+---------------------------------------------------------+\n| 235026                                                  |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## CURRENT_TIME and CURRENT_TIME()\n\n------\n\nCURRENT_TIME 和 CURRENT_TIME() 是 CURTIME() 的别名。\n\n## CURRENT_TIMESTAMP and CURRENT_TIMESTAMP()\n\n------\n\nCURRENT_TIMESTAMP 和 CURRENT_TIMESTAMP() 是 NOW() 的别名。\n\n## DATE(expr)\n\n------\n\n提取 date 表达式或者 datetime 表达式中的日期部分。\n\n```\nmysql> SELECT DATE('2003-12-31 01:02:03');\n+---------------------------------------------------------+\n| DATE('2003-12-31 01:02:03')                             |\n+---------------------------------------------------------+\n|  2003-12-31                                             |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## DATEDIFF(expr1,expr2)\n\n------\n\nDATEDIFF() 返回 expr1 和 expr2 的差，以天数的形式表示。expr1 和 expr2 应为 date 或者 datetime 表达式。只有参数的日期部分参与了计算。\n\n```\nmysql> SELECT DATEDIFF('1997-12-31 23:59:59','1997-12-30');\n+---------------------------------------------------------+\n| DATEDIFF('1997-12-31 23:59:59','1997-12-30')            |\n+---------------------------------------------------------+\n| 1                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## DATE_ADD(date,INTERVAL expr unit), DATE_SUB(date,INTERVAL expr unit)\n\n------\n\n这些函数进行有关日期的算术运算。date 是一个 DATETIME 或者 DATE 类型的值，指明了起始时间。expr 表达式则是 date 要增加或者减去的时间间隔。expr 是一个字符串，可以以 '-' 开始来表示负时间区间。 unit 是一个关键词，指明了expr 的单位。\n\nINTERVAL 关键字和 unit（单位）指示符不区分大小写。\n\n下表列出了对于每种单位，expr 应有的形式。\n\n|--------------------|------------| | unit 值 | expr 应有的格式 | | MICROSECOND | 微秒 | | SECOND | 秒 | | MINUTE | 分钟 | | HOUR | 小时 | | DAY | 天 | | WEEK | 星期 | | MONTH | 月 | | QUARTER | 季度 | | YEAR | 年 | | SECOND_MICROSECOND | '秒.微秒' | | MINUTE_MICROSECOND | '分.微秒' | | MINUTE_SECOND | '分:秒' | | HOUR_MICROSECOND | '小时.微秒' | | HOUR_SECOND | '时:分:秒' | | HOUR_MINUTE | '时:分' | | DAY_MICROSECOND | '天.微秒' | | DAY_SECOND | '天 时:分:秒' | | DAY_MINUTE | '天 时:分' | | DAY_HOUR | '天 时' | | YEAR_MONTH | '年-月' |\n\nQUARTER 和 WEEK 自 MySQL 5.0.0 起受到支持。\n\n```\nmysql> SELECT DATE_ADD('1997-12-31 23:59:59', \n    -> INTERVAL '1:1' MINUTE_SECOND);\n+---------------------------------------------------------+\n| DATE_ADD('1997-12-31 23:59:59', INTERVAL...             |\n+---------------------------------------------------------+\n| 1998-01-01 00:01:00                                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT DATE_ADD('1999-01-01', INTERVAL 1 HOUR);\n+---------------------------------------------------------+\n| DATE_ADD('1999-01-01', INTERVAL 1 HOUR)                 |\n+---------------------------------------------------------+\n| 1999-01-01 01:00:00                                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## DATE_FORMAT(date,format)\n\n------\n\n根据格式字符串对日期值进行格式化。\n\n下面这些占位符可以用在格式字符串中，'%' 必须出现在特定的格式字符之前。\n\n|-----|------------------------------------------| | 占位符 | 描述 | | %a | 简写的星期名称（Sun..Sat） | | %b | 简写的月份名称 （Jan..Dec） | | %c | 月份，以数值形式表示（0..12） | | %D | 月份中的日期，带有英文后缀（0th，1st，2nd，3rd 等等） | | %d | 月份中的日期，以数值表示 (00..31) | | %e | 月份中的日期，以数值表示 (0..31) | | %f | 微秒（000000..999999） | | %H | 小时(00..23) | | %h | 小时(01..12) | | %I | 小时(01..12) | | %i | 分钟,以数值表示(00..59) | | %j | 一年中的第几天（001..366） | | %k | 小时（0..23） | | %l | 小时（1..12） | | %M | 月份的名称（January..December） | | %m | 月份，以数值形式表示（00..12） | | %p | AM 或者 PM | | %r | 时间，12 小时制(hh:mm:ss followed by AM or PM) | | %S | 秒(00..59) | | %s | 秒(00..59) | | %T | 时间，24小时制（hh:mm:ss） | | %U | 星期（00..53），此处星期日为一周的第一天 | | %u | 星期（00..53），此处星期一为一周的第一天 | | %V | 星期（01..53），此处星期日为一周的第一天；与 %X 一起使用。 | | %v | 星期（01..53），此处星期一为一周的第一天；与 %x 一起使用。 | | %W | 一周中日期的名称（Sunday..Saturday） | | %w | 一周中的第几天（0=Sunday..6=Saturday） | | %X | 以星期日为第一天的周所处的年份，四位数字表示；同 %V 一起使用。 | | %x | 以星期一为第一天的周所处的年份，四位数字表示；同 %v 一起使用。 | | %Y | 年份，四位数字表示。 | | %y | 年份，两位数字表示。 | | %% | % 字面值 | | %x | x，针对任何以上没有列出的情况。 |\n\n```\nmysql> SELECT DATE_FORMAT('1997-10-04 22:23:00', '%W %M %Y');\n+---------------------------------------------------------+\n| DATE_FORMAT('1997-10-04 22:23:00', '%W %M %Y')          |\n+---------------------------------------------------------+\n| Saturday October 1997                                   |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT DATE_FORMAT('1997-10-04 22:23:00'\n    -> '%H %k %I %r %T %S %w');\n+---------------------------------------------------------+\n| DATE_FORMAT('1997-10-04 22:23:00.......                 |\n+---------------------------------------------------------+\n|  22 22 10 10:23:00 PM 22:23:00 00 6                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## DATE_SUB(date,INTERVAL expr unit)\n\n------\n\n同 DATE_ADD() 函数相似。\n\n## DAY(date)\n\n------\n\nDAY() 是 DAYOFMONTH() 的别名。\n\n## DAYNAME(date)\n\n------\n\n返回 date 在星期中的名称。\n\n```\nmysql> SELECT DAYNAME('1998-02-05');\n+---------------------------------------------------------+\n| DAYNAME('1998-02-05')                                   |\n+---------------------------------------------------------+\n| Thursday                                                |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## DAYOFMONTH(date)\n\n------\n\n返回 date 是当月的第几天，范围为 0 到 31。\n\n```\nmysql> SELECT DAYOFMONTH('1998-02-03');\n+---------------------------------------------------------+\n| DAYOFMONTH('1998-02-03')                                |\n+---------------------------------------------------------+\n| 3                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## DAYOFWEEK(date)\n\n------\n\n返回 date 是其所在星期的第几天(1 = Sunday, 2 = Monday,.., 7 = Saturday)，这里一星期中日期的名称与数字的对应关系符合 ODBC 标准。\n\n```\nmysql> SELECT DAYOFWEEK('1998-02-03');\n+---------------------------------------------------------+\n|DAYOFWEEK('1998-02-03')                                  |\n+---------------------------------------------------------+\n| 3                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## DAYOFYEAR(date)\n\n------\n\n返回 date 是当年的第几天，范围为 1 到 366。\n\n```\nmysql> SELECT DAYOFYEAR('1998-02-03');\n+---------------------------------------------------------+\n| DAYOFYEAR('1998-02-03')                                 |\n+---------------------------------------------------------+\n| 34                                                      |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## EXTRACT(unit FROM date)\n\n------\n\nEXTRACT() 与 DATE_ADD() 和 DATE_SUB() 使用相同的表示单位的占位符，其作用是提取日期值中相应的组成部分，而不是进行日期运算。\n\n```\nmysql> SELECT EXTRACT(YEAR FROM '1999-07-02');\n+---------------------------------------------------------+\n| EXTRACT(YEAR FROM '1999-07-02')                         |\n+---------------------------------------------------------+\n| 1999                                                    |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT EXTRACT(YEAR_MONTH FROM '1999-07-02 01:02:03');\n+---------------------------------------------------------+\n| EXTRACT(YEAR_MONTH FROM '1999-07-02 01:02:03')          |\n+---------------------------------------------------------+\n| 199907                                                  |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## FROM_DAYS(N)\n\n------\n\n给出天数 N，返回 DATE 值。\n\n```\nmysql> SELECT FROM_DAYS(729669);\n+---------------------------------------------------------+\n| FROM_DAYS(729669)                                       |\n+---------------------------------------------------------+\n| 1997-10-07                                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n在使用 FROM_DAYS() 处理比较老的日期的时候应当特别小心，该函数不适用于格里高利历诞生（1582）之前的日期。\n\n## FROM_UNIXTIME(unix_timestamp), FROM_UNIXTIME(unix_timestamp,format)\n\n------\n\n返回 UNIX 时间戳对应的日期值，根据函数所处的上下文环境不同，返回值得格式也不同，字符串上下文返回格式为 'YYYY-MM-DD HH:MM:SS'，数值型上下文返回格式则为 YYYYMMDDHHMMSS。返回值的时区为系统当前时区。UNIX 时间戳是一种系统内部时间表示，例如 UNIX_TIMESTAMP() 的返回值。\n\n如果给定格式的话，返回结果将会根据格式字符串进行格式化，其规则同 DATE_FORMAT() 函数。\n\n```\nmysql> SELECT FROM_UNIXTIME(875996580);\n+---------------------------------------------------------+\n| FROM_UNIXTIME(875996580)                                |\n+---------------------------------------------------------+\n| 1997-10-04 22:23:00                                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## HOUR(time)\n\n------\n\n返回时间值的小时部分。对于一天中的时间来说，返回值的范围为 0 到 23。不过，TIME 类型的值可以大得多，所以 HOUR 函数可以返回比 23 大的值。\n\n```\nmysql> SELECT HOUR('10:05:03');\n+---------------------------------------------------------+\n| HOUR('10:05:03')                                        |\n+---------------------------------------------------------+\n| 10                                                      |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## LAST_DAY(date)\n\n------\n\n返回 date 或者 datetime 值所在月份的最后一天。如果参数无效的话，返回　NULL。\n\n```\nmysql> SELECT LAST_DAY('2003-02-05');\n+---------------------------------------------------------+\n| LAST_DAY('2003-02-05')                                  |\n+---------------------------------------------------------+\n| 2003-02-28                                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## LOCALTIME and LOCALTIME()\n\n------\n\nLOCALTIME 和 LOCALTIME() 是 NOW() 的别名。\n\n## LOCALTIMESTAMP and LOCALTIMESTAMP()\n\n------\n\nLOCALTIMESTAMP 和 LOCALTIMESTAMP() 是 NOW() 的别名。\n\n## MAKEDATE(year,dayofyear)\n\n------\n\n给定年份和（某天在一年中）的天数，返回对应的日期值。天数必须大于 0，否则返回值为 NULL。\n\n```\nmysql> SELECT MAKEDATE(2001,31), MAKEDATE(2001,32);\n+---------------------------------------------------------+\n| MAKEDATE(2001,31), MAKEDATE(2001,32)                    |\n+---------------------------------------------------------+\n| '2001-01-31', '2001-02-01'                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## MAKETIME(hour,minute,second)\n\n------\n\n根据参数给出的时、分、秒，返回对应的时间值。\n\n```\nmysql> SELECT MAKETIME(12,15,30);\n+---------------------------------------------------------+\n| MAKETIME(12,15,30)                                      |\n+---------------------------------------------------------+\n| '12:15:30'                                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## MICROSECOND(expr)\n\n------\n\n根据 time 或者 datetime 表达式 expr，返回微秒数，结果在 0 到 999999 之间。\n\n```\nmysql> SELECT MICROSECOND('12:00:00.123456');\n+---------------------------------------------------------+\n| MICROSECOND('12:00:00.123456')                          |\n+---------------------------------------------------------+\n| 123456                                                  |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## MINUTE(time)\n\n------\n\n返回时间型值中的分钟部分，范围为 0 到 59。\n\n```\nmysql> SELECT MINUTE('98-02-03 10:05:03');\n+---------------------------------------------------------+\n| MINUTE('98-02-03 10:05:03')                             |\n+---------------------------------------------------------+\n| 5                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## MONTH(date)\n\n------\n\n返回日期型值中的月份，范围为 0 到 12。\n\n```\nmysql> SELECT MONTH('1998-02-03')\n+---------------------------------------------------------+\n| MONTH('1998-02-03')                                     |\n+---------------------------------------------------------+\n| 2                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## MONTHNAME(date)\n\n------\n\n返回日期型值所处月份的全名。\n\n```\nmysql> SELECT MONTHNAME('1998-02-05');\n+---------------------------------------------------------+\n| MONTHNAME('1998-02-05')                                 |\n+---------------------------------------------------------+\n| February                                                |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## NOW()\n\n------\n\n返回当前的日期和时间，结果的格式为 'YYYY-MM-DD HH:MM:SS' 或者 YYYYMMDDHHMMSS，如果函数上下文环境为字符型，则返回前者，否则如果函数处于数值型的上下文环境，则返回后者。返回值的时区为系统当前时区。\n\n```\nmysql> SELECT NOW();\n+---------------------------------------------------------+\n| NOW()                                                   |\n+---------------------------------------------------------+\n| 1997-12-15 23:50:26                                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## PERIOD_ADD(P,N)\n\n------\n\n在时间 P（格式为 YYMM 或者 YYYYMM）上加上 N 个月，结果格式为 YYYYMM。注意，时间参数 P 并不是日期型值。\n\n```\nmysql> SELECT PERIOD_ADD(9801,2);\n+---------------------------------------------------------+\n| PERIOD_ADD(9801,2)                                      |\n+---------------------------------------------------------+\n| 199803                                                  |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## PERIOD_DIFF(P1,P2)\n\n------\n\n返回时间 P1 和 P2 之间相差的月份。 P1 和 P2 的格式应为 YYMM 或者 YYYYMM。注意I，P1 和 P2 不是日期型值。\n\n```\nmysql> SELECT PERIOD_DIFF(9802,199703);\n+---------------------------------------------------------+\n| PERIOD_DIFF(9802,199703)                                |\n+---------------------------------------------------------+\n| 11                                                      |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## QUARTER(date)\n\n------\n\n返回日期型值 date 所处的季度值，范围为 1 到 4。\n\n```\nmysql> SELECT QUARTER('98-04-01');\n+---------------------------------------------------------+\n| QUARTER('98-04-01')                                     |\n+---------------------------------------------------------+\n| 2                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## SECOND(time)\n\n------\n\n返回时间型值中秒的部分，范围为 0 到 59。\n\n```\nmysql> SELECT SECOND('10:05:03');\n+---------------------------------------------------------+\n| SECOND('10:05:03')                                      |\n+---------------------------------------------------------+\n| 3                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## SEC_TO_TIME(seconds)\n\n------\n\n将参数中的秒数转换为时分秒的格式 'HH:MM:SS' 或者 HHMMSS，如果函数所处的上下文为字符串型，则返回前者，否则如果上下文环境为数值型，则返回后者。\n\n## STR_TO_DATE(str,format)\n\n------\n\n这是 DATE_FORMATE() 函数的逆函数，其参数为表示时间和日期的字符串 str 和一个格式字符串 format。如果格式字符串中既有日期又有时间，则 STR_TO_DATE() 返回 DATETIME() 型的值，否则返回日期型（DATE）或者时间型（TIME）的值。\n\n```\nmysql> SELECT STR_TO_DATE('04/31/2004', '%m/%d/%Y');\n+---------------------------------------------------------+\n| STR_TO_DATE('04/31/2004', '%m/%d/%Y')                   |\n+---------------------------------------------------------+\n| 2004-04-31                                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## SUBDATE(date,INTERVAL expr unit) and SUBDATE(expr,days)\n\n------\n\n当第二个参数为 INTERVAL 形式时，SUBDATE() 就是 DATE_SUB() 的别名。INTERVAL 参数中单位的信息，请见有关 DATE_ADD() 的讨论。\n\n```\nmysql> SELECT DATE_SUB('1998-01-02', INTERVAL 31 DAY);\n+---------------------------------------------------------+\n| DATE_SUB('1998-01-02', INTERVAL 31 DAY)                 |\n+---------------------------------------------------------+\n| 1997-12-02                                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT SUBDATE('1998-01-02', INTERVAL 31 DAY);\n+---------------------------------------------------------+\n| SUBDATE('1998-01-02', INTERVAL 31 DAY)                  |\n+---------------------------------------------------------+\n| 1997-12-02                                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## SUBTIME(expr1,expr2)\n\n------\n\nSUBTIME() 返回 expr1-expr2，结果的格式与 expr1 相同。expr1 是一个时间型（time）或者 datetime 型的表达式，expr2 是时间型值。\n\n## SYSDATE()\n\n------\n\n返回当前的日期和时间，格式为 'YYYY-MM-DD HH:MM:SS' 或 YYYYMMDDHHMMSS，如果函数所处的上下文环境为字符串，则返回前者，否则如果上下文环境为数值型，则返回后者。\n\nsql\n\n```\nmysql> SELECT SYSDATE();\n+---------------------------------------------------------+\n| SYSDATE()                                               |\n+---------------------------------------------------------+\n| 2006-04-12 13:47:44                                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## TIME(expr)\n\n------\n\n提取时间型或者 datetime 型表达式 expr 中的时间部分，返回结果为字符串。\n\n```\nmysql> SELECT TIME('2003-12-31 01:02:03');\n+---------------------------------------------------------+\n| TIME('2003-12-31 01:02:03')                             |\n+---------------------------------------------------------+\n| 01:02:03                                                |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## TIMEDIFF(expr1,expr2)\n\n------\n\nTIMEDIFF() 返回 expr1-expr2，结果为时间型值。expr1 和 expr2 可以为时间型或者 datetime 型表达式，不过二者必须为相同类型。\n\n```\nmysql> SELECT TIMEDIFF('1997-12-31 23:59:59.000001',\n    -> '1997-12-30 01:01:01.000002');\n+---------------------------------------------------------+\n| TIMEDIFF('1997-12-31 23:59:59.000001'.....              |\n+---------------------------------------------------------+\n|  46:58:57.999999                                        |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## TIMESTAMP(expr), TIMESTAMP(expr1,expr2)\n\n------\n\n只有一个参数的时候，该函数由日期型或者 datetime 型表达式返回一个 datetime 型值。有两个参数的时候，该函数将 expr2 加到日期型或 datetime 型值 expr1 上，并返回 datetime 型的结果。\n\n```\nmysql> SELECT TIMESTAMP('2003-12-31');\n+---------------------------------------------------------+\n| TIMESTAMP('2003-12-31')                                 |\n+---------------------------------------------------------+\n| 2003-12-31 00:00:00                                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## TIMESTAMPADD(unit,interval,datetime_expr)\n\n------\n\n将整数型的表达式 interval 加到日期型或者 datetime 型表达式 datetime_expr 上。单位由 unit 参数给出，其取值应为以下几种中的一种：FRAC_SECOND、SECOND、MINUTE、HOUR、DAY、WEEK、MONTH、QUARTER 或者 YEAR。\n\n单位 unit 可以为上述关键字中的一个，也可以添加一个 SQL*TSI* 前缀，例如 DAY 和 SQL_TSI_DAY 都是合法的。\n\nsql\n\n```\nmysql> SELECT TIMESTAMPADD(MINUTE,1,'2003-01-02');\n+---------------------------------------------------------+\n| TIMESTAMPADD(MINUTE,1,'2003-01-02')                     |\n+---------------------------------------------------------+\n| 2003-01-02 00:01:00                                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)\n\n------\n\n返回日期型或者 datetime 型表达式 datetime_expr1 和 datetime_expr2 的差。结果的单位由 unit 参数给出，unit 的取值规定同 TIMESTAMPADD() 函数。\n\n```\nmysql> SELECT TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01');\n+---------------------------------------------------------+\n| TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01')          |\n+---------------------------------------------------------+\n| 3                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## TIME_FORMAT(time,format)\n\n------\n\n该函数使用起来类似 DATE_FORMAT() 函数，但是格式字符串 format 中只能有与小时、分钟和秒有关的那些占位符。\n\n如果时间型值的小时部分大于 23，则 %H 和 %k 格式占位符将会产生一个大于通常的 0-23 的值，其他与小时有关的占位符则会返回小时值除以 12 后的余数（modulo 12）。\n\n```\nmysql> SELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');\n+---------------------------------------------------------+\n| TIME_FORMAT('100:00:00', '%H %k %h %I %l')              |\n+---------------------------------------------------------+\n| 100 100 04 04 4                                         |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## TIME_TO_SEC(time)\n\n------\n\n将时间型值转换为秒。\n\n```\nmysql> SELECT TIME_TO_SEC('22:23:00');\n+---------------------------------------------------------+\n| TIME_TO_SEC('22:23:00')                                 |\n+---------------------------------------------------------+\n| 80580                                                   |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)、\n```\n\n## TO_DAYS(date)\n\n------\n\n给定日期型值 date，返回天数（自公元 0 年以来的天数）。\n\n```\nmysql> SELECT TO_DAYS(950501);\n+---------------------------------------------------------+\n| TO_DAYS(950501)                                         |\n+---------------------------------------------------------+\n| 728779                                                  |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## UNIX_TIMESTAMP(), UNIX_TIMESTAMP(date)\n\n------\n\n不带任何参数时，该函数返回一个 unsigned integer 型的 UNIX 时间戳（自 '1970-01-01 00:00:00' UTC 以来的秒数）。如果有一个参数 date 的话，该函数返回自 '1970-01-01 00:00:00' UTC 至 date 的秒数。date 可以是日期型的字符串、DATETIME 型的字符串、时间戳或者 YYMMDD 或 YYYYMMDD 格式的数字。\n\n```\nmysql> SELECT UNIX_TIMESTAMP();\n+---------------------------------------------------------+\n| UNIX_TIMESTAMP()                                        |\n+---------------------------------------------------------+\n| 882226357                                               |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT UNIX_TIMESTAMP('1997-10-04 22:23:00');\n+---------------------------------------------------------+\n| UNIX_TIMESTAMP('1997-10-04 22:23:00')                   |\n+---------------------------------------------------------+\n| 875996580                                               |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## UTC_DATE, UTC_DATE()\n\n------\n\n返回当前 UTC 日期，格式为 'YYYY-MM-DD' 或者 YYYYMMDD，如果函数所处的上下文环境为字符串，则返回前者，否则如果上下文环境为数值型的，则返回后者。\n\n```\nmysql> SELECT UTC_DATE(), UTC_DATE() + 0;\n+---------------------------------------------------------+\n| UTC_DATE(), UTC_DATE() + 0                              |\n+---------------------------------------------------------+\n| 2003-08-14, 20030814                                    |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## UTC_TIME, UTC_TIME()\n\n------\n\n返回当前 UTC 时间，格式为 'HH:MM:SS' 或者 HHMMSS，如果函数所处的上下文环境为字符串，则返回前者，否则如果上下文环境为数值型的，则返回后者。\n\n```\nmysql> SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;\n+---------------------------------------------------------+\n| UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0                    |\n+---------------------------------------------------------+\n| 2003-08-14 18:08:04, 20030814180804                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## WEEK(date[,mode])\n\n------\n\n该函数将返回 date 所在的周是当年的第几周。两个参数的 WEEK() 函数的使你能够指明一周起始于周日还是周一，以及返回值的范围应该是 0 到 53，还是 1 到 53。如果 mode 参数被忽略，则将使用 default_week_format 系统变量。\n\n|------|--------|------|------------| | Mode | 一周的第一天 | 范围 | 周 1 是第一周 | | 0 | Sunday | 0-53 | 该年包括一个星期天 | | 1 | Monday | 0-53 | 该年包含超过 3 天 | | 2 | Sunday | 1-53 | 该年包括一个星期天 | | 3 | Monday | 1-53 | 该年包含超过 3 天 | | 4 | Sunday | 0-53 | 该年包含超过 3 天 | | 5 | Monday | 0-53 | 该年包括一个星期一 | | 6 | Sunday | 1-53 | 该年包含超过 3 天 | | 7 | Monday | 1-53 | 该年包括一个星期一 |\n\n```\nmysql> SELECT WEEK('1998-02-20');\n+---------------------------------------------------------+\n| WEEK('1998-02-20')                                      |\n+---------------------------------------------------------+\n| 7                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## WEEKDAY(date)\n\n------\n\n返回 date 是其所在星期的第几天 (0 = Monday, 1 = Tuesday, . 6 = Sunday)。\n\n```\nmysql> SELECT WEEKDAY('1998-02-03 22:23:00');\n+---------------------------------------------------------+\n| WEEKDAY('1998-02-03 22:23:00')                          |\n+---------------------------------------------------------+\n| 1                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## WEEKOFYEAR(date)\n\n------\n\n返回 date 所在的周是当年的第几周，范围从 1 到 53. WEEKOFYEAR() 是一个兼容性函数，其功能同 WEEK(date, 3)相同。\n\n```\nmysql> SELECT WEEKOFYEAR('1998-02-20');\n+---------------------------------------------------------+\n| WEEKOFYEAR('1998-02-20')                                |\n+---------------------------------------------------------+\n| 8                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## YEAR(date)\n\n------\n\n返回 date 的年份部分，范围为 1000 到 9999，对于日期 0 则返回 0。\n\n```\nmysql> SELECT YEAR('98-02-03');\n+---------------------------------------------------------+\n| YEAR('98-02-03')                                        |\n+---------------------------------------------------------+\n| 1998                                                    |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## YEARWEEK(date), YEARWEEK(date,mode)\n\n------\n\n返回 date 所在的年份和周数。mode 参数意义与 WEEK() 函数的完全一样。对于一年中的第一周和最后一周来说，结果中的年份可能会和 date 参数中的年份不同。\n\n```\nmysql> SELECT YEARWEEK('1987-01-01');\n+---------------------------------------------------------+\n| YEAR('98-02-03')YEARWEEK('1987-01-01')                  |\n+---------------------------------------------------------+\n| 198653                                                  |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n> **注意**，这里的周数同 WEEK() 返回的不同，因为 WEEK() 函数的返回值在给定年份的的上下文环境中得出。\n","source":"wiki/sql/function/datetime.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 日期函数\norder: 7\n---\n\n## SQL 日期函数\n\n------\n\n下面的列表中是 SQL 中所有与日期和时间相关的重要函数。你所用的 RDBMS 可能会支持更多其他的函数。下面的列表基于 MySQL 关系型数据库管理系统。\n\n|----------------------------------------|-----------------------------------------------------| | 名称 | 描述 | | ADDDATE() | 增加日期 | | ADDTIME() | 增加时间 | | CONVERT_TZ() | 将当前时区更改为另一时区 | | CURDATE() | 返回当前日期 | | CURRENT_DATE(), CURRENT_DATE | CURDATE() 的别名 | | CURRENT_TIME(), CURRENT_TIME | CURTIME() 的别名 | | CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP | NOW() 的别名 | | CURTIME() | 返回当前时间 | | DATE_ADD() | 将两个日期相加 | | DATE_FORMAT() | 按照指定格式格式化日期 | | DATE_SUB() | 将两个日期相减 | | DATE() | 从 date 或者 datetime 表达式中提取出日期部分 | | DATEDIFF() | 将两个日期相减 | | DAY() | DAYOFMONTH() 的别名 | | DAYNAME() | 返回某天在用星期中的名称 | | DAYOFMONTH() | 返回某天是当月的第几天 （1-31） | | DAYOFWEEK() | 返回某天是该星期的第几天 | | DAYOFYEAR() | 返回某天是一年中的第几天（1-366） | | EXTRACT | 提取日期中的某一部分 | | FROM_DAYS() | 将天数转换为日期 | | FROM_UNIXTIME() | 将某个日期格式化为 UNIX 时间戳 | | HOUR() | 提取小时 | | LAST_DAY | 返回参数日期所在月份的最后一天 | | LOCALTIME(), LOCALTIME | NOW() 的别名 | | LOCALTIMESTAMP, LOCALTIMESTAMP() | NOW() 的别名 | | MAKEDATE() | 利用年份和某天在该年所处的天数来创建日期 | | MAKETIME | MAKETIME() | | MICROSECOND() | 由参数返回微秒 | | MINUTE() | 由参数返回分钟 | | MONTH() | 返回日期参数的月份 | | MONTHNAME() | 返回月份的名字 | | NOW() | 返回当前日期和时间 | | PERIOD_ADD() | 向年月格式的日期数据之间添加一段时间 | | PERIOD_DIFF() | 返回两个年月格式的日期数据之间的月份数 | | QUARTER() | 返回日期参数所在的季度 | | SEC_TO_TIME() | 将秒数转换为 'HH:MM:SS' 格式 | | SECOND() | 返回参数中的秒数 (0-59) | | STR_TO_DATE() | 将字符串转换为日期数据 | | SUBDATE() | 以三个参数调用的时候是 DATE_SUB() 的同义词 | | SUBTIME() | 减去时间 | | SYSDATE() | 返回函数执行的时的时刻 | | TIME_FORMAT() | 格式化时间 | | TIME_TO_SEC() | 将时间参数转换为秒数 | | TIME() | 返回参数表达式中的时间部分 | | TIMEDIFF() | 将两个时间相减 | | TIMESTAMP() | 只有一个参数时，该函数返回 date 或者 datetime 表达式。当有两个参数时，将两个参数相加。 | | TIMESTAMPADD() | 在 datetime 表达式上加上一段时间 | | TIMESTAMPDIFF() | 在 datetime 表达式上减去一段时间 | | TO_DAYS() | 将日期参数转换为天数 | | UNIX_TIMESTAMP() | 返回 UNIX 时间戳 | | UTC_DATE() | 返回当前 UTC 日期 | | UTC_TIME() | 返回当前 UTC 时间 | | UTC_TIMESTAMP() | 返回当前 UTC 日期和时间 | | WEEK() | 返回参数的星期数 | | WEEKDAY() | 返回日期参数时一个星期中的第几天 | | WEEKOFYEAR() | 返回日期参数是日历上的第几周 (1-53) | | YEAR() | 返回日期参数中的年份 | | YEARWEEK() | 返回年份和星期 |\n\n## ADDDATE(date, INTERVAL expr unit), ADDDATE(expr, days)\n\n------\n\n如果调用时第二个参数为 INTERVAL 形式的话，ADDDATE() 就是 DATE_ADD() 的同义词。同样的情况下，SUBDATE() 是 DATE_SUB() 的同义词。有关 INTERVAL 单位参数的信息，见有关 DATE_ADD() 的讨论。\n\n```\nmysql> SELECT DATE_ADD('1998-01-02', INTERVAL 31 DAY);\n+---------------------------------------------------------+\n| DATE_ADD('1998-01-02', INTERVAL 31 DAY)                 |\n+---------------------------------------------------------+\n| 1998-02-02                                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT ADDDATE('1998-01-02', INTERVAL 31 DAY);\n+---------------------------------------------------------+\n| ADDDATE('1998-01-02', INTERVAL 31 DAY)                  |\n+---------------------------------------------------------+\n| 1998-02-02                                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n如果调用时第二个参数为天数形式的话，则 MySQL 会将其作为整数加到 expr 上。\n\n```\nmysql> SELECT ADDDATE('1998-01-02', 31);\n+---------------------------------------------------------+\n| DATE_ADD('1998-01-02', INTERVAL 31 DAY)                 |\n+---------------------------------------------------------+\n| 1998-02-02                                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## ADDTIME(expr1,expr2)\n\n------\n\nADDTIME() 将 expr2 加到 expr1 上，并返回结果。expr1 为 time 或者 datetime 表达式，expr2 为 time 表达式。\n\n```\nmysql> SELECT ADDTIME('1997-12-31 23:59:59.999999','1 1:1:1.000002');\n+---------------------------------------------------------+\n| DATE_ADD('1997-12-31 23:59:59.999999','1 1:1:1.000002') |\n+---------------------------------------------------------+\n| 1998-01-02 01:01:01.000001                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## CONVERT_TZ(dt,from_tz,to_tz)\n\n------\n\n该函数将 datetime 类型的值 dt 的时区从 from_dt 转换为 to_dt，并返回结果。如果参数无效，则函数返回 NULL。\n\n```\nmysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','GMT','MET');\n+---------------------------------------------------------+\n| CONVERT_TZ('2004-01-01 12:00:00','GMT','MET')           |\n+---------------------------------------------------------+\n| 2004-01-01 13:00:00                                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT CONVERT_TZ('2004-01-01 12:00:00','+00:00','+10:00');\n+---------------------------------------------------------+\n| CONVERT_TZ('2004-01-01 12:00:00','+00:00','+10:00')     |\n+---------------------------------------------------------+\n| 2004-01-01 22:00:00                                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## CURDATE()\n\n------\n\n以 'YYYY-MM-DD'（字符串） 或者 YYYYMMDD（数值） 的形式返回当前日期， 具体形式取决于函数处于字符串还是数值型的上下文环境中。\n\n```\nmysql> SELECT CURDATE();\n+---------------------------------------------------------+\n| CURDATE()                                               |\n+---------------------------------------------------------+\n| 1997-12-15                                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT CURDATE() + 0;\n+---------------------------------------------------------+\n| CURDATE() + 0                                           |\n+---------------------------------------------------------+\n| 19971215                                                |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## CURRENT_DATE and CURRENT_DATE()\n\n------\n\nCURRENT_DATE 和 CURRENT_DATE() 是 CURDATE() 的别名。\n\n## CURTIME()\n\n------\n\n以 'HH:MM:SS'（字符串） 或者 HHMMSS（数值） 的形式返回当前时间， 具体形式取决于函数处于字符串还是数值型的上下文环境中。该函数按照当前时区来表示返回值。\n\n```\nmysql> SELECT CURTIME();\n+---------------------------------------------------------+\n| CURTIME()                                               |\n+---------------------------------------------------------+\n| 23:50:26                                                |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT CURTIME() + 0;\n+---------------------------------------------------------+\n| CURTIME() + 0                                           |\n+---------------------------------------------------------+\n| 235026                                                  |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## CURRENT_TIME and CURRENT_TIME()\n\n------\n\nCURRENT_TIME 和 CURRENT_TIME() 是 CURTIME() 的别名。\n\n## CURRENT_TIMESTAMP and CURRENT_TIMESTAMP()\n\n------\n\nCURRENT_TIMESTAMP 和 CURRENT_TIMESTAMP() 是 NOW() 的别名。\n\n## DATE(expr)\n\n------\n\n提取 date 表达式或者 datetime 表达式中的日期部分。\n\n```\nmysql> SELECT DATE('2003-12-31 01:02:03');\n+---------------------------------------------------------+\n| DATE('2003-12-31 01:02:03')                             |\n+---------------------------------------------------------+\n|  2003-12-31                                             |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## DATEDIFF(expr1,expr2)\n\n------\n\nDATEDIFF() 返回 expr1 和 expr2 的差，以天数的形式表示。expr1 和 expr2 应为 date 或者 datetime 表达式。只有参数的日期部分参与了计算。\n\n```\nmysql> SELECT DATEDIFF('1997-12-31 23:59:59','1997-12-30');\n+---------------------------------------------------------+\n| DATEDIFF('1997-12-31 23:59:59','1997-12-30')            |\n+---------------------------------------------------------+\n| 1                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## DATE_ADD(date,INTERVAL expr unit), DATE_SUB(date,INTERVAL expr unit)\n\n------\n\n这些函数进行有关日期的算术运算。date 是一个 DATETIME 或者 DATE 类型的值，指明了起始时间。expr 表达式则是 date 要增加或者减去的时间间隔。expr 是一个字符串，可以以 '-' 开始来表示负时间区间。 unit 是一个关键词，指明了expr 的单位。\n\nINTERVAL 关键字和 unit（单位）指示符不区分大小写。\n\n下表列出了对于每种单位，expr 应有的形式。\n\n|--------------------|------------| | unit 值 | expr 应有的格式 | | MICROSECOND | 微秒 | | SECOND | 秒 | | MINUTE | 分钟 | | HOUR | 小时 | | DAY | 天 | | WEEK | 星期 | | MONTH | 月 | | QUARTER | 季度 | | YEAR | 年 | | SECOND_MICROSECOND | '秒.微秒' | | MINUTE_MICROSECOND | '分.微秒' | | MINUTE_SECOND | '分:秒' | | HOUR_MICROSECOND | '小时.微秒' | | HOUR_SECOND | '时:分:秒' | | HOUR_MINUTE | '时:分' | | DAY_MICROSECOND | '天.微秒' | | DAY_SECOND | '天 时:分:秒' | | DAY_MINUTE | '天 时:分' | | DAY_HOUR | '天 时' | | YEAR_MONTH | '年-月' |\n\nQUARTER 和 WEEK 自 MySQL 5.0.0 起受到支持。\n\n```\nmysql> SELECT DATE_ADD('1997-12-31 23:59:59', \n    -> INTERVAL '1:1' MINUTE_SECOND);\n+---------------------------------------------------------+\n| DATE_ADD('1997-12-31 23:59:59', INTERVAL...             |\n+---------------------------------------------------------+\n| 1998-01-01 00:01:00                                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT DATE_ADD('1999-01-01', INTERVAL 1 HOUR);\n+---------------------------------------------------------+\n| DATE_ADD('1999-01-01', INTERVAL 1 HOUR)                 |\n+---------------------------------------------------------+\n| 1999-01-01 01:00:00                                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## DATE_FORMAT(date,format)\n\n------\n\n根据格式字符串对日期值进行格式化。\n\n下面这些占位符可以用在格式字符串中，'%' 必须出现在特定的格式字符之前。\n\n|-----|------------------------------------------| | 占位符 | 描述 | | %a | 简写的星期名称（Sun..Sat） | | %b | 简写的月份名称 （Jan..Dec） | | %c | 月份，以数值形式表示（0..12） | | %D | 月份中的日期，带有英文后缀（0th，1st，2nd，3rd 等等） | | %d | 月份中的日期，以数值表示 (00..31) | | %e | 月份中的日期，以数值表示 (0..31) | | %f | 微秒（000000..999999） | | %H | 小时(00..23) | | %h | 小时(01..12) | | %I | 小时(01..12) | | %i | 分钟,以数值表示(00..59) | | %j | 一年中的第几天（001..366） | | %k | 小时（0..23） | | %l | 小时（1..12） | | %M | 月份的名称（January..December） | | %m | 月份，以数值形式表示（00..12） | | %p | AM 或者 PM | | %r | 时间，12 小时制(hh:mm:ss followed by AM or PM) | | %S | 秒(00..59) | | %s | 秒(00..59) | | %T | 时间，24小时制（hh:mm:ss） | | %U | 星期（00..53），此处星期日为一周的第一天 | | %u | 星期（00..53），此处星期一为一周的第一天 | | %V | 星期（01..53），此处星期日为一周的第一天；与 %X 一起使用。 | | %v | 星期（01..53），此处星期一为一周的第一天；与 %x 一起使用。 | | %W | 一周中日期的名称（Sunday..Saturday） | | %w | 一周中的第几天（0=Sunday..6=Saturday） | | %X | 以星期日为第一天的周所处的年份，四位数字表示；同 %V 一起使用。 | | %x | 以星期一为第一天的周所处的年份，四位数字表示；同 %v 一起使用。 | | %Y | 年份，四位数字表示。 | | %y | 年份，两位数字表示。 | | %% | % 字面值 | | %x | x，针对任何以上没有列出的情况。 |\n\n```\nmysql> SELECT DATE_FORMAT('1997-10-04 22:23:00', '%W %M %Y');\n+---------------------------------------------------------+\n| DATE_FORMAT('1997-10-04 22:23:00', '%W %M %Y')          |\n+---------------------------------------------------------+\n| Saturday October 1997                                   |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT DATE_FORMAT('1997-10-04 22:23:00'\n    -> '%H %k %I %r %T %S %w');\n+---------------------------------------------------------+\n| DATE_FORMAT('1997-10-04 22:23:00.......                 |\n+---------------------------------------------------------+\n|  22 22 10 10:23:00 PM 22:23:00 00 6                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## DATE_SUB(date,INTERVAL expr unit)\n\n------\n\n同 DATE_ADD() 函数相似。\n\n## DAY(date)\n\n------\n\nDAY() 是 DAYOFMONTH() 的别名。\n\n## DAYNAME(date)\n\n------\n\n返回 date 在星期中的名称。\n\n```\nmysql> SELECT DAYNAME('1998-02-05');\n+---------------------------------------------------------+\n| DAYNAME('1998-02-05')                                   |\n+---------------------------------------------------------+\n| Thursday                                                |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## DAYOFMONTH(date)\n\n------\n\n返回 date 是当月的第几天，范围为 0 到 31。\n\n```\nmysql> SELECT DAYOFMONTH('1998-02-03');\n+---------------------------------------------------------+\n| DAYOFMONTH('1998-02-03')                                |\n+---------------------------------------------------------+\n| 3                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## DAYOFWEEK(date)\n\n------\n\n返回 date 是其所在星期的第几天(1 = Sunday, 2 = Monday,.., 7 = Saturday)，这里一星期中日期的名称与数字的对应关系符合 ODBC 标准。\n\n```\nmysql> SELECT DAYOFWEEK('1998-02-03');\n+---------------------------------------------------------+\n|DAYOFWEEK('1998-02-03')                                  |\n+---------------------------------------------------------+\n| 3                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## DAYOFYEAR(date)\n\n------\n\n返回 date 是当年的第几天，范围为 1 到 366。\n\n```\nmysql> SELECT DAYOFYEAR('1998-02-03');\n+---------------------------------------------------------+\n| DAYOFYEAR('1998-02-03')                                 |\n+---------------------------------------------------------+\n| 34                                                      |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## EXTRACT(unit FROM date)\n\n------\n\nEXTRACT() 与 DATE_ADD() 和 DATE_SUB() 使用相同的表示单位的占位符，其作用是提取日期值中相应的组成部分，而不是进行日期运算。\n\n```\nmysql> SELECT EXTRACT(YEAR FROM '1999-07-02');\n+---------------------------------------------------------+\n| EXTRACT(YEAR FROM '1999-07-02')                         |\n+---------------------------------------------------------+\n| 1999                                                    |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT EXTRACT(YEAR_MONTH FROM '1999-07-02 01:02:03');\n+---------------------------------------------------------+\n| EXTRACT(YEAR_MONTH FROM '1999-07-02 01:02:03')          |\n+---------------------------------------------------------+\n| 199907                                                  |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## FROM_DAYS(N)\n\n------\n\n给出天数 N，返回 DATE 值。\n\n```\nmysql> SELECT FROM_DAYS(729669);\n+---------------------------------------------------------+\n| FROM_DAYS(729669)                                       |\n+---------------------------------------------------------+\n| 1997-10-07                                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n在使用 FROM_DAYS() 处理比较老的日期的时候应当特别小心，该函数不适用于格里高利历诞生（1582）之前的日期。\n\n## FROM_UNIXTIME(unix_timestamp), FROM_UNIXTIME(unix_timestamp,format)\n\n------\n\n返回 UNIX 时间戳对应的日期值，根据函数所处的上下文环境不同，返回值得格式也不同，字符串上下文返回格式为 'YYYY-MM-DD HH:MM:SS'，数值型上下文返回格式则为 YYYYMMDDHHMMSS。返回值的时区为系统当前时区。UNIX 时间戳是一种系统内部时间表示，例如 UNIX_TIMESTAMP() 的返回值。\n\n如果给定格式的话，返回结果将会根据格式字符串进行格式化，其规则同 DATE_FORMAT() 函数。\n\n```\nmysql> SELECT FROM_UNIXTIME(875996580);\n+---------------------------------------------------------+\n| FROM_UNIXTIME(875996580)                                |\n+---------------------------------------------------------+\n| 1997-10-04 22:23:00                                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## HOUR(time)\n\n------\n\n返回时间值的小时部分。对于一天中的时间来说，返回值的范围为 0 到 23。不过，TIME 类型的值可以大得多，所以 HOUR 函数可以返回比 23 大的值。\n\n```\nmysql> SELECT HOUR('10:05:03');\n+---------------------------------------------------------+\n| HOUR('10:05:03')                                        |\n+---------------------------------------------------------+\n| 10                                                      |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## LAST_DAY(date)\n\n------\n\n返回 date 或者 datetime 值所在月份的最后一天。如果参数无效的话，返回　NULL。\n\n```\nmysql> SELECT LAST_DAY('2003-02-05');\n+---------------------------------------------------------+\n| LAST_DAY('2003-02-05')                                  |\n+---------------------------------------------------------+\n| 2003-02-28                                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## LOCALTIME and LOCALTIME()\n\n------\n\nLOCALTIME 和 LOCALTIME() 是 NOW() 的别名。\n\n## LOCALTIMESTAMP and LOCALTIMESTAMP()\n\n------\n\nLOCALTIMESTAMP 和 LOCALTIMESTAMP() 是 NOW() 的别名。\n\n## MAKEDATE(year,dayofyear)\n\n------\n\n给定年份和（某天在一年中）的天数，返回对应的日期值。天数必须大于 0，否则返回值为 NULL。\n\n```\nmysql> SELECT MAKEDATE(2001,31), MAKEDATE(2001,32);\n+---------------------------------------------------------+\n| MAKEDATE(2001,31), MAKEDATE(2001,32)                    |\n+---------------------------------------------------------+\n| '2001-01-31', '2001-02-01'                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## MAKETIME(hour,minute,second)\n\n------\n\n根据参数给出的时、分、秒，返回对应的时间值。\n\n```\nmysql> SELECT MAKETIME(12,15,30);\n+---------------------------------------------------------+\n| MAKETIME(12,15,30)                                      |\n+---------------------------------------------------------+\n| '12:15:30'                                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## MICROSECOND(expr)\n\n------\n\n根据 time 或者 datetime 表达式 expr，返回微秒数，结果在 0 到 999999 之间。\n\n```\nmysql> SELECT MICROSECOND('12:00:00.123456');\n+---------------------------------------------------------+\n| MICROSECOND('12:00:00.123456')                          |\n+---------------------------------------------------------+\n| 123456                                                  |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## MINUTE(time)\n\n------\n\n返回时间型值中的分钟部分，范围为 0 到 59。\n\n```\nmysql> SELECT MINUTE('98-02-03 10:05:03');\n+---------------------------------------------------------+\n| MINUTE('98-02-03 10:05:03')                             |\n+---------------------------------------------------------+\n| 5                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## MONTH(date)\n\n------\n\n返回日期型值中的月份，范围为 0 到 12。\n\n```\nmysql> SELECT MONTH('1998-02-03')\n+---------------------------------------------------------+\n| MONTH('1998-02-03')                                     |\n+---------------------------------------------------------+\n| 2                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## MONTHNAME(date)\n\n------\n\n返回日期型值所处月份的全名。\n\n```\nmysql> SELECT MONTHNAME('1998-02-05');\n+---------------------------------------------------------+\n| MONTHNAME('1998-02-05')                                 |\n+---------------------------------------------------------+\n| February                                                |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## NOW()\n\n------\n\n返回当前的日期和时间，结果的格式为 'YYYY-MM-DD HH:MM:SS' 或者 YYYYMMDDHHMMSS，如果函数上下文环境为字符型，则返回前者，否则如果函数处于数值型的上下文环境，则返回后者。返回值的时区为系统当前时区。\n\n```\nmysql> SELECT NOW();\n+---------------------------------------------------------+\n| NOW()                                                   |\n+---------------------------------------------------------+\n| 1997-12-15 23:50:26                                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## PERIOD_ADD(P,N)\n\n------\n\n在时间 P（格式为 YYMM 或者 YYYYMM）上加上 N 个月，结果格式为 YYYYMM。注意，时间参数 P 并不是日期型值。\n\n```\nmysql> SELECT PERIOD_ADD(9801,2);\n+---------------------------------------------------------+\n| PERIOD_ADD(9801,2)                                      |\n+---------------------------------------------------------+\n| 199803                                                  |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## PERIOD_DIFF(P1,P2)\n\n------\n\n返回时间 P1 和 P2 之间相差的月份。 P1 和 P2 的格式应为 YYMM 或者 YYYYMM。注意I，P1 和 P2 不是日期型值。\n\n```\nmysql> SELECT PERIOD_DIFF(9802,199703);\n+---------------------------------------------------------+\n| PERIOD_DIFF(9802,199703)                                |\n+---------------------------------------------------------+\n| 11                                                      |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## QUARTER(date)\n\n------\n\n返回日期型值 date 所处的季度值，范围为 1 到 4。\n\n```\nmysql> SELECT QUARTER('98-04-01');\n+---------------------------------------------------------+\n| QUARTER('98-04-01')                                     |\n+---------------------------------------------------------+\n| 2                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## SECOND(time)\n\n------\n\n返回时间型值中秒的部分，范围为 0 到 59。\n\n```\nmysql> SELECT SECOND('10:05:03');\n+---------------------------------------------------------+\n| SECOND('10:05:03')                                      |\n+---------------------------------------------------------+\n| 3                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## SEC_TO_TIME(seconds)\n\n------\n\n将参数中的秒数转换为时分秒的格式 'HH:MM:SS' 或者 HHMMSS，如果函数所处的上下文为字符串型，则返回前者，否则如果上下文环境为数值型，则返回后者。\n\n## STR_TO_DATE(str,format)\n\n------\n\n这是 DATE_FORMATE() 函数的逆函数，其参数为表示时间和日期的字符串 str 和一个格式字符串 format。如果格式字符串中既有日期又有时间，则 STR_TO_DATE() 返回 DATETIME() 型的值，否则返回日期型（DATE）或者时间型（TIME）的值。\n\n```\nmysql> SELECT STR_TO_DATE('04/31/2004', '%m/%d/%Y');\n+---------------------------------------------------------+\n| STR_TO_DATE('04/31/2004', '%m/%d/%Y')                   |\n+---------------------------------------------------------+\n| 2004-04-31                                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## SUBDATE(date,INTERVAL expr unit) and SUBDATE(expr,days)\n\n------\n\n当第二个参数为 INTERVAL 形式时，SUBDATE() 就是 DATE_SUB() 的别名。INTERVAL 参数中单位的信息，请见有关 DATE_ADD() 的讨论。\n\n```\nmysql> SELECT DATE_SUB('1998-01-02', INTERVAL 31 DAY);\n+---------------------------------------------------------+\n| DATE_SUB('1998-01-02', INTERVAL 31 DAY)                 |\n+---------------------------------------------------------+\n| 1997-12-02                                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT SUBDATE('1998-01-02', INTERVAL 31 DAY);\n+---------------------------------------------------------+\n| SUBDATE('1998-01-02', INTERVAL 31 DAY)                  |\n+---------------------------------------------------------+\n| 1997-12-02                                              |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## SUBTIME(expr1,expr2)\n\n------\n\nSUBTIME() 返回 expr1-expr2，结果的格式与 expr1 相同。expr1 是一个时间型（time）或者 datetime 型的表达式，expr2 是时间型值。\n\n## SYSDATE()\n\n------\n\n返回当前的日期和时间，格式为 'YYYY-MM-DD HH:MM:SS' 或 YYYYMMDDHHMMSS，如果函数所处的上下文环境为字符串，则返回前者，否则如果上下文环境为数值型，则返回后者。\n\nsql\n\n```\nmysql> SELECT SYSDATE();\n+---------------------------------------------------------+\n| SYSDATE()                                               |\n+---------------------------------------------------------+\n| 2006-04-12 13:47:44                                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## TIME(expr)\n\n------\n\n提取时间型或者 datetime 型表达式 expr 中的时间部分，返回结果为字符串。\n\n```\nmysql> SELECT TIME('2003-12-31 01:02:03');\n+---------------------------------------------------------+\n| TIME('2003-12-31 01:02:03')                             |\n+---------------------------------------------------------+\n| 01:02:03                                                |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## TIMEDIFF(expr1,expr2)\n\n------\n\nTIMEDIFF() 返回 expr1-expr2，结果为时间型值。expr1 和 expr2 可以为时间型或者 datetime 型表达式，不过二者必须为相同类型。\n\n```\nmysql> SELECT TIMEDIFF('1997-12-31 23:59:59.000001',\n    -> '1997-12-30 01:01:01.000002');\n+---------------------------------------------------------+\n| TIMEDIFF('1997-12-31 23:59:59.000001'.....              |\n+---------------------------------------------------------+\n|  46:58:57.999999                                        |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## TIMESTAMP(expr), TIMESTAMP(expr1,expr2)\n\n------\n\n只有一个参数的时候，该函数由日期型或者 datetime 型表达式返回一个 datetime 型值。有两个参数的时候，该函数将 expr2 加到日期型或 datetime 型值 expr1 上，并返回 datetime 型的结果。\n\n```\nmysql> SELECT TIMESTAMP('2003-12-31');\n+---------------------------------------------------------+\n| TIMESTAMP('2003-12-31')                                 |\n+---------------------------------------------------------+\n| 2003-12-31 00:00:00                                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## TIMESTAMPADD(unit,interval,datetime_expr)\n\n------\n\n将整数型的表达式 interval 加到日期型或者 datetime 型表达式 datetime_expr 上。单位由 unit 参数给出，其取值应为以下几种中的一种：FRAC_SECOND、SECOND、MINUTE、HOUR、DAY、WEEK、MONTH、QUARTER 或者 YEAR。\n\n单位 unit 可以为上述关键字中的一个，也可以添加一个 SQL*TSI* 前缀，例如 DAY 和 SQL_TSI_DAY 都是合法的。\n\nsql\n\n```\nmysql> SELECT TIMESTAMPADD(MINUTE,1,'2003-01-02');\n+---------------------------------------------------------+\n| TIMESTAMPADD(MINUTE,1,'2003-01-02')                     |\n+---------------------------------------------------------+\n| 2003-01-02 00:01:00                                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)\n\n------\n\n返回日期型或者 datetime 型表达式 datetime_expr1 和 datetime_expr2 的差。结果的单位由 unit 参数给出，unit 的取值规定同 TIMESTAMPADD() 函数。\n\n```\nmysql> SELECT TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01');\n+---------------------------------------------------------+\n| TIMESTAMPDIFF(MONTH,'2003-02-01','2003-05-01')          |\n+---------------------------------------------------------+\n| 3                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## TIME_FORMAT(time,format)\n\n------\n\n该函数使用起来类似 DATE_FORMAT() 函数，但是格式字符串 format 中只能有与小时、分钟和秒有关的那些占位符。\n\n如果时间型值的小时部分大于 23，则 %H 和 %k 格式占位符将会产生一个大于通常的 0-23 的值，其他与小时有关的占位符则会返回小时值除以 12 后的余数（modulo 12）。\n\n```\nmysql> SELECT TIME_FORMAT('100:00:00', '%H %k %h %I %l');\n+---------------------------------------------------------+\n| TIME_FORMAT('100:00:00', '%H %k %h %I %l')              |\n+---------------------------------------------------------+\n| 100 100 04 04 4                                         |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## TIME_TO_SEC(time)\n\n------\n\n将时间型值转换为秒。\n\n```\nmysql> SELECT TIME_TO_SEC('22:23:00');\n+---------------------------------------------------------+\n| TIME_TO_SEC('22:23:00')                                 |\n+---------------------------------------------------------+\n| 80580                                                   |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)、\n```\n\n## TO_DAYS(date)\n\n------\n\n给定日期型值 date，返回天数（自公元 0 年以来的天数）。\n\n```\nmysql> SELECT TO_DAYS(950501);\n+---------------------------------------------------------+\n| TO_DAYS(950501)                                         |\n+---------------------------------------------------------+\n| 728779                                                  |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## UNIX_TIMESTAMP(), UNIX_TIMESTAMP(date)\n\n------\n\n不带任何参数时，该函数返回一个 unsigned integer 型的 UNIX 时间戳（自 '1970-01-01 00:00:00' UTC 以来的秒数）。如果有一个参数 date 的话，该函数返回自 '1970-01-01 00:00:00' UTC 至 date 的秒数。date 可以是日期型的字符串、DATETIME 型的字符串、时间戳或者 YYMMDD 或 YYYYMMDD 格式的数字。\n\n```\nmysql> SELECT UNIX_TIMESTAMP();\n+---------------------------------------------------------+\n| UNIX_TIMESTAMP()                                        |\n+---------------------------------------------------------+\n| 882226357                                               |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n\nmysql> SELECT UNIX_TIMESTAMP('1997-10-04 22:23:00');\n+---------------------------------------------------------+\n| UNIX_TIMESTAMP('1997-10-04 22:23:00')                   |\n+---------------------------------------------------------+\n| 875996580                                               |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## UTC_DATE, UTC_DATE()\n\n------\n\n返回当前 UTC 日期，格式为 'YYYY-MM-DD' 或者 YYYYMMDD，如果函数所处的上下文环境为字符串，则返回前者，否则如果上下文环境为数值型的，则返回后者。\n\n```\nmysql> SELECT UTC_DATE(), UTC_DATE() + 0;\n+---------------------------------------------------------+\n| UTC_DATE(), UTC_DATE() + 0                              |\n+---------------------------------------------------------+\n| 2003-08-14, 20030814                                    |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## UTC_TIME, UTC_TIME()\n\n------\n\n返回当前 UTC 时间，格式为 'HH:MM:SS' 或者 HHMMSS，如果函数所处的上下文环境为字符串，则返回前者，否则如果上下文环境为数值型的，则返回后者。\n\n```\nmysql> SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;\n+---------------------------------------------------------+\n| UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0                    |\n+---------------------------------------------------------+\n| 2003-08-14 18:08:04, 20030814180804                     |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## WEEK(date[,mode])\n\n------\n\n该函数将返回 date 所在的周是当年的第几周。两个参数的 WEEK() 函数的使你能够指明一周起始于周日还是周一，以及返回值的范围应该是 0 到 53，还是 1 到 53。如果 mode 参数被忽略，则将使用 default_week_format 系统变量。\n\n|------|--------|------|------------| | Mode | 一周的第一天 | 范围 | 周 1 是第一周 | | 0 | Sunday | 0-53 | 该年包括一个星期天 | | 1 | Monday | 0-53 | 该年包含超过 3 天 | | 2 | Sunday | 1-53 | 该年包括一个星期天 | | 3 | Monday | 1-53 | 该年包含超过 3 天 | | 4 | Sunday | 0-53 | 该年包含超过 3 天 | | 5 | Monday | 0-53 | 该年包括一个星期一 | | 6 | Sunday | 1-53 | 该年包含超过 3 天 | | 7 | Monday | 1-53 | 该年包括一个星期一 |\n\n```\nmysql> SELECT WEEK('1998-02-20');\n+---------------------------------------------------------+\n| WEEK('1998-02-20')                                      |\n+---------------------------------------------------------+\n| 7                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## WEEKDAY(date)\n\n------\n\n返回 date 是其所在星期的第几天 (0 = Monday, 1 = Tuesday, . 6 = Sunday)。\n\n```\nmysql> SELECT WEEKDAY('1998-02-03 22:23:00');\n+---------------------------------------------------------+\n| WEEKDAY('1998-02-03 22:23:00')                          |\n+---------------------------------------------------------+\n| 1                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## WEEKOFYEAR(date)\n\n------\n\n返回 date 所在的周是当年的第几周，范围从 1 到 53. WEEKOFYEAR() 是一个兼容性函数，其功能同 WEEK(date, 3)相同。\n\n```\nmysql> SELECT WEEKOFYEAR('1998-02-20');\n+---------------------------------------------------------+\n| WEEKOFYEAR('1998-02-20')                                |\n+---------------------------------------------------------+\n| 8                                                       |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## YEAR(date)\n\n------\n\n返回 date 的年份部分，范围为 1000 到 9999，对于日期 0 则返回 0。\n\n```\nmysql> SELECT YEAR('98-02-03');\n+---------------------------------------------------------+\n| YEAR('98-02-03')                                        |\n+---------------------------------------------------------+\n| 1998                                                    |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n## YEARWEEK(date), YEARWEEK(date,mode)\n\n------\n\n返回 date 所在的年份和周数。mode 参数意义与 WEEK() 函数的完全一样。对于一年中的第一周和最后一周来说，结果中的年份可能会和 date 参数中的年份不同。\n\n```\nmysql> SELECT YEARWEEK('1987-01-01');\n+---------------------------------------------------------+\n| YEAR('98-02-03')YEARWEEK('1987-01-01')                  |\n+---------------------------------------------------------+\n| 198653                                                  |\n+---------------------------------------------------------+\n1 row in set (0.00 sec)\n```\n\n> **注意**，这里的周数同 WEEK() 返回的不同，因为 WEEK() 函数的返回值在给定年份的的上下文环境中得出。\n","date":"2025-06-11T06:22:58.061Z","updated":"2025-06-11T06:22:58.057Z","path":"wiki/sql/function/datetime.html","comments":1,"_id":"cmbrkcwvm00019dx005vi78qb","content":"<h2 id=\"SQL-日期函数\"><a href=\"#SQL-日期函数\" class=\"headerlink\" title=\"SQL 日期函数\"></a>SQL 日期函数</h2><hr>\n<p>下面的列表中是 SQL 中所有与日期和时间相关的重要函数。你所用的 RDBMS 可能会支持更多其他的函数。下面的列表基于 MySQL 关系型数据库管理系统。</p>\n<p>|—————————————-|—————————————————–| | 名称 | 描述 | | ADDDATE() | 增加日期 | | ADDTIME() | 增加时间 | | CONVERT_TZ() | 将当前时区更改为另一时区 | | CURDATE() | 返回当前日期 | | CURRENT_DATE(), CURRENT_DATE | CURDATE() 的别名 | | CURRENT_TIME(), CURRENT_TIME | CURTIME() 的别名 | | CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP | NOW() 的别名 | | CURTIME() | 返回当前时间 | | DATE_ADD() | 将两个日期相加 | | DATE_FORMAT() | 按照指定格式格式化日期 | | DATE_SUB() | 将两个日期相减 | | DATE() | 从 date 或者 datetime 表达式中提取出日期部分 | | DATEDIFF() | 将两个日期相减 | | DAY() | DAYOFMONTH() 的别名 | | DAYNAME() | 返回某天在用星期中的名称 | | DAYOFMONTH() | 返回某天是当月的第几天 （1-31） | | DAYOFWEEK() | 返回某天是该星期的第几天 | | DAYOFYEAR() | 返回某天是一年中的第几天（1-366） | | EXTRACT | 提取日期中的某一部分 | | FROM_DAYS() | 将天数转换为日期 | | FROM_UNIXTIME() | 将某个日期格式化为 UNIX 时间戳 | | HOUR() | 提取小时 | | LAST_DAY | 返回参数日期所在月份的最后一天 | | LOCALTIME(), LOCALTIME | NOW() 的别名 | | LOCALTIMESTAMP, LOCALTIMESTAMP() | NOW() 的别名 | | MAKEDATE() | 利用年份和某天在该年所处的天数来创建日期 | | MAKETIME | MAKETIME() | | MICROSECOND() | 由参数返回微秒 | | MINUTE() | 由参数返回分钟 | | MONTH() | 返回日期参数的月份 | | MONTHNAME() | 返回月份的名字 | | NOW() | 返回当前日期和时间 | | PERIOD_ADD() | 向年月格式的日期数据之间添加一段时间 | | PERIOD_DIFF() | 返回两个年月格式的日期数据之间的月份数 | | QUARTER() | 返回日期参数所在的季度 | | SEC_TO_TIME() | 将秒数转换为 ‘HH:MM:SS’ 格式 | | SECOND() | 返回参数中的秒数 (0-59) | | STR_TO_DATE() | 将字符串转换为日期数据 | | SUBDATE() | 以三个参数调用的时候是 DATE_SUB() 的同义词 | | SUBTIME() | 减去时间 | | SYSDATE() | 返回函数执行的时的时刻 | | TIME_FORMAT() | 格式化时间 | | TIME_TO_SEC() | 将时间参数转换为秒数 | | TIME() | 返回参数表达式中的时间部分 | | TIMEDIFF() | 将两个时间相减 | | TIMESTAMP() | 只有一个参数时，该函数返回 date 或者 datetime 表达式。当有两个参数时，将两个参数相加。 | | TIMESTAMPADD() | 在 datetime 表达式上加上一段时间 | | TIMESTAMPDIFF() | 在 datetime 表达式上减去一段时间 | | TO_DAYS() | 将日期参数转换为天数 | | UNIX_TIMESTAMP() | 返回 UNIX 时间戳 | | UTC_DATE() | 返回当前 UTC 日期 | | UTC_TIME() | 返回当前 UTC 时间 | | UTC_TIMESTAMP() | 返回当前 UTC 日期和时间 | | WEEK() | 返回参数的星期数 | | WEEKDAY() | 返回日期参数时一个星期中的第几天 | | WEEKOFYEAR() | 返回日期参数是日历上的第几周 (1-53) | | YEAR() | 返回日期参数中的年份 | | YEARWEEK() | 返回年份和星期 |</p>\n<h2 id=\"ADDDATE-date-INTERVAL-expr-unit-ADDDATE-expr-days\"><a href=\"#ADDDATE-date-INTERVAL-expr-unit-ADDDATE-expr-days\" class=\"headerlink\" title=\"ADDDATE(date, INTERVAL expr unit), ADDDATE(expr, days)\"></a>ADDDATE(date, INTERVAL expr unit), ADDDATE(expr, days)</h2><hr>\n<p>如果调用时第二个参数为 INTERVAL 形式的话，ADDDATE() 就是 DATE_ADD() 的同义词。同样的情况下，SUBDATE() 是 DATE_SUB() 的同义词。有关 INTERVAL 单位参数的信息，见有关 DATE_ADD() 的讨论。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT DATE_ADD(&#x27;1998-01-02&#x27;, INTERVAL 31 DAY);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DATE_ADD(&#x27;1998-01-02&#x27;, INTERVAL 31 DAY)                 |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1998-02-02                                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT ADDDATE(&#x27;1998-01-02&#x27;, INTERVAL 31 DAY);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| ADDDATE(&#x27;1998-01-02&#x27;, INTERVAL 31 DAY)                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1998-02-02                                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>如果调用时第二个参数为天数形式的话，则 MySQL 会将其作为整数加到 expr 上。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT ADDDATE(&#x27;1998-01-02&#x27;, 31);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DATE_ADD(&#x27;1998-01-02&#x27;, INTERVAL 31 DAY)                 |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1998-02-02                                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ADDTIME-expr1-expr2\"><a href=\"#ADDTIME-expr1-expr2\" class=\"headerlink\" title=\"ADDTIME(expr1,expr2)\"></a>ADDTIME(expr1,expr2)</h2><hr>\n<p>ADDTIME() 将 expr2 加到 expr1 上，并返回结果。expr1 为 time 或者 datetime 表达式，expr2 为 time 表达式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT ADDTIME(&#x27;1997-12-31 23:59:59.999999&#x27;,&#x27;1 1:1:1.000002&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DATE_ADD(&#x27;1997-12-31 23:59:59.999999&#x27;,&#x27;1 1:1:1.000002&#x27;) |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1998-01-02 01:01:01.000001                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CONVERT-TZ-dt-from-tz-to-tz\"><a href=\"#CONVERT-TZ-dt-from-tz-to-tz\" class=\"headerlink\" title=\"CONVERT_TZ(dt,from_tz,to_tz)\"></a>CONVERT_TZ(dt,from_tz,to_tz)</h2><hr>\n<p>该函数将 datetime 类型的值 dt 的时区从 from_dt 转换为 to_dt，并返回结果。如果参数无效，则函数返回 NULL。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT CONVERT_TZ(&#x27;2004-01-01 12:00:00&#x27;,&#x27;GMT&#x27;,&#x27;MET&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| CONVERT_TZ(&#x27;2004-01-01 12:00:00&#x27;,&#x27;GMT&#x27;,&#x27;MET&#x27;)           |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2004-01-01 13:00:00                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT CONVERT_TZ(&#x27;2004-01-01 12:00:00&#x27;,&#x27;+00:00&#x27;,&#x27;+10:00&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| CONVERT_TZ(&#x27;2004-01-01 12:00:00&#x27;,&#x27;+00:00&#x27;,&#x27;+10:00&#x27;)     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2004-01-01 22:00:00                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CURDATE\"><a href=\"#CURDATE\" class=\"headerlink\" title=\"CURDATE()\"></a>CURDATE()</h2><hr>\n<p>以 ‘YYYY-MM-DD’（字符串） 或者 YYYYMMDD（数值） 的形式返回当前日期， 具体形式取决于函数处于字符串还是数值型的上下文环境中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT CURDATE();</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| CURDATE()                                               |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1997-12-15                                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT CURDATE() + 0;</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| CURDATE() + 0                                           |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 19971215                                                |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CURRENT-DATE-and-CURRENT-DATE\"><a href=\"#CURRENT-DATE-and-CURRENT-DATE\" class=\"headerlink\" title=\"CURRENT_DATE and CURRENT_DATE()\"></a>CURRENT_DATE and CURRENT_DATE()</h2><hr>\n<p>CURRENT_DATE 和 CURRENT_DATE() 是 CURDATE() 的别名。</p>\n<h2 id=\"CURTIME\"><a href=\"#CURTIME\" class=\"headerlink\" title=\"CURTIME()\"></a>CURTIME()</h2><hr>\n<p>以 ‘HH:MM:SS’（字符串） 或者 HHMMSS（数值） 的形式返回当前时间， 具体形式取决于函数处于字符串还是数值型的上下文环境中。该函数按照当前时区来表示返回值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT CURTIME();</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| CURTIME()                                               |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 23:50:26                                                |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT CURTIME() + 0;</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| CURTIME() + 0                                           |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 235026                                                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CURRENT-TIME-and-CURRENT-TIME\"><a href=\"#CURRENT-TIME-and-CURRENT-TIME\" class=\"headerlink\" title=\"CURRENT_TIME and CURRENT_TIME()\"></a>CURRENT_TIME and CURRENT_TIME()</h2><hr>\n<p>CURRENT_TIME 和 CURRENT_TIME() 是 CURTIME() 的别名。</p>\n<h2 id=\"CURRENT-TIMESTAMP-and-CURRENT-TIMESTAMP\"><a href=\"#CURRENT-TIMESTAMP-and-CURRENT-TIMESTAMP\" class=\"headerlink\" title=\"CURRENT_TIMESTAMP and CURRENT_TIMESTAMP()\"></a>CURRENT_TIMESTAMP and CURRENT_TIMESTAMP()</h2><hr>\n<p>CURRENT_TIMESTAMP 和 CURRENT_TIMESTAMP() 是 NOW() 的别名。</p>\n<h2 id=\"DATE-expr\"><a href=\"#DATE-expr\" class=\"headerlink\" title=\"DATE(expr)\"></a>DATE(expr)</h2><hr>\n<p>提取 date 表达式或者 datetime 表达式中的日期部分。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT DATE(&#x27;2003-12-31 01:02:03&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DATE(&#x27;2003-12-31 01:02:03&#x27;)                             |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">|  2003-12-31                                             |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DATEDIFF-expr1-expr2\"><a href=\"#DATEDIFF-expr1-expr2\" class=\"headerlink\" title=\"DATEDIFF(expr1,expr2)\"></a>DATEDIFF(expr1,expr2)</h2><hr>\n<p>DATEDIFF() 返回 expr1 和 expr2 的差，以天数的形式表示。expr1 和 expr2 应为 date 或者 datetime 表达式。只有参数的日期部分参与了计算。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT DATEDIFF(&#x27;1997-12-31 23:59:59&#x27;,&#x27;1997-12-30&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DATEDIFF(&#x27;1997-12-31 23:59:59&#x27;,&#x27;1997-12-30&#x27;)            |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DATE-ADD-date-INTERVAL-expr-unit-DATE-SUB-date-INTERVAL-expr-unit\"><a href=\"#DATE-ADD-date-INTERVAL-expr-unit-DATE-SUB-date-INTERVAL-expr-unit\" class=\"headerlink\" title=\"DATE_ADD(date,INTERVAL expr unit), DATE_SUB(date,INTERVAL expr unit)\"></a>DATE_ADD(date,INTERVAL expr unit), DATE_SUB(date,INTERVAL expr unit)</h2><hr>\n<p>这些函数进行有关日期的算术运算。date 是一个 DATETIME 或者 DATE 类型的值，指明了起始时间。expr 表达式则是 date 要增加或者减去的时间间隔。expr 是一个字符串，可以以 ‘-‘ 开始来表示负时间区间。 unit 是一个关键词，指明了expr 的单位。</p>\n<p>INTERVAL 关键字和 unit（单位）指示符不区分大小写。</p>\n<p>下表列出了对于每种单位，expr 应有的形式。</p>\n<p>|——————–|————| | unit 值 | expr 应有的格式 | | MICROSECOND | 微秒 | | SECOND | 秒 | | MINUTE | 分钟 | | HOUR | 小时 | | DAY | 天 | | WEEK | 星期 | | MONTH | 月 | | QUARTER | 季度 | | YEAR | 年 | | SECOND_MICROSECOND | ‘秒.微秒’ | | MINUTE_MICROSECOND | ‘分.微秒’ | | MINUTE_SECOND | ‘分:秒’ | | HOUR_MICROSECOND | ‘小时.微秒’ | | HOUR_SECOND | ‘时:分:秒’ | | HOUR_MINUTE | ‘时:分’ | | DAY_MICROSECOND | ‘天.微秒’ | | DAY_SECOND | ‘天 时:分:秒’ | | DAY_MINUTE | ‘天 时:分’ | | DAY_HOUR | ‘天 时’ | | YEAR_MONTH | ‘年-月’ |</p>\n<p>QUARTER 和 WEEK 自 MySQL 5.0.0 起受到支持。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT DATE_ADD(&#x27;1997-12-31 23:59:59&#x27;, </span><br><span class=\"line\">    -&gt; INTERVAL &#x27;1:1&#x27; MINUTE_SECOND);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DATE_ADD(&#x27;1997-12-31 23:59:59&#x27;, INTERVAL...             |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1998-01-01 00:01:00                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT DATE_ADD(&#x27;1999-01-01&#x27;, INTERVAL 1 HOUR);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DATE_ADD(&#x27;1999-01-01&#x27;, INTERVAL 1 HOUR)                 |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1999-01-01 01:00:00                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DATE-FORMAT-date-format\"><a href=\"#DATE-FORMAT-date-format\" class=\"headerlink\" title=\"DATE_FORMAT(date,format)\"></a>DATE_FORMAT(date,format)</h2><hr>\n<p>根据格式字符串对日期值进行格式化。</p>\n<p>下面这些占位符可以用在格式字符串中，’%’ 必须出现在特定的格式字符之前。</p>\n<p>|—–|——————————————| | 占位符 | 描述 | | %a | 简写的星期名称（Sun..Sat） | | %b | 简写的月份名称 （Jan..Dec） | | %c | 月份，以数值形式表示（0..12） | | %D | 月份中的日期，带有英文后缀（0th，1st，2nd，3rd 等等） | | %d | 月份中的日期，以数值表示 (00..31) | | %e | 月份中的日期，以数值表示 (0..31) | | %f | 微秒（000000..999999） | | %H | 小时(00..23) | | %h | 小时(01..12) | | %I | 小时(01..12) | | %i | 分钟,以数值表示(00..59) | | %j | 一年中的第几天（001..366） | | %k | 小时（0..23） | | %l | 小时（1..12） | | %M | 月份的名称（January..December） | | %m | 月份，以数值形式表示（00..12） | | %p | AM 或者 PM | | %r | 时间，12 小时制(hh:mm:ss followed by AM or PM) | | %S | 秒(00..59) | | %s | 秒(00..59) | | %T | 时间，24小时制（hh:mm:ss） | | %U | 星期（00..53），此处星期日为一周的第一天 | | %u | 星期（00..53），此处星期一为一周的第一天 | | %V | 星期（01..53），此处星期日为一周的第一天；与 %X 一起使用。 | | %v | 星期（01..53），此处星期一为一周的第一天；与 %x 一起使用。 | | %W | 一周中日期的名称（Sunday..Saturday） | | %w | 一周中的第几天（0&#x3D;Sunday..6&#x3D;Saturday） | | %X | 以星期日为第一天的周所处的年份，四位数字表示；同 %V 一起使用。 | | %x | 以星期一为第一天的周所处的年份，四位数字表示；同 %v 一起使用。 | | %Y | 年份，四位数字表示。 | | %y | 年份，两位数字表示。 | | %% | % 字面值 | | %x | x，针对任何以上没有列出的情况。 |</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT DATE_FORMAT(&#x27;1997-10-04 22:23:00&#x27;, &#x27;%W %M %Y&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DATE_FORMAT(&#x27;1997-10-04 22:23:00&#x27;, &#x27;%W %M %Y&#x27;)          |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| Saturday October 1997                                   |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT DATE_FORMAT(&#x27;1997-10-04 22:23:00&#x27;</span><br><span class=\"line\">    -&gt; &#x27;%H %k %I %r %T %S %w&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DATE_FORMAT(&#x27;1997-10-04 22:23:00.......                 |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">|  22 22 10 10:23:00 PM 22:23:00 00 6                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DATE-SUB-date-INTERVAL-expr-unit\"><a href=\"#DATE-SUB-date-INTERVAL-expr-unit\" class=\"headerlink\" title=\"DATE_SUB(date,INTERVAL expr unit)\"></a>DATE_SUB(date,INTERVAL expr unit)</h2><hr>\n<p>同 DATE_ADD() 函数相似。</p>\n<h2 id=\"DAY-date\"><a href=\"#DAY-date\" class=\"headerlink\" title=\"DAY(date)\"></a>DAY(date)</h2><hr>\n<p>DAY() 是 DAYOFMONTH() 的别名。</p>\n<h2 id=\"DAYNAME-date\"><a href=\"#DAYNAME-date\" class=\"headerlink\" title=\"DAYNAME(date)\"></a>DAYNAME(date)</h2><hr>\n<p>返回 date 在星期中的名称。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT DAYNAME(&#x27;1998-02-05&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DAYNAME(&#x27;1998-02-05&#x27;)                                   |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| Thursday                                                |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DAYOFMONTH-date\"><a href=\"#DAYOFMONTH-date\" class=\"headerlink\" title=\"DAYOFMONTH(date)\"></a>DAYOFMONTH(date)</h2><hr>\n<p>返回 date 是当月的第几天，范围为 0 到 31。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT DAYOFMONTH(&#x27;1998-02-03&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DAYOFMONTH(&#x27;1998-02-03&#x27;)                                |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 3                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DAYOFWEEK-date\"><a href=\"#DAYOFWEEK-date\" class=\"headerlink\" title=\"DAYOFWEEK(date)\"></a>DAYOFWEEK(date)</h2><hr>\n<p>返回 date 是其所在星期的第几天(1 &#x3D; Sunday, 2 &#x3D; Monday,.., 7 &#x3D; Saturday)，这里一星期中日期的名称与数字的对应关系符合 ODBC 标准。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT DAYOFWEEK(&#x27;1998-02-03&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">|DAYOFWEEK(&#x27;1998-02-03&#x27;)                                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 3                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DAYOFYEAR-date\"><a href=\"#DAYOFYEAR-date\" class=\"headerlink\" title=\"DAYOFYEAR(date)\"></a>DAYOFYEAR(date)</h2><hr>\n<p>返回 date 是当年的第几天，范围为 1 到 366。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT DAYOFYEAR(&#x27;1998-02-03&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DAYOFYEAR(&#x27;1998-02-03&#x27;)                                 |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 34                                                      |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"EXTRACT-unit-FROM-date\"><a href=\"#EXTRACT-unit-FROM-date\" class=\"headerlink\" title=\"EXTRACT(unit FROM date)\"></a>EXTRACT(unit FROM date)</h2><hr>\n<p>EXTRACT() 与 DATE_ADD() 和 DATE_SUB() 使用相同的表示单位的占位符，其作用是提取日期值中相应的组成部分，而不是进行日期运算。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT EXTRACT(YEAR FROM &#x27;1999-07-02&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| EXTRACT(YEAR FROM &#x27;1999-07-02&#x27;)                         |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1999                                                    |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT EXTRACT(YEAR_MONTH FROM &#x27;1999-07-02 01:02:03&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| EXTRACT(YEAR_MONTH FROM &#x27;1999-07-02 01:02:03&#x27;)          |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 199907                                                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"FROM-DAYS-N\"><a href=\"#FROM-DAYS-N\" class=\"headerlink\" title=\"FROM_DAYS(N)\"></a>FROM_DAYS(N)</h2><hr>\n<p>给出天数 N，返回 DATE 值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT FROM_DAYS(729669);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| FROM_DAYS(729669)                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1997-10-07                                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>在使用 FROM_DAYS() 处理比较老的日期的时候应当特别小心，该函数不适用于格里高利历诞生（1582）之前的日期。</p>\n<h2 id=\"FROM-UNIXTIME-unix-timestamp-FROM-UNIXTIME-unix-timestamp-format\"><a href=\"#FROM-UNIXTIME-unix-timestamp-FROM-UNIXTIME-unix-timestamp-format\" class=\"headerlink\" title=\"FROM_UNIXTIME(unix_timestamp), FROM_UNIXTIME(unix_timestamp,format)\"></a>FROM_UNIXTIME(unix_timestamp), FROM_UNIXTIME(unix_timestamp,format)</h2><hr>\n<p>返回 UNIX 时间戳对应的日期值，根据函数所处的上下文环境不同，返回值得格式也不同，字符串上下文返回格式为 ‘YYYY-MM-DD HH:MM:SS’，数值型上下文返回格式则为 YYYYMMDDHHMMSS。返回值的时区为系统当前时区。UNIX 时间戳是一种系统内部时间表示，例如 UNIX_TIMESTAMP() 的返回值。</p>\n<p>如果给定格式的话，返回结果将会根据格式字符串进行格式化，其规则同 DATE_FORMAT() 函数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT FROM_UNIXTIME(875996580);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| FROM_UNIXTIME(875996580)                                |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1997-10-04 22:23:00                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HOUR-time\"><a href=\"#HOUR-time\" class=\"headerlink\" title=\"HOUR(time)\"></a>HOUR(time)</h2><hr>\n<p>返回时间值的小时部分。对于一天中的时间来说，返回值的范围为 0 到 23。不过，TIME 类型的值可以大得多，所以 HOUR 函数可以返回比 23 大的值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT HOUR(&#x27;10:05:03&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| HOUR(&#x27;10:05:03&#x27;)                                        |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 10                                                      |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LAST-DAY-date\"><a href=\"#LAST-DAY-date\" class=\"headerlink\" title=\"LAST_DAY(date)\"></a>LAST_DAY(date)</h2><hr>\n<p>返回 date 或者 datetime 值所在月份的最后一天。如果参数无效的话，返回　NULL。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT LAST_DAY(&#x27;2003-02-05&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| LAST_DAY(&#x27;2003-02-05&#x27;)                                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2003-02-28                                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LOCALTIME-and-LOCALTIME\"><a href=\"#LOCALTIME-and-LOCALTIME\" class=\"headerlink\" title=\"LOCALTIME and LOCALTIME()\"></a>LOCALTIME and LOCALTIME()</h2><hr>\n<p>LOCALTIME 和 LOCALTIME() 是 NOW() 的别名。</p>\n<h2 id=\"LOCALTIMESTAMP-and-LOCALTIMESTAMP\"><a href=\"#LOCALTIMESTAMP-and-LOCALTIMESTAMP\" class=\"headerlink\" title=\"LOCALTIMESTAMP and LOCALTIMESTAMP()\"></a>LOCALTIMESTAMP and LOCALTIMESTAMP()</h2><hr>\n<p>LOCALTIMESTAMP 和 LOCALTIMESTAMP() 是 NOW() 的别名。</p>\n<h2 id=\"MAKEDATE-year-dayofyear\"><a href=\"#MAKEDATE-year-dayofyear\" class=\"headerlink\" title=\"MAKEDATE(year,dayofyear)\"></a>MAKEDATE(year,dayofyear)</h2><hr>\n<p>给定年份和（某天在一年中）的天数，返回对应的日期值。天数必须大于 0，否则返回值为 NULL。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT MAKEDATE(2001,31), MAKEDATE(2001,32);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| MAKEDATE(2001,31), MAKEDATE(2001,32)                    |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| &#x27;2001-01-31&#x27;, &#x27;2001-02-01&#x27;                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MAKETIME-hour-minute-second\"><a href=\"#MAKETIME-hour-minute-second\" class=\"headerlink\" title=\"MAKETIME(hour,minute,second)\"></a>MAKETIME(hour,minute,second)</h2><hr>\n<p>根据参数给出的时、分、秒，返回对应的时间值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT MAKETIME(12,15,30);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| MAKETIME(12,15,30)                                      |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| &#x27;12:15:30&#x27;                                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MICROSECOND-expr\"><a href=\"#MICROSECOND-expr\" class=\"headerlink\" title=\"MICROSECOND(expr)\"></a>MICROSECOND(expr)</h2><hr>\n<p>根据 time 或者 datetime 表达式 expr，返回微秒数，结果在 0 到 999999 之间。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT MICROSECOND(&#x27;12:00:00.123456&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| MICROSECOND(&#x27;12:00:00.123456&#x27;)                          |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 123456                                                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MINUTE-time\"><a href=\"#MINUTE-time\" class=\"headerlink\" title=\"MINUTE(time)\"></a>MINUTE(time)</h2><hr>\n<p>返回时间型值中的分钟部分，范围为 0 到 59。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT MINUTE(&#x27;98-02-03 10:05:03&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| MINUTE(&#x27;98-02-03 10:05:03&#x27;)                             |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 5                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MONTH-date\"><a href=\"#MONTH-date\" class=\"headerlink\" title=\"MONTH(date)\"></a>MONTH(date)</h2><hr>\n<p>返回日期型值中的月份，范围为 0 到 12。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT MONTH(&#x27;1998-02-03&#x27;)</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| MONTH(&#x27;1998-02-03&#x27;)                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MONTHNAME-date\"><a href=\"#MONTHNAME-date\" class=\"headerlink\" title=\"MONTHNAME(date)\"></a>MONTHNAME(date)</h2><hr>\n<p>返回日期型值所处月份的全名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT MONTHNAME(&#x27;1998-02-05&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| MONTHNAME(&#x27;1998-02-05&#x27;)                                 |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| February                                                |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NOW\"><a href=\"#NOW\" class=\"headerlink\" title=\"NOW()\"></a>NOW()</h2><hr>\n<p>返回当前的日期和时间，结果的格式为 ‘YYYY-MM-DD HH:MM:SS’ 或者 YYYYMMDDHHMMSS，如果函数上下文环境为字符型，则返回前者，否则如果函数处于数值型的上下文环境，则返回后者。返回值的时区为系统当前时区。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT NOW();</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| NOW()                                                   |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1997-12-15 23:50:26                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PERIOD-ADD-P-N\"><a href=\"#PERIOD-ADD-P-N\" class=\"headerlink\" title=\"PERIOD_ADD(P,N)\"></a>PERIOD_ADD(P,N)</h2><hr>\n<p>在时间 P（格式为 YYMM 或者 YYYYMM）上加上 N 个月，结果格式为 YYYYMM。注意，时间参数 P 并不是日期型值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT PERIOD_ADD(9801,2);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| PERIOD_ADD(9801,2)                                      |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 199803                                                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PERIOD-DIFF-P1-P2\"><a href=\"#PERIOD-DIFF-P1-P2\" class=\"headerlink\" title=\"PERIOD_DIFF(P1,P2)\"></a>PERIOD_DIFF(P1,P2)</h2><hr>\n<p>返回时间 P1 和 P2 之间相差的月份。 P1 和 P2 的格式应为 YYMM 或者 YYYYMM。注意I，P1 和 P2 不是日期型值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT PERIOD_DIFF(9802,199703);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| PERIOD_DIFF(9802,199703)                                |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 11                                                      |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"QUARTER-date\"><a href=\"#QUARTER-date\" class=\"headerlink\" title=\"QUARTER(date)\"></a>QUARTER(date)</h2><hr>\n<p>返回日期型值 date 所处的季度值，范围为 1 到 4。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT QUARTER(&#x27;98-04-01&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| QUARTER(&#x27;98-04-01&#x27;)                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SECOND-time\"><a href=\"#SECOND-time\" class=\"headerlink\" title=\"SECOND(time)\"></a>SECOND(time)</h2><hr>\n<p>返回时间型值中秒的部分，范围为 0 到 59。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT SECOND(&#x27;10:05:03&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| SECOND(&#x27;10:05:03&#x27;)                                      |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 3                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SEC-TO-TIME-seconds\"><a href=\"#SEC-TO-TIME-seconds\" class=\"headerlink\" title=\"SEC_TO_TIME(seconds)\"></a>SEC_TO_TIME(seconds)</h2><hr>\n<p>将参数中的秒数转换为时分秒的格式 ‘HH:MM:SS’ 或者 HHMMSS，如果函数所处的上下文为字符串型，则返回前者，否则如果上下文环境为数值型，则返回后者。</p>\n<h2 id=\"STR-TO-DATE-str-format\"><a href=\"#STR-TO-DATE-str-format\" class=\"headerlink\" title=\"STR_TO_DATE(str,format)\"></a>STR_TO_DATE(str,format)</h2><hr>\n<p>这是 DATE_FORMATE() 函数的逆函数，其参数为表示时间和日期的字符串 str 和一个格式字符串 format。如果格式字符串中既有日期又有时间，则 STR_TO_DATE() 返回 DATETIME() 型的值，否则返回日期型（DATE）或者时间型（TIME）的值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT STR_TO_DATE(&#x27;04/31/2004&#x27;, &#x27;%m/%d/%Y&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| STR_TO_DATE(&#x27;04/31/2004&#x27;, &#x27;%m/%d/%Y&#x27;)                   |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2004-04-31                                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SUBDATE-date-INTERVAL-expr-unit-and-SUBDATE-expr-days\"><a href=\"#SUBDATE-date-INTERVAL-expr-unit-and-SUBDATE-expr-days\" class=\"headerlink\" title=\"SUBDATE(date,INTERVAL expr unit) and SUBDATE(expr,days)\"></a>SUBDATE(date,INTERVAL expr unit) and SUBDATE(expr,days)</h2><hr>\n<p>当第二个参数为 INTERVAL 形式时，SUBDATE() 就是 DATE_SUB() 的别名。INTERVAL 参数中单位的信息，请见有关 DATE_ADD() 的讨论。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT DATE_SUB(&#x27;1998-01-02&#x27;, INTERVAL 31 DAY);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DATE_SUB(&#x27;1998-01-02&#x27;, INTERVAL 31 DAY)                 |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1997-12-02                                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT SUBDATE(&#x27;1998-01-02&#x27;, INTERVAL 31 DAY);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| SUBDATE(&#x27;1998-01-02&#x27;, INTERVAL 31 DAY)                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1997-12-02                                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SUBTIME-expr1-expr2\"><a href=\"#SUBTIME-expr1-expr2\" class=\"headerlink\" title=\"SUBTIME(expr1,expr2)\"></a>SUBTIME(expr1,expr2)</h2><hr>\n<p>SUBTIME() 返回 expr1-expr2，结果的格式与 expr1 相同。expr1 是一个时间型（time）或者 datetime 型的表达式，expr2 是时间型值。</p>\n<h2 id=\"SYSDATE\"><a href=\"#SYSDATE\" class=\"headerlink\" title=\"SYSDATE()\"></a>SYSDATE()</h2><hr>\n<p>返回当前的日期和时间，格式为 ‘YYYY-MM-DD HH:MM:SS’ 或 YYYYMMDDHHMMSS，如果函数所处的上下文环境为字符串，则返回前者，否则如果上下文环境为数值型，则返回后者。</p>\n<p>sql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT SYSDATE();</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| SYSDATE()                                               |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2006-04-12 13:47:44                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TIME-expr\"><a href=\"#TIME-expr\" class=\"headerlink\" title=\"TIME(expr)\"></a>TIME(expr)</h2><hr>\n<p>提取时间型或者 datetime 型表达式 expr 中的时间部分，返回结果为字符串。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT TIME(&#x27;2003-12-31 01:02:03&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| TIME(&#x27;2003-12-31 01:02:03&#x27;)                             |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 01:02:03                                                |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TIMEDIFF-expr1-expr2\"><a href=\"#TIMEDIFF-expr1-expr2\" class=\"headerlink\" title=\"TIMEDIFF(expr1,expr2)\"></a>TIMEDIFF(expr1,expr2)</h2><hr>\n<p>TIMEDIFF() 返回 expr1-expr2，结果为时间型值。expr1 和 expr2 可以为时间型或者 datetime 型表达式，不过二者必须为相同类型。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT TIMEDIFF(&#x27;1997-12-31 23:59:59.000001&#x27;,</span><br><span class=\"line\">    -&gt; &#x27;1997-12-30 01:01:01.000002&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| TIMEDIFF(&#x27;1997-12-31 23:59:59.000001&#x27;.....              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">|  46:58:57.999999                                        |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TIMESTAMP-expr-TIMESTAMP-expr1-expr2\"><a href=\"#TIMESTAMP-expr-TIMESTAMP-expr1-expr2\" class=\"headerlink\" title=\"TIMESTAMP(expr), TIMESTAMP(expr1,expr2)\"></a>TIMESTAMP(expr), TIMESTAMP(expr1,expr2)</h2><hr>\n<p>只有一个参数的时候，该函数由日期型或者 datetime 型表达式返回一个 datetime 型值。有两个参数的时候，该函数将 expr2 加到日期型或 datetime 型值 expr1 上，并返回 datetime 型的结果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT TIMESTAMP(&#x27;2003-12-31&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| TIMESTAMP(&#x27;2003-12-31&#x27;)                                 |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2003-12-31 00:00:00                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TIMESTAMPADD-unit-interval-datetime-expr\"><a href=\"#TIMESTAMPADD-unit-interval-datetime-expr\" class=\"headerlink\" title=\"TIMESTAMPADD(unit,interval,datetime_expr)\"></a>TIMESTAMPADD(unit,interval,datetime_expr)</h2><hr>\n<p>将整数型的表达式 interval 加到日期型或者 datetime 型表达式 datetime_expr 上。单位由 unit 参数给出，其取值应为以下几种中的一种：FRAC_SECOND、SECOND、MINUTE、HOUR、DAY、WEEK、MONTH、QUARTER 或者 YEAR。</p>\n<p>单位 unit 可以为上述关键字中的一个，也可以添加一个 SQL<em>TSI</em> 前缀，例如 DAY 和 SQL_TSI_DAY 都是合法的。</p>\n<p>sql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT TIMESTAMPADD(MINUTE,1,&#x27;2003-01-02&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| TIMESTAMPADD(MINUTE,1,&#x27;2003-01-02&#x27;)                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2003-01-02 00:01:00                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TIMESTAMPDIFF-unit-datetime-expr1-datetime-expr2\"><a href=\"#TIMESTAMPDIFF-unit-datetime-expr1-datetime-expr2\" class=\"headerlink\" title=\"TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)\"></a>TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)</h2><hr>\n<p>返回日期型或者 datetime 型表达式 datetime_expr1 和 datetime_expr2 的差。结果的单位由 unit 参数给出，unit 的取值规定同 TIMESTAMPADD() 函数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT TIMESTAMPDIFF(MONTH,&#x27;2003-02-01&#x27;,&#x27;2003-05-01&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| TIMESTAMPDIFF(MONTH,&#x27;2003-02-01&#x27;,&#x27;2003-05-01&#x27;)          |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 3                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TIME-FORMAT-time-format\"><a href=\"#TIME-FORMAT-time-format\" class=\"headerlink\" title=\"TIME_FORMAT(time,format)\"></a>TIME_FORMAT(time,format)</h2><hr>\n<p>该函数使用起来类似 DATE_FORMAT() 函数，但是格式字符串 format 中只能有与小时、分钟和秒有关的那些占位符。</p>\n<p>如果时间型值的小时部分大于 23，则 %H 和 %k 格式占位符将会产生一个大于通常的 0-23 的值，其他与小时有关的占位符则会返回小时值除以 12 后的余数（modulo 12）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT TIME_FORMAT(&#x27;100:00:00&#x27;, &#x27;%H %k %h %I %l&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| TIME_FORMAT(&#x27;100:00:00&#x27;, &#x27;%H %k %h %I %l&#x27;)              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 100 100 04 04 4                                         |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TIME-TO-SEC-time\"><a href=\"#TIME-TO-SEC-time\" class=\"headerlink\" title=\"TIME_TO_SEC(time)\"></a>TIME_TO_SEC(time)</h2><hr>\n<p>将时间型值转换为秒。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT TIME_TO_SEC(&#x27;22:23:00&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| TIME_TO_SEC(&#x27;22:23:00&#x27;)                                 |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 80580                                                   |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)、</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TO-DAYS-date\"><a href=\"#TO-DAYS-date\" class=\"headerlink\" title=\"TO_DAYS(date)\"></a>TO_DAYS(date)</h2><hr>\n<p>给定日期型值 date，返回天数（自公元 0 年以来的天数）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT TO_DAYS(950501);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| TO_DAYS(950501)                                         |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 728779                                                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"UNIX-TIMESTAMP-UNIX-TIMESTAMP-date\"><a href=\"#UNIX-TIMESTAMP-UNIX-TIMESTAMP-date\" class=\"headerlink\" title=\"UNIX_TIMESTAMP(), UNIX_TIMESTAMP(date)\"></a>UNIX_TIMESTAMP(), UNIX_TIMESTAMP(date)</h2><hr>\n<p>不带任何参数时，该函数返回一个 unsigned integer 型的 UNIX 时间戳（自 ‘1970-01-01 00:00:00’ UTC 以来的秒数）。如果有一个参数 date 的话，该函数返回自 ‘1970-01-01 00:00:00’ UTC 至 date 的秒数。date 可以是日期型的字符串、DATETIME 型的字符串、时间戳或者 YYMMDD 或 YYYYMMDD 格式的数字。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT UNIX_TIMESTAMP();</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| UNIX_TIMESTAMP()                                        |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 882226357                                               |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT UNIX_TIMESTAMP(&#x27;1997-10-04 22:23:00&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| UNIX_TIMESTAMP(&#x27;1997-10-04 22:23:00&#x27;)                   |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 875996580                                               |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"UTC-DATE-UTC-DATE\"><a href=\"#UTC-DATE-UTC-DATE\" class=\"headerlink\" title=\"UTC_DATE, UTC_DATE()\"></a>UTC_DATE, UTC_DATE()</h2><hr>\n<p>返回当前 UTC 日期，格式为 ‘YYYY-MM-DD’ 或者 YYYYMMDD，如果函数所处的上下文环境为字符串，则返回前者，否则如果上下文环境为数值型的，则返回后者。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT UTC_DATE(), UTC_DATE() + 0;</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| UTC_DATE(), UTC_DATE() + 0                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2003-08-14, 20030814                                    |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"UTC-TIME-UTC-TIME\"><a href=\"#UTC-TIME-UTC-TIME\" class=\"headerlink\" title=\"UTC_TIME, UTC_TIME()\"></a>UTC_TIME, UTC_TIME()</h2><hr>\n<p>返回当前 UTC 时间，格式为 ‘HH:MM:SS’ 或者 HHMMSS，如果函数所处的上下文环境为字符串，则返回前者，否则如果上下文环境为数值型的，则返回后者。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0                    |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2003-08-14 18:08:04, 20030814180804                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"WEEK-date-mode\"><a href=\"#WEEK-date-mode\" class=\"headerlink\" title=\"WEEK(date[,mode])\"></a>WEEK(date[,mode])</h2><hr>\n<p>该函数将返回 date 所在的周是当年的第几周。两个参数的 WEEK() 函数的使你能够指明一周起始于周日还是周一，以及返回值的范围应该是 0 到 53，还是 1 到 53。如果 mode 参数被忽略，则将使用 default_week_format 系统变量。</p>\n<p>|——|——–|——|————| | Mode | 一周的第一天 | 范围 | 周 1 是第一周 | | 0 | Sunday | 0-53 | 该年包括一个星期天 | | 1 | Monday | 0-53 | 该年包含超过 3 天 | | 2 | Sunday | 1-53 | 该年包括一个星期天 | | 3 | Monday | 1-53 | 该年包含超过 3 天 | | 4 | Sunday | 0-53 | 该年包含超过 3 天 | | 5 | Monday | 0-53 | 该年包括一个星期一 | | 6 | Sunday | 1-53 | 该年包含超过 3 天 | | 7 | Monday | 1-53 | 该年包括一个星期一 |</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT WEEK(&#x27;1998-02-20&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| WEEK(&#x27;1998-02-20&#x27;)                                      |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 7                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"WEEKDAY-date\"><a href=\"#WEEKDAY-date\" class=\"headerlink\" title=\"WEEKDAY(date)\"></a>WEEKDAY(date)</h2><hr>\n<p>返回 date 是其所在星期的第几天 (0 &#x3D; Monday, 1 &#x3D; Tuesday, . 6 &#x3D; Sunday)。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT WEEKDAY(&#x27;1998-02-03 22:23:00&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| WEEKDAY(&#x27;1998-02-03 22:23:00&#x27;)                          |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"WEEKOFYEAR-date\"><a href=\"#WEEKOFYEAR-date\" class=\"headerlink\" title=\"WEEKOFYEAR(date)\"></a>WEEKOFYEAR(date)</h2><hr>\n<p>返回 date 所在的周是当年的第几周，范围从 1 到 53. WEEKOFYEAR() 是一个兼容性函数，其功能同 WEEK(date, 3)相同。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT WEEKOFYEAR(&#x27;1998-02-20&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| WEEKOFYEAR(&#x27;1998-02-20&#x27;)                                |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 8                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"YEAR-date\"><a href=\"#YEAR-date\" class=\"headerlink\" title=\"YEAR(date)\"></a>YEAR(date)</h2><hr>\n<p>返回 date 的年份部分，范围为 1000 到 9999，对于日期 0 则返回 0。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT YEAR(&#x27;98-02-03&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| YEAR(&#x27;98-02-03&#x27;)                                        |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1998                                                    |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"YEARWEEK-date-YEARWEEK-date-mode\"><a href=\"#YEARWEEK-date-YEARWEEK-date-mode\" class=\"headerlink\" title=\"YEARWEEK(date), YEARWEEK(date,mode)\"></a>YEARWEEK(date), YEARWEEK(date,mode)</h2><hr>\n<p>返回 date 所在的年份和周数。mode 参数意义与 WEEK() 函数的完全一样。对于一年中的第一周和最后一周来说，结果中的年份可能会和 date 参数中的年份不同。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT YEARWEEK(&#x27;1987-01-01&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| YEAR(&#x27;98-02-03&#x27;)YEARWEEK(&#x27;1987-01-01&#x27;)                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 198653                                                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意</strong>，这里的周数同 WEEK() 返回的不同，因为 WEEK() 函数的返回值在给定年份的的上下文环境中得出。</p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"SQL-日期函数\"><a href=\"#SQL-日期函数\" class=\"headerlink\" title=\"SQL 日期函数\"></a>SQL 日期函数</h2><hr>\n<p>下面的列表中是 SQL 中所有与日期和时间相关的重要函数。你所用的 RDBMS 可能会支持更多其他的函数。下面的列表基于 MySQL 关系型数据库管理系统。</p>\n<p>|—————————————-|—————————————————–| | 名称 | 描述 | | ADDDATE() | 增加日期 | | ADDTIME() | 增加时间 | | CONVERT_TZ() | 将当前时区更改为另一时区 | | CURDATE() | 返回当前日期 | | CURRENT_DATE(), CURRENT_DATE | CURDATE() 的别名 | | CURRENT_TIME(), CURRENT_TIME | CURTIME() 的别名 | | CURRENT_TIMESTAMP(), CURRENT_TIMESTAMP | NOW() 的别名 | | CURTIME() | 返回当前时间 | | DATE_ADD() | 将两个日期相加 | | DATE_FORMAT() | 按照指定格式格式化日期 | | DATE_SUB() | 将两个日期相减 | | DATE() | 从 date 或者 datetime 表达式中提取出日期部分 | | DATEDIFF() | 将两个日期相减 | | DAY() | DAYOFMONTH() 的别名 | | DAYNAME() | 返回某天在用星期中的名称 | | DAYOFMONTH() | 返回某天是当月的第几天 （1-31） | | DAYOFWEEK() | 返回某天是该星期的第几天 | | DAYOFYEAR() | 返回某天是一年中的第几天（1-366） | | EXTRACT | 提取日期中的某一部分 | | FROM_DAYS() | 将天数转换为日期 | | FROM_UNIXTIME() | 将某个日期格式化为 UNIX 时间戳 | | HOUR() | 提取小时 | | LAST_DAY | 返回参数日期所在月份的最后一天 | | LOCALTIME(), LOCALTIME | NOW() 的别名 | | LOCALTIMESTAMP, LOCALTIMESTAMP() | NOW() 的别名 | | MAKEDATE() | 利用年份和某天在该年所处的天数来创建日期 | | MAKETIME | MAKETIME() | | MICROSECOND() | 由参数返回微秒 | | MINUTE() | 由参数返回分钟 | | MONTH() | 返回日期参数的月份 | | MONTHNAME() | 返回月份的名字 | | NOW() | 返回当前日期和时间 | | PERIOD_ADD() | 向年月格式的日期数据之间添加一段时间 | | PERIOD_DIFF() | 返回两个年月格式的日期数据之间的月份数 | | QUARTER() | 返回日期参数所在的季度 | | SEC_TO_TIME() | 将秒数转换为 ‘HH:MM:SS’ 格式 | | SECOND() | 返回参数中的秒数 (0-59) | | STR_TO_DATE() | 将字符串转换为日期数据 | | SUBDATE() | 以三个参数调用的时候是 DATE_SUB() 的同义词 | | SUBTIME() | 减去时间 | | SYSDATE() | 返回函数执行的时的时刻 | | TIME_FORMAT() | 格式化时间 | | TIME_TO_SEC() | 将时间参数转换为秒数 | | TIME() | 返回参数表达式中的时间部分 | | TIMEDIFF() | 将两个时间相减 | | TIMESTAMP() | 只有一个参数时，该函数返回 date 或者 datetime 表达式。当有两个参数时，将两个参数相加。 | | TIMESTAMPADD() | 在 datetime 表达式上加上一段时间 | | TIMESTAMPDIFF() | 在 datetime 表达式上减去一段时间 | | TO_DAYS() | 将日期参数转换为天数 | | UNIX_TIMESTAMP() | 返回 UNIX 时间戳 | | UTC_DATE() | 返回当前 UTC 日期 | | UTC_TIME() | 返回当前 UTC 时间 | | UTC_TIMESTAMP() | 返回当前 UTC 日期和时间 | | WEEK() | 返回参数的星期数 | | WEEKDAY() | 返回日期参数时一个星期中的第几天 | | WEEKOFYEAR() | 返回日期参数是日历上的第几周 (1-53) | | YEAR() | 返回日期参数中的年份 | | YEARWEEK() | 返回年份和星期 |</p>\n<h2 id=\"ADDDATE-date-INTERVAL-expr-unit-ADDDATE-expr-days\"><a href=\"#ADDDATE-date-INTERVAL-expr-unit-ADDDATE-expr-days\" class=\"headerlink\" title=\"ADDDATE(date, INTERVAL expr unit), ADDDATE(expr, days)\"></a>ADDDATE(date, INTERVAL expr unit), ADDDATE(expr, days)</h2><hr>\n<p>如果调用时第二个参数为 INTERVAL 形式的话，ADDDATE() 就是 DATE_ADD() 的同义词。同样的情况下，SUBDATE() 是 DATE_SUB() 的同义词。有关 INTERVAL 单位参数的信息，见有关 DATE_ADD() 的讨论。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT DATE_ADD(&#x27;1998-01-02&#x27;, INTERVAL 31 DAY);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DATE_ADD(&#x27;1998-01-02&#x27;, INTERVAL 31 DAY)                 |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1998-02-02                                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT ADDDATE(&#x27;1998-01-02&#x27;, INTERVAL 31 DAY);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| ADDDATE(&#x27;1998-01-02&#x27;, INTERVAL 31 DAY)                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1998-02-02                                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>如果调用时第二个参数为天数形式的话，则 MySQL 会将其作为整数加到 expr 上。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT ADDDATE(&#x27;1998-01-02&#x27;, 31);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DATE_ADD(&#x27;1998-01-02&#x27;, INTERVAL 31 DAY)                 |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1998-02-02                                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ADDTIME-expr1-expr2\"><a href=\"#ADDTIME-expr1-expr2\" class=\"headerlink\" title=\"ADDTIME(expr1,expr2)\"></a>ADDTIME(expr1,expr2)</h2><hr>\n<p>ADDTIME() 将 expr2 加到 expr1 上，并返回结果。expr1 为 time 或者 datetime 表达式，expr2 为 time 表达式。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT ADDTIME(&#x27;1997-12-31 23:59:59.999999&#x27;,&#x27;1 1:1:1.000002&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DATE_ADD(&#x27;1997-12-31 23:59:59.999999&#x27;,&#x27;1 1:1:1.000002&#x27;) |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1998-01-02 01:01:01.000001                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CONVERT-TZ-dt-from-tz-to-tz\"><a href=\"#CONVERT-TZ-dt-from-tz-to-tz\" class=\"headerlink\" title=\"CONVERT_TZ(dt,from_tz,to_tz)\"></a>CONVERT_TZ(dt,from_tz,to_tz)</h2><hr>\n<p>该函数将 datetime 类型的值 dt 的时区从 from_dt 转换为 to_dt，并返回结果。如果参数无效，则函数返回 NULL。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT CONVERT_TZ(&#x27;2004-01-01 12:00:00&#x27;,&#x27;GMT&#x27;,&#x27;MET&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| CONVERT_TZ(&#x27;2004-01-01 12:00:00&#x27;,&#x27;GMT&#x27;,&#x27;MET&#x27;)           |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2004-01-01 13:00:00                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT CONVERT_TZ(&#x27;2004-01-01 12:00:00&#x27;,&#x27;+00:00&#x27;,&#x27;+10:00&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| CONVERT_TZ(&#x27;2004-01-01 12:00:00&#x27;,&#x27;+00:00&#x27;,&#x27;+10:00&#x27;)     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2004-01-01 22:00:00                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CURDATE\"><a href=\"#CURDATE\" class=\"headerlink\" title=\"CURDATE()\"></a>CURDATE()</h2><hr>\n<p>以 ‘YYYY-MM-DD’（字符串） 或者 YYYYMMDD（数值） 的形式返回当前日期， 具体形式取决于函数处于字符串还是数值型的上下文环境中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT CURDATE();</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| CURDATE()                                               |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1997-12-15                                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT CURDATE() + 0;</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| CURDATE() + 0                                           |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 19971215                                                |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CURRENT-DATE-and-CURRENT-DATE\"><a href=\"#CURRENT-DATE-and-CURRENT-DATE\" class=\"headerlink\" title=\"CURRENT_DATE and CURRENT_DATE()\"></a>CURRENT_DATE and CURRENT_DATE()</h2><hr>\n<p>CURRENT_DATE 和 CURRENT_DATE() 是 CURDATE() 的别名。</p>\n<h2 id=\"CURTIME\"><a href=\"#CURTIME\" class=\"headerlink\" title=\"CURTIME()\"></a>CURTIME()</h2><hr>\n<p>以 ‘HH:MM:SS’（字符串） 或者 HHMMSS（数值） 的形式返回当前时间， 具体形式取决于函数处于字符串还是数值型的上下文环境中。该函数按照当前时区来表示返回值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT CURTIME();</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| CURTIME()                                               |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 23:50:26                                                |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT CURTIME() + 0;</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| CURTIME() + 0                                           |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 235026                                                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CURRENT-TIME-and-CURRENT-TIME\"><a href=\"#CURRENT-TIME-and-CURRENT-TIME\" class=\"headerlink\" title=\"CURRENT_TIME and CURRENT_TIME()\"></a>CURRENT_TIME and CURRENT_TIME()</h2><hr>\n<p>CURRENT_TIME 和 CURRENT_TIME() 是 CURTIME() 的别名。</p>\n<h2 id=\"CURRENT-TIMESTAMP-and-CURRENT-TIMESTAMP\"><a href=\"#CURRENT-TIMESTAMP-and-CURRENT-TIMESTAMP\" class=\"headerlink\" title=\"CURRENT_TIMESTAMP and CURRENT_TIMESTAMP()\"></a>CURRENT_TIMESTAMP and CURRENT_TIMESTAMP()</h2><hr>\n<p>CURRENT_TIMESTAMP 和 CURRENT_TIMESTAMP() 是 NOW() 的别名。</p>\n<h2 id=\"DATE-expr\"><a href=\"#DATE-expr\" class=\"headerlink\" title=\"DATE(expr)\"></a>DATE(expr)</h2><hr>\n<p>提取 date 表达式或者 datetime 表达式中的日期部分。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT DATE(&#x27;2003-12-31 01:02:03&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DATE(&#x27;2003-12-31 01:02:03&#x27;)                             |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">|  2003-12-31                                             |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DATEDIFF-expr1-expr2\"><a href=\"#DATEDIFF-expr1-expr2\" class=\"headerlink\" title=\"DATEDIFF(expr1,expr2)\"></a>DATEDIFF(expr1,expr2)</h2><hr>\n<p>DATEDIFF() 返回 expr1 和 expr2 的差，以天数的形式表示。expr1 和 expr2 应为 date 或者 datetime 表达式。只有参数的日期部分参与了计算。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT DATEDIFF(&#x27;1997-12-31 23:59:59&#x27;,&#x27;1997-12-30&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DATEDIFF(&#x27;1997-12-31 23:59:59&#x27;,&#x27;1997-12-30&#x27;)            |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DATE-ADD-date-INTERVAL-expr-unit-DATE-SUB-date-INTERVAL-expr-unit\"><a href=\"#DATE-ADD-date-INTERVAL-expr-unit-DATE-SUB-date-INTERVAL-expr-unit\" class=\"headerlink\" title=\"DATE_ADD(date,INTERVAL expr unit), DATE_SUB(date,INTERVAL expr unit)\"></a>DATE_ADD(date,INTERVAL expr unit), DATE_SUB(date,INTERVAL expr unit)</h2><hr>\n<p>这些函数进行有关日期的算术运算。date 是一个 DATETIME 或者 DATE 类型的值，指明了起始时间。expr 表达式则是 date 要增加或者减去的时间间隔。expr 是一个字符串，可以以 ‘-‘ 开始来表示负时间区间。 unit 是一个关键词，指明了expr 的单位。</p>\n<p>INTERVAL 关键字和 unit（单位）指示符不区分大小写。</p>\n<p>下表列出了对于每种单位，expr 应有的形式。</p>\n<p>|——————–|————| | unit 值 | expr 应有的格式 | | MICROSECOND | 微秒 | | SECOND | 秒 | | MINUTE | 分钟 | | HOUR | 小时 | | DAY | 天 | | WEEK | 星期 | | MONTH | 月 | | QUARTER | 季度 | | YEAR | 年 | | SECOND_MICROSECOND | ‘秒.微秒’ | | MINUTE_MICROSECOND | ‘分.微秒’ | | MINUTE_SECOND | ‘分:秒’ | | HOUR_MICROSECOND | ‘小时.微秒’ | | HOUR_SECOND | ‘时:分:秒’ | | HOUR_MINUTE | ‘时:分’ | | DAY_MICROSECOND | ‘天.微秒’ | | DAY_SECOND | ‘天 时:分:秒’ | | DAY_MINUTE | ‘天 时:分’ | | DAY_HOUR | ‘天 时’ | | YEAR_MONTH | ‘年-月’ |</p>\n<p>QUARTER 和 WEEK 自 MySQL 5.0.0 起受到支持。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT DATE_ADD(&#x27;1997-12-31 23:59:59&#x27;, </span><br><span class=\"line\">    -&gt; INTERVAL &#x27;1:1&#x27; MINUTE_SECOND);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DATE_ADD(&#x27;1997-12-31 23:59:59&#x27;, INTERVAL...             |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1998-01-01 00:01:00                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT DATE_ADD(&#x27;1999-01-01&#x27;, INTERVAL 1 HOUR);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DATE_ADD(&#x27;1999-01-01&#x27;, INTERVAL 1 HOUR)                 |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1999-01-01 01:00:00                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DATE-FORMAT-date-format\"><a href=\"#DATE-FORMAT-date-format\" class=\"headerlink\" title=\"DATE_FORMAT(date,format)\"></a>DATE_FORMAT(date,format)</h2><hr>\n<p>根据格式字符串对日期值进行格式化。</p>\n<p>下面这些占位符可以用在格式字符串中，’%’ 必须出现在特定的格式字符之前。</p>\n<p>|—–|——————————————| | 占位符 | 描述 | | %a | 简写的星期名称（Sun..Sat） | | %b | 简写的月份名称 （Jan..Dec） | | %c | 月份，以数值形式表示（0..12） | | %D | 月份中的日期，带有英文后缀（0th，1st，2nd，3rd 等等） | | %d | 月份中的日期，以数值表示 (00..31) | | %e | 月份中的日期，以数值表示 (0..31) | | %f | 微秒（000000..999999） | | %H | 小时(00..23) | | %h | 小时(01..12) | | %I | 小时(01..12) | | %i | 分钟,以数值表示(00..59) | | %j | 一年中的第几天（001..366） | | %k | 小时（0..23） | | %l | 小时（1..12） | | %M | 月份的名称（January..December） | | %m | 月份，以数值形式表示（00..12） | | %p | AM 或者 PM | | %r | 时间，12 小时制(hh:mm:ss followed by AM or PM) | | %S | 秒(00..59) | | %s | 秒(00..59) | | %T | 时间，24小时制（hh:mm:ss） | | %U | 星期（00..53），此处星期日为一周的第一天 | | %u | 星期（00..53），此处星期一为一周的第一天 | | %V | 星期（01..53），此处星期日为一周的第一天；与 %X 一起使用。 | | %v | 星期（01..53），此处星期一为一周的第一天；与 %x 一起使用。 | | %W | 一周中日期的名称（Sunday..Saturday） | | %w | 一周中的第几天（0&#x3D;Sunday..6&#x3D;Saturday） | | %X | 以星期日为第一天的周所处的年份，四位数字表示；同 %V 一起使用。 | | %x | 以星期一为第一天的周所处的年份，四位数字表示；同 %v 一起使用。 | | %Y | 年份，四位数字表示。 | | %y | 年份，两位数字表示。 | | %% | % 字面值 | | %x | x，针对任何以上没有列出的情况。 |</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT DATE_FORMAT(&#x27;1997-10-04 22:23:00&#x27;, &#x27;%W %M %Y&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DATE_FORMAT(&#x27;1997-10-04 22:23:00&#x27;, &#x27;%W %M %Y&#x27;)          |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| Saturday October 1997                                   |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT DATE_FORMAT(&#x27;1997-10-04 22:23:00&#x27;</span><br><span class=\"line\">    -&gt; &#x27;%H %k %I %r %T %S %w&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DATE_FORMAT(&#x27;1997-10-04 22:23:00.......                 |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">|  22 22 10 10:23:00 PM 22:23:00 00 6                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DATE-SUB-date-INTERVAL-expr-unit\"><a href=\"#DATE-SUB-date-INTERVAL-expr-unit\" class=\"headerlink\" title=\"DATE_SUB(date,INTERVAL expr unit)\"></a>DATE_SUB(date,INTERVAL expr unit)</h2><hr>\n<p>同 DATE_ADD() 函数相似。</p>\n<h2 id=\"DAY-date\"><a href=\"#DAY-date\" class=\"headerlink\" title=\"DAY(date)\"></a>DAY(date)</h2><hr>\n<p>DAY() 是 DAYOFMONTH() 的别名。</p>\n<h2 id=\"DAYNAME-date\"><a href=\"#DAYNAME-date\" class=\"headerlink\" title=\"DAYNAME(date)\"></a>DAYNAME(date)</h2><hr>\n<p>返回 date 在星期中的名称。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT DAYNAME(&#x27;1998-02-05&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DAYNAME(&#x27;1998-02-05&#x27;)                                   |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| Thursday                                                |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DAYOFMONTH-date\"><a href=\"#DAYOFMONTH-date\" class=\"headerlink\" title=\"DAYOFMONTH(date)\"></a>DAYOFMONTH(date)</h2><hr>\n<p>返回 date 是当月的第几天，范围为 0 到 31。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT DAYOFMONTH(&#x27;1998-02-03&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DAYOFMONTH(&#x27;1998-02-03&#x27;)                                |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 3                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DAYOFWEEK-date\"><a href=\"#DAYOFWEEK-date\" class=\"headerlink\" title=\"DAYOFWEEK(date)\"></a>DAYOFWEEK(date)</h2><hr>\n<p>返回 date 是其所在星期的第几天(1 &#x3D; Sunday, 2 &#x3D; Monday,.., 7 &#x3D; Saturday)，这里一星期中日期的名称与数字的对应关系符合 ODBC 标准。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT DAYOFWEEK(&#x27;1998-02-03&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">|DAYOFWEEK(&#x27;1998-02-03&#x27;)                                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 3                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DAYOFYEAR-date\"><a href=\"#DAYOFYEAR-date\" class=\"headerlink\" title=\"DAYOFYEAR(date)\"></a>DAYOFYEAR(date)</h2><hr>\n<p>返回 date 是当年的第几天，范围为 1 到 366。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT DAYOFYEAR(&#x27;1998-02-03&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DAYOFYEAR(&#x27;1998-02-03&#x27;)                                 |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 34                                                      |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"EXTRACT-unit-FROM-date\"><a href=\"#EXTRACT-unit-FROM-date\" class=\"headerlink\" title=\"EXTRACT(unit FROM date)\"></a>EXTRACT(unit FROM date)</h2><hr>\n<p>EXTRACT() 与 DATE_ADD() 和 DATE_SUB() 使用相同的表示单位的占位符，其作用是提取日期值中相应的组成部分，而不是进行日期运算。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT EXTRACT(YEAR FROM &#x27;1999-07-02&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| EXTRACT(YEAR FROM &#x27;1999-07-02&#x27;)                         |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1999                                                    |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT EXTRACT(YEAR_MONTH FROM &#x27;1999-07-02 01:02:03&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| EXTRACT(YEAR_MONTH FROM &#x27;1999-07-02 01:02:03&#x27;)          |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 199907                                                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"FROM-DAYS-N\"><a href=\"#FROM-DAYS-N\" class=\"headerlink\" title=\"FROM_DAYS(N)\"></a>FROM_DAYS(N)</h2><hr>\n<p>给出天数 N，返回 DATE 值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT FROM_DAYS(729669);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| FROM_DAYS(729669)                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1997-10-07                                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>在使用 FROM_DAYS() 处理比较老的日期的时候应当特别小心，该函数不适用于格里高利历诞生（1582）之前的日期。</p>\n<h2 id=\"FROM-UNIXTIME-unix-timestamp-FROM-UNIXTIME-unix-timestamp-format\"><a href=\"#FROM-UNIXTIME-unix-timestamp-FROM-UNIXTIME-unix-timestamp-format\" class=\"headerlink\" title=\"FROM_UNIXTIME(unix_timestamp), FROM_UNIXTIME(unix_timestamp,format)\"></a>FROM_UNIXTIME(unix_timestamp), FROM_UNIXTIME(unix_timestamp,format)</h2><hr>\n<p>返回 UNIX 时间戳对应的日期值，根据函数所处的上下文环境不同，返回值得格式也不同，字符串上下文返回格式为 ‘YYYY-MM-DD HH:MM:SS’，数值型上下文返回格式则为 YYYYMMDDHHMMSS。返回值的时区为系统当前时区。UNIX 时间戳是一种系统内部时间表示，例如 UNIX_TIMESTAMP() 的返回值。</p>\n<p>如果给定格式的话，返回结果将会根据格式字符串进行格式化，其规则同 DATE_FORMAT() 函数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT FROM_UNIXTIME(875996580);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| FROM_UNIXTIME(875996580)                                |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1997-10-04 22:23:00                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HOUR-time\"><a href=\"#HOUR-time\" class=\"headerlink\" title=\"HOUR(time)\"></a>HOUR(time)</h2><hr>\n<p>返回时间值的小时部分。对于一天中的时间来说，返回值的范围为 0 到 23。不过，TIME 类型的值可以大得多，所以 HOUR 函数可以返回比 23 大的值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT HOUR(&#x27;10:05:03&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| HOUR(&#x27;10:05:03&#x27;)                                        |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 10                                                      |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LAST-DAY-date\"><a href=\"#LAST-DAY-date\" class=\"headerlink\" title=\"LAST_DAY(date)\"></a>LAST_DAY(date)</h2><hr>\n<p>返回 date 或者 datetime 值所在月份的最后一天。如果参数无效的话，返回　NULL。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT LAST_DAY(&#x27;2003-02-05&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| LAST_DAY(&#x27;2003-02-05&#x27;)                                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2003-02-28                                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LOCALTIME-and-LOCALTIME\"><a href=\"#LOCALTIME-and-LOCALTIME\" class=\"headerlink\" title=\"LOCALTIME and LOCALTIME()\"></a>LOCALTIME and LOCALTIME()</h2><hr>\n<p>LOCALTIME 和 LOCALTIME() 是 NOW() 的别名。</p>\n<h2 id=\"LOCALTIMESTAMP-and-LOCALTIMESTAMP\"><a href=\"#LOCALTIMESTAMP-and-LOCALTIMESTAMP\" class=\"headerlink\" title=\"LOCALTIMESTAMP and LOCALTIMESTAMP()\"></a>LOCALTIMESTAMP and LOCALTIMESTAMP()</h2><hr>\n<p>LOCALTIMESTAMP 和 LOCALTIMESTAMP() 是 NOW() 的别名。</p>\n<h2 id=\"MAKEDATE-year-dayofyear\"><a href=\"#MAKEDATE-year-dayofyear\" class=\"headerlink\" title=\"MAKEDATE(year,dayofyear)\"></a>MAKEDATE(year,dayofyear)</h2><hr>\n<p>给定年份和（某天在一年中）的天数，返回对应的日期值。天数必须大于 0，否则返回值为 NULL。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT MAKEDATE(2001,31), MAKEDATE(2001,32);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| MAKEDATE(2001,31), MAKEDATE(2001,32)                    |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| &#x27;2001-01-31&#x27;, &#x27;2001-02-01&#x27;                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MAKETIME-hour-minute-second\"><a href=\"#MAKETIME-hour-minute-second\" class=\"headerlink\" title=\"MAKETIME(hour,minute,second)\"></a>MAKETIME(hour,minute,second)</h2><hr>\n<p>根据参数给出的时、分、秒，返回对应的时间值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT MAKETIME(12,15,30);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| MAKETIME(12,15,30)                                      |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| &#x27;12:15:30&#x27;                                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MICROSECOND-expr\"><a href=\"#MICROSECOND-expr\" class=\"headerlink\" title=\"MICROSECOND(expr)\"></a>MICROSECOND(expr)</h2><hr>\n<p>根据 time 或者 datetime 表达式 expr，返回微秒数，结果在 0 到 999999 之间。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT MICROSECOND(&#x27;12:00:00.123456&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| MICROSECOND(&#x27;12:00:00.123456&#x27;)                          |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 123456                                                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MINUTE-time\"><a href=\"#MINUTE-time\" class=\"headerlink\" title=\"MINUTE(time)\"></a>MINUTE(time)</h2><hr>\n<p>返回时间型值中的分钟部分，范围为 0 到 59。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT MINUTE(&#x27;98-02-03 10:05:03&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| MINUTE(&#x27;98-02-03 10:05:03&#x27;)                             |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 5                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MONTH-date\"><a href=\"#MONTH-date\" class=\"headerlink\" title=\"MONTH(date)\"></a>MONTH(date)</h2><hr>\n<p>返回日期型值中的月份，范围为 0 到 12。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT MONTH(&#x27;1998-02-03&#x27;)</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| MONTH(&#x27;1998-02-03&#x27;)                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"MONTHNAME-date\"><a href=\"#MONTHNAME-date\" class=\"headerlink\" title=\"MONTHNAME(date)\"></a>MONTHNAME(date)</h2><hr>\n<p>返回日期型值所处月份的全名。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT MONTHNAME(&#x27;1998-02-05&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| MONTHNAME(&#x27;1998-02-05&#x27;)                                 |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| February                                                |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"NOW\"><a href=\"#NOW\" class=\"headerlink\" title=\"NOW()\"></a>NOW()</h2><hr>\n<p>返回当前的日期和时间，结果的格式为 ‘YYYY-MM-DD HH:MM:SS’ 或者 YYYYMMDDHHMMSS，如果函数上下文环境为字符型，则返回前者，否则如果函数处于数值型的上下文环境，则返回后者。返回值的时区为系统当前时区。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT NOW();</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| NOW()                                                   |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1997-12-15 23:50:26                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PERIOD-ADD-P-N\"><a href=\"#PERIOD-ADD-P-N\" class=\"headerlink\" title=\"PERIOD_ADD(P,N)\"></a>PERIOD_ADD(P,N)</h2><hr>\n<p>在时间 P（格式为 YYMM 或者 YYYYMM）上加上 N 个月，结果格式为 YYYYMM。注意，时间参数 P 并不是日期型值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT PERIOD_ADD(9801,2);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| PERIOD_ADD(9801,2)                                      |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 199803                                                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"PERIOD-DIFF-P1-P2\"><a href=\"#PERIOD-DIFF-P1-P2\" class=\"headerlink\" title=\"PERIOD_DIFF(P1,P2)\"></a>PERIOD_DIFF(P1,P2)</h2><hr>\n<p>返回时间 P1 和 P2 之间相差的月份。 P1 和 P2 的格式应为 YYMM 或者 YYYYMM。注意I，P1 和 P2 不是日期型值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT PERIOD_DIFF(9802,199703);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| PERIOD_DIFF(9802,199703)                                |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 11                                                      |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"QUARTER-date\"><a href=\"#QUARTER-date\" class=\"headerlink\" title=\"QUARTER(date)\"></a>QUARTER(date)</h2><hr>\n<p>返回日期型值 date 所处的季度值，范围为 1 到 4。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT QUARTER(&#x27;98-04-01&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| QUARTER(&#x27;98-04-01&#x27;)                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SECOND-time\"><a href=\"#SECOND-time\" class=\"headerlink\" title=\"SECOND(time)\"></a>SECOND(time)</h2><hr>\n<p>返回时间型值中秒的部分，范围为 0 到 59。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT SECOND(&#x27;10:05:03&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| SECOND(&#x27;10:05:03&#x27;)                                      |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 3                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SEC-TO-TIME-seconds\"><a href=\"#SEC-TO-TIME-seconds\" class=\"headerlink\" title=\"SEC_TO_TIME(seconds)\"></a>SEC_TO_TIME(seconds)</h2><hr>\n<p>将参数中的秒数转换为时分秒的格式 ‘HH:MM:SS’ 或者 HHMMSS，如果函数所处的上下文为字符串型，则返回前者，否则如果上下文环境为数值型，则返回后者。</p>\n<h2 id=\"STR-TO-DATE-str-format\"><a href=\"#STR-TO-DATE-str-format\" class=\"headerlink\" title=\"STR_TO_DATE(str,format)\"></a>STR_TO_DATE(str,format)</h2><hr>\n<p>这是 DATE_FORMATE() 函数的逆函数，其参数为表示时间和日期的字符串 str 和一个格式字符串 format。如果格式字符串中既有日期又有时间，则 STR_TO_DATE() 返回 DATETIME() 型的值，否则返回日期型（DATE）或者时间型（TIME）的值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT STR_TO_DATE(&#x27;04/31/2004&#x27;, &#x27;%m/%d/%Y&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| STR_TO_DATE(&#x27;04/31/2004&#x27;, &#x27;%m/%d/%Y&#x27;)                   |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2004-04-31                                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SUBDATE-date-INTERVAL-expr-unit-and-SUBDATE-expr-days\"><a href=\"#SUBDATE-date-INTERVAL-expr-unit-and-SUBDATE-expr-days\" class=\"headerlink\" title=\"SUBDATE(date,INTERVAL expr unit) and SUBDATE(expr,days)\"></a>SUBDATE(date,INTERVAL expr unit) and SUBDATE(expr,days)</h2><hr>\n<p>当第二个参数为 INTERVAL 形式时，SUBDATE() 就是 DATE_SUB() 的别名。INTERVAL 参数中单位的信息，请见有关 DATE_ADD() 的讨论。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT DATE_SUB(&#x27;1998-01-02&#x27;, INTERVAL 31 DAY);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| DATE_SUB(&#x27;1998-01-02&#x27;, INTERVAL 31 DAY)                 |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1997-12-02                                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT SUBDATE(&#x27;1998-01-02&#x27;, INTERVAL 31 DAY);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| SUBDATE(&#x27;1998-01-02&#x27;, INTERVAL 31 DAY)                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1997-12-02                                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SUBTIME-expr1-expr2\"><a href=\"#SUBTIME-expr1-expr2\" class=\"headerlink\" title=\"SUBTIME(expr1,expr2)\"></a>SUBTIME(expr1,expr2)</h2><hr>\n<p>SUBTIME() 返回 expr1-expr2，结果的格式与 expr1 相同。expr1 是一个时间型（time）或者 datetime 型的表达式，expr2 是时间型值。</p>\n<h2 id=\"SYSDATE\"><a href=\"#SYSDATE\" class=\"headerlink\" title=\"SYSDATE()\"></a>SYSDATE()</h2><hr>\n<p>返回当前的日期和时间，格式为 ‘YYYY-MM-DD HH:MM:SS’ 或 YYYYMMDDHHMMSS，如果函数所处的上下文环境为字符串，则返回前者，否则如果上下文环境为数值型，则返回后者。</p>\n<p>sql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT SYSDATE();</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| SYSDATE()                                               |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2006-04-12 13:47:44                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TIME-expr\"><a href=\"#TIME-expr\" class=\"headerlink\" title=\"TIME(expr)\"></a>TIME(expr)</h2><hr>\n<p>提取时间型或者 datetime 型表达式 expr 中的时间部分，返回结果为字符串。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT TIME(&#x27;2003-12-31 01:02:03&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| TIME(&#x27;2003-12-31 01:02:03&#x27;)                             |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 01:02:03                                                |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TIMEDIFF-expr1-expr2\"><a href=\"#TIMEDIFF-expr1-expr2\" class=\"headerlink\" title=\"TIMEDIFF(expr1,expr2)\"></a>TIMEDIFF(expr1,expr2)</h2><hr>\n<p>TIMEDIFF() 返回 expr1-expr2，结果为时间型值。expr1 和 expr2 可以为时间型或者 datetime 型表达式，不过二者必须为相同类型。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT TIMEDIFF(&#x27;1997-12-31 23:59:59.000001&#x27;,</span><br><span class=\"line\">    -&gt; &#x27;1997-12-30 01:01:01.000002&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| TIMEDIFF(&#x27;1997-12-31 23:59:59.000001&#x27;.....              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">|  46:58:57.999999                                        |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TIMESTAMP-expr-TIMESTAMP-expr1-expr2\"><a href=\"#TIMESTAMP-expr-TIMESTAMP-expr1-expr2\" class=\"headerlink\" title=\"TIMESTAMP(expr), TIMESTAMP(expr1,expr2)\"></a>TIMESTAMP(expr), TIMESTAMP(expr1,expr2)</h2><hr>\n<p>只有一个参数的时候，该函数由日期型或者 datetime 型表达式返回一个 datetime 型值。有两个参数的时候，该函数将 expr2 加到日期型或 datetime 型值 expr1 上，并返回 datetime 型的结果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT TIMESTAMP(&#x27;2003-12-31&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| TIMESTAMP(&#x27;2003-12-31&#x27;)                                 |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2003-12-31 00:00:00                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TIMESTAMPADD-unit-interval-datetime-expr\"><a href=\"#TIMESTAMPADD-unit-interval-datetime-expr\" class=\"headerlink\" title=\"TIMESTAMPADD(unit,interval,datetime_expr)\"></a>TIMESTAMPADD(unit,interval,datetime_expr)</h2><hr>\n<p>将整数型的表达式 interval 加到日期型或者 datetime 型表达式 datetime_expr 上。单位由 unit 参数给出，其取值应为以下几种中的一种：FRAC_SECOND、SECOND、MINUTE、HOUR、DAY、WEEK、MONTH、QUARTER 或者 YEAR。</p>\n<p>单位 unit 可以为上述关键字中的一个，也可以添加一个 SQL<em>TSI</em> 前缀，例如 DAY 和 SQL_TSI_DAY 都是合法的。</p>\n<p>sql</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT TIMESTAMPADD(MINUTE,1,&#x27;2003-01-02&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| TIMESTAMPADD(MINUTE,1,&#x27;2003-01-02&#x27;)                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2003-01-02 00:01:00                                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TIMESTAMPDIFF-unit-datetime-expr1-datetime-expr2\"><a href=\"#TIMESTAMPDIFF-unit-datetime-expr1-datetime-expr2\" class=\"headerlink\" title=\"TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)\"></a>TIMESTAMPDIFF(unit,datetime_expr1,datetime_expr2)</h2><hr>\n<p>返回日期型或者 datetime 型表达式 datetime_expr1 和 datetime_expr2 的差。结果的单位由 unit 参数给出，unit 的取值规定同 TIMESTAMPADD() 函数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT TIMESTAMPDIFF(MONTH,&#x27;2003-02-01&#x27;,&#x27;2003-05-01&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| TIMESTAMPDIFF(MONTH,&#x27;2003-02-01&#x27;,&#x27;2003-05-01&#x27;)          |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 3                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TIME-FORMAT-time-format\"><a href=\"#TIME-FORMAT-time-format\" class=\"headerlink\" title=\"TIME_FORMAT(time,format)\"></a>TIME_FORMAT(time,format)</h2><hr>\n<p>该函数使用起来类似 DATE_FORMAT() 函数，但是格式字符串 format 中只能有与小时、分钟和秒有关的那些占位符。</p>\n<p>如果时间型值的小时部分大于 23，则 %H 和 %k 格式占位符将会产生一个大于通常的 0-23 的值，其他与小时有关的占位符则会返回小时值除以 12 后的余数（modulo 12）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT TIME_FORMAT(&#x27;100:00:00&#x27;, &#x27;%H %k %h %I %l&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| TIME_FORMAT(&#x27;100:00:00&#x27;, &#x27;%H %k %h %I %l&#x27;)              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 100 100 04 04 4                                         |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TIME-TO-SEC-time\"><a href=\"#TIME-TO-SEC-time\" class=\"headerlink\" title=\"TIME_TO_SEC(time)\"></a>TIME_TO_SEC(time)</h2><hr>\n<p>将时间型值转换为秒。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT TIME_TO_SEC(&#x27;22:23:00&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| TIME_TO_SEC(&#x27;22:23:00&#x27;)                                 |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 80580                                                   |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)、</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TO-DAYS-date\"><a href=\"#TO-DAYS-date\" class=\"headerlink\" title=\"TO_DAYS(date)\"></a>TO_DAYS(date)</h2><hr>\n<p>给定日期型值 date，返回天数（自公元 0 年以来的天数）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT TO_DAYS(950501);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| TO_DAYS(950501)                                         |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 728779                                                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"UNIX-TIMESTAMP-UNIX-TIMESTAMP-date\"><a href=\"#UNIX-TIMESTAMP-UNIX-TIMESTAMP-date\" class=\"headerlink\" title=\"UNIX_TIMESTAMP(), UNIX_TIMESTAMP(date)\"></a>UNIX_TIMESTAMP(), UNIX_TIMESTAMP(date)</h2><hr>\n<p>不带任何参数时，该函数返回一个 unsigned integer 型的 UNIX 时间戳（自 ‘1970-01-01 00:00:00’ UTC 以来的秒数）。如果有一个参数 date 的话，该函数返回自 ‘1970-01-01 00:00:00’ UTC 至 date 的秒数。date 可以是日期型的字符串、DATETIME 型的字符串、时间戳或者 YYMMDD 或 YYYYMMDD 格式的数字。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT UNIX_TIMESTAMP();</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| UNIX_TIMESTAMP()                                        |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 882226357                                               |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; SELECT UNIX_TIMESTAMP(&#x27;1997-10-04 22:23:00&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| UNIX_TIMESTAMP(&#x27;1997-10-04 22:23:00&#x27;)                   |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 875996580                                               |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"UTC-DATE-UTC-DATE\"><a href=\"#UTC-DATE-UTC-DATE\" class=\"headerlink\" title=\"UTC_DATE, UTC_DATE()\"></a>UTC_DATE, UTC_DATE()</h2><hr>\n<p>返回当前 UTC 日期，格式为 ‘YYYY-MM-DD’ 或者 YYYYMMDD，如果函数所处的上下文环境为字符串，则返回前者，否则如果上下文环境为数值型的，则返回后者。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT UTC_DATE(), UTC_DATE() + 0;</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| UTC_DATE(), UTC_DATE() + 0                              |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2003-08-14, 20030814                                    |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"UTC-TIME-UTC-TIME\"><a href=\"#UTC-TIME-UTC-TIME\" class=\"headerlink\" title=\"UTC_TIME, UTC_TIME()\"></a>UTC_TIME, UTC_TIME()</h2><hr>\n<p>返回当前 UTC 时间，格式为 ‘HH:MM:SS’ 或者 HHMMSS，如果函数所处的上下文环境为字符串，则返回前者，否则如果上下文环境为数值型的，则返回后者。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0;</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| UTC_TIMESTAMP(), UTC_TIMESTAMP() + 0                    |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 2003-08-14 18:08:04, 20030814180804                     |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"WEEK-date-mode\"><a href=\"#WEEK-date-mode\" class=\"headerlink\" title=\"WEEK(date[,mode])\"></a>WEEK(date[,mode])</h2><hr>\n<p>该函数将返回 date 所在的周是当年的第几周。两个参数的 WEEK() 函数的使你能够指明一周起始于周日还是周一，以及返回值的范围应该是 0 到 53，还是 1 到 53。如果 mode 参数被忽略，则将使用 default_week_format 系统变量。</p>\n<p>|——|——–|——|————| | Mode | 一周的第一天 | 范围 | 周 1 是第一周 | | 0 | Sunday | 0-53 | 该年包括一个星期天 | | 1 | Monday | 0-53 | 该年包含超过 3 天 | | 2 | Sunday | 1-53 | 该年包括一个星期天 | | 3 | Monday | 1-53 | 该年包含超过 3 天 | | 4 | Sunday | 0-53 | 该年包含超过 3 天 | | 5 | Monday | 0-53 | 该年包括一个星期一 | | 6 | Sunday | 1-53 | 该年包含超过 3 天 | | 7 | Monday | 1-53 | 该年包括一个星期一 |</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT WEEK(&#x27;1998-02-20&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| WEEK(&#x27;1998-02-20&#x27;)                                      |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 7                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"WEEKDAY-date\"><a href=\"#WEEKDAY-date\" class=\"headerlink\" title=\"WEEKDAY(date)\"></a>WEEKDAY(date)</h2><hr>\n<p>返回 date 是其所在星期的第几天 (0 &#x3D; Monday, 1 &#x3D; Tuesday, . 6 &#x3D; Sunday)。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT WEEKDAY(&#x27;1998-02-03 22:23:00&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| WEEKDAY(&#x27;1998-02-03 22:23:00&#x27;)                          |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"WEEKOFYEAR-date\"><a href=\"#WEEKOFYEAR-date\" class=\"headerlink\" title=\"WEEKOFYEAR(date)\"></a>WEEKOFYEAR(date)</h2><hr>\n<p>返回 date 所在的周是当年的第几周，范围从 1 到 53. WEEKOFYEAR() 是一个兼容性函数，其功能同 WEEK(date, 3)相同。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT WEEKOFYEAR(&#x27;1998-02-20&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| WEEKOFYEAR(&#x27;1998-02-20&#x27;)                                |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 8                                                       |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"YEAR-date\"><a href=\"#YEAR-date\" class=\"headerlink\" title=\"YEAR(date)\"></a>YEAR(date)</h2><hr>\n<p>返回 date 的年份部分，范围为 1000 到 9999，对于日期 0 则返回 0。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT YEAR(&#x27;98-02-03&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| YEAR(&#x27;98-02-03&#x27;)                                        |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 1998                                                    |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"YEARWEEK-date-YEARWEEK-date-mode\"><a href=\"#YEARWEEK-date-YEARWEEK-date-mode\" class=\"headerlink\" title=\"YEARWEEK(date), YEARWEEK(date,mode)\"></a>YEARWEEK(date), YEARWEEK(date,mode)</h2><hr>\n<p>返回 date 所在的年份和周数。mode 参数意义与 WEEK() 函数的完全一样。对于一年中的第一周和最后一周来说，结果中的年份可能会和 date 参数中的年份不同。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql&gt; SELECT YEARWEEK(&#x27;1987-01-01&#x27;);</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| YEAR(&#x27;98-02-03&#x27;)YEARWEEK(&#x27;1987-01-01&#x27;)                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">| 198653                                                  |</span><br><span class=\"line\">+---------------------------------------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意</strong>，这里的周数同 WEEK() 返回的不同，因为 WEEK() 函数的返回值在给定年份的的上下文环境中得出。</p>\n</blockquote>\n"},{"layout":"wiki","wiki":"sql","title":"SQL SUM() 函数","order":6,"_content":"\n## SQL SUM() 函数\n\n------\n\nSUM() 函数返回数字列的总和。\n\n### SQL SUM() 语法\n\n```\nSELECT SUM(column_name)\nFROM table_name\nWHERE condition;\n```\n\n\n\n## 演示数据库[](https://ngrok.cn/sql/sql-631.html#演示数据库)\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"OrderDetails\" 表的数据：\n\n| OrderDetailID | OrderID | ProductID | Quantity |\n| :------------ | :------ | :-------- | :------- |\n| 1             | 10248   | 11        | 12       |\n| 2             | 10248   | 42        | 10       |\n| 3             | 10248   | 72        | 5        |\n| 4             | 10249   | 14        | 9        |\n| 5             | 10249   | 51        | 40       |\n\n\n\n## SQL SUM() 实例\n\n------\n\n下面的 SQL 语句查找 \"OrderDetails\" 表的 \"Quantity\" 字段的总数：\n\n示例\n\n```\nSELECT SUM(Quantity)\nFROM OrderDetails;\n```\n\n","source":"wiki/sql/function/sum.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL SUM() 函数\norder: 6\n---\n\n## SQL SUM() 函数\n\n------\n\nSUM() 函数返回数字列的总和。\n\n### SQL SUM() 语法\n\n```\nSELECT SUM(column_name)\nFROM table_name\nWHERE condition;\n```\n\n\n\n## 演示数据库[](https://ngrok.cn/sql/sql-631.html#演示数据库)\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"OrderDetails\" 表的数据：\n\n| OrderDetailID | OrderID | ProductID | Quantity |\n| :------------ | :------ | :-------- | :------- |\n| 1             | 10248   | 11        | 12       |\n| 2             | 10248   | 42        | 10       |\n| 3             | 10248   | 72        | 5        |\n| 4             | 10249   | 14        | 9        |\n| 5             | 10249   | 51        | 40       |\n\n\n\n## SQL SUM() 实例\n\n------\n\n下面的 SQL 语句查找 \"OrderDetails\" 表的 \"Quantity\" 字段的总数：\n\n示例\n\n```\nSELECT SUM(Quantity)\nFROM OrderDetails;\n```\n\n","date":"2025-06-11T06:13:49.804Z","updated":"2025-06-11T06:13:49.800Z","path":"wiki/sql/function/sum.html","comments":1,"_id":"cmbrkcwvo00029dx0bu9zg31f","content":"<h2 id=\"SQL-SUM-函数\"><a href=\"#SQL-SUM-函数\" class=\"headerlink\" title=\"SQL SUM() 函数\"></a>SQL SUM() 函数</h2><hr>\n<p>SUM() 函数返回数字列的总和。</p>\n<h3 id=\"SQL-SUM-语法\"><a href=\"#SQL-SUM-语法\" class=\"headerlink\" title=\"SQL SUM() 语法\"></a>SQL SUM() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT SUM(column_name)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库<a href=\"https://ngrok.cn/sql/sql-631.html#%E6%BC%94%E7%A4%BA%E6%95%B0%E6%8D%AE%E5%BA%93\"></a></h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “OrderDetails” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderDetailID</th>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">ProductID</th>\n<th align=\"left\">Quantity</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">10248</td>\n<td align=\"left\">11</td>\n<td align=\"left\">12</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">10248</td>\n<td align=\"left\">42</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">10248</td>\n<td align=\"left\">72</td>\n<td align=\"left\">5</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">10249</td>\n<td align=\"left\">14</td>\n<td align=\"left\">9</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">10249</td>\n<td align=\"left\">51</td>\n<td align=\"left\">40</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-SUM-实例\"><a href=\"#SQL-SUM-实例\" class=\"headerlink\" title=\"SQL SUM() 实例\"></a>SQL SUM() 实例</h2><hr>\n<p>下面的 SQL 语句查找 “OrderDetails” 表的 “Quantity” 字段的总数：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT SUM(Quantity)</span><br><span class=\"line\">FROM OrderDetails;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"SQL-SUM-函数\"><a href=\"#SQL-SUM-函数\" class=\"headerlink\" title=\"SQL SUM() 函数\"></a>SQL SUM() 函数</h2><hr>\n<p>SUM() 函数返回数字列的总和。</p>\n<h3 id=\"SQL-SUM-语法\"><a href=\"#SQL-SUM-语法\" class=\"headerlink\" title=\"SQL SUM() 语法\"></a>SQL SUM() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT SUM(column_name)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库<a href=\"https://ngrok.cn/sql/sql-631.html#%E6%BC%94%E7%A4%BA%E6%95%B0%E6%8D%AE%E5%BA%93\"></a></h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “OrderDetails” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderDetailID</th>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">ProductID</th>\n<th align=\"left\">Quantity</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">10248</td>\n<td align=\"left\">11</td>\n<td align=\"left\">12</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">10248</td>\n<td align=\"left\">42</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">10248</td>\n<td align=\"left\">72</td>\n<td align=\"left\">5</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">10249</td>\n<td align=\"left\">14</td>\n<td align=\"left\">9</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">10249</td>\n<td align=\"left\">51</td>\n<td align=\"left\">40</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-SUM-实例\"><a href=\"#SQL-SUM-实例\" class=\"headerlink\" title=\"SQL SUM() 实例\"></a>SQL SUM() 实例</h2><hr>\n<p>下面的 SQL 语句查找 “OrderDetails” 表的 “Quantity” 字段的总数：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT SUM(Quantity)</span><br><span class=\"line\">FROM OrderDetails;</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"wiki","wiki":"sql","title":"SQL FIELD()函数","order":8,"_content":"\n## SQL FIELD()函数\n\n------\n\nSQL FIELD()函数实例代码教程\n\nFIELD()函数返回的索引（从1开始的位置）的str在str1，str2，str3，...列表中。如果str没有找到，则返回0。\n　就是用第一个参数str，跟后面的N个字符串参数中寻找，如果寻找到一模一样的字符串，则返回其索引位置\n\n## FIELD(str,str1,str2,str3,...)\n\n------\n\n返回的索引（从1开始的位置）的str在str1，str2，str3，...列表中。如果str没有找到，则返回0。\n\n### 例子\n\n在第2个位置找到了字符串\"ej\"\n\n```\nSQL> SELECT FIELD('ej', 'Hej', 'ej', 'Heja', 'hej', 'foo'); +---------------------------------------------------------+ | FIELD('ej', 'Hej', 'ej', 'Heja', 'hej', 'foo') | +---------------------------------------------------------+ | 2 | +---------------------------------------------------------+ 1 row in set (0.00 sec)\n```\n\n","source":"wiki/sql/function/field.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL FIELD()函数\norder: 8\n---\n\n## SQL FIELD()函数\n\n------\n\nSQL FIELD()函数实例代码教程\n\nFIELD()函数返回的索引（从1开始的位置）的str在str1，str2，str3，...列表中。如果str没有找到，则返回0。\n　就是用第一个参数str，跟后面的N个字符串参数中寻找，如果寻找到一模一样的字符串，则返回其索引位置\n\n## FIELD(str,str1,str2,str3,...)\n\n------\n\n返回的索引（从1开始的位置）的str在str1，str2，str3，...列表中。如果str没有找到，则返回0。\n\n### 例子\n\n在第2个位置找到了字符串\"ej\"\n\n```\nSQL> SELECT FIELD('ej', 'Hej', 'ej', 'Heja', 'hej', 'foo'); +---------------------------------------------------------+ | FIELD('ej', 'Hej', 'ej', 'Heja', 'hej', 'foo') | +---------------------------------------------------------+ | 2 | +---------------------------------------------------------+ 1 row in set (0.00 sec)\n```\n\n","date":"2025-06-11T06:26:59.907Z","updated":"2025-06-11T06:26:59.907Z","path":"wiki/sql/function/field.html","comments":1,"_id":"cmbrkhtey00001zx06e7bhf7q","content":"<h2 id=\"SQL-FIELD-函数\"><a href=\"#SQL-FIELD-函数\" class=\"headerlink\" title=\"SQL FIELD()函数\"></a>SQL FIELD()函数</h2><hr>\n<p>SQL FIELD()函数实例代码教程</p>\n<p>FIELD()函数返回的索引（从1开始的位置）的str在str1，str2，str3，…列表中。如果str没有找到，则返回0。<br>　就是用第一个参数str，跟后面的N个字符串参数中寻找，如果寻找到一模一样的字符串，则返回其索引位置</p>\n<h2 id=\"FIELD-str-str1-str2-str3-…\"><a href=\"#FIELD-str-str1-str2-str3-…\" class=\"headerlink\" title=\"FIELD(str,str1,str2,str3,…)\"></a>FIELD(str,str1,str2,str3,…)</h2><hr>\n<p>返回的索引（从1开始的位置）的str在str1，str2，str3，…列表中。如果str没有找到，则返回0。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>在第2个位置找到了字符串”ej”</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT FIELD(&#x27;ej&#x27;, &#x27;Hej&#x27;, &#x27;ej&#x27;, &#x27;Heja&#x27;, &#x27;hej&#x27;, &#x27;foo&#x27;); +---------------------------------------------------------+ | FIELD(&#x27;ej&#x27;, &#x27;Hej&#x27;, &#x27;ej&#x27;, &#x27;Heja&#x27;, &#x27;hej&#x27;, &#x27;foo&#x27;) | +---------------------------------------------------------+ | 2 | +---------------------------------------------------------+ 1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"SQL-FIELD-函数\"><a href=\"#SQL-FIELD-函数\" class=\"headerlink\" title=\"SQL FIELD()函数\"></a>SQL FIELD()函数</h2><hr>\n<p>SQL FIELD()函数实例代码教程</p>\n<p>FIELD()函数返回的索引（从1开始的位置）的str在str1，str2，str3，…列表中。如果str没有找到，则返回0。<br>　就是用第一个参数str，跟后面的N个字符串参数中寻找，如果寻找到一模一样的字符串，则返回其索引位置</p>\n<h2 id=\"FIELD-str-str1-str2-str3-…\"><a href=\"#FIELD-str-str1-str2-str3-…\" class=\"headerlink\" title=\"FIELD(str,str1,str2,str3,…)\"></a>FIELD(str,str1,str2,str3,…)</h2><hr>\n<p>返回的索引（从1开始的位置）的str在str1，str2，str3，…列表中。如果str没有找到，则返回0。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><p>在第2个位置找到了字符串”ej”</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT FIELD(&#x27;ej&#x27;, &#x27;Hej&#x27;, &#x27;ej&#x27;, &#x27;Heja&#x27;, &#x27;hej&#x27;, &#x27;foo&#x27;); +---------------------------------------------------------+ | FIELD(&#x27;ej&#x27;, &#x27;Hej&#x27;, &#x27;ej&#x27;, &#x27;Heja&#x27;, &#x27;hej&#x27;, &#x27;foo&#x27;) | +---------------------------------------------------------+ | 2 | +---------------------------------------------------------+ 1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"wiki","wiki":"sql","title":"SQL CONCAT()函数","order":25,"_content":"\n## SQL CONCAT 函数\n\n------\n\n**　CONCAT** 函数用于将两个字符串连接为一个字符串，试一下下面这个例子：\n\n```\n    SQL> SELECT CONCAT('FIRST ', 'SECOND');\n    +----------------------------+\n    | CONCAT('FIRST ', 'SECOND') |\n    +----------------------------+\n    | FIRST SECOND               |\n    +----------------------------+\n    1 row in set (0.00 sec)\n```\n\n要对 **CONCAT** 函数有更为深入的了解，请考虑 **employee_tbl** 表，表中记录如下所示：\n\n```\n    SQL> SELECT * FROM employee_tbl;\n    +------+------+------------+--------------------+\n    | id   | name | work_date  | daily_typing_pages |\n    +------+------+------------+--------------------+\n    |    1 | John | 2007-01-24 |                250 |\n    |    2 | Ram  | 2007-05-27 |                220 |\n    |    3 | Jack | 2007-05-06 |                170 |\n    |    3 | Jack | 2007-04-06 |                100 |\n    |    4 | Jill | 2007-04-06 |                220 |\n    |    5 | Zara | 2007-06-06 |                300 |\n    |    5 | Zara | 2007-02-06 |                350 |\n    +------+------+------------+--------------------+\n    7 rows in set (0.00 sec)\n```\n\n现在，假设你想要将上表中所有的姓名（name）、id和工作日（work_date）连接在一起，那么可以通过如下的命令来达到目的：\n\n```\n    SQL> SELECT CONCAT(id, name, work_date)\n        -> FROM employee_tbl;\n    +-----------------------------+\n    | CONCAT(id, name, work_date) |\n    +-----------------------------+\n    | 1John2007-01-24             |\n    | 2Ram2007-05-27              |\n    | 3Jack2007-05-06             |\n    | 3Jack2007-04-06             |\n    | 4Jill2007-04-06             |\n    | 5Zara2007-06-06             |\n    | 5Zara2007-02-06             |\n    +-----------------------------+\n    7 rows in set (0.00 sec)\n```","source":"wiki/sql/function/concat.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL CONCAT()函数\norder: 25\n---\n\n## SQL CONCAT 函数\n\n------\n\n**　CONCAT** 函数用于将两个字符串连接为一个字符串，试一下下面这个例子：\n\n```\n    SQL> SELECT CONCAT('FIRST ', 'SECOND');\n    +----------------------------+\n    | CONCAT('FIRST ', 'SECOND') |\n    +----------------------------+\n    | FIRST SECOND               |\n    +----------------------------+\n    1 row in set (0.00 sec)\n```\n\n要对 **CONCAT** 函数有更为深入的了解，请考虑 **employee_tbl** 表，表中记录如下所示：\n\n```\n    SQL> SELECT * FROM employee_tbl;\n    +------+------+------------+--------------------+\n    | id   | name | work_date  | daily_typing_pages |\n    +------+------+------------+--------------------+\n    |    1 | John | 2007-01-24 |                250 |\n    |    2 | Ram  | 2007-05-27 |                220 |\n    |    3 | Jack | 2007-05-06 |                170 |\n    |    3 | Jack | 2007-04-06 |                100 |\n    |    4 | Jill | 2007-04-06 |                220 |\n    |    5 | Zara | 2007-06-06 |                300 |\n    |    5 | Zara | 2007-02-06 |                350 |\n    +------+------+------------+--------------------+\n    7 rows in set (0.00 sec)\n```\n\n现在，假设你想要将上表中所有的姓名（name）、id和工作日（work_date）连接在一起，那么可以通过如下的命令来达到目的：\n\n```\n    SQL> SELECT CONCAT(id, name, work_date)\n        -> FROM employee_tbl;\n    +-----------------------------+\n    | CONCAT(id, name, work_date) |\n    +-----------------------------+\n    | 1John2007-01-24             |\n    | 2Ram2007-05-27              |\n    | 3Jack2007-05-06             |\n    | 3Jack2007-04-06             |\n    | 4Jill2007-04-06             |\n    | 5Zara2007-06-06             |\n    | 5Zara2007-02-06             |\n    +-----------------------------+\n    7 rows in set (0.00 sec)\n```","date":"2025-06-11T07:09:13.179Z","updated":"2025-06-11T07:08:56.000Z","path":"wiki/sql/function/concat.html","comments":1,"_id":"cmbrn2fnc000044x09x593tda","content":"<h2 id=\"SQL-CONCAT-函数\"><a href=\"#SQL-CONCAT-函数\" class=\"headerlink\" title=\"SQL CONCAT 函数\"></a>SQL CONCAT 函数</h2><hr>\n<p>**　CONCAT** 函数用于将两个字符串连接为一个字符串，试一下下面这个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT CONCAT(&#x27;FIRST &#x27;, &#x27;SECOND&#x27;);</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">| CONCAT(&#x27;FIRST &#x27;, &#x27;SECOND&#x27;) |</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">| FIRST SECOND               |</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>要对 <strong>CONCAT</strong> 函数有更为深入的了解，请考虑 <strong>employee_tbl</strong> 表，表中记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT * FROM employee_tbl;</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">| id   | name | work_date  | daily_typing_pages |</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">|    1 | John | 2007-01-24 |                250 |</span><br><span class=\"line\">|    2 | Ram  | 2007-05-27 |                220 |</span><br><span class=\"line\">|    3 | Jack | 2007-05-06 |                170 |</span><br><span class=\"line\">|    3 | Jack | 2007-04-06 |                100 |</span><br><span class=\"line\">|    4 | Jill | 2007-04-06 |                220 |</span><br><span class=\"line\">|    5 | Zara | 2007-06-06 |                300 |</span><br><span class=\"line\">|    5 | Zara | 2007-02-06 |                350 |</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>现在，假设你想要将上表中所有的姓名（name）、id和工作日（work_date）连接在一起，那么可以通过如下的命令来达到目的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT CONCAT(id, name, work_date)</span><br><span class=\"line\">    -&gt; FROM employee_tbl;</span><br><span class=\"line\">+-----------------------------+</span><br><span class=\"line\">| CONCAT(id, name, work_date) |</span><br><span class=\"line\">+-----------------------------+</span><br><span class=\"line\">| 1John2007-01-24             |</span><br><span class=\"line\">| 2Ram2007-05-27              |</span><br><span class=\"line\">| 3Jack2007-05-06             |</span><br><span class=\"line\">| 3Jack2007-04-06             |</span><br><span class=\"line\">| 4Jill2007-04-06             |</span><br><span class=\"line\">| 5Zara2007-06-06             |</span><br><span class=\"line\">| 5Zara2007-02-06             |</span><br><span class=\"line\">+-----------------------------+</span><br><span class=\"line\">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"SQL-CONCAT-函数\"><a href=\"#SQL-CONCAT-函数\" class=\"headerlink\" title=\"SQL CONCAT 函数\"></a>SQL CONCAT 函数</h2><hr>\n<p>**　CONCAT** 函数用于将两个字符串连接为一个字符串，试一下下面这个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT CONCAT(&#x27;FIRST &#x27;, &#x27;SECOND&#x27;);</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">| CONCAT(&#x27;FIRST &#x27;, &#x27;SECOND&#x27;) |</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">| FIRST SECOND               |</span><br><span class=\"line\">+----------------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>要对 <strong>CONCAT</strong> 函数有更为深入的了解，请考虑 <strong>employee_tbl</strong> 表，表中记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT * FROM employee_tbl;</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">| id   | name | work_date  | daily_typing_pages |</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">|    1 | John | 2007-01-24 |                250 |</span><br><span class=\"line\">|    2 | Ram  | 2007-05-27 |                220 |</span><br><span class=\"line\">|    3 | Jack | 2007-05-06 |                170 |</span><br><span class=\"line\">|    3 | Jack | 2007-04-06 |                100 |</span><br><span class=\"line\">|    4 | Jill | 2007-04-06 |                220 |</span><br><span class=\"line\">|    5 | Zara | 2007-06-06 |                300 |</span><br><span class=\"line\">|    5 | Zara | 2007-02-06 |                350 |</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>现在，假设你想要将上表中所有的姓名（name）、id和工作日（work_date）连接在一起，那么可以通过如下的命令来达到目的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT CONCAT(id, name, work_date)</span><br><span class=\"line\">    -&gt; FROM employee_tbl;</span><br><span class=\"line\">+-----------------------------+</span><br><span class=\"line\">| CONCAT(id, name, work_date) |</span><br><span class=\"line\">+-----------------------------+</span><br><span class=\"line\">| 1John2007-01-24             |</span><br><span class=\"line\">| 2Ram2007-05-27              |</span><br><span class=\"line\">| 3Jack2007-05-06             |</span><br><span class=\"line\">| 3Jack2007-04-06             |</span><br><span class=\"line\">| 4Jill2007-04-06             |</span><br><span class=\"line\">| 5Zara2007-06-06             |</span><br><span class=\"line\">| 5Zara2007-02-06             |</span><br><span class=\"line\">+-----------------------------+</span><br><span class=\"line\">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>"},{"layout":"wiki","wiki":"sql","title":"SQL 字母大小写转换函数","order":13,"_content":"\n## SQL 字母大小写转换函数\n\n------\n\nSQL 字母大小写转换函数包含了UPPER(s)、UCASE(s)、LOWER(s)和LCASE(s)函数。\n\n### **1、LOWER(s)函数和LCASE(s)函数**\n\nLOWER(s)或者LCASE(s)函数可以将字符串s中的字母字符全部转换成小写字母。\n\n**　实例：**\n\n使用LOWER函数或者LCASE函数将字符串中所有字母字符转换为小写。SQL语句如下：\n\n```\nSELECT LOWER('WWW.ngrok.cn'),LCASE('ngrok.CN');\n```\n\n执行结果如下：\n\n### 2、UPPER(s)函数和UCASE(s)函数\n\nUPPER(s)或UCASE(s)函数可以将字符串s中的字母字符全部转换成大写字母。\n**　实例：**\n　使用UPPER函数或者UCASE函数将字符串中的所有字母字符转换为大写。SQL语句如下：\n\n```\nSELECT UPPER('www.ngrok.cn'),UCASE('ngrok');\n```\n","source":"wiki/sql/function/case.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 字母大小写转换函数\norder: 13\n---\n\n## SQL 字母大小写转换函数\n\n------\n\nSQL 字母大小写转换函数包含了UPPER(s)、UCASE(s)、LOWER(s)和LCASE(s)函数。\n\n### **1、LOWER(s)函数和LCASE(s)函数**\n\nLOWER(s)或者LCASE(s)函数可以将字符串s中的字母字符全部转换成小写字母。\n\n**　实例：**\n\n使用LOWER函数或者LCASE函数将字符串中所有字母字符转换为小写。SQL语句如下：\n\n```\nSELECT LOWER('WWW.ngrok.cn'),LCASE('ngrok.CN');\n```\n\n执行结果如下：\n\n### 2、UPPER(s)函数和UCASE(s)函数\n\nUPPER(s)或UCASE(s)函数可以将字符串s中的字母字符全部转换成大写字母。\n**　实例：**\n　使用UPPER函数或者UCASE函数将字符串中的所有字母字符转换为大写。SQL语句如下：\n\n```\nSELECT UPPER('www.ngrok.cn'),UCASE('ngrok');\n```\n","date":"2025-06-11T06:47:26.107Z","updated":"2025-06-11T06:47:26.107Z","path":"wiki/sql/function/case.html","comments":1,"_id":"cmbrn2fnk000144x00bvp5evo","content":"<h2 id=\"SQL-字母大小写转换函数\"><a href=\"#SQL-字母大小写转换函数\" class=\"headerlink\" title=\"SQL 字母大小写转换函数\"></a>SQL 字母大小写转换函数</h2><hr>\n<p>SQL 字母大小写转换函数包含了UPPER(s)、UCASE(s)、LOWER(s)和LCASE(s)函数。</p>\n<h3 id=\"1、LOWER-s-函数和LCASE-s-函数\"><a href=\"#1、LOWER-s-函数和LCASE-s-函数\" class=\"headerlink\" title=\"1、LOWER(s)函数和LCASE(s)函数\"></a><strong>1、LOWER(s)函数和LCASE(s)函数</strong></h3><p>LOWER(s)或者LCASE(s)函数可以将字符串s中的字母字符全部转换成小写字母。</p>\n<p>**　实例：**</p>\n<p>使用LOWER函数或者LCASE函数将字符串中所有字母字符转换为小写。SQL语句如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LOWER(&#x27;WWW.ngrok.cn&#x27;),LCASE(&#x27;ngrok.CN&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>执行结果如下：</p>\n<h3 id=\"2、UPPER-s-函数和UCASE-s-函数\"><a href=\"#2、UPPER-s-函数和UCASE-s-函数\" class=\"headerlink\" title=\"2、UPPER(s)函数和UCASE(s)函数\"></a>2、UPPER(s)函数和UCASE(s)函数</h3><p>UPPER(s)或UCASE(s)函数可以将字符串s中的字母字符全部转换成大写字母。<br>**　实例：**<br>　使用UPPER函数或者UCASE函数将字符串中的所有字母字符转换为大写。SQL语句如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT UPPER(&#x27;www.ngrok.cn&#x27;),UCASE(&#x27;ngrok&#x27;);</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-字母大小写转换函数\"><a href=\"#SQL-字母大小写转换函数\" class=\"headerlink\" title=\"SQL 字母大小写转换函数\"></a>SQL 字母大小写转换函数</h2><hr>\n<p>SQL 字母大小写转换函数包含了UPPER(s)、UCASE(s)、LOWER(s)和LCASE(s)函数。</p>\n<h3 id=\"1、LOWER-s-函数和LCASE-s-函数\"><a href=\"#1、LOWER-s-函数和LCASE-s-函数\" class=\"headerlink\" title=\"1、LOWER(s)函数和LCASE(s)函数\"></a><strong>1、LOWER(s)函数和LCASE(s)函数</strong></h3><p>LOWER(s)或者LCASE(s)函数可以将字符串s中的字母字符全部转换成小写字母。</p>\n<p>**　实例：**</p>\n<p>使用LOWER函数或者LCASE函数将字符串中所有字母字符转换为小写。SQL语句如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LOWER(&#x27;WWW.ngrok.cn&#x27;),LCASE(&#x27;ngrok.CN&#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>执行结果如下：</p>\n<h3 id=\"2、UPPER-s-函数和UCASE-s-函数\"><a href=\"#2、UPPER-s-函数和UCASE-s-函数\" class=\"headerlink\" title=\"2、UPPER(s)函数和UCASE(s)函数\"></a>2、UPPER(s)函数和UCASE(s)函数</h3><p>UPPER(s)或UCASE(s)函数可以将字符串s中的字母字符全部转换成大写字母。<br>**　实例：**<br>　使用UPPER函数或者UCASE函数将字符串中的所有字母字符转换为大写。SQL语句如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT UPPER(&#x27;www.ngrok.cn&#x27;),UCASE(&#x27;ngrok&#x27;);</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL FIRST()函数","order":9,"_content":"\n## SQL FIRST() 函数\n\n------\n\nFIRST() 函数返回指定的列中第一个记录的值。\n\n### SQL FIRST() 语法\n\n```\nSELECT FIRST(column_name) FROM table_name;\n```\n\n> **注释：**只有 MS Access 支持 FIRST() 函数。\n\n## SQL Server、MySQL 和 Oracle 中的 SQL FIRST() 工作区\n\n------\n\n### SQL Server 语法\n\n示例\n\n```\nSELECT TOP 1 column_name\nFROM table_name\nORDER BY column_name ASC;\n```\n\n示例\n\n```\nSELECT TOP 1 CustomerName FROM Customers                \nORDER BY CustomerID ASC;\n```\n\n### MySQL 语法\n\n示例\n\n```\nSELECT column_name FROM table_name                \nORDER BY column_name ASC                \nLIMIT 1;\n```\n\n示例\n\n```\nSELECT CustomerName FROM Customers               \nORDER BY CustomerID ASC                \nLIMIT 1;\n```\n\n### Oracle 语法\n\n```\nSELECT column_name FROM table_name                \nORDER BY \ncolumn_name ASC               \nWHERE ROWNUM <=1;\n```\n\n### 实例\n\n```\nSELECT CustomerName FROM Customers                \nORDER BY CustomerID ASC                \nWHERE ROWNUM <=1;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"Customers\" 表的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL FIRST() 实例\n\n------\n\n下面的 SQL 语句选取 \"Customers\" 表的 \"CustomerName\" 列中第一个记录的值：\n\n示例\n\n```\nSELECT FIRST(CustomerName) AS FirstCustomer FROM Customers;\n```\n\n","source":"wiki/sql/function/first.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL FIRST()函数\norder: 9\n---\n\n## SQL FIRST() 函数\n\n------\n\nFIRST() 函数返回指定的列中第一个记录的值。\n\n### SQL FIRST() 语法\n\n```\nSELECT FIRST(column_name) FROM table_name;\n```\n\n> **注释：**只有 MS Access 支持 FIRST() 函数。\n\n## SQL Server、MySQL 和 Oracle 中的 SQL FIRST() 工作区\n\n------\n\n### SQL Server 语法\n\n示例\n\n```\nSELECT TOP 1 column_name\nFROM table_name\nORDER BY column_name ASC;\n```\n\n示例\n\n```\nSELECT TOP 1 CustomerName FROM Customers                \nORDER BY CustomerID ASC;\n```\n\n### MySQL 语法\n\n示例\n\n```\nSELECT column_name FROM table_name                \nORDER BY column_name ASC                \nLIMIT 1;\n```\n\n示例\n\n```\nSELECT CustomerName FROM Customers               \nORDER BY CustomerID ASC                \nLIMIT 1;\n```\n\n### Oracle 语法\n\n```\nSELECT column_name FROM table_name                \nORDER BY \ncolumn_name ASC               \nWHERE ROWNUM <=1;\n```\n\n### 实例\n\n```\nSELECT CustomerName FROM Customers                \nORDER BY CustomerID ASC                \nWHERE ROWNUM <=1;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"Customers\" 表的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL FIRST() 实例\n\n------\n\n下面的 SQL 语句选取 \"Customers\" 表的 \"CustomerName\" 列中第一个记录的值：\n\n示例\n\n```\nSELECT FIRST(CustomerName) AS FirstCustomer FROM Customers;\n```\n\n","date":"2025-06-11T06:34:08.575Z","updated":"2025-06-11T06:34:08.575Z","path":"wiki/sql/function/first.html","comments":1,"_id":"cmbrn2fnm000244x089jraml7","content":"<h2 id=\"SQL-FIRST-函数\"><a href=\"#SQL-FIRST-函数\" class=\"headerlink\" title=\"SQL FIRST() 函数\"></a>SQL FIRST() 函数</h2><hr>\n<p>FIRST() 函数返回指定的列中第一个记录的值。</p>\n<h3 id=\"SQL-FIRST-语法\"><a href=\"#SQL-FIRST-语法\" class=\"headerlink\" title=\"SQL FIRST() 语法\"></a>SQL FIRST() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT FIRST(column_name) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注释：**只有 MS Access 支持 FIRST() 函数。</p>\n</blockquote>\n<h2 id=\"SQL-Server、MySQL-和-Oracle-中的-SQL-FIRST-工作区\"><a href=\"#SQL-Server、MySQL-和-Oracle-中的-SQL-FIRST-工作区\" class=\"headerlink\" title=\"SQL Server、MySQL 和 Oracle 中的 SQL FIRST() 工作区\"></a>SQL Server、MySQL 和 Oracle 中的 SQL FIRST() 工作区</h2><hr>\n<h3 id=\"SQL-Server-语法\"><a href=\"#SQL-Server-语法\" class=\"headerlink\" title=\"SQL Server 语法\"></a>SQL Server 语法</h3><p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TOP 1 column_name</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">ORDER BY column_name ASC;</span><br></pre></td></tr></table></figure>\n\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TOP 1 CustomerName FROM Customers                </span><br><span class=\"line\">ORDER BY CustomerID ASC;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MySQL-语法\"><a href=\"#MySQL-语法\" class=\"headerlink\" title=\"MySQL 语法\"></a>MySQL 语法</h3><p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name FROM table_name                </span><br><span class=\"line\">ORDER BY column_name ASC                </span><br><span class=\"line\">LIMIT 1;</span><br></pre></td></tr></table></figure>\n\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerName FROM Customers               </span><br><span class=\"line\">ORDER BY CustomerID ASC                </span><br><span class=\"line\">LIMIT 1;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Oracle-语法\"><a href=\"#Oracle-语法\" class=\"headerlink\" title=\"Oracle 语法\"></a>Oracle 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name FROM table_name                </span><br><span class=\"line\">ORDER BY </span><br><span class=\"line\">column_name ASC               </span><br><span class=\"line\">WHERE ROWNUM &lt;=1;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerName FROM Customers                </span><br><span class=\"line\">ORDER BY CustomerID ASC                </span><br><span class=\"line\">WHERE ROWNUM &lt;=1;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “Customers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-FIRST-实例\"><a href=\"#SQL-FIRST-实例\" class=\"headerlink\" title=\"SQL FIRST() 实例\"></a>SQL FIRST() 实例</h2><hr>\n<p>下面的 SQL 语句选取 “Customers” 表的 “CustomerName” 列中第一个记录的值：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT FIRST(CustomerName) AS FirstCustomer FROM Customers;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"SQL-FIRST-函数\"><a href=\"#SQL-FIRST-函数\" class=\"headerlink\" title=\"SQL FIRST() 函数\"></a>SQL FIRST() 函数</h2><hr>\n<p>FIRST() 函数返回指定的列中第一个记录的值。</p>\n<h3 id=\"SQL-FIRST-语法\"><a href=\"#SQL-FIRST-语法\" class=\"headerlink\" title=\"SQL FIRST() 语法\"></a>SQL FIRST() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT FIRST(column_name) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注释：**只有 MS Access 支持 FIRST() 函数。</p>\n</blockquote>\n<h2 id=\"SQL-Server、MySQL-和-Oracle-中的-SQL-FIRST-工作区\"><a href=\"#SQL-Server、MySQL-和-Oracle-中的-SQL-FIRST-工作区\" class=\"headerlink\" title=\"SQL Server、MySQL 和 Oracle 中的 SQL FIRST() 工作区\"></a>SQL Server、MySQL 和 Oracle 中的 SQL FIRST() 工作区</h2><hr>\n<h3 id=\"SQL-Server-语法\"><a href=\"#SQL-Server-语法\" class=\"headerlink\" title=\"SQL Server 语法\"></a>SQL Server 语法</h3><p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TOP 1 column_name</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">ORDER BY column_name ASC;</span><br></pre></td></tr></table></figure>\n\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TOP 1 CustomerName FROM Customers                </span><br><span class=\"line\">ORDER BY CustomerID ASC;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MySQL-语法\"><a href=\"#MySQL-语法\" class=\"headerlink\" title=\"MySQL 语法\"></a>MySQL 语法</h3><p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name FROM table_name                </span><br><span class=\"line\">ORDER BY column_name ASC                </span><br><span class=\"line\">LIMIT 1;</span><br></pre></td></tr></table></figure>\n\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerName FROM Customers               </span><br><span class=\"line\">ORDER BY CustomerID ASC                </span><br><span class=\"line\">LIMIT 1;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Oracle-语法\"><a href=\"#Oracle-语法\" class=\"headerlink\" title=\"Oracle 语法\"></a>Oracle 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name FROM table_name                </span><br><span class=\"line\">ORDER BY </span><br><span class=\"line\">column_name ASC               </span><br><span class=\"line\">WHERE ROWNUM &lt;=1;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerName FROM Customers                </span><br><span class=\"line\">ORDER BY CustomerID ASC                </span><br><span class=\"line\">WHERE ROWNUM &lt;=1;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “Customers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-FIRST-实例\"><a href=\"#SQL-FIRST-实例\" class=\"headerlink\" title=\"SQL FIRST() 实例\"></a>SQL FIRST() 实例</h2><hr>\n<p>下面的 SQL 语句选取 “Customers” 表的 “CustomerName” 列中第一个记录的值：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT FIRST(CustomerName) AS FirstCustomer FROM Customers;</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"wiki","wiki":"sql","title":"SQL FORMAT()函数","order":22,"_content":"\n## SQL FORMAT() 函数\n\n------\n\nFORMAT() 函数用于对字段的显示进行格式化。\n\n### SQL FORMAT() 语法\n\n```\nSELECT FORMAT(column_name,format) FROM table_name;\n```\n\n| 参数        | 描述                   |\n| :---------- | :--------------------- |\n| column_name | 必需。要格式化的字段。 |\n| format      | 必需。规定格式。       |\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"Products\" 表的数据：\n\n| ProductID | ProductName                  | SupplierID | CategoryID | Unit                | Price |\n| :-------- | :--------------------------- | :--------- | :--------- | :------------------ | :---- |\n| 1         | Chais                        | 1          | 1          | 10 boxes x 20 bags  | 18    |\n| 2         | Chang                        | 1          | 1          | 24 - 12 oz bottles  | 19    |\n| 3         | Aniseed Syrup                | 1          | 2          | 12 - 550 ml bottles | 10    |\n| 4         | Chef Anton's Cajun Seasoning | 2          | 2          | 48 - 6 oz jars      | 21.35 |\n| 5         | Chef Anton's Gumbo Mix       | 2          | 2          | 36 boxes            | 25    |\n\n## SQL FORMAT() 实例\n\n------\n\n下面的 SQL 语句从 \"Products\" 表中选取产品名称以及当天（格式化为 YYYY-MM-DD）的价格：\n\n示例\n\n```\nSELECT ProductName, Price, FORMAT(Now(),'YYYY-MM-DD') AS PerDate\nFROM Products;\n```\n\n","source":"wiki/sql/function/format.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL FORMAT()函数\norder: 22\n---\n\n## SQL FORMAT() 函数\n\n------\n\nFORMAT() 函数用于对字段的显示进行格式化。\n\n### SQL FORMAT() 语法\n\n```\nSELECT FORMAT(column_name,format) FROM table_name;\n```\n\n| 参数        | 描述                   |\n| :---------- | :--------------------- |\n| column_name | 必需。要格式化的字段。 |\n| format      | 必需。规定格式。       |\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"Products\" 表的数据：\n\n| ProductID | ProductName                  | SupplierID | CategoryID | Unit                | Price |\n| :-------- | :--------------------------- | :--------- | :--------- | :------------------ | :---- |\n| 1         | Chais                        | 1          | 1          | 10 boxes x 20 bags  | 18    |\n| 2         | Chang                        | 1          | 1          | 24 - 12 oz bottles  | 19    |\n| 3         | Aniseed Syrup                | 1          | 2          | 12 - 550 ml bottles | 10    |\n| 4         | Chef Anton's Cajun Seasoning | 2          | 2          | 48 - 6 oz jars      | 21.35 |\n| 5         | Chef Anton's Gumbo Mix       | 2          | 2          | 36 boxes            | 25    |\n\n## SQL FORMAT() 实例\n\n------\n\n下面的 SQL 语句从 \"Products\" 表中选取产品名称以及当天（格式化为 YYYY-MM-DD）的价格：\n\n示例\n\n```\nSELECT ProductName, Price, FORMAT(Now(),'YYYY-MM-DD') AS PerDate\nFROM Products;\n```\n\n","date":"2025-06-11T07:04:39.440Z","updated":"2025-06-11T07:04:39.440Z","path":"wiki/sql/function/format.html","comments":1,"_id":"cmbrn2fnn000344x00tv65hh9","content":"<h2 id=\"SQL-FORMAT-函数\"><a href=\"#SQL-FORMAT-函数\" class=\"headerlink\" title=\"SQL FORMAT() 函数\"></a>SQL FORMAT() 函数</h2><hr>\n<p>FORMAT() 函数用于对字段的显示进行格式化。</p>\n<h3 id=\"SQL-FORMAT-语法\"><a href=\"#SQL-FORMAT-语法\" class=\"headerlink\" title=\"SQL FORMAT() 语法\"></a>SQL FORMAT() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT FORMAT(column_name,format) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">column_name</td>\n<td align=\"left\">必需。要格式化的字段。</td>\n</tr>\n<tr>\n<td align=\"left\">format</td>\n<td align=\"left\">必需。规定格式。</td>\n</tr>\n</tbody></table>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “Products” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">ProductID</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">SupplierID</th>\n<th align=\"left\">CategoryID</th>\n<th align=\"left\">Unit</th>\n<th align=\"left\">Price</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Chais</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">10 boxes x 20 bags</td>\n<td align=\"left\">18</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Chang</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">24 - 12 oz bottles</td>\n<td align=\"left\">19</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Aniseed Syrup</td>\n<td align=\"left\">1</td>\n<td align=\"left\">2</td>\n<td align=\"left\">12 - 550 ml bottles</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Chef Anton’s Cajun Seasoning</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">48 - 6 oz jars</td>\n<td align=\"left\">21.35</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Chef Anton’s Gumbo Mix</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">36 boxes</td>\n<td align=\"left\">25</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-FORMAT-实例\"><a href=\"#SQL-FORMAT-实例\" class=\"headerlink\" title=\"SQL FORMAT() 实例\"></a>SQL FORMAT() 实例</h2><hr>\n<p>下面的 SQL 语句从 “Products” 表中选取产品名称以及当天（格式化为 YYYY-MM-DD）的价格：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ProductName, Price, FORMAT(Now(),&#x27;YYYY-MM-DD&#x27;) AS PerDate</span><br><span class=\"line\">FROM Products;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"SQL-FORMAT-函数\"><a href=\"#SQL-FORMAT-函数\" class=\"headerlink\" title=\"SQL FORMAT() 函数\"></a>SQL FORMAT() 函数</h2><hr>\n<p>FORMAT() 函数用于对字段的显示进行格式化。</p>\n<h3 id=\"SQL-FORMAT-语法\"><a href=\"#SQL-FORMAT-语法\" class=\"headerlink\" title=\"SQL FORMAT() 语法\"></a>SQL FORMAT() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT FORMAT(column_name,format) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">column_name</td>\n<td align=\"left\">必需。要格式化的字段。</td>\n</tr>\n<tr>\n<td align=\"left\">format</td>\n<td align=\"left\">必需。规定格式。</td>\n</tr>\n</tbody></table>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “Products” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">ProductID</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">SupplierID</th>\n<th align=\"left\">CategoryID</th>\n<th align=\"left\">Unit</th>\n<th align=\"left\">Price</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Chais</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">10 boxes x 20 bags</td>\n<td align=\"left\">18</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Chang</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">24 - 12 oz bottles</td>\n<td align=\"left\">19</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Aniseed Syrup</td>\n<td align=\"left\">1</td>\n<td align=\"left\">2</td>\n<td align=\"left\">12 - 550 ml bottles</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Chef Anton’s Cajun Seasoning</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">48 - 6 oz jars</td>\n<td align=\"left\">21.35</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Chef Anton’s Gumbo Mix</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">36 boxes</td>\n<td align=\"left\">25</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-FORMAT-实例\"><a href=\"#SQL-FORMAT-实例\" class=\"headerlink\" title=\"SQL FORMAT() 实例\"></a>SQL FORMAT() 实例</h2><hr>\n<p>下面的 SQL 语句从 “Products” 表中选取产品名称以及当天（格式化为 YYYY-MM-DD）的价格：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ProductName, Price, FORMAT(Now(),&#x27;YYYY-MM-DD&#x27;) AS PerDate</span><br><span class=\"line\">FROM Products;</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"wiki","wiki":"sql","title":"SQL GROUP BY()函数","order":11,"_content":"\n## SQL GROUP BY 语句\n\n------\n\nAggregate 函数常常需要添加 GROUP BY 语句。\n\nGROUP BY语句通常与集合函数（COUNT，MAX，MIN，SUM，AVG）一起使用，以按一个或多个列对结果集进行分组。\n\n## GROUP BY 语句\n\n------\n\nGROUP BY 语句用于结合 Aggregate 函数，根据一个或多个列对结果集进行分组。\n\n### SQL GROUP BY 语法\n\n```\nSELECT column_name(s)\nFROM table_name\nWHERE condition\nGROUP BY column_name(s)\nORDER BY column_name(s);\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"Customers\"表的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL GROUP BY示例\n\n------\n\n以下SQL语句列出了每个国家/地区的客户数量：\n\n```\nSELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country;\n```\n\n以下SQL语句列出每个国家的客户数量，从高到低排序：\n\n```\nSELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nORDER BY COUNT(CustomerID) DESC;\n```\n\n## 演示数据库\n\n------\n\n以下是罗斯文示例数据库中\"订单\"表的一个选择：\n\n| OrderID | CustomerID | EmployeeID | OrderDate  | ShipperID |\n| :------ | :--------- | :--------- | :--------- | :-------- |\n| 10248   | 90         | 5          | 1996-07-04 | 3         |\n| 10249   | 81         | 6          | 1996-07-05 | 1         |\n| 10250   | 34         | 4          | 1996-07-08 | 2         |\n\n并从\"Shippers\"表中选择：\n\n| ShipperID | ShipperName      |\n| :-------- | :--------------- |\n| 1         | Speedy Express   |\n| 2         | United Package   |\n| 3         | Federal Shipping |\n\n## GROUP BY使用JOIN示例\n\n------\n\n以下SQL语句列出了每个发货人发送的订单数量：\n\n```\nSELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders\nLEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\nGROUP BY ShipperName;\n```\n","source":"wiki/sql/function/groupby.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL GROUP BY()函数\norder: 11\n---\n\n## SQL GROUP BY 语句\n\n------\n\nAggregate 函数常常需要添加 GROUP BY 语句。\n\nGROUP BY语句通常与集合函数（COUNT，MAX，MIN，SUM，AVG）一起使用，以按一个或多个列对结果集进行分组。\n\n## GROUP BY 语句\n\n------\n\nGROUP BY 语句用于结合 Aggregate 函数，根据一个或多个列对结果集进行分组。\n\n### SQL GROUP BY 语法\n\n```\nSELECT column_name(s)\nFROM table_name\nWHERE condition\nGROUP BY column_name(s)\nORDER BY column_name(s);\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"Customers\"表的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL GROUP BY示例\n\n------\n\n以下SQL语句列出了每个国家/地区的客户数量：\n\n```\nSELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country;\n```\n\n以下SQL语句列出每个国家的客户数量，从高到低排序：\n\n```\nSELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nORDER BY COUNT(CustomerID) DESC;\n```\n\n## 演示数据库\n\n------\n\n以下是罗斯文示例数据库中\"订单\"表的一个选择：\n\n| OrderID | CustomerID | EmployeeID | OrderDate  | ShipperID |\n| :------ | :--------- | :--------- | :--------- | :-------- |\n| 10248   | 90         | 5          | 1996-07-04 | 3         |\n| 10249   | 81         | 6          | 1996-07-05 | 1         |\n| 10250   | 34         | 4          | 1996-07-08 | 2         |\n\n并从\"Shippers\"表中选择：\n\n| ShipperID | ShipperName      |\n| :-------- | :--------------- |\n| 1         | Speedy Express   |\n| 2         | United Package   |\n| 3         | Federal Shipping |\n\n## GROUP BY使用JOIN示例\n\n------\n\n以下SQL语句列出了每个发货人发送的订单数量：\n\n```\nSELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders\nLEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID\nGROUP BY ShipperName;\n```\n","date":"2025-06-11T06:39:58.858Z","updated":"2025-06-11T06:39:58.854Z","path":"wiki/sql/function/groupby.html","comments":1,"_id":"cmbrn2fno000444x0eni46k3y","content":"<h2 id=\"SQL-GROUP-BY-语句\"><a href=\"#SQL-GROUP-BY-语句\" class=\"headerlink\" title=\"SQL GROUP BY 语句\"></a>SQL GROUP BY 语句</h2><hr>\n<p>Aggregate 函数常常需要添加 GROUP BY 语句。</p>\n<p>GROUP BY语句通常与集合函数（COUNT，MAX，MIN，SUM，AVG）一起使用，以按一个或多个列对结果集进行分组。</p>\n<h2 id=\"GROUP-BY-语句\"><a href=\"#GROUP-BY-语句\" class=\"headerlink\" title=\"GROUP BY 语句\"></a>GROUP BY 语句</h2><hr>\n<p>GROUP BY 语句用于结合 Aggregate 函数，根据一个或多个列对结果集进行分组。</p>\n<h3 id=\"SQL-GROUP-BY-语法\"><a href=\"#SQL-GROUP-BY-语法\" class=\"headerlink\" title=\"SQL GROUP BY 语法\"></a>SQL GROUP BY 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition</span><br><span class=\"line\">GROUP BY column_name(s)</span><br><span class=\"line\">ORDER BY column_name(s);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “Customers”表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-GROUP-BY示例\"><a href=\"#SQL-GROUP-BY示例\" class=\"headerlink\" title=\"SQL GROUP BY示例\"></a>SQL GROUP BY示例</h2><hr>\n<p>以下SQL语句列出了每个国家&#x2F;地区的客户数量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(CustomerID), Country</span><br><span class=\"line\">FROM Customers</span><br><span class=\"line\">GROUP BY Country;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句列出每个国家的客户数量，从高到低排序：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(CustomerID), Country</span><br><span class=\"line\">FROM Customers</span><br><span class=\"line\">GROUP BY Country</span><br><span class=\"line\">ORDER BY COUNT(CustomerID) DESC;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库-1\"><a href=\"#演示数据库-1\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>以下是罗斯文示例数据库中”订单”表的一个选择：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">EmployeeID</th>\n<th align=\"left\">OrderDate</th>\n<th align=\"left\">ShipperID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10248</td>\n<td align=\"left\">90</td>\n<td align=\"left\">5</td>\n<td align=\"left\">1996-07-04</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">10249</td>\n<td align=\"left\">81</td>\n<td align=\"left\">6</td>\n<td align=\"left\">1996-07-05</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">10250</td>\n<td align=\"left\">34</td>\n<td align=\"left\">4</td>\n<td align=\"left\">1996-07-08</td>\n<td align=\"left\">2</td>\n</tr>\n</tbody></table>\n<p>并从”Shippers”表中选择：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">ShipperID</th>\n<th align=\"left\">ShipperName</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Speedy Express</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">United Package</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Federal Shipping</td>\n</tr>\n</tbody></table>\n<h2 id=\"GROUP-BY使用JOIN示例\"><a href=\"#GROUP-BY使用JOIN示例\" class=\"headerlink\" title=\"GROUP BY使用JOIN示例\"></a>GROUP BY使用JOIN示例</h2><hr>\n<p>以下SQL语句列出了每个发货人发送的订单数量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders</span><br><span class=\"line\">LEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID</span><br><span class=\"line\">GROUP BY ShipperName;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-GROUP-BY-语句\"><a href=\"#SQL-GROUP-BY-语句\" class=\"headerlink\" title=\"SQL GROUP BY 语句\"></a>SQL GROUP BY 语句</h2><hr>\n<p>Aggregate 函数常常需要添加 GROUP BY 语句。</p>\n<p>GROUP BY语句通常与集合函数（COUNT，MAX，MIN，SUM，AVG）一起使用，以按一个或多个列对结果集进行分组。</p>\n<h2 id=\"GROUP-BY-语句\"><a href=\"#GROUP-BY-语句\" class=\"headerlink\" title=\"GROUP BY 语句\"></a>GROUP BY 语句</h2><hr>\n<p>GROUP BY 语句用于结合 Aggregate 函数，根据一个或多个列对结果集进行分组。</p>\n<h3 id=\"SQL-GROUP-BY-语法\"><a href=\"#SQL-GROUP-BY-语法\" class=\"headerlink\" title=\"SQL GROUP BY 语法\"></a>SQL GROUP BY 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition</span><br><span class=\"line\">GROUP BY column_name(s)</span><br><span class=\"line\">ORDER BY column_name(s);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “Customers”表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-GROUP-BY示例\"><a href=\"#SQL-GROUP-BY示例\" class=\"headerlink\" title=\"SQL GROUP BY示例\"></a>SQL GROUP BY示例</h2><hr>\n<p>以下SQL语句列出了每个国家&#x2F;地区的客户数量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(CustomerID), Country</span><br><span class=\"line\">FROM Customers</span><br><span class=\"line\">GROUP BY Country;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句列出每个国家的客户数量，从高到低排序：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(CustomerID), Country</span><br><span class=\"line\">FROM Customers</span><br><span class=\"line\">GROUP BY Country</span><br><span class=\"line\">ORDER BY COUNT(CustomerID) DESC;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库-1\"><a href=\"#演示数据库-1\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>以下是罗斯文示例数据库中”订单”表的一个选择：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">EmployeeID</th>\n<th align=\"left\">OrderDate</th>\n<th align=\"left\">ShipperID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10248</td>\n<td align=\"left\">90</td>\n<td align=\"left\">5</td>\n<td align=\"left\">1996-07-04</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">10249</td>\n<td align=\"left\">81</td>\n<td align=\"left\">6</td>\n<td align=\"left\">1996-07-05</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">10250</td>\n<td align=\"left\">34</td>\n<td align=\"left\">4</td>\n<td align=\"left\">1996-07-08</td>\n<td align=\"left\">2</td>\n</tr>\n</tbody></table>\n<p>并从”Shippers”表中选择：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">ShipperID</th>\n<th align=\"left\">ShipperName</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Speedy Express</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">United Package</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Federal Shipping</td>\n</tr>\n</tbody></table>\n<h2 id=\"GROUP-BY使用JOIN示例\"><a href=\"#GROUP-BY使用JOIN示例\" class=\"headerlink\" title=\"GROUP BY使用JOIN示例\"></a>GROUP BY使用JOIN示例</h2><hr>\n<p>以下SQL语句列出了每个发货人发送的订单数量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Shippers.ShipperName, COUNT(Orders.OrderID) AS NumberOfOrders FROM Orders</span><br><span class=\"line\">LEFT JOIN Shippers ON Orders.ShipperID = Shippers.ShipperID</span><br><span class=\"line\">GROUP BY ShipperName;</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL HAVING函数","order":12,"_content":"\n## SQL HAVING 子句\n\n------\n\n在 SQL 中增加 HAVING 子句原因是，WHERE 关键字无法与 Aggregate 函数一起使用。\n\nHAVING子句已添加到SQL中，因为WHERE关键字不能用于聚合函数。\n\n### SQL HAVING 语法\n\n```\nSELECT column_name(s)\nFROM table_name\nWHERE condition\nGROUP BY column_name(s)\nHAVING condition\nORDER BY column_name(s);\n```\n\n## 演示数据库\n\n------\n\n以下是罗斯文示例数据库中\"Customers\"表的选择：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL HAVING示例\n\n------\n\n以下SQL语句列出了每个国家/地区的客户数量。只包括超过5位客户的国家/地区：\n\n```\nSELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nHAVING COUNT(CustomerID) > 5;\n```\n\n以下SQL语句列出每个国家的客户数量，从高到低排序（仅包括拥有超过5名客户的国家/地区）：\n\n```\nSELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nHAVING COUNT(CustomerID) > 5\nORDER BY COUNT(CustomerID) DESC;\n```\n\n## 演示数据库\n\n------\n\n以下是罗斯文示例数据库中\"Orders\"表的一个选择：\n\n| OrderID | CustomerID | EmployeeID | OrderDate  | ShipperID |\n| :------ | :--------- | :--------- | :--------- | :-------- |\n| 10248   | 90         | 5          | 1996-07-04 | 3         |\n| 10249   | 81         | 6          | 1996-07-05 | 1         |\n| 10250   | 34         | 4          | 1996-07-08 | 2         |\n\n并从\"Employees\"表中选择：\n\n| EmployeeID | LastName  | FirstName | BirthDate  | Photo      | Notes                       |\n| :--------- | :-------- | :-------- | :--------- | :--------- | :-------------------------- |\n| 1          | Davolio   | Nancy     | 1968-12-08 | EmpID1.pic | Education includes a BA.... |\n| 2          | Fuller    | Andrew    | 1952-02-19 | EmpID2.pic | Andrew received his BTS.... |\n| 3          | Leverling | Janet     | 1963-08-30 | EmpID3.pic | Janet has a BS degree....   |\n\n## 更多HAVING示例\n\n------\n\n以下SQL语句列出已注册超过10个订单的员工：\n\n```\nSELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders\nFROM Orders\nINNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nGROUP BY LastName\nHAVING COUNT(Orders.OrderID) > 10;\n```\n\n以下SQL语句列出员工\"Davolio\"或\"Fuller\"是否已注册超过25个订单：\n\n```\nSELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders\nFROM Orders\nINNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nWHERE LastName = 'Davolio' OR LastName = 'Fuller'\nGROUP BY LastName\nHAVING COUNT(Orders.OrderID) > 25;\n```\n","source":"wiki/sql/function/having.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL HAVING函数\norder: 12\n---\n\n## SQL HAVING 子句\n\n------\n\n在 SQL 中增加 HAVING 子句原因是，WHERE 关键字无法与 Aggregate 函数一起使用。\n\nHAVING子句已添加到SQL中，因为WHERE关键字不能用于聚合函数。\n\n### SQL HAVING 语法\n\n```\nSELECT column_name(s)\nFROM table_name\nWHERE condition\nGROUP BY column_name(s)\nHAVING condition\nORDER BY column_name(s);\n```\n\n## 演示数据库\n\n------\n\n以下是罗斯文示例数据库中\"Customers\"表的选择：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL HAVING示例\n\n------\n\n以下SQL语句列出了每个国家/地区的客户数量。只包括超过5位客户的国家/地区：\n\n```\nSELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nHAVING COUNT(CustomerID) > 5;\n```\n\n以下SQL语句列出每个国家的客户数量，从高到低排序（仅包括拥有超过5名客户的国家/地区）：\n\n```\nSELECT COUNT(CustomerID), Country\nFROM Customers\nGROUP BY Country\nHAVING COUNT(CustomerID) > 5\nORDER BY COUNT(CustomerID) DESC;\n```\n\n## 演示数据库\n\n------\n\n以下是罗斯文示例数据库中\"Orders\"表的一个选择：\n\n| OrderID | CustomerID | EmployeeID | OrderDate  | ShipperID |\n| :------ | :--------- | :--------- | :--------- | :-------- |\n| 10248   | 90         | 5          | 1996-07-04 | 3         |\n| 10249   | 81         | 6          | 1996-07-05 | 1         |\n| 10250   | 34         | 4          | 1996-07-08 | 2         |\n\n并从\"Employees\"表中选择：\n\n| EmployeeID | LastName  | FirstName | BirthDate  | Photo      | Notes                       |\n| :--------- | :-------- | :-------- | :--------- | :--------- | :-------------------------- |\n| 1          | Davolio   | Nancy     | 1968-12-08 | EmpID1.pic | Education includes a BA.... |\n| 2          | Fuller    | Andrew    | 1952-02-19 | EmpID2.pic | Andrew received his BTS.... |\n| 3          | Leverling | Janet     | 1963-08-30 | EmpID3.pic | Janet has a BS degree....   |\n\n## 更多HAVING示例\n\n------\n\n以下SQL语句列出已注册超过10个订单的员工：\n\n```\nSELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders\nFROM Orders\nINNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nGROUP BY LastName\nHAVING COUNT(Orders.OrderID) > 10;\n```\n\n以下SQL语句列出员工\"Davolio\"或\"Fuller\"是否已注册超过25个订单：\n\n```\nSELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders\nFROM Orders\nINNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID\nWHERE LastName = 'Davolio' OR LastName = 'Fuller'\nGROUP BY LastName\nHAVING COUNT(Orders.OrderID) > 25;\n```\n","date":"2025-06-11T06:43:40.909Z","updated":"2025-06-11T06:43:40.905Z","path":"wiki/sql/function/having.html","comments":1,"_id":"cmbrn2fnq000544x01j145jd1","content":"<h2 id=\"SQL-HAVING-子句\"><a href=\"#SQL-HAVING-子句\" class=\"headerlink\" title=\"SQL HAVING 子句\"></a>SQL HAVING 子句</h2><hr>\n<p>在 SQL 中增加 HAVING 子句原因是，WHERE 关键字无法与 Aggregate 函数一起使用。</p>\n<p>HAVING子句已添加到SQL中，因为WHERE关键字不能用于聚合函数。</p>\n<h3 id=\"SQL-HAVING-语法\"><a href=\"#SQL-HAVING-语法\" class=\"headerlink\" title=\"SQL HAVING 语法\"></a>SQL HAVING 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition</span><br><span class=\"line\">GROUP BY column_name(s)</span><br><span class=\"line\">HAVING condition</span><br><span class=\"line\">ORDER BY column_name(s);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>以下是罗斯文示例数据库中”Customers”表的选择：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-HAVING示例\"><a href=\"#SQL-HAVING示例\" class=\"headerlink\" title=\"SQL HAVING示例\"></a>SQL HAVING示例</h2><hr>\n<p>以下SQL语句列出了每个国家&#x2F;地区的客户数量。只包括超过5位客户的国家&#x2F;地区：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(CustomerID), Country</span><br><span class=\"line\">FROM Customers</span><br><span class=\"line\">GROUP BY Country</span><br><span class=\"line\">HAVING COUNT(CustomerID) &gt; 5;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句列出每个国家的客户数量，从高到低排序（仅包括拥有超过5名客户的国家&#x2F;地区）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(CustomerID), Country</span><br><span class=\"line\">FROM Customers</span><br><span class=\"line\">GROUP BY Country</span><br><span class=\"line\">HAVING COUNT(CustomerID) &gt; 5</span><br><span class=\"line\">ORDER BY COUNT(CustomerID) DESC;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库-1\"><a href=\"#演示数据库-1\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>以下是罗斯文示例数据库中”Orders”表的一个选择：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">EmployeeID</th>\n<th align=\"left\">OrderDate</th>\n<th align=\"left\">ShipperID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10248</td>\n<td align=\"left\">90</td>\n<td align=\"left\">5</td>\n<td align=\"left\">1996-07-04</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">10249</td>\n<td align=\"left\">81</td>\n<td align=\"left\">6</td>\n<td align=\"left\">1996-07-05</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">10250</td>\n<td align=\"left\">34</td>\n<td align=\"left\">4</td>\n<td align=\"left\">1996-07-08</td>\n<td align=\"left\">2</td>\n</tr>\n</tbody></table>\n<p>并从”Employees”表中选择：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">EmployeeID</th>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">BirthDate</th>\n<th align=\"left\">Photo</th>\n<th align=\"left\">Notes</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Davolio</td>\n<td align=\"left\">Nancy</td>\n<td align=\"left\">1968-12-08</td>\n<td align=\"left\">EmpID1.pic</td>\n<td align=\"left\">Education includes a BA….</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Fuller</td>\n<td align=\"left\">Andrew</td>\n<td align=\"left\">1952-02-19</td>\n<td align=\"left\">EmpID2.pic</td>\n<td align=\"left\">Andrew received his BTS….</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Leverling</td>\n<td align=\"left\">Janet</td>\n<td align=\"left\">1963-08-30</td>\n<td align=\"left\">EmpID3.pic</td>\n<td align=\"left\">Janet has a BS degree….</td>\n</tr>\n</tbody></table>\n<h2 id=\"更多HAVING示例\"><a href=\"#更多HAVING示例\" class=\"headerlink\" title=\"更多HAVING示例\"></a>更多HAVING示例</h2><hr>\n<p>以下SQL语句列出已注册超过10个订单的员工：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders</span><br><span class=\"line\">FROM Orders</span><br><span class=\"line\">INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID</span><br><span class=\"line\">GROUP BY LastName</span><br><span class=\"line\">HAVING COUNT(Orders.OrderID) &gt; 10;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句列出员工”Davolio”或”Fuller”是否已注册超过25个订单：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders</span><br><span class=\"line\">FROM Orders</span><br><span class=\"line\">INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID</span><br><span class=\"line\">WHERE LastName = &#x27;Davolio&#x27; OR LastName = &#x27;Fuller&#x27;</span><br><span class=\"line\">GROUP BY LastName</span><br><span class=\"line\">HAVING COUNT(Orders.OrderID) &gt; 25;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-HAVING-子句\"><a href=\"#SQL-HAVING-子句\" class=\"headerlink\" title=\"SQL HAVING 子句\"></a>SQL HAVING 子句</h2><hr>\n<p>在 SQL 中增加 HAVING 子句原因是，WHERE 关键字无法与 Aggregate 函数一起使用。</p>\n<p>HAVING子句已添加到SQL中，因为WHERE关键字不能用于聚合函数。</p>\n<h3 id=\"SQL-HAVING-语法\"><a href=\"#SQL-HAVING-语法\" class=\"headerlink\" title=\"SQL HAVING 语法\"></a>SQL HAVING 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name(s)</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE condition</span><br><span class=\"line\">GROUP BY column_name(s)</span><br><span class=\"line\">HAVING condition</span><br><span class=\"line\">ORDER BY column_name(s);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>以下是罗斯文示例数据库中”Customers”表的选择：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-HAVING示例\"><a href=\"#SQL-HAVING示例\" class=\"headerlink\" title=\"SQL HAVING示例\"></a>SQL HAVING示例</h2><hr>\n<p>以下SQL语句列出了每个国家&#x2F;地区的客户数量。只包括超过5位客户的国家&#x2F;地区：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(CustomerID), Country</span><br><span class=\"line\">FROM Customers</span><br><span class=\"line\">GROUP BY Country</span><br><span class=\"line\">HAVING COUNT(CustomerID) &gt; 5;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句列出每个国家的客户数量，从高到低排序（仅包括拥有超过5名客户的国家&#x2F;地区）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT COUNT(CustomerID), Country</span><br><span class=\"line\">FROM Customers</span><br><span class=\"line\">GROUP BY Country</span><br><span class=\"line\">HAVING COUNT(CustomerID) &gt; 5</span><br><span class=\"line\">ORDER BY COUNT(CustomerID) DESC;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库-1\"><a href=\"#演示数据库-1\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>以下是罗斯文示例数据库中”Orders”表的一个选择：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">OrderID</th>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">EmployeeID</th>\n<th align=\"left\">OrderDate</th>\n<th align=\"left\">ShipperID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">10248</td>\n<td align=\"left\">90</td>\n<td align=\"left\">5</td>\n<td align=\"left\">1996-07-04</td>\n<td align=\"left\">3</td>\n</tr>\n<tr>\n<td align=\"left\">10249</td>\n<td align=\"left\">81</td>\n<td align=\"left\">6</td>\n<td align=\"left\">1996-07-05</td>\n<td align=\"left\">1</td>\n</tr>\n<tr>\n<td align=\"left\">10250</td>\n<td align=\"left\">34</td>\n<td align=\"left\">4</td>\n<td align=\"left\">1996-07-08</td>\n<td align=\"left\">2</td>\n</tr>\n</tbody></table>\n<p>并从”Employees”表中选择：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">EmployeeID</th>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">BirthDate</th>\n<th align=\"left\">Photo</th>\n<th align=\"left\">Notes</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Davolio</td>\n<td align=\"left\">Nancy</td>\n<td align=\"left\">1968-12-08</td>\n<td align=\"left\">EmpID1.pic</td>\n<td align=\"left\">Education includes a BA….</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Fuller</td>\n<td align=\"left\">Andrew</td>\n<td align=\"left\">1952-02-19</td>\n<td align=\"left\">EmpID2.pic</td>\n<td align=\"left\">Andrew received his BTS….</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Leverling</td>\n<td align=\"left\">Janet</td>\n<td align=\"left\">1963-08-30</td>\n<td align=\"left\">EmpID3.pic</td>\n<td align=\"left\">Janet has a BS degree….</td>\n</tr>\n</tbody></table>\n<h2 id=\"更多HAVING示例\"><a href=\"#更多HAVING示例\" class=\"headerlink\" title=\"更多HAVING示例\"></a>更多HAVING示例</h2><hr>\n<p>以下SQL语句列出已注册超过10个订单的员工：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders</span><br><span class=\"line\">FROM Orders</span><br><span class=\"line\">INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID</span><br><span class=\"line\">GROUP BY LastName</span><br><span class=\"line\">HAVING COUNT(Orders.OrderID) &gt; 10;</span><br></pre></td></tr></table></figure>\n\n<p>以下SQL语句列出员工”Davolio”或”Fuller”是否已注册超过25个订单：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Employees.LastName, COUNT(Orders.OrderID) AS NumberOfOrders</span><br><span class=\"line\">FROM Orders</span><br><span class=\"line\">INNER JOIN Employees ON Orders.EmployeeID = Employees.EmployeeID</span><br><span class=\"line\">WHERE LastName = &#x27;Davolio&#x27; OR LastName = &#x27;Fuller&#x27;</span><br><span class=\"line\">GROUP BY LastName</span><br><span class=\"line\">HAVING COUNT(Orders.OrderID) &gt; 25;</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL LAST()函数","order":10,"_content":"\n## SQL LAST() 函数\n\n------\n\nLAST() 函数返回指定的列中最后一个记录的值。\n\n### SQL LAST() 语法\n\n```\nSELECT LAST(column_name) FROM table_name;\n```\n\n> **注释：**只有 MS Access 支持 LAST() 函数。\n\n## SQL Server、MySQL 和 Oracle 中的 SQL LAST() 工作区\n\n------\n\n### SQL Server 语法\n\n示例\n\n```\nSELECT TOP 1 column_name\nFROM table_name\nORDER BY column_name DESC;\n```\n\n示例\n\n```\nSELECT TOP 1 CustomerName FROM Customers               \nORDER BY CustomerID DESC;\n```\n\n### MySQL 语法\n\n示例\n\n```\nSELECT column_name FROM table_name                \nORDER BY column_name DESC                \nLIMIT 1;\n```\n\n示例\n\n```\nSELECT CustomerName FROM Customers                \nORDER BY CustomerID DESC                \nLIMIT 1;\n```\n\n### Oracle 语法\n\n示例\n\n```\nSELECT column_name FROM table_name               \nORDER BY column_name DESC                \nWHERE ROWNUM <=1;\n```\n\n示例\n\n```\nSELECT CustomerName FROM Customers                \nORDER BY CustomerID DESC                \nWHERE ROWNUM <=1;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"Customers\" 表的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL LAST() Example\n\n------\n\n下面的 SQL 语句选取 \"Customers\" 表的 \"CustomerName\" 列中最后一个记录的值：\n\n示例\n\n```\nSELECT LAST(CustomerName) AS LastCustomer FROM Customers;\n```\n\n","source":"wiki/sql/function/last.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL LAST()函数\norder: 10\n---\n\n## SQL LAST() 函数\n\n------\n\nLAST() 函数返回指定的列中最后一个记录的值。\n\n### SQL LAST() 语法\n\n```\nSELECT LAST(column_name) FROM table_name;\n```\n\n> **注释：**只有 MS Access 支持 LAST() 函数。\n\n## SQL Server、MySQL 和 Oracle 中的 SQL LAST() 工作区\n\n------\n\n### SQL Server 语法\n\n示例\n\n```\nSELECT TOP 1 column_name\nFROM table_name\nORDER BY column_name DESC;\n```\n\n示例\n\n```\nSELECT TOP 1 CustomerName FROM Customers               \nORDER BY CustomerID DESC;\n```\n\n### MySQL 语法\n\n示例\n\n```\nSELECT column_name FROM table_name                \nORDER BY column_name DESC                \nLIMIT 1;\n```\n\n示例\n\n```\nSELECT CustomerName FROM Customers                \nORDER BY CustomerID DESC                \nLIMIT 1;\n```\n\n### Oracle 语法\n\n示例\n\n```\nSELECT column_name FROM table_name               \nORDER BY column_name DESC                \nWHERE ROWNUM <=1;\n```\n\n示例\n\n```\nSELECT CustomerName FROM Customers                \nORDER BY CustomerID DESC                \nWHERE ROWNUM <=1;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"Customers\" 表的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL LAST() Example\n\n------\n\n下面的 SQL 语句选取 \"Customers\" 表的 \"CustomerName\" 列中最后一个记录的值：\n\n示例\n\n```\nSELECT LAST(CustomerName) AS LastCustomer FROM Customers;\n```\n\n","date":"2025-06-11T06:38:11.985Z","updated":"2025-06-11T06:38:11.981Z","path":"wiki/sql/function/last.html","comments":1,"_id":"cmbrn2fnq000644x0fo4bb9ff","content":"<h2 id=\"SQL-LAST-函数\"><a href=\"#SQL-LAST-函数\" class=\"headerlink\" title=\"SQL LAST() 函数\"></a>SQL LAST() 函数</h2><hr>\n<p>LAST() 函数返回指定的列中最后一个记录的值。</p>\n<h3 id=\"SQL-LAST-语法\"><a href=\"#SQL-LAST-语法\" class=\"headerlink\" title=\"SQL LAST() 语法\"></a>SQL LAST() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LAST(column_name) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注释：**只有 MS Access 支持 LAST() 函数。</p>\n</blockquote>\n<h2 id=\"SQL-Server、MySQL-和-Oracle-中的-SQL-LAST-工作区\"><a href=\"#SQL-Server、MySQL-和-Oracle-中的-SQL-LAST-工作区\" class=\"headerlink\" title=\"SQL Server、MySQL 和 Oracle 中的 SQL LAST() 工作区\"></a>SQL Server、MySQL 和 Oracle 中的 SQL LAST() 工作区</h2><hr>\n<h3 id=\"SQL-Server-语法\"><a href=\"#SQL-Server-语法\" class=\"headerlink\" title=\"SQL Server 语法\"></a>SQL Server 语法</h3><p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TOP 1 column_name</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">ORDER BY column_name DESC;</span><br></pre></td></tr></table></figure>\n\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TOP 1 CustomerName FROM Customers               </span><br><span class=\"line\">ORDER BY CustomerID DESC;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MySQL-语法\"><a href=\"#MySQL-语法\" class=\"headerlink\" title=\"MySQL 语法\"></a>MySQL 语法</h3><p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name FROM table_name                </span><br><span class=\"line\">ORDER BY column_name DESC                </span><br><span class=\"line\">LIMIT 1;</span><br></pre></td></tr></table></figure>\n\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerName FROM Customers                </span><br><span class=\"line\">ORDER BY CustomerID DESC                </span><br><span class=\"line\">LIMIT 1;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Oracle-语法\"><a href=\"#Oracle-语法\" class=\"headerlink\" title=\"Oracle 语法\"></a>Oracle 语法</h3><p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name FROM table_name               </span><br><span class=\"line\">ORDER BY column_name DESC                </span><br><span class=\"line\">WHERE ROWNUM &lt;=1;</span><br></pre></td></tr></table></figure>\n\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerName FROM Customers                </span><br><span class=\"line\">ORDER BY CustomerID DESC                </span><br><span class=\"line\">WHERE ROWNUM &lt;=1;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “Customers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-LAST-Example\"><a href=\"#SQL-LAST-Example\" class=\"headerlink\" title=\"SQL LAST() Example\"></a>SQL LAST() Example</h2><hr>\n<p>下面的 SQL 语句选取 “Customers” 表的 “CustomerName” 列中最后一个记录的值：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LAST(CustomerName) AS LastCustomer FROM Customers;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"SQL-LAST-函数\"><a href=\"#SQL-LAST-函数\" class=\"headerlink\" title=\"SQL LAST() 函数\"></a>SQL LAST() 函数</h2><hr>\n<p>LAST() 函数返回指定的列中最后一个记录的值。</p>\n<h3 id=\"SQL-LAST-语法\"><a href=\"#SQL-LAST-语法\" class=\"headerlink\" title=\"SQL LAST() 语法\"></a>SQL LAST() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LAST(column_name) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注释：**只有 MS Access 支持 LAST() 函数。</p>\n</blockquote>\n<h2 id=\"SQL-Server、MySQL-和-Oracle-中的-SQL-LAST-工作区\"><a href=\"#SQL-Server、MySQL-和-Oracle-中的-SQL-LAST-工作区\" class=\"headerlink\" title=\"SQL Server、MySQL 和 Oracle 中的 SQL LAST() 工作区\"></a>SQL Server、MySQL 和 Oracle 中的 SQL LAST() 工作区</h2><hr>\n<h3 id=\"SQL-Server-语法\"><a href=\"#SQL-Server-语法\" class=\"headerlink\" title=\"SQL Server 语法\"></a>SQL Server 语法</h3><p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TOP 1 column_name</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">ORDER BY column_name DESC;</span><br></pre></td></tr></table></figure>\n\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TOP 1 CustomerName FROM Customers               </span><br><span class=\"line\">ORDER BY CustomerID DESC;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MySQL-语法\"><a href=\"#MySQL-语法\" class=\"headerlink\" title=\"MySQL 语法\"></a>MySQL 语法</h3><p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name FROM table_name                </span><br><span class=\"line\">ORDER BY column_name DESC                </span><br><span class=\"line\">LIMIT 1;</span><br></pre></td></tr></table></figure>\n\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerName FROM Customers                </span><br><span class=\"line\">ORDER BY CustomerID DESC                </span><br><span class=\"line\">LIMIT 1;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Oracle-语法\"><a href=\"#Oracle-语法\" class=\"headerlink\" title=\"Oracle 语法\"></a>Oracle 语法</h3><p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_name FROM table_name               </span><br><span class=\"line\">ORDER BY column_name DESC                </span><br><span class=\"line\">WHERE ROWNUM &lt;=1;</span><br></pre></td></tr></table></figure>\n\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerName FROM Customers                </span><br><span class=\"line\">ORDER BY CustomerID DESC                </span><br><span class=\"line\">WHERE ROWNUM &lt;=1;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “Customers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-LAST-Example\"><a href=\"#SQL-LAST-Example\" class=\"headerlink\" title=\"SQL LAST() Example\"></a>SQL LAST() Example</h2><hr>\n<p>下面的 SQL 语句选取 “Customers” 表的 “CustomerName” 列中最后一个记录的值：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LAST(CustomerName) AS LastCustomer FROM Customers;</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"wiki","wiki":"sql","title":"SQL LCASE()函数","order":17,"_content":"\n## SQL LCASE() 函数\n\n------\n\nLCASE() 函数把字段的值转换为小写。\n\n### SQL LCASE() 语法\n\n```\nSELECT LCASE(column_name) FROM table_name;\n```\n\n### 用于 SQL Server 的语法\n\n```\nSELECT LOWER(column_name) FROM table_name;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"Customers\" 表的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL LCASE() 实例\n\n------\n\n下面的 SQL 语句从 \"Customers\" 表中选取 \"CustomerName\" 和 \"City\" 列，并把 \"CustomerName\" 列的值转换为小写：\n\n示例\n\n```\nSELECT LCASE(CustomerName) AS Customer, City\nFROM Customers;\n```\n\n","source":"wiki/sql/function/lcase.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL LCASE()函数\norder: 17\n---\n\n## SQL LCASE() 函数\n\n------\n\nLCASE() 函数把字段的值转换为小写。\n\n### SQL LCASE() 语法\n\n```\nSELECT LCASE(column_name) FROM table_name;\n```\n\n### 用于 SQL Server 的语法\n\n```\nSELECT LOWER(column_name) FROM table_name;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"Customers\" 表的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL LCASE() 实例\n\n------\n\n下面的 SQL 语句从 \"Customers\" 表中选取 \"CustomerName\" 和 \"City\" 列，并把 \"CustomerName\" 列的值转换为小写：\n\n示例\n\n```\nSELECT LCASE(CustomerName) AS Customer, City\nFROM Customers;\n```\n\n","date":"2025-06-11T06:55:19.591Z","updated":"2025-06-11T06:55:19.591Z","path":"wiki/sql/function/lcase.html","comments":1,"_id":"cmbrn2fnr000744x0bery8j3t","content":"<h2 id=\"SQL-LCASE-函数\"><a href=\"#SQL-LCASE-函数\" class=\"headerlink\" title=\"SQL LCASE() 函数\"></a>SQL LCASE() 函数</h2><hr>\n<p>LCASE() 函数把字段的值转换为小写。</p>\n<h3 id=\"SQL-LCASE-语法\"><a href=\"#SQL-LCASE-语法\" class=\"headerlink\" title=\"SQL LCASE() 语法\"></a>SQL LCASE() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LCASE(column_name) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用于-SQL-Server-的语法\"><a href=\"#用于-SQL-Server-的语法\" class=\"headerlink\" title=\"用于 SQL Server 的语法\"></a>用于 SQL Server 的语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LOWER(column_name) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “Customers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-LCASE-实例\"><a href=\"#SQL-LCASE-实例\" class=\"headerlink\" title=\"SQL LCASE() 实例\"></a>SQL LCASE() 实例</h2><hr>\n<p>下面的 SQL 语句从 “Customers” 表中选取 “CustomerName” 和 “City” 列，并把 “CustomerName” 列的值转换为小写：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LCASE(CustomerName) AS Customer, City</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"SQL-LCASE-函数\"><a href=\"#SQL-LCASE-函数\" class=\"headerlink\" title=\"SQL LCASE() 函数\"></a>SQL LCASE() 函数</h2><hr>\n<p>LCASE() 函数把字段的值转换为小写。</p>\n<h3 id=\"SQL-LCASE-语法\"><a href=\"#SQL-LCASE-语法\" class=\"headerlink\" title=\"SQL LCASE() 语法\"></a>SQL LCASE() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LCASE(column_name) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用于-SQL-Server-的语法\"><a href=\"#用于-SQL-Server-的语法\" class=\"headerlink\" title=\"用于 SQL Server 的语法\"></a>用于 SQL Server 的语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LOWER(column_name) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “Customers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-LCASE-实例\"><a href=\"#SQL-LCASE-实例\" class=\"headerlink\" title=\"SQL LCASE() 实例\"></a>SQL LCASE() 实例</h2><hr>\n<p>下面的 SQL 语句从 “Customers” 表中选取 “CustomerName” 和 “City” 列，并把 “CustomerName” 列的值转换为小写：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LCASE(CustomerName) AS Customer, City</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"wiki","wiki":"sql","title":"SQL LEN()函数","order":19,"_content":"\n## SQL LEN() 函数\n\n------\n\nLEN() 函数返回文本字段中值的长度。\n\n### SQL LEN() 语法\n\n```\nSELECT LEN(column_name) FROM table_name;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"Customers\" 表的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL LEN() 实例\n\n------\n\n下面的 SQL 语句从 \"Customers\" 表中选取 \"CustomerName\" 和 \"Address\" 列中值的长度：\n\n示例\n\n```\nSELECT CustomerName,LEN(Address) as LengthOfAddress\nFROM Customers;\n```\n\n","source":"wiki/sql/function/len.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL LEN()函数\norder: 19\n---\n\n## SQL LEN() 函数\n\n------\n\nLEN() 函数返回文本字段中值的长度。\n\n### SQL LEN() 语法\n\n```\nSELECT LEN(column_name) FROM table_name;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"Customers\" 表的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL LEN() 实例\n\n------\n\n下面的 SQL 语句从 \"Customers\" 表中选取 \"CustomerName\" 和 \"Address\" 列中值的长度：\n\n示例\n\n```\nSELECT CustomerName,LEN(Address) as LengthOfAddress\nFROM Customers;\n```\n\n","date":"2025-06-11T06:59:05.793Z","updated":"2025-06-11T06:59:05.793Z","path":"wiki/sql/function/len.html","comments":1,"_id":"cmbrn2fnr000844x0esbgd7ez","content":"<h2 id=\"SQL-LEN-函数\"><a href=\"#SQL-LEN-函数\" class=\"headerlink\" title=\"SQL LEN() 函数\"></a>SQL LEN() 函数</h2><hr>\n<p>LEN() 函数返回文本字段中值的长度。</p>\n<h3 id=\"SQL-LEN-语法\"><a href=\"#SQL-LEN-语法\" class=\"headerlink\" title=\"SQL LEN() 语法\"></a>SQL LEN() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LEN(column_name) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “Customers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-LEN-实例\"><a href=\"#SQL-LEN-实例\" class=\"headerlink\" title=\"SQL LEN() 实例\"></a>SQL LEN() 实例</h2><hr>\n<p>下面的 SQL 语句从 “Customers” 表中选取 “CustomerName” 和 “Address” 列中值的长度：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerName,LEN(Address) as LengthOfAddress</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"SQL-LEN-函数\"><a href=\"#SQL-LEN-函数\" class=\"headerlink\" title=\"SQL LEN() 函数\"></a>SQL LEN() 函数</h2><hr>\n<p>LEN() 函数返回文本字段中值的长度。</p>\n<h3 id=\"SQL-LEN-语法\"><a href=\"#SQL-LEN-语法\" class=\"headerlink\" title=\"SQL LEN() 语法\"></a>SQL LEN() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LEN(column_name) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “Customers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-LEN-实例\"><a href=\"#SQL-LEN-实例\" class=\"headerlink\" title=\"SQL LEN() 实例\"></a>SQL LEN() 实例</h2><hr>\n<p>下面的 SQL 语句从 “Customers” 表中选取 “CustomerName” 和 “Address” 列中值的长度：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT CustomerName,LEN(Address) as LengthOfAddress</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"wiki","wiki":"sql","title":"SQL LOWER()函数","order":15,"_content":"\n## SQL LOWER()函数\n\n------\n\nSQL lower()字母大小写转换函数，将字母转成小写 - 返回根据当前字符集映射所有字符改变为小写，即返回小写的字符串。\n\n### LOWER(str)\n\n返回根据当前字符集映射所有字符改变为小写，即返回小写的字符串。\n\n```\nSQL> SELECT LOWER('ngrok'); +---------------------------------------------------------+ | LOWER('ngrok') | +---------------------------------------------------------+ | ngrok | +---------------------------------------------------------+ 1 row in set (0.00 sec)\n```\n\n","source":"wiki/sql/function/lower.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL LOWER()函数\norder: 15\n---\n\n## SQL LOWER()函数\n\n------\n\nSQL lower()字母大小写转换函数，将字母转成小写 - 返回根据当前字符集映射所有字符改变为小写，即返回小写的字符串。\n\n### LOWER(str)\n\n返回根据当前字符集映射所有字符改变为小写，即返回小写的字符串。\n\n```\nSQL> SELECT LOWER('ngrok'); +---------------------------------------------------------+ | LOWER('ngrok') | +---------------------------------------------------------+ | ngrok | +---------------------------------------------------------+ 1 row in set (0.00 sec)\n```\n\n","date":"2025-06-11T06:52:26.498Z","updated":"2025-06-11T06:52:26.494Z","path":"wiki/sql/function/lower.html","comments":1,"_id":"cmbrn2fns000944x0eqz05a3e","content":"<h2 id=\"SQL-LOWER-函数\"><a href=\"#SQL-LOWER-函数\" class=\"headerlink\" title=\"SQL LOWER()函数\"></a>SQL LOWER()函数</h2><hr>\n<p>SQL lower()字母大小写转换函数，将字母转成小写 - 返回根据当前字符集映射所有字符改变为小写，即返回小写的字符串。</p>\n<h3 id=\"LOWER-str\"><a href=\"#LOWER-str\" class=\"headerlink\" title=\"LOWER(str)\"></a>LOWER(str)</h3><p>返回根据当前字符集映射所有字符改变为小写，即返回小写的字符串。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT LOWER(&#x27;ngrok&#x27;); +---------------------------------------------------------+ | LOWER(&#x27;ngrok&#x27;) | +---------------------------------------------------------+ | ngrok | +---------------------------------------------------------+ 1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"SQL-LOWER-函数\"><a href=\"#SQL-LOWER-函数\" class=\"headerlink\" title=\"SQL LOWER()函数\"></a>SQL LOWER()函数</h2><hr>\n<p>SQL lower()字母大小写转换函数，将字母转成小写 - 返回根据当前字符集映射所有字符改变为小写，即返回小写的字符串。</p>\n<h3 id=\"LOWER-str\"><a href=\"#LOWER-str\" class=\"headerlink\" title=\"LOWER(str)\"></a>LOWER(str)</h3><p>返回根据当前字符集映射所有字符改变为小写，即返回小写的字符串。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT LOWER(&#x27;ngrok&#x27;); +---------------------------------------------------------+ | LOWER(&#x27;ngrok&#x27;) | +---------------------------------------------------------+ | ngrok | +---------------------------------------------------------+ 1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"wiki","wiki":"sql","title":"SQL MID()函数","order":18,"_content":"\n## SQL MID() 函数\n\n------\n\nMID() 函数用于从文本字段中提取字符。\n\n### SQL MID() 语法\n\n```\nSELECT MID(column_name,start[,length]) FROM table_name;\n```\n\n| 参数        | 描述                                                        |\n| :---------- | :---------------------------------------------------------- |\n| column_name | 必需。要提取字符的字段。                                    |\n| start       | 必需。规定开始位置（起始值是 1）。                          |\n| length      | 可选。要返回的字符数。如果省略，则 MID() 函数返回剩余文本。 |\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"Customers\" 表的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL MID() 实例\n\n------\n\n下面的 SQL 语句从 \"Customers\" 表的 \"City\" 列中提取前 4 个字符：\n\n示例\n\n```\nSELECT MID(City,1,4) AS ShortCity\nFROM Customers;\n```\n\n","source":"wiki/sql/function/mid.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL MID()函数\norder: 18\n---\n\n## SQL MID() 函数\n\n------\n\nMID() 函数用于从文本字段中提取字符。\n\n### SQL MID() 语法\n\n```\nSELECT MID(column_name,start[,length]) FROM table_name;\n```\n\n| 参数        | 描述                                                        |\n| :---------- | :---------------------------------------------------------- |\n| column_name | 必需。要提取字符的字段。                                    |\n| start       | 必需。规定开始位置（起始值是 1）。                          |\n| length      | 可选。要返回的字符数。如果省略，则 MID() 函数返回剩余文本。 |\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"Customers\" 表的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL MID() 实例\n\n------\n\n下面的 SQL 语句从 \"Customers\" 表的 \"City\" 列中提取前 4 个字符：\n\n示例\n\n```\nSELECT MID(City,1,4) AS ShortCity\nFROM Customers;\n```\n\n","date":"2025-06-11T06:56:56.632Z","updated":"2025-06-11T06:56:56.632Z","path":"wiki/sql/function/mid.html","comments":1,"_id":"cmbrn2fnu000a44x06cxs2xsn","content":"<h2 id=\"SQL-MID-函数\"><a href=\"#SQL-MID-函数\" class=\"headerlink\" title=\"SQL MID() 函数\"></a>SQL MID() 函数</h2><hr>\n<p>MID() 函数用于从文本字段中提取字符。</p>\n<h3 id=\"SQL-MID-语法\"><a href=\"#SQL-MID-语法\" class=\"headerlink\" title=\"SQL MID() 语法\"></a>SQL MID() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT MID(column_name,start[,length]) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">column_name</td>\n<td align=\"left\">必需。要提取字符的字段。</td>\n</tr>\n<tr>\n<td align=\"left\">start</td>\n<td align=\"left\">必需。规定开始位置（起始值是 1）。</td>\n</tr>\n<tr>\n<td align=\"left\">length</td>\n<td align=\"left\">可选。要返回的字符数。如果省略，则 MID() 函数返回剩余文本。</td>\n</tr>\n</tbody></table>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “Customers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-MID-实例\"><a href=\"#SQL-MID-实例\" class=\"headerlink\" title=\"SQL MID() 实例\"></a>SQL MID() 实例</h2><hr>\n<p>下面的 SQL 语句从 “Customers” 表的 “City” 列中提取前 4 个字符：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT MID(City,1,4) AS ShortCity</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"SQL-MID-函数\"><a href=\"#SQL-MID-函数\" class=\"headerlink\" title=\"SQL MID() 函数\"></a>SQL MID() 函数</h2><hr>\n<p>MID() 函数用于从文本字段中提取字符。</p>\n<h3 id=\"SQL-MID-语法\"><a href=\"#SQL-MID-语法\" class=\"headerlink\" title=\"SQL MID() 语法\"></a>SQL MID() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT MID(column_name,start[,length]) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">column_name</td>\n<td align=\"left\">必需。要提取字符的字段。</td>\n</tr>\n<tr>\n<td align=\"left\">start</td>\n<td align=\"left\">必需。规定开始位置（起始值是 1）。</td>\n</tr>\n<tr>\n<td align=\"left\">length</td>\n<td align=\"left\">可选。要返回的字符数。如果省略，则 MID() 函数返回剩余文本。</td>\n</tr>\n</tbody></table>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “Customers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-MID-实例\"><a href=\"#SQL-MID-实例\" class=\"headerlink\" title=\"SQL MID() 实例\"></a>SQL MID() 实例</h2><hr>\n<p>下面的 SQL 语句从 “Customers” 表的 “City” 列中提取前 4 个字符：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT MID(City,1,4) AS ShortCity</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"wiki","wiki":"sql","title":"SQL NOW()函数","order":21,"_content":"\n## SQL NOW() 函数\n\n------\n\nNOW() 函数返回当前系统的日期和时间。\n\n### SQL NOW() 语法\n\n```\nSELECT NOW() FROM table_name;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"Products\" 表的数据：\n\n| ProductID | ProductName                  | SupplierID | CategoryID | Unit                | Price |\n| :-------- | :--------------------------- | :--------- | :--------- | :------------------ | :---- |\n| 1         | Chais                        | 1          | 1          | 10 boxes x 20 bags  | 18    |\n| 2         | Chang                        | 1          | 1          | 24 - 12 oz bottles  | 19    |\n| 3         | Aniseed Syrup                | 1          | 2          | 12 - 550 ml bottles | 10    |\n| 4         | Chef Anton's Cajun Seasoning | 2          | 2          | 48 - 6 oz jars      | 21.35 |\n| 5         | Chef Anton's Gumbo Mix       | 2          | 2          | 36 boxes            | 25    |\n\n------\n\n## SQL NOW() 实例\n\n下面的 SQL 语句从 \"Products\" 表中选取产品名称以及当天的价格：\n\n示例\n\n```\nSELECT ProductName, Price, Now() AS PerDate\nFROM Products;\n```\n\n","source":"wiki/sql/function/now.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL NOW()函数\norder: 21\n---\n\n## SQL NOW() 函数\n\n------\n\nNOW() 函数返回当前系统的日期和时间。\n\n### SQL NOW() 语法\n\n```\nSELECT NOW() FROM table_name;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"Products\" 表的数据：\n\n| ProductID | ProductName                  | SupplierID | CategoryID | Unit                | Price |\n| :-------- | :--------------------------- | :--------- | :--------- | :------------------ | :---- |\n| 1         | Chais                        | 1          | 1          | 10 boxes x 20 bags  | 18    |\n| 2         | Chang                        | 1          | 1          | 24 - 12 oz bottles  | 19    |\n| 3         | Aniseed Syrup                | 1          | 2          | 12 - 550 ml bottles | 10    |\n| 4         | Chef Anton's Cajun Seasoning | 2          | 2          | 48 - 6 oz jars      | 21.35 |\n| 5         | Chef Anton's Gumbo Mix       | 2          | 2          | 36 boxes            | 25    |\n\n------\n\n## SQL NOW() 实例\n\n下面的 SQL 语句从 \"Products\" 表中选取产品名称以及当天的价格：\n\n示例\n\n```\nSELECT ProductName, Price, Now() AS PerDate\nFROM Products;\n```\n\n","date":"2025-06-11T07:02:55.595Z","updated":"2025-06-11T07:02:55.591Z","path":"wiki/sql/function/now.html","comments":1,"_id":"cmbrn2fnv000b44x0g23i2meq","content":"<h2 id=\"SQL-NOW-函数\"><a href=\"#SQL-NOW-函数\" class=\"headerlink\" title=\"SQL NOW() 函数\"></a>SQL NOW() 函数</h2><hr>\n<p>NOW() 函数返回当前系统的日期和时间。</p>\n<h3 id=\"SQL-NOW-语法\"><a href=\"#SQL-NOW-语法\" class=\"headerlink\" title=\"SQL NOW() 语法\"></a>SQL NOW() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT NOW() FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “Products” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">ProductID</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">SupplierID</th>\n<th align=\"left\">CategoryID</th>\n<th align=\"left\">Unit</th>\n<th align=\"left\">Price</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Chais</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">10 boxes x 20 bags</td>\n<td align=\"left\">18</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Chang</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">24 - 12 oz bottles</td>\n<td align=\"left\">19</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Aniseed Syrup</td>\n<td align=\"left\">1</td>\n<td align=\"left\">2</td>\n<td align=\"left\">12 - 550 ml bottles</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Chef Anton’s Cajun Seasoning</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">48 - 6 oz jars</td>\n<td align=\"left\">21.35</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Chef Anton’s Gumbo Mix</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">36 boxes</td>\n<td align=\"left\">25</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"SQL-NOW-实例\"><a href=\"#SQL-NOW-实例\" class=\"headerlink\" title=\"SQL NOW() 实例\"></a>SQL NOW() 实例</h2><p>下面的 SQL 语句从 “Products” 表中选取产品名称以及当天的价格：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ProductName, Price, Now() AS PerDate</span><br><span class=\"line\">FROM Products;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"SQL-NOW-函数\"><a href=\"#SQL-NOW-函数\" class=\"headerlink\" title=\"SQL NOW() 函数\"></a>SQL NOW() 函数</h2><hr>\n<p>NOW() 函数返回当前系统的日期和时间。</p>\n<h3 id=\"SQL-NOW-语法\"><a href=\"#SQL-NOW-语法\" class=\"headerlink\" title=\"SQL NOW() 语法\"></a>SQL NOW() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT NOW() FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “Products” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">ProductID</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">SupplierID</th>\n<th align=\"left\">CategoryID</th>\n<th align=\"left\">Unit</th>\n<th align=\"left\">Price</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Chais</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">10 boxes x 20 bags</td>\n<td align=\"left\">18</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Chang</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">24 - 12 oz bottles</td>\n<td align=\"left\">19</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Aniseed Syrup</td>\n<td align=\"left\">1</td>\n<td align=\"left\">2</td>\n<td align=\"left\">12 - 550 ml bottles</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Chef Anton’s Cajun Seasoning</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">48 - 6 oz jars</td>\n<td align=\"left\">21.35</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Chef Anton’s Gumbo Mix</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">36 boxes</td>\n<td align=\"left\">25</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"SQL-NOW-实例\"><a href=\"#SQL-NOW-实例\" class=\"headerlink\" title=\"SQL NOW() 实例\"></a>SQL NOW() 实例</h2><p>下面的 SQL 语句从 “Products” 表中选取产品名称以及当天的价格：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ProductName, Price, Now() AS PerDate</span><br><span class=\"line\">FROM Products;</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"wiki","wiki":"sql","title":"SQL NULL()函数","order":26,"_content":"\n## SQL NULL 函数\n\n------\n\n### SQL ISNULL()、NVL()、IFNULL() 和 COALESCE() 函数\n\n请看下面的 \"Products\" 表：\n\n| P_Id | ProductName | UnitPrice | UnitsInStock | UnitsOnOrder |\n| :--- | :---------- | :-------- | :----------- | :----------- |\n| 1    | Jarlsberg   | 10.45     | 16           | 15           |\n| 2    | Mascarpone  | 32.56     | 23           |              |\n| 3    | Gorgonzola  | 15.67     | 9            | 20           |\n\n假如 \"UnitsOnOrder\" 是可选的，而且可以包含 NULL 值。\n\n我们使用下面的 SELECT 语句：\n\n```\nSELECT ProductName,UnitPrice*(UnitsInStock+UnitsOnOrder)                \nFROM Products\n```\n\n在上面的实例中，如果有 \"UnitsOnOrder\" 值是 NULL，那么结果是 NULL。\n\n微软的 ISNULL() 函数用于规定如何处理 NULL 值。\n\nNVL()、IFNULL() 和 COALESCE() 函数也可以达到相同的结果。\n\n在这里，我们希望 NULL 值为 0。\n\n下面，如果 \"UnitsOnOrder\" 是 NULL，则不会影响计算，因为如果值是 NULL 则 ISNULL() 返回 0：\n\n#### **SQL Server / MS Access**\n\n```\nSELECT ProductName,UnitPrice*(UnitsInStock+ISNULL(UnitsOnOrder,0))                \nFROM Products\n```\n\n#### **Oracle**\n\nOracle 没有 ISNULL() 函数。不过，我们可以使用 NVL() 函数达到相同的结果：\n\n```\nSELECT ProductName,UnitPrice*(UnitsInStock+NVL(UnitsOnOrder,0))                \nFROM Products\n```\n\n#### **MySQL**\n\nMySQL 也拥有类似 ISNULL() 的函数。不过它的工作方式与微软的 ISNULL() 函数有点不同。\n\n在 MySQL 中，我们可以使用 IFNULL() 函数，如下所示：\n\n```\nSELECT ProductName,UnitPrice*(UnitsInStock+IFNULL(UnitsOnOrder,0))                \nFROM Products\n```\n\n或者我们可以使用 COALESCE() 函数，如下所示：\n\n```\nSELECT ProductName,UnitPrice*(UnitsInStock+COALESCE(UnitsOnOrder,0))               \nFROM Products\n```\n","source":"wiki/sql/function/null.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL NULL()函数\norder: 26\n---\n\n## SQL NULL 函数\n\n------\n\n### SQL ISNULL()、NVL()、IFNULL() 和 COALESCE() 函数\n\n请看下面的 \"Products\" 表：\n\n| P_Id | ProductName | UnitPrice | UnitsInStock | UnitsOnOrder |\n| :--- | :---------- | :-------- | :----------- | :----------- |\n| 1    | Jarlsberg   | 10.45     | 16           | 15           |\n| 2    | Mascarpone  | 32.56     | 23           |              |\n| 3    | Gorgonzola  | 15.67     | 9            | 20           |\n\n假如 \"UnitsOnOrder\" 是可选的，而且可以包含 NULL 值。\n\n我们使用下面的 SELECT 语句：\n\n```\nSELECT ProductName,UnitPrice*(UnitsInStock+UnitsOnOrder)                \nFROM Products\n```\n\n在上面的实例中，如果有 \"UnitsOnOrder\" 值是 NULL，那么结果是 NULL。\n\n微软的 ISNULL() 函数用于规定如何处理 NULL 值。\n\nNVL()、IFNULL() 和 COALESCE() 函数也可以达到相同的结果。\n\n在这里，我们希望 NULL 值为 0。\n\n下面，如果 \"UnitsOnOrder\" 是 NULL，则不会影响计算，因为如果值是 NULL 则 ISNULL() 返回 0：\n\n#### **SQL Server / MS Access**\n\n```\nSELECT ProductName,UnitPrice*(UnitsInStock+ISNULL(UnitsOnOrder,0))                \nFROM Products\n```\n\n#### **Oracle**\n\nOracle 没有 ISNULL() 函数。不过，我们可以使用 NVL() 函数达到相同的结果：\n\n```\nSELECT ProductName,UnitPrice*(UnitsInStock+NVL(UnitsOnOrder,0))                \nFROM Products\n```\n\n#### **MySQL**\n\nMySQL 也拥有类似 ISNULL() 的函数。不过它的工作方式与微软的 ISNULL() 函数有点不同。\n\n在 MySQL 中，我们可以使用 IFNULL() 函数，如下所示：\n\n```\nSELECT ProductName,UnitPrice*(UnitsInStock+IFNULL(UnitsOnOrder,0))                \nFROM Products\n```\n\n或者我们可以使用 COALESCE() 函数，如下所示：\n\n```\nSELECT ProductName,UnitPrice*(UnitsInStock+COALESCE(UnitsOnOrder,0))               \nFROM Products\n```\n","date":"2025-06-11T07:13:17.373Z","updated":"2025-06-11T07:13:17.373Z","path":"wiki/sql/function/null.html","comments":1,"_id":"cmbrn2fnw000c44x04dtfhqdh","content":"<h2 id=\"SQL-NULL-函数\"><a href=\"#SQL-NULL-函数\" class=\"headerlink\" title=\"SQL NULL 函数\"></a>SQL NULL 函数</h2><hr>\n<h3 id=\"SQL-ISNULL-、NVL-、IFNULL-和-COALESCE-函数\"><a href=\"#SQL-ISNULL-、NVL-、IFNULL-和-COALESCE-函数\" class=\"headerlink\" title=\"SQL ISNULL()、NVL()、IFNULL() 和 COALESCE() 函数\"></a>SQL ISNULL()、NVL()、IFNULL() 和 COALESCE() 函数</h3><p>请看下面的 “Products” 表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">P_Id</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">UnitPrice</th>\n<th align=\"left\">UnitsInStock</th>\n<th align=\"left\">UnitsOnOrder</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Jarlsberg</td>\n<td align=\"left\">10.45</td>\n<td align=\"left\">16</td>\n<td align=\"left\">15</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Mascarpone</td>\n<td align=\"left\">32.56</td>\n<td align=\"left\">23</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Gorgonzola</td>\n<td align=\"left\">15.67</td>\n<td align=\"left\">9</td>\n<td align=\"left\">20</td>\n</tr>\n</tbody></table>\n<p>假如 “UnitsOnOrder” 是可选的，而且可以包含 NULL 值。</p>\n<p>我们使用下面的 SELECT 语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ProductName,UnitPrice*(UnitsInStock+UnitsOnOrder)                </span><br><span class=\"line\">FROM Products</span><br></pre></td></tr></table></figure>\n\n<p>在上面的实例中，如果有 “UnitsOnOrder” 值是 NULL，那么结果是 NULL。</p>\n<p>微软的 ISNULL() 函数用于规定如何处理 NULL 值。</p>\n<p>NVL()、IFNULL() 和 COALESCE() 函数也可以达到相同的结果。</p>\n<p>在这里，我们希望 NULL 值为 0。</p>\n<p>下面，如果 “UnitsOnOrder” 是 NULL，则不会影响计算，因为如果值是 NULL 则 ISNULL() 返回 0：</p>\n<h4 id=\"SQL-Server-MS-Access\"><a href=\"#SQL-Server-MS-Access\" class=\"headerlink\" title=\"SQL Server &#x2F; MS Access\"></a><strong>SQL Server &#x2F; MS Access</strong></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ProductName,UnitPrice*(UnitsInStock+ISNULL(UnitsOnOrder,0))                </span><br><span class=\"line\">FROM Products</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Oracle\"><a href=\"#Oracle\" class=\"headerlink\" title=\"Oracle\"></a><strong>Oracle</strong></h4><p>Oracle 没有 ISNULL() 函数。不过，我们可以使用 NVL() 函数达到相同的结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ProductName,UnitPrice*(UnitsInStock+NVL(UnitsOnOrder,0))                </span><br><span class=\"line\">FROM Products</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a><strong>MySQL</strong></h4><p>MySQL 也拥有类似 ISNULL() 的函数。不过它的工作方式与微软的 ISNULL() 函数有点不同。</p>\n<p>在 MySQL 中，我们可以使用 IFNULL() 函数，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ProductName,UnitPrice*(UnitsInStock+IFNULL(UnitsOnOrder,0))                </span><br><span class=\"line\">FROM Products</span><br></pre></td></tr></table></figure>\n\n<p>或者我们可以使用 COALESCE() 函数，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ProductName,UnitPrice*(UnitsInStock+COALESCE(UnitsOnOrder,0))               </span><br><span class=\"line\">FROM Products</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-NULL-函数\"><a href=\"#SQL-NULL-函数\" class=\"headerlink\" title=\"SQL NULL 函数\"></a>SQL NULL 函数</h2><hr>\n<h3 id=\"SQL-ISNULL-、NVL-、IFNULL-和-COALESCE-函数\"><a href=\"#SQL-ISNULL-、NVL-、IFNULL-和-COALESCE-函数\" class=\"headerlink\" title=\"SQL ISNULL()、NVL()、IFNULL() 和 COALESCE() 函数\"></a>SQL ISNULL()、NVL()、IFNULL() 和 COALESCE() 函数</h3><p>请看下面的 “Products” 表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">P_Id</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">UnitPrice</th>\n<th align=\"left\">UnitsInStock</th>\n<th align=\"left\">UnitsOnOrder</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Jarlsberg</td>\n<td align=\"left\">10.45</td>\n<td align=\"left\">16</td>\n<td align=\"left\">15</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Mascarpone</td>\n<td align=\"left\">32.56</td>\n<td align=\"left\">23</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Gorgonzola</td>\n<td align=\"left\">15.67</td>\n<td align=\"left\">9</td>\n<td align=\"left\">20</td>\n</tr>\n</tbody></table>\n<p>假如 “UnitsOnOrder” 是可选的，而且可以包含 NULL 值。</p>\n<p>我们使用下面的 SELECT 语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ProductName,UnitPrice*(UnitsInStock+UnitsOnOrder)                </span><br><span class=\"line\">FROM Products</span><br></pre></td></tr></table></figure>\n\n<p>在上面的实例中，如果有 “UnitsOnOrder” 值是 NULL，那么结果是 NULL。</p>\n<p>微软的 ISNULL() 函数用于规定如何处理 NULL 值。</p>\n<p>NVL()、IFNULL() 和 COALESCE() 函数也可以达到相同的结果。</p>\n<p>在这里，我们希望 NULL 值为 0。</p>\n<p>下面，如果 “UnitsOnOrder” 是 NULL，则不会影响计算，因为如果值是 NULL 则 ISNULL() 返回 0：</p>\n<h4 id=\"SQL-Server-MS-Access\"><a href=\"#SQL-Server-MS-Access\" class=\"headerlink\" title=\"SQL Server &#x2F; MS Access\"></a><strong>SQL Server &#x2F; MS Access</strong></h4><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ProductName,UnitPrice*(UnitsInStock+ISNULL(UnitsOnOrder,0))                </span><br><span class=\"line\">FROM Products</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Oracle\"><a href=\"#Oracle\" class=\"headerlink\" title=\"Oracle\"></a><strong>Oracle</strong></h4><p>Oracle 没有 ISNULL() 函数。不过，我们可以使用 NVL() 函数达到相同的结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ProductName,UnitPrice*(UnitsInStock+NVL(UnitsOnOrder,0))                </span><br><span class=\"line\">FROM Products</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a><strong>MySQL</strong></h4><p>MySQL 也拥有类似 ISNULL() 的函数。不过它的工作方式与微软的 ISNULL() 函数有点不同。</p>\n<p>在 MySQL 中，我们可以使用 IFNULL() 函数，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ProductName,UnitPrice*(UnitsInStock+IFNULL(UnitsOnOrder,0))                </span><br><span class=\"line\">FROM Products</span><br></pre></td></tr></table></figure>\n\n<p>或者我们可以使用 COALESCE() 函数，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ProductName,UnitPrice*(UnitsInStock+COALESCE(UnitsOnOrder,0))               </span><br><span class=\"line\">FROM Products</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL RAND()函数","order":24,"_content":"\n## SQL RAND 函数\n\n------\n\nSQL 有一个 **RAND** 函数，用于产生 0 至 1 之间的随机数：\n\n```\n    SQL>  SELECT RAND( ), RAND( ), RAND( );\n    +------------------+-----------------+------------------+\n    | RAND( )          | RAND( )         | RAND( )          |\n    +------------------+-----------------+------------------+\n    | 0.45464584925645 | 0.1824410643265 | 0.54826780459682 |\n    +------------------+-----------------+------------------+\n    1 row in set (0.00 sec)\n```\n\n当以某个整数值作为参数来调用的时候，RAND() 会将该值作为随机数发生器的种子。对于每一个给定的种子，RAND() 函数都会产生一列可以复现的数字：\n\n```\n    SQL>  SELECT RAND(1), RAND( ), RAND( );\n    +------------------+------------------+------------------+\n    | RAND(1 )         | RAND( )          | RAND( )          |\n    +------------------+------------------+------------------+\n    | 0.18109050223705 | 0.75023211143001 | 0.20788908117254 |\n    +------------------+------------------+------------------+\n    1 row in set (0.00 sec)\n```\n\n你可以使用 **ORDER BY RAND()** 来对一组记录进行随机化排列，如下所示：\n\n```\n    SQL> SELECT * FROM employee_tbl;\n    +------+------+------------+--------------------+\n    | id   | name | work_date  | daily_typing_pages |\n    +------+------+------------+--------------------+\n    |    1 | John | 2007-01-24 |                250 |\n    |    2 | Ram  | 2007-05-27 |                220 |\n    |    3 | Jack | 2007-05-06 |                170 |\n    |    3 | Jack | 2007-04-06 |                100 |\n    |    4 | Jill | 2007-04-06 |                220 |\n    |    5 | Zara | 2007-06-06 |                300 |\n    |    5 | Zara | 2007-02-06 |                350 |\n    +------+------+------------+--------------------+\n    7 rows in set (0.00 sec)\n```\n\n现在，试试下面的命令：\n\n```\n    SQL> SELECT * FROM employee_tbl ORDER BY RAND();\n    +------+------+------------+--------------------+\n    | id   | name | work_date  | daily_typing_pages |\n    +------+------+------------+--------------------+\n    |    5 | Zara | 2007-06-06 |                300 |\n    |    3 | Jack | 2007-04-06 |                100 |\n    |    3 | Jack | 2007-05-06 |                170 |\n    |    2 | Ram  | 2007-05-27 |                220 |\n    |    4 | Jill | 2007-04-06 |                220 |\n    |    5 | Zara | 2007-02-06 |                350 |\n    |    1 | John | 2007-01-24 |                250 |\n    +------+------+------------+--------------------+\n    7 rows in set (0.01 sec)\n\n    SQL> SELECT * FROM employee_tbl ORDER BY RAND();\n    +------+------+------------+--------------------+\n    | id   | name | work_date  | daily_typing_pages |\n    +------+------+------------+--------------------+\n    |    5 | Zara | 2007-02-06 |                350 |\n    |    2 | Ram  | 2007-05-27 |                220 |\n    |    3 | Jack | 2007-04-06 |                100 |\n    |    1 | John | 2007-01-24 |                250 |\n    |    4 | Jill | 2007-04-06 |                220 |\n    |    3 | Jack | 2007-05-06 |                170 |\n    |    5 | Zara | 2007-06-06 |                300 |\n    +------+------+------------+--------------------+\n    7 rows in set (0.00 sec)\n```","source":"wiki/sql/function/rand.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL RAND()函数\norder: 24\n---\n\n## SQL RAND 函数\n\n------\n\nSQL 有一个 **RAND** 函数，用于产生 0 至 1 之间的随机数：\n\n```\n    SQL>  SELECT RAND( ), RAND( ), RAND( );\n    +------------------+-----------------+------------------+\n    | RAND( )          | RAND( )         | RAND( )          |\n    +------------------+-----------------+------------------+\n    | 0.45464584925645 | 0.1824410643265 | 0.54826780459682 |\n    +------------------+-----------------+------------------+\n    1 row in set (0.00 sec)\n```\n\n当以某个整数值作为参数来调用的时候，RAND() 会将该值作为随机数发生器的种子。对于每一个给定的种子，RAND() 函数都会产生一列可以复现的数字：\n\n```\n    SQL>  SELECT RAND(1), RAND( ), RAND( );\n    +------------------+------------------+------------------+\n    | RAND(1 )         | RAND( )          | RAND( )          |\n    +------------------+------------------+------------------+\n    | 0.18109050223705 | 0.75023211143001 | 0.20788908117254 |\n    +------------------+------------------+------------------+\n    1 row in set (0.00 sec)\n```\n\n你可以使用 **ORDER BY RAND()** 来对一组记录进行随机化排列，如下所示：\n\n```\n    SQL> SELECT * FROM employee_tbl;\n    +------+------+------------+--------------------+\n    | id   | name | work_date  | daily_typing_pages |\n    +------+------+------------+--------------------+\n    |    1 | John | 2007-01-24 |                250 |\n    |    2 | Ram  | 2007-05-27 |                220 |\n    |    3 | Jack | 2007-05-06 |                170 |\n    |    3 | Jack | 2007-04-06 |                100 |\n    |    4 | Jill | 2007-04-06 |                220 |\n    |    5 | Zara | 2007-06-06 |                300 |\n    |    5 | Zara | 2007-02-06 |                350 |\n    +------+------+------------+--------------------+\n    7 rows in set (0.00 sec)\n```\n\n现在，试试下面的命令：\n\n```\n    SQL> SELECT * FROM employee_tbl ORDER BY RAND();\n    +------+------+------------+--------------------+\n    | id   | name | work_date  | daily_typing_pages |\n    +------+------+------------+--------------------+\n    |    5 | Zara | 2007-06-06 |                300 |\n    |    3 | Jack | 2007-04-06 |                100 |\n    |    3 | Jack | 2007-05-06 |                170 |\n    |    2 | Ram  | 2007-05-27 |                220 |\n    |    4 | Jill | 2007-04-06 |                220 |\n    |    5 | Zara | 2007-02-06 |                350 |\n    |    1 | John | 2007-01-24 |                250 |\n    +------+------+------------+--------------------+\n    7 rows in set (0.01 sec)\n\n    SQL> SELECT * FROM employee_tbl ORDER BY RAND();\n    +------+------+------------+--------------------+\n    | id   | name | work_date  | daily_typing_pages |\n    +------+------+------------+--------------------+\n    |    5 | Zara | 2007-02-06 |                350 |\n    |    2 | Ram  | 2007-05-27 |                220 |\n    |    3 | Jack | 2007-04-06 |                100 |\n    |    1 | John | 2007-01-24 |                250 |\n    |    4 | Jill | 2007-04-06 |                220 |\n    |    3 | Jack | 2007-05-06 |                170 |\n    |    5 | Zara | 2007-06-06 |                300 |\n    +------+------+------------+--------------------+\n    7 rows in set (0.00 sec)\n```","date":"2025-06-11T07:07:33.550Z","updated":"2025-06-11T07:07:15.000Z","path":"wiki/sql/function/rand.html","comments":1,"_id":"cmbrn2fnw000d44x0f88yc8xi","content":"<h2 id=\"SQL-RAND-函数\"><a href=\"#SQL-RAND-函数\" class=\"headerlink\" title=\"SQL RAND 函数\"></a>SQL RAND 函数</h2><hr>\n<p>SQL 有一个 <strong>RAND</strong> 函数，用于产生 0 至 1 之间的随机数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt;  SELECT RAND( ), RAND( ), RAND( );</span><br><span class=\"line\">+------------------+-----------------+------------------+</span><br><span class=\"line\">| RAND( )          | RAND( )         | RAND( )          |</span><br><span class=\"line\">+------------------+-----------------+------------------+</span><br><span class=\"line\">| 0.45464584925645 | 0.1824410643265 | 0.54826780459682 |</span><br><span class=\"line\">+------------------+-----------------+------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>当以某个整数值作为参数来调用的时候，RAND() 会将该值作为随机数发生器的种子。对于每一个给定的种子，RAND() 函数都会产生一列可以复现的数字：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt;  SELECT RAND(1), RAND( ), RAND( );</span><br><span class=\"line\">+------------------+------------------+------------------+</span><br><span class=\"line\">| RAND(1 )         | RAND( )          | RAND( )          |</span><br><span class=\"line\">+------------------+------------------+------------------+</span><br><span class=\"line\">| 0.18109050223705 | 0.75023211143001 | 0.20788908117254 |</span><br><span class=\"line\">+------------------+------------------+------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>你可以使用 <strong>ORDER BY RAND()</strong> 来对一组记录进行随机化排列，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT * FROM employee_tbl;</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">| id   | name | work_date  | daily_typing_pages |</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">|    1 | John | 2007-01-24 |                250 |</span><br><span class=\"line\">|    2 | Ram  | 2007-05-27 |                220 |</span><br><span class=\"line\">|    3 | Jack | 2007-05-06 |                170 |</span><br><span class=\"line\">|    3 | Jack | 2007-04-06 |                100 |</span><br><span class=\"line\">|    4 | Jill | 2007-04-06 |                220 |</span><br><span class=\"line\">|    5 | Zara | 2007-06-06 |                300 |</span><br><span class=\"line\">|    5 | Zara | 2007-02-06 |                350 |</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>现在，试试下面的命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT * FROM employee_tbl ORDER BY RAND();</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">| id   | name | work_date  | daily_typing_pages |</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">|    5 | Zara | 2007-06-06 |                300 |</span><br><span class=\"line\">|    3 | Jack | 2007-04-06 |                100 |</span><br><span class=\"line\">|    3 | Jack | 2007-05-06 |                170 |</span><br><span class=\"line\">|    2 | Ram  | 2007-05-27 |                220 |</span><br><span class=\"line\">|    4 | Jill | 2007-04-06 |                220 |</span><br><span class=\"line\">|    5 | Zara | 2007-02-06 |                350 |</span><br><span class=\"line\">|    1 | John | 2007-01-24 |                250 |</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">7 rows in set (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; SELECT * FROM employee_tbl ORDER BY RAND();</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">| id   | name | work_date  | daily_typing_pages |</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">|    5 | Zara | 2007-02-06 |                350 |</span><br><span class=\"line\">|    2 | Ram  | 2007-05-27 |                220 |</span><br><span class=\"line\">|    3 | Jack | 2007-04-06 |                100 |</span><br><span class=\"line\">|    1 | John | 2007-01-24 |                250 |</span><br><span class=\"line\">|    4 | Jill | 2007-04-06 |                220 |</span><br><span class=\"line\">|    3 | Jack | 2007-05-06 |                170 |</span><br><span class=\"line\">|    5 | Zara | 2007-06-06 |                300 |</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"SQL-RAND-函数\"><a href=\"#SQL-RAND-函数\" class=\"headerlink\" title=\"SQL RAND 函数\"></a>SQL RAND 函数</h2><hr>\n<p>SQL 有一个 <strong>RAND</strong> 函数，用于产生 0 至 1 之间的随机数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt;  SELECT RAND( ), RAND( ), RAND( );</span><br><span class=\"line\">+------------------+-----------------+------------------+</span><br><span class=\"line\">| RAND( )          | RAND( )         | RAND( )          |</span><br><span class=\"line\">+------------------+-----------------+------------------+</span><br><span class=\"line\">| 0.45464584925645 | 0.1824410643265 | 0.54826780459682 |</span><br><span class=\"line\">+------------------+-----------------+------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>当以某个整数值作为参数来调用的时候，RAND() 会将该值作为随机数发生器的种子。对于每一个给定的种子，RAND() 函数都会产生一列可以复现的数字：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt;  SELECT RAND(1), RAND( ), RAND( );</span><br><span class=\"line\">+------------------+------------------+------------------+</span><br><span class=\"line\">| RAND(1 )         | RAND( )          | RAND( )          |</span><br><span class=\"line\">+------------------+------------------+------------------+</span><br><span class=\"line\">| 0.18109050223705 | 0.75023211143001 | 0.20788908117254 |</span><br><span class=\"line\">+------------------+------------------+------------------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>你可以使用 <strong>ORDER BY RAND()</strong> 来对一组记录进行随机化排列，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT * FROM employee_tbl;</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">| id   | name | work_date  | daily_typing_pages |</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">|    1 | John | 2007-01-24 |                250 |</span><br><span class=\"line\">|    2 | Ram  | 2007-05-27 |                220 |</span><br><span class=\"line\">|    3 | Jack | 2007-05-06 |                170 |</span><br><span class=\"line\">|    3 | Jack | 2007-04-06 |                100 |</span><br><span class=\"line\">|    4 | Jill | 2007-04-06 |                220 |</span><br><span class=\"line\">|    5 | Zara | 2007-06-06 |                300 |</span><br><span class=\"line\">|    5 | Zara | 2007-02-06 |                350 |</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>现在，试试下面的命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT * FROM employee_tbl ORDER BY RAND();</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">| id   | name | work_date  | daily_typing_pages |</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">|    5 | Zara | 2007-06-06 |                300 |</span><br><span class=\"line\">|    3 | Jack | 2007-04-06 |                100 |</span><br><span class=\"line\">|    3 | Jack | 2007-05-06 |                170 |</span><br><span class=\"line\">|    2 | Ram  | 2007-05-27 |                220 |</span><br><span class=\"line\">|    4 | Jill | 2007-04-06 |                220 |</span><br><span class=\"line\">|    5 | Zara | 2007-02-06 |                350 |</span><br><span class=\"line\">|    1 | John | 2007-01-24 |                250 |</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">7 rows in set (0.01 sec)</span><br><span class=\"line\"></span><br><span class=\"line\">SQL&gt; SELECT * FROM employee_tbl ORDER BY RAND();</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">| id   | name | work_date  | daily_typing_pages |</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">|    5 | Zara | 2007-02-06 |                350 |</span><br><span class=\"line\">|    2 | Ram  | 2007-05-27 |                220 |</span><br><span class=\"line\">|    3 | Jack | 2007-04-06 |                100 |</span><br><span class=\"line\">|    1 | John | 2007-01-24 |                250 |</span><br><span class=\"line\">|    4 | Jill | 2007-04-06 |                220 |</span><br><span class=\"line\">|    3 | Jack | 2007-05-06 |                170 |</span><br><span class=\"line\">|    5 | Zara | 2007-06-06 |                300 |</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>"},{"layout":"wiki","wiki":"sql","title":"SQL REPLACE()函数","order":27,"_content":"\n## SQL REPLACE()字符串替换函数\n\n------\n\n### 实例\n\n把数据库表 article中的所有title字段里的 ngrok字符串替换成hello。\n\n```\nupdate `article` set title=replace(title,'ngrok','hello');\n```\n\n### replace函数定义\n\n```\nreplace(original-string，search-string，replace-string)\n```\n\n### 参数\n\n- original-string： 被搜索的字符串。可为任意长度。\n- search-string： 要搜索并被 replace-string 替换的字符串。该字符串的长度不应超过 255 个字节。如果 search-string 是空字符串，则按原样返回原始字符串。\n- replace-string： 该字符串用于替换 search-string。可为任意长度。如果 replace-string 是空字符串，则删除出现的所有 search-string。\n\n### 说明\n\n用字符串表达式3替换字符串表达式1中出现的所有字符串表达式2的匹配项。返回新的字符串。\n　如果有某个参数为 NULL，此函数返回 NULL。\n","source":"wiki/sql/function/replace.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL REPLACE()函数\norder: 27\n---\n\n## SQL REPLACE()字符串替换函数\n\n------\n\n### 实例\n\n把数据库表 article中的所有title字段里的 ngrok字符串替换成hello。\n\n```\nupdate `article` set title=replace(title,'ngrok','hello');\n```\n\n### replace函数定义\n\n```\nreplace(original-string，search-string，replace-string)\n```\n\n### 参数\n\n- original-string： 被搜索的字符串。可为任意长度。\n- search-string： 要搜索并被 replace-string 替换的字符串。该字符串的长度不应超过 255 个字节。如果 search-string 是空字符串，则按原样返回原始字符串。\n- replace-string： 该字符串用于替换 search-string。可为任意长度。如果 replace-string 是空字符串，则删除出现的所有 search-string。\n\n### 说明\n\n用字符串表达式3替换字符串表达式1中出现的所有字符串表达式2的匹配项。返回新的字符串。\n　如果有某个参数为 NULL，此函数返回 NULL。\n","date":"2025-06-11T07:16:47.047Z","updated":"2025-06-11T07:16:47.043Z","path":"wiki/sql/function/replace.html","comments":1,"_id":"cmbrn2fnx000e44x0c9xl3pi2","content":"<h2 id=\"SQL-REPLACE-字符串替换函数\"><a href=\"#SQL-REPLACE-字符串替换函数\" class=\"headerlink\" title=\"SQL REPLACE()字符串替换函数\"></a>SQL REPLACE()字符串替换函数</h2><hr>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>把数据库表 article中的所有title字段里的 ngrok字符串替换成hello。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">update `article` set title=replace(title,&#x27;ngrok&#x27;,&#x27;hello&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"replace函数定义\"><a href=\"#replace函数定义\" class=\"headerlink\" title=\"replace函数定义\"></a>replace函数定义</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">replace(original-string，search-string，replace-string)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li>original-string： 被搜索的字符串。可为任意长度。</li>\n<li>search-string： 要搜索并被 replace-string 替换的字符串。该字符串的长度不应超过 255 个字节。如果 search-string 是空字符串，则按原样返回原始字符串。</li>\n<li>replace-string： 该字符串用于替换 search-string。可为任意长度。如果 replace-string 是空字符串，则删除出现的所有 search-string。</li>\n</ul>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>用字符串表达式3替换字符串表达式1中出现的所有字符串表达式2的匹配项。返回新的字符串。<br>　如果有某个参数为 NULL，此函数返回 NULL。</p>\n","excerpt":"","more":"<h2 id=\"SQL-REPLACE-字符串替换函数\"><a href=\"#SQL-REPLACE-字符串替换函数\" class=\"headerlink\" title=\"SQL REPLACE()字符串替换函数\"></a>SQL REPLACE()字符串替换函数</h2><hr>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>把数据库表 article中的所有title字段里的 ngrok字符串替换成hello。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">update `article` set title=replace(title,&#x27;ngrok&#x27;,&#x27;hello&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"replace函数定义\"><a href=\"#replace函数定义\" class=\"headerlink\" title=\"replace函数定义\"></a>replace函数定义</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">replace(original-string，search-string，replace-string)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li>original-string： 被搜索的字符串。可为任意长度。</li>\n<li>search-string： 要搜索并被 replace-string 替换的字符串。该字符串的长度不应超过 255 个字节。如果 search-string 是空字符串，则按原样返回原始字符串。</li>\n<li>replace-string： 该字符串用于替换 search-string。可为任意长度。如果 replace-string 是空字符串，则删除出现的所有 search-string。</li>\n</ul>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>用字符串表达式3替换字符串表达式1中出现的所有字符串表达式2的匹配项。返回新的字符串。<br>　如果有某个参数为 NULL，此函数返回 NULL。</p>\n"},{"layout":"wiki","wiki":"sql","title":"SQL ROUND()函数","order":20,"_content":"\n## SQL ROUND() 函数\n\n------\n\nROUND() 函数用于把数值字段舍入为指定的小数位数。\n\n### SQL ROUND() 语法\n\n```\nSELECT ROUND(column_name,decimals) FROM table_name;\n```\n\n| 参数        | 描述                         |\n| :---------- | :--------------------------- |\n| column_name | 必需。要舍入的字段。         |\n| decimals    | 必需。规定要返回的小数位数。 |\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"Products\" 表的数据：\n\n| ProductID | ProductName                  | SupplierID | CategoryID | Unit                | Price |\n| :-------- | :--------------------------- | :--------- | :--------- | :------------------ | :---- |\n| 1         | Chais                        | 1          | 1          | 10 boxes x 20 bags  | 18    |\n| 2         | Chang                        | 1          | 1          | 24 - 12 oz bottles  | 19    |\n| 3         | Aniseed Syrup                | 1          | 2          | 12 - 550 ml bottles | 10    |\n| 4         | Chef Anton's Cajun Seasoning | 2          | 2          | 48 - 6 oz jars      | 21.35 |\n| 5         | Chef Anton's Gumbo Mix       | 2          | 2          | 36 boxes            | 25    |\n\n## SQL ROUND() 实例\n\n------\n\n下面的 SQL 语句从 \"Products\" 表中选取产品名称和价格舍入为最接近的整数 (提取前 4 个字符)：\n\n示例\n\n```\nSELECT ProductName, ROUND(Price,0) AS RoundedPrice\nFROM Products;\n```\n\n","source":"wiki/sql/function/round.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL ROUND()函数\norder: 20\n---\n\n## SQL ROUND() 函数\n\n------\n\nROUND() 函数用于把数值字段舍入为指定的小数位数。\n\n### SQL ROUND() 语法\n\n```\nSELECT ROUND(column_name,decimals) FROM table_name;\n```\n\n| 参数        | 描述                         |\n| :---------- | :--------------------------- |\n| column_name | 必需。要舍入的字段。         |\n| decimals    | 必需。规定要返回的小数位数。 |\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"Products\" 表的数据：\n\n| ProductID | ProductName                  | SupplierID | CategoryID | Unit                | Price |\n| :-------- | :--------------------------- | :--------- | :--------- | :------------------ | :---- |\n| 1         | Chais                        | 1          | 1          | 10 boxes x 20 bags  | 18    |\n| 2         | Chang                        | 1          | 1          | 24 - 12 oz bottles  | 19    |\n| 3         | Aniseed Syrup                | 1          | 2          | 12 - 550 ml bottles | 10    |\n| 4         | Chef Anton's Cajun Seasoning | 2          | 2          | 48 - 6 oz jars      | 21.35 |\n| 5         | Chef Anton's Gumbo Mix       | 2          | 2          | 36 boxes            | 25    |\n\n## SQL ROUND() 实例\n\n------\n\n下面的 SQL 语句从 \"Products\" 表中选取产品名称和价格舍入为最接近的整数 (提取前 4 个字符)：\n\n示例\n\n```\nSELECT ProductName, ROUND(Price,0) AS RoundedPrice\nFROM Products;\n```\n\n","date":"2025-06-11T07:00:34.822Z","updated":"2025-06-11T07:00:34.818Z","path":"wiki/sql/function/round.html","comments":1,"_id":"cmbrn2fnz000f44x08rwrf6an","content":"<h2 id=\"SQL-ROUND-函数\"><a href=\"#SQL-ROUND-函数\" class=\"headerlink\" title=\"SQL ROUND() 函数\"></a>SQL ROUND() 函数</h2><hr>\n<p>ROUND() 函数用于把数值字段舍入为指定的小数位数。</p>\n<h3 id=\"SQL-ROUND-语法\"><a href=\"#SQL-ROUND-语法\" class=\"headerlink\" title=\"SQL ROUND() 语法\"></a>SQL ROUND() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ROUND(column_name,decimals) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">column_name</td>\n<td align=\"left\">必需。要舍入的字段。</td>\n</tr>\n<tr>\n<td align=\"left\">decimals</td>\n<td align=\"left\">必需。规定要返回的小数位数。</td>\n</tr>\n</tbody></table>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “Products” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">ProductID</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">SupplierID</th>\n<th align=\"left\">CategoryID</th>\n<th align=\"left\">Unit</th>\n<th align=\"left\">Price</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Chais</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">10 boxes x 20 bags</td>\n<td align=\"left\">18</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Chang</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">24 - 12 oz bottles</td>\n<td align=\"left\">19</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Aniseed Syrup</td>\n<td align=\"left\">1</td>\n<td align=\"left\">2</td>\n<td align=\"left\">12 - 550 ml bottles</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Chef Anton’s Cajun Seasoning</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">48 - 6 oz jars</td>\n<td align=\"left\">21.35</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Chef Anton’s Gumbo Mix</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">36 boxes</td>\n<td align=\"left\">25</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-ROUND-实例\"><a href=\"#SQL-ROUND-实例\" class=\"headerlink\" title=\"SQL ROUND() 实例\"></a>SQL ROUND() 实例</h2><hr>\n<p>下面的 SQL 语句从 “Products” 表中选取产品名称和价格舍入为最接近的整数 (提取前 4 个字符)：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ProductName, ROUND(Price,0) AS RoundedPrice</span><br><span class=\"line\">FROM Products;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"SQL-ROUND-函数\"><a href=\"#SQL-ROUND-函数\" class=\"headerlink\" title=\"SQL ROUND() 函数\"></a>SQL ROUND() 函数</h2><hr>\n<p>ROUND() 函数用于把数值字段舍入为指定的小数位数。</p>\n<h3 id=\"SQL-ROUND-语法\"><a href=\"#SQL-ROUND-语法\" class=\"headerlink\" title=\"SQL ROUND() 语法\"></a>SQL ROUND() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ROUND(column_name,decimals) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">column_name</td>\n<td align=\"left\">必需。要舍入的字段。</td>\n</tr>\n<tr>\n<td align=\"left\">decimals</td>\n<td align=\"left\">必需。规定要返回的小数位数。</td>\n</tr>\n</tbody></table>\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “Products” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">ProductID</th>\n<th align=\"left\">ProductName</th>\n<th align=\"left\">SupplierID</th>\n<th align=\"left\">CategoryID</th>\n<th align=\"left\">Unit</th>\n<th align=\"left\">Price</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Chais</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">10 boxes x 20 bags</td>\n<td align=\"left\">18</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Chang</td>\n<td align=\"left\">1</td>\n<td align=\"left\">1</td>\n<td align=\"left\">24 - 12 oz bottles</td>\n<td align=\"left\">19</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Aniseed Syrup</td>\n<td align=\"left\">1</td>\n<td align=\"left\">2</td>\n<td align=\"left\">12 - 550 ml bottles</td>\n<td align=\"left\">10</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Chef Anton’s Cajun Seasoning</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">48 - 6 oz jars</td>\n<td align=\"left\">21.35</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Chef Anton’s Gumbo Mix</td>\n<td align=\"left\">2</td>\n<td align=\"left\">2</td>\n<td align=\"left\">36 boxes</td>\n<td align=\"left\">25</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-ROUND-实例\"><a href=\"#SQL-ROUND-实例\" class=\"headerlink\" title=\"SQL ROUND() 实例\"></a>SQL ROUND() 实例</h2><hr>\n<p>下面的 SQL 语句从 “Products” 表中选取产品名称和价格舍入为最接近的整数 (提取前 4 个字符)：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT ProductName, ROUND(Price,0) AS RoundedPrice</span><br><span class=\"line\">FROM Products;</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"wiki","wiki":"sql","title":"SQL SQRT()函数","order":23,"_content":"\n## SQL SQRT 函数\n\n------\n\n**　SQRT** 函数用于计算得出任何数值的平方根。你可以像下面这样使用 SELECT 语句计算任何数值的平方根：\n\n```\n    SQL>  select SQRT(16);\n    +----------+\n    | SQRT(16) |\n    +----------+\n    | 4.000000 |\n    +----------+\n    1 row in set (0.00 sec)\n```\n\n你在这里看到的是浮点数，因为 SQL 以浮点数类型来进行平方根的计算。\n\n你还可以使用 SQRT 函数来计算表中记录的平方根。要获得对 **SQRT** 函数更深入的了解，请考虑 **employee_tbl** 表，表中记录如下所示：\n\n```\n    SQL> SELECT * FROM employee_tbl;\n    +------+------+------------+--------------------+\n    | id   | name | work_date  | daily_typing_pages |\n    +------+------+------------+--------------------+\n    |    1 | John | 2007-01-24 |                250 |\n    |    2 | Ram  | 2007-05-27 |                220 |\n    |    3 | Jack | 2007-05-06 |                170 |\n    |    3 | Jack | 2007-04-06 |                100 |\n    |    4 | Jill | 2007-04-06 |                220 |\n    |    5 | Zara | 2007-06-06 |                300 |\n    |    5 | Zara | 2007-02-06 |                350 |\n    +------+------+------------+--------------------+\n    7 rows in set (0.00 sec)\n```\n\n现在，假设你想要获取每个记录中 daily_typing_pages 的平方根，那么你可以用如下命令来达到目的：\n\n```\n    SQL> SELECT name, SQRT(daily_typing_pages)\n        -> FROM employee_tbl;\n    +------+--------------------------+\n    | name | SQRT(daily_typing_pages) |\n    +------+--------------------------+\n    | John |                15.811388 |\n    | Ram  |                14.832397 |\n    | Jack |                13.038405 |\n    | Jack |                10.000000 |\n    | Jill |                14.832397 |\n    | Zara |                17.320508 |\n    | Zara |                18.708287 |\n    +------+--------------------------+\n    7 rows in set (0.00 sec)\n```\n","source":"wiki/sql/function/sqrt.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL SQRT()函数\norder: 23\n---\n\n## SQL SQRT 函数\n\n------\n\n**　SQRT** 函数用于计算得出任何数值的平方根。你可以像下面这样使用 SELECT 语句计算任何数值的平方根：\n\n```\n    SQL>  select SQRT(16);\n    +----------+\n    | SQRT(16) |\n    +----------+\n    | 4.000000 |\n    +----------+\n    1 row in set (0.00 sec)\n```\n\n你在这里看到的是浮点数，因为 SQL 以浮点数类型来进行平方根的计算。\n\n你还可以使用 SQRT 函数来计算表中记录的平方根。要获得对 **SQRT** 函数更深入的了解，请考虑 **employee_tbl** 表，表中记录如下所示：\n\n```\n    SQL> SELECT * FROM employee_tbl;\n    +------+------+------------+--------------------+\n    | id   | name | work_date  | daily_typing_pages |\n    +------+------+------------+--------------------+\n    |    1 | John | 2007-01-24 |                250 |\n    |    2 | Ram  | 2007-05-27 |                220 |\n    |    3 | Jack | 2007-05-06 |                170 |\n    |    3 | Jack | 2007-04-06 |                100 |\n    |    4 | Jill | 2007-04-06 |                220 |\n    |    5 | Zara | 2007-06-06 |                300 |\n    |    5 | Zara | 2007-02-06 |                350 |\n    +------+------+------------+--------------------+\n    7 rows in set (0.00 sec)\n```\n\n现在，假设你想要获取每个记录中 daily_typing_pages 的平方根，那么你可以用如下命令来达到目的：\n\n```\n    SQL> SELECT name, SQRT(daily_typing_pages)\n        -> FROM employee_tbl;\n    +------+--------------------------+\n    | name | SQRT(daily_typing_pages) |\n    +------+--------------------------+\n    | John |                15.811388 |\n    | Ram  |                14.832397 |\n    | Jack |                13.038405 |\n    | Jack |                10.000000 |\n    | Jill |                14.832397 |\n    | Zara |                17.320508 |\n    | Zara |                18.708287 |\n    +------+--------------------------+\n    7 rows in set (0.00 sec)\n```\n","date":"2025-06-11T07:06:05.441Z","updated":"2025-06-11T07:06:05.441Z","path":"wiki/sql/function/sqrt.html","comments":1,"_id":"cmbrn2fo0000g44x09t3qbsu1","content":"<h2 id=\"SQL-SQRT-函数\"><a href=\"#SQL-SQRT-函数\" class=\"headerlink\" title=\"SQL SQRT 函数\"></a>SQL SQRT 函数</h2><hr>\n<p>**　SQRT** 函数用于计算得出任何数值的平方根。你可以像下面这样使用 SELECT 语句计算任何数值的平方根：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt;  select SQRT(16);</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| SQRT(16) |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| 4.000000 |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>你在这里看到的是浮点数，因为 SQL 以浮点数类型来进行平方根的计算。</p>\n<p>你还可以使用 SQRT 函数来计算表中记录的平方根。要获得对 <strong>SQRT</strong> 函数更深入的了解，请考虑 <strong>employee_tbl</strong> 表，表中记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT * FROM employee_tbl;</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">| id   | name | work_date  | daily_typing_pages |</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">|    1 | John | 2007-01-24 |                250 |</span><br><span class=\"line\">|    2 | Ram  | 2007-05-27 |                220 |</span><br><span class=\"line\">|    3 | Jack | 2007-05-06 |                170 |</span><br><span class=\"line\">|    3 | Jack | 2007-04-06 |                100 |</span><br><span class=\"line\">|    4 | Jill | 2007-04-06 |                220 |</span><br><span class=\"line\">|    5 | Zara | 2007-06-06 |                300 |</span><br><span class=\"line\">|    5 | Zara | 2007-02-06 |                350 |</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>现在，假设你想要获取每个记录中 daily_typing_pages 的平方根，那么你可以用如下命令来达到目的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT name, SQRT(daily_typing_pages)</span><br><span class=\"line\">    -&gt; FROM employee_tbl;</span><br><span class=\"line\">+------+--------------------------+</span><br><span class=\"line\">| name | SQRT(daily_typing_pages) |</span><br><span class=\"line\">+------+--------------------------+</span><br><span class=\"line\">| John |                15.811388 |</span><br><span class=\"line\">| Ram  |                14.832397 |</span><br><span class=\"line\">| Jack |                13.038405 |</span><br><span class=\"line\">| Jack |                10.000000 |</span><br><span class=\"line\">| Jill |                14.832397 |</span><br><span class=\"line\">| Zara |                17.320508 |</span><br><span class=\"line\">| Zara |                18.708287 |</span><br><span class=\"line\">+------+--------------------------+</span><br><span class=\"line\">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-SQRT-函数\"><a href=\"#SQL-SQRT-函数\" class=\"headerlink\" title=\"SQL SQRT 函数\"></a>SQL SQRT 函数</h2><hr>\n<p>**　SQRT** 函数用于计算得出任何数值的平方根。你可以像下面这样使用 SELECT 语句计算任何数值的平方根：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt;  select SQRT(16);</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| SQRT(16) |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">| 4.000000 |</span><br><span class=\"line\">+----------+</span><br><span class=\"line\">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>你在这里看到的是浮点数，因为 SQL 以浮点数类型来进行平方根的计算。</p>\n<p>你还可以使用 SQRT 函数来计算表中记录的平方根。要获得对 <strong>SQRT</strong> 函数更深入的了解，请考虑 <strong>employee_tbl</strong> 表，表中记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT * FROM employee_tbl;</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">| id   | name | work_date  | daily_typing_pages |</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">|    1 | John | 2007-01-24 |                250 |</span><br><span class=\"line\">|    2 | Ram  | 2007-05-27 |                220 |</span><br><span class=\"line\">|    3 | Jack | 2007-05-06 |                170 |</span><br><span class=\"line\">|    3 | Jack | 2007-04-06 |                100 |</span><br><span class=\"line\">|    4 | Jill | 2007-04-06 |                220 |</span><br><span class=\"line\">|    5 | Zara | 2007-06-06 |                300 |</span><br><span class=\"line\">|    5 | Zara | 2007-02-06 |                350 |</span><br><span class=\"line\">+------+------+------------+--------------------+</span><br><span class=\"line\">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n<p>现在，假设你想要获取每个记录中 daily_typing_pages 的平方根，那么你可以用如下命令来达到目的：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT name, SQRT(daily_typing_pages)</span><br><span class=\"line\">    -&gt; FROM employee_tbl;</span><br><span class=\"line\">+------+--------------------------+</span><br><span class=\"line\">| name | SQRT(daily_typing_pages) |</span><br><span class=\"line\">+------+--------------------------+</span><br><span class=\"line\">| John |                15.811388 |</span><br><span class=\"line\">| Ram  |                14.832397 |</span><br><span class=\"line\">| Jack |                13.038405 |</span><br><span class=\"line\">| Jack |                10.000000 |</span><br><span class=\"line\">| Jill |                14.832397 |</span><br><span class=\"line\">| Zara |                17.320508 |</span><br><span class=\"line\">| Zara |                18.708287 |</span><br><span class=\"line\">+------+--------------------------+</span><br><span class=\"line\">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL TRIM()函数","order":28,"_content":"\n## SQL TRIM()函数去除字符串头尾空格\n\n------\n\nSQL 中的 TRIM 函数是用来移除掉一个字串中的字头或字尾。最常见的用途是移除字首或字尾的空白。这个函数在不同的资料库中有不同的名称：\n\n- MySQL: TRIM( ), RTRIM( ), LTRIM( )\n- Oracle: RTRIM( ), LTRIM( )\n- SQL Server: RTRIM( ), LTRIM( )\n\n各种 trim 函数的语法如下：\n\n- **TRIM ( [ [位置] [要移除的字串] FROM ] 字串)** : [位置] 的可能值为 LEADING (起头), TRAILING (结尾), or BOTH (起头及结尾)。 这个函数将把 [要移除的字串] 从字串的起头、结尾，或是起头及结尾移除。如果我们没有列出 [要移除的字串] 是什么的话，那空白就会被移除。\n- **LTRIM(字串)** : 将所有字串起头的空白移除。\n- **RTRIM(字串)** : 将所有字串结尾的空白移除。\n\n### 例1 TRIM()\n\n```\nSELECT TRIM('   Sample   ');\n```\n\n结果:\n\n```\n'Sample'\n```\n\n### 例2 LTRIM()\n\n```\nSELECT LTRIM('   Sample   ');\n```\n\n结果:\n\n```\n'Sample   '\n```\n\n### 例3 RTRIM()\n\n```\nSELECT RTRIM('   Sample   ');\n```\n\n结果:\n\n```\n'   Sample'\n```\n","source":"wiki/sql/function/trim.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL TRIM()函数\norder: 28\n---\n\n## SQL TRIM()函数去除字符串头尾空格\n\n------\n\nSQL 中的 TRIM 函数是用来移除掉一个字串中的字头或字尾。最常见的用途是移除字首或字尾的空白。这个函数在不同的资料库中有不同的名称：\n\n- MySQL: TRIM( ), RTRIM( ), LTRIM( )\n- Oracle: RTRIM( ), LTRIM( )\n- SQL Server: RTRIM( ), LTRIM( )\n\n各种 trim 函数的语法如下：\n\n- **TRIM ( [ [位置] [要移除的字串] FROM ] 字串)** : [位置] 的可能值为 LEADING (起头), TRAILING (结尾), or BOTH (起头及结尾)。 这个函数将把 [要移除的字串] 从字串的起头、结尾，或是起头及结尾移除。如果我们没有列出 [要移除的字串] 是什么的话，那空白就会被移除。\n- **LTRIM(字串)** : 将所有字串起头的空白移除。\n- **RTRIM(字串)** : 将所有字串结尾的空白移除。\n\n### 例1 TRIM()\n\n```\nSELECT TRIM('   Sample   ');\n```\n\n结果:\n\n```\n'Sample'\n```\n\n### 例2 LTRIM()\n\n```\nSELECT LTRIM('   Sample   ');\n```\n\n结果:\n\n```\n'Sample   '\n```\n\n### 例3 RTRIM()\n\n```\nSELECT RTRIM('   Sample   ');\n```\n\n结果:\n\n```\n'   Sample'\n```\n","date":"2025-06-11T07:17:32.347Z","updated":"2025-06-11T07:17:32.343Z","path":"wiki/sql/function/trim.html","comments":1,"_id":"cmbrn2fo1000h44x0a8z6byie","content":"<h2 id=\"SQL-TRIM-函数去除字符串头尾空格\"><a href=\"#SQL-TRIM-函数去除字符串头尾空格\" class=\"headerlink\" title=\"SQL TRIM()函数去除字符串头尾空格\"></a>SQL TRIM()函数去除字符串头尾空格</h2><hr>\n<p>SQL 中的 TRIM 函数是用来移除掉一个字串中的字头或字尾。最常见的用途是移除字首或字尾的空白。这个函数在不同的资料库中有不同的名称：</p>\n<ul>\n<li>MySQL: TRIM( ), RTRIM( ), LTRIM( )</li>\n<li>Oracle: RTRIM( ), LTRIM( )</li>\n<li>SQL Server: RTRIM( ), LTRIM( )</li>\n</ul>\n<p>各种 trim 函数的语法如下：</p>\n<ul>\n<li><strong>TRIM ( [ [位置] [要移除的字串] FROM ] 字串)</strong> : [位置] 的可能值为 LEADING (起头), TRAILING (结尾), or BOTH (起头及结尾)。 这个函数将把 [要移除的字串] 从字串的起头、结尾，或是起头及结尾移除。如果我们没有列出 [要移除的字串] 是什么的话，那空白就会被移除。</li>\n<li><strong>LTRIM(字串)</strong> : 将所有字串起头的空白移除。</li>\n<li><strong>RTRIM(字串)</strong> : 将所有字串结尾的空白移除。</li>\n</ul>\n<h3 id=\"例1-TRIM\"><a href=\"#例1-TRIM\" class=\"headerlink\" title=\"例1 TRIM()\"></a>例1 TRIM()</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TRIM(&#x27;   Sample   &#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>结果:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x27;Sample&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例2-LTRIM\"><a href=\"#例2-LTRIM\" class=\"headerlink\" title=\"例2 LTRIM()\"></a>例2 LTRIM()</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LTRIM(&#x27;   Sample   &#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>结果:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x27;Sample   &#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例3-RTRIM\"><a href=\"#例3-RTRIM\" class=\"headerlink\" title=\"例3 RTRIM()\"></a>例3 RTRIM()</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT RTRIM(&#x27;   Sample   &#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>结果:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x27;   Sample&#x27;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-TRIM-函数去除字符串头尾空格\"><a href=\"#SQL-TRIM-函数去除字符串头尾空格\" class=\"headerlink\" title=\"SQL TRIM()函数去除字符串头尾空格\"></a>SQL TRIM()函数去除字符串头尾空格</h2><hr>\n<p>SQL 中的 TRIM 函数是用来移除掉一个字串中的字头或字尾。最常见的用途是移除字首或字尾的空白。这个函数在不同的资料库中有不同的名称：</p>\n<ul>\n<li>MySQL: TRIM( ), RTRIM( ), LTRIM( )</li>\n<li>Oracle: RTRIM( ), LTRIM( )</li>\n<li>SQL Server: RTRIM( ), LTRIM( )</li>\n</ul>\n<p>各种 trim 函数的语法如下：</p>\n<ul>\n<li><strong>TRIM ( [ [位置] [要移除的字串] FROM ] 字串)</strong> : [位置] 的可能值为 LEADING (起头), TRAILING (结尾), or BOTH (起头及结尾)。 这个函数将把 [要移除的字串] 从字串的起头、结尾，或是起头及结尾移除。如果我们没有列出 [要移除的字串] 是什么的话，那空白就会被移除。</li>\n<li><strong>LTRIM(字串)</strong> : 将所有字串起头的空白移除。</li>\n<li><strong>RTRIM(字串)</strong> : 将所有字串结尾的空白移除。</li>\n</ul>\n<h3 id=\"例1-TRIM\"><a href=\"#例1-TRIM\" class=\"headerlink\" title=\"例1 TRIM()\"></a>例1 TRIM()</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT TRIM(&#x27;   Sample   &#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>结果:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x27;Sample&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例2-LTRIM\"><a href=\"#例2-LTRIM\" class=\"headerlink\" title=\"例2 LTRIM()\"></a>例2 LTRIM()</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LTRIM(&#x27;   Sample   &#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>结果:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x27;Sample   &#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例3-RTRIM\"><a href=\"#例3-RTRIM\" class=\"headerlink\" title=\"例3 RTRIM()\"></a>例3 RTRIM()</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT RTRIM(&#x27;   Sample   &#x27;);</span><br></pre></td></tr></table></figure>\n\n<p>结果:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x27;   Sample&#x27;</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL UCASE()函数","order":16,"_content":"\n## SQL UCASE() 函数\n\n------\n\nUCASE() 函数把字段的值转换为大写。\n\n### SQL UCASE() 语法\n\n```\nSELECT UCASE(column_name) FROM table_name;\n```\n\n### 用于 SQL Server 的语法\n\n```\nSELECT UPPER(column_name) FROM table_name;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"Customers\" 表的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL UCASE() 实例\n\n------\n\n下面的 SQL 语句从 \"Customers\" 表中选取 \"CustomerName\" 和 \"City\" 列，并把 \"CustomerName\" 列的值转换为大写：\n\n示例\n\n```\nSELECT UCASE(CustomerName) AS Customer, City\nFROM Customers;\n```\n\n","source":"wiki/sql/function/ucase.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL UCASE()函数\norder: 16\n---\n\n## SQL UCASE() 函数\n\n------\n\nUCASE() 函数把字段的值转换为大写。\n\n### SQL UCASE() 语法\n\n```\nSELECT UCASE(column_name) FROM table_name;\n```\n\n### 用于 SQL Server 的语法\n\n```\nSELECT UPPER(column_name) FROM table_name;\n```\n\n## 演示数据库\n\n------\n\n在本教程中，我们将使用众所周知的 Northwind 样本数据库。\n\n下面是选自 \"Customers\" 表的数据：\n\n| CustomerID | CustomerName                       | ContactName        | Address                       | City        | PostalCode | Country |\n| :--------- | :--------------------------------- | :----------------- | :---------------------------- | :---------- | :--------- | :------ |\n| 1          | Alfreds Futterkiste                | Maria Anders       | Obere Str. 57                 | Berlin      | 12209      | Germany |\n| 2          | Ana Trujillo Emparedados y helados | Ana Trujillo       | Avda. de la Constitución 2222 | México D.F. | 05021      | Mexico  |\n| 3          | Antonio Moreno Taquería            | Antonio Moreno     | Mataderos 2312                | México D.F. | 05023      | Mexico  |\n| 4          | Around the Horn                    | Thomas Hardy       | 120 Hanover Sq.               | London      | WA1 1DP    | UK      |\n| 5          | Berglunds snabbköp                 | Christina Berglund | Berguvsvägen 8                | Luleå       | S-958 22   | Sweden  |\n\n## SQL UCASE() 实例\n\n------\n\n下面的 SQL 语句从 \"Customers\" 表中选取 \"CustomerName\" 和 \"City\" 列，并把 \"CustomerName\" 列的值转换为大写：\n\n示例\n\n```\nSELECT UCASE(CustomerName) AS Customer, City\nFROM Customers;\n```\n\n","date":"2025-06-11T06:53:55.342Z","updated":"2025-06-11T06:53:55.342Z","path":"wiki/sql/function/ucase.html","comments":1,"_id":"cmbrn2fo2000i44x07uzl5jom","content":"<h2 id=\"SQL-UCASE-函数\"><a href=\"#SQL-UCASE-函数\" class=\"headerlink\" title=\"SQL UCASE() 函数\"></a>SQL UCASE() 函数</h2><hr>\n<p>UCASE() 函数把字段的值转换为大写。</p>\n<h3 id=\"SQL-UCASE-语法\"><a href=\"#SQL-UCASE-语法\" class=\"headerlink\" title=\"SQL UCASE() 语法\"></a>SQL UCASE() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT UCASE(column_name) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用于-SQL-Server-的语法\"><a href=\"#用于-SQL-Server-的语法\" class=\"headerlink\" title=\"用于 SQL Server 的语法\"></a>用于 SQL Server 的语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT UPPER(column_name) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “Customers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-UCASE-实例\"><a href=\"#SQL-UCASE-实例\" class=\"headerlink\" title=\"SQL UCASE() 实例\"></a>SQL UCASE() 实例</h2><hr>\n<p>下面的 SQL 语句从 “Customers” 表中选取 “CustomerName” 和 “City” 列，并把 “CustomerName” 列的值转换为大写：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT UCASE(CustomerName) AS Customer, City</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"SQL-UCASE-函数\"><a href=\"#SQL-UCASE-函数\" class=\"headerlink\" title=\"SQL UCASE() 函数\"></a>SQL UCASE() 函数</h2><hr>\n<p>UCASE() 函数把字段的值转换为大写。</p>\n<h3 id=\"SQL-UCASE-语法\"><a href=\"#SQL-UCASE-语法\" class=\"headerlink\" title=\"SQL UCASE() 语法\"></a>SQL UCASE() 语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT UCASE(column_name) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用于-SQL-Server-的语法\"><a href=\"#用于-SQL-Server-的语法\" class=\"headerlink\" title=\"用于 SQL Server 的语法\"></a>用于 SQL Server 的语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT UPPER(column_name) FROM table_name;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>在本教程中，我们将使用众所周知的 Northwind 样本数据库。</p>\n<p>下面是选自 “Customers” 表的数据：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">CustomerID</th>\n<th align=\"left\">CustomerName</th>\n<th align=\"left\">ContactName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n<th align=\"left\">PostalCode</th>\n<th align=\"left\">Country</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Alfreds Futterkiste</td>\n<td align=\"left\">Maria Anders</td>\n<td align=\"left\">Obere Str. 57</td>\n<td align=\"left\">Berlin</td>\n<td align=\"left\">12209</td>\n<td align=\"left\">Germany</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Ana Trujillo Emparedados y helados</td>\n<td align=\"left\">Ana Trujillo</td>\n<td align=\"left\">Avda. de la Constitución 2222</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05021</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Antonio Moreno Taquería</td>\n<td align=\"left\">Antonio Moreno</td>\n<td align=\"left\">Mataderos 2312</td>\n<td align=\"left\">México D.F.</td>\n<td align=\"left\">05023</td>\n<td align=\"left\">Mexico</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Around the Horn</td>\n<td align=\"left\">Thomas Hardy</td>\n<td align=\"left\">120 Hanover Sq.</td>\n<td align=\"left\">London</td>\n<td align=\"left\">WA1 1DP</td>\n<td align=\"left\">UK</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">Berglunds snabbköp</td>\n<td align=\"left\">Christina Berglund</td>\n<td align=\"left\">Berguvsvägen 8</td>\n<td align=\"left\">Luleå</td>\n<td align=\"left\">S-958 22</td>\n<td align=\"left\">Sweden</td>\n</tr>\n</tbody></table>\n<h2 id=\"SQL-UCASE-实例\"><a href=\"#SQL-UCASE-实例\" class=\"headerlink\" title=\"SQL UCASE() 实例\"></a>SQL UCASE() 实例</h2><hr>\n<p>下面的 SQL 语句从 “Customers” 表中选取 “CustomerName” 和 “City” 列，并把 “CustomerName” 列的值转换为大写：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT UCASE(CustomerName) AS Customer, City</span><br><span class=\"line\">FROM Customers;</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"wiki","wiki":"sql","title":"SQL UPPER()函数","order":14,"_content":"\n## SQL UPPER()函数\n\n------\n\nSQL upper()函数字母大小写转换函数，将字母转成大写 - 返回字符串str，根据当前字符集映射的所有字符更改为大写。\n\n### UPPER(str)\n\n返回字符串str，根据当前字符集映射的所有字符更改为大写。\n\n```\nSQL> SELECT UPPER('Allah-hus-ngrok'); +---------------------------------------------------------+ | UPPER('Allah-hus-ngrok') | +---------------------------------------------------------+ | ALLAH-HUS-ngrok | +---------------------------------------------------------+ 1 row in set (0.00 sec)\n```\n\n","source":"wiki/sql/function/upper.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL UPPER()函数\norder: 14\n---\n\n## SQL UPPER()函数\n\n------\n\nSQL upper()函数字母大小写转换函数，将字母转成大写 - 返回字符串str，根据当前字符集映射的所有字符更改为大写。\n\n### UPPER(str)\n\n返回字符串str，根据当前字符集映射的所有字符更改为大写。\n\n```\nSQL> SELECT UPPER('Allah-hus-ngrok'); +---------------------------------------------------------+ | UPPER('Allah-hus-ngrok') | +---------------------------------------------------------+ | ALLAH-HUS-ngrok | +---------------------------------------------------------+ 1 row in set (0.00 sec)\n```\n\n","date":"2025-06-11T06:50:33.073Z","updated":"2025-06-11T06:50:33.069Z","path":"wiki/sql/function/upper.html","comments":1,"_id":"cmbrn2fo4000j44x0f7aygwd4","content":"<h2 id=\"SQL-UPPER-函数\"><a href=\"#SQL-UPPER-函数\" class=\"headerlink\" title=\"SQL UPPER()函数\"></a>SQL UPPER()函数</h2><hr>\n<p>SQL upper()函数字母大小写转换函数，将字母转成大写 - 返回字符串str，根据当前字符集映射的所有字符更改为大写。</p>\n<h3 id=\"UPPER-str\"><a href=\"#UPPER-str\" class=\"headerlink\" title=\"UPPER(str)\"></a>UPPER(str)</h3><p>返回字符串str，根据当前字符集映射的所有字符更改为大写。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT UPPER(&#x27;Allah-hus-ngrok&#x27;); +---------------------------------------------------------+ | UPPER(&#x27;Allah-hus-ngrok&#x27;) | +---------------------------------------------------------+ | ALLAH-HUS-ngrok | +---------------------------------------------------------+ 1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<h2 id=\"SQL-UPPER-函数\"><a href=\"#SQL-UPPER-函数\" class=\"headerlink\" title=\"SQL UPPER()函数\"></a>SQL UPPER()函数</h2><hr>\n<p>SQL upper()函数字母大小写转换函数，将字母转成大写 - 返回字符串str，根据当前字符集映射的所有字符更改为大写。</p>\n<h3 id=\"UPPER-str\"><a href=\"#UPPER-str\" class=\"headerlink\" title=\"UPPER(str)\"></a>UPPER(str)</h3><p>返回字符串str，根据当前字符集映射的所有字符更改为大写。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT UPPER(&#x27;Allah-hus-ngrok&#x27;); +---------------------------------------------------------+ | UPPER(&#x27;Allah-hus-ngrok&#x27;) | +---------------------------------------------------------+ | ALLAH-HUS-ngrok | +---------------------------------------------------------+ 1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>\n\n"},{"layout":"wiki","wiki":"sql","title":"SQL HAVING 子句","order":51,"_content":"\n## SQL HAVING 子句\n\n------\n\n`HAVING` 子句使你能够指定过滤条件，从而控制查询结果中哪些组可以出现在最终结果里面。\n\n`WHERE `子句对被选择的列施加条件，而 `HAVING `子句则对 `GROUP BY` 子句所产生的组施加条件。\n\n### 语法\n\n下面可以看到 `HAVING` 子句在 `SEL ECT `查询中的位置：\n\n```\nSELECT\nFROM\nWHERE\nGROUP BY\nHAVING\nORDER BY\n```\n\n在 `SELECT` 查询中，`HAVING` 子句必须紧随 `GROUP BY` 子句，并出现在 `ORDER BY` 子句（如果有的话）之前。带有 `HAVING` 子句的 `SELECT` 语句的语法如下所示：\n\n```\nSELECT column1, column2   \nFROM table1, table2\nWHERE [ conditions ]\nGROUP BY column1, column2\nHAVING [ conditions ]\nORDER BY column1, column2\n```\n\n## 示例\n\n------\n\n考虑 `CUSTOMERS` 表，表中的记录如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n下面是一个有关 `HAVING` 子句使用的实例，该实例将会筛选出出现次数大于或等于 2 的所有记录。\n\n```\nSQL > SELECT ID, NAME, AGE, ADDRESS, SALARY\nFROM CUSTOMERS\nGROUP BY age\nHAVING COUNT(age) >= 2;\n```\n\n其执行结果如下所示：\n\n```\n+----+----------+-----+---------+---------+\n| ID | NAME     | AGE | ADDRESS | SALARY  |\n+----+----------+-----+---------+---------+\n|  2 | Khilan   |  25 | Delhi   | 1500.00 |\n|  4 | Chaitali |  25 | Mumbai  | 6500.00 |\n+----+----------+-----+---------+---------+\n```\n\n## SQL HAVING 实例\n\n现在我们想要查找总访问量大于 200 的网站。\n\n我们使用下面的 SQL 语句：\n\n示例\n\n```\nSELECT Websites.name, Websites.url, SUM(access_log.count) AS nums FROM (access_log \nINNER JOIN Websites ON access_log.site_id=Websites.id)\n GROUP BY Websites.name\n HAVING SUM(access_log.count) > 200;\n```\n\n执行以上 SQL 输出结果如下：\n\n现在我们想要查找总访问量大于 200 的网站，并且 alexa 排名小于 200。\n\n我们在 SQL 语句中增加一个普通的 WHERE 子句：\n\n示例\n\n```\nSELECT Websites.name, SUM(access_log.count) AS nums FROM Websites \nINNER JOIN access_log \nON Websites.id=access_log.site_id \nWHERE Websites.alexa < 200 \nGROUP BY Websites.name \nHAVING SUM(access_log.count) > 200;\n```\n","source":"wiki/sql/sentence/hav.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL HAVING 子句\norder: 51\n---\n\n## SQL HAVING 子句\n\n------\n\n`HAVING` 子句使你能够指定过滤条件，从而控制查询结果中哪些组可以出现在最终结果里面。\n\n`WHERE `子句对被选择的列施加条件，而 `HAVING `子句则对 `GROUP BY` 子句所产生的组施加条件。\n\n### 语法\n\n下面可以看到 `HAVING` 子句在 `SEL ECT `查询中的位置：\n\n```\nSELECT\nFROM\nWHERE\nGROUP BY\nHAVING\nORDER BY\n```\n\n在 `SELECT` 查询中，`HAVING` 子句必须紧随 `GROUP BY` 子句，并出现在 `ORDER BY` 子句（如果有的话）之前。带有 `HAVING` 子句的 `SELECT` 语句的语法如下所示：\n\n```\nSELECT column1, column2   \nFROM table1, table2\nWHERE [ conditions ]\nGROUP BY column1, column2\nHAVING [ conditions ]\nORDER BY column1, column2\n```\n\n## 示例\n\n------\n\n考虑 `CUSTOMERS` 表，表中的记录如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |  4500.00 |\n|  7 | Muffy    |  24 | Indore    | 10000.00 |\n+----+----------+-----+-----------+----------+\n```\n\n下面是一个有关 `HAVING` 子句使用的实例，该实例将会筛选出出现次数大于或等于 2 的所有记录。\n\n```\nSQL > SELECT ID, NAME, AGE, ADDRESS, SALARY\nFROM CUSTOMERS\nGROUP BY age\nHAVING COUNT(age) >= 2;\n```\n\n其执行结果如下所示：\n\n```\n+----+----------+-----+---------+---------+\n| ID | NAME     | AGE | ADDRESS | SALARY  |\n+----+----------+-----+---------+---------+\n|  2 | Khilan   |  25 | Delhi   | 1500.00 |\n|  4 | Chaitali |  25 | Mumbai  | 6500.00 |\n+----+----------+-----+---------+---------+\n```\n\n## SQL HAVING 实例\n\n现在我们想要查找总访问量大于 200 的网站。\n\n我们使用下面的 SQL 语句：\n\n示例\n\n```\nSELECT Websites.name, Websites.url, SUM(access_log.count) AS nums FROM (access_log \nINNER JOIN Websites ON access_log.site_id=Websites.id)\n GROUP BY Websites.name\n HAVING SUM(access_log.count) > 200;\n```\n\n执行以上 SQL 输出结果如下：\n\n现在我们想要查找总访问量大于 200 的网站，并且 alexa 排名小于 200。\n\n我们在 SQL 语句中增加一个普通的 WHERE 子句：\n\n示例\n\n```\nSELECT Websites.name, SUM(access_log.count) AS nums FROM Websites \nINNER JOIN access_log \nON Websites.id=access_log.site_id \nWHERE Websites.alexa < 200 \nGROUP BY Websites.name \nHAVING SUM(access_log.count) > 200;\n```\n","date":"2025-06-11T06:42:45.016Z","updated":"2025-06-11T02:56:02.829Z","path":"wiki/sql/sentence/hav.html","comments":1,"_id":"cmbrn2fo4000k44x087nz5iux","content":"<h2 id=\"SQL-HAVING-子句\"><a href=\"#SQL-HAVING-子句\" class=\"headerlink\" title=\"SQL HAVING 子句\"></a>SQL HAVING 子句</h2><hr>\n<p><code>HAVING</code> 子句使你能够指定过滤条件，从而控制查询结果中哪些组可以出现在最终结果里面。</p>\n<p><code>WHERE </code>子句对被选择的列施加条件，而 <code>HAVING </code>子句则对 <code>GROUP BY</code> 子句所产生的组施加条件。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>下面可以看到 <code>HAVING</code> 子句在 <code>SEL ECT </code>查询中的位置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">FROM</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">GROUP BY</span><br><span class=\"line\">HAVING</span><br><span class=\"line\">ORDER BY</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>SELECT</code> 查询中，<code>HAVING</code> 子句必须紧随 <code>GROUP BY</code> 子句，并出现在 <code>ORDER BY</code> 子句（如果有的话）之前。带有 <code>HAVING</code> 子句的 <code>SELECT</code> 语句的语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2   </span><br><span class=\"line\">FROM table1, table2</span><br><span class=\"line\">WHERE [ conditions ]</span><br><span class=\"line\">GROUP BY column1, column2</span><br><span class=\"line\">HAVING [ conditions ]</span><br><span class=\"line\">ORDER BY column1, column2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><hr>\n<p>考虑 <code>CUSTOMERS</code> 表，表中的记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>下面是一个有关 <code>HAVING</code> 子句使用的实例，该实例将会筛选出出现次数大于或等于 2 的所有记录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL &gt; SELECT ID, NAME, AGE, ADDRESS, SALARY</span><br><span class=\"line\">FROM CUSTOMERS</span><br><span class=\"line\">GROUP BY age</span><br><span class=\"line\">HAVING COUNT(age) &gt;= 2;</span><br></pre></td></tr></table></figure>\n\n<p>其执行结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+---------+---------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS | SALARY  |</span><br><span class=\"line\">+----+----------+-----+---------+---------+</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi   | 1500.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai  | 6500.00 |</span><br><span class=\"line\">+----+----------+-----+---------+---------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SQL-HAVING-实例\"><a href=\"#SQL-HAVING-实例\" class=\"headerlink\" title=\"SQL HAVING 实例\"></a>SQL HAVING 实例</h2><p>现在我们想要查找总访问量大于 200 的网站。</p>\n<p>我们使用下面的 SQL 语句：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Websites.name, Websites.url, SUM(access_log.count) AS nums FROM (access_log </span><br><span class=\"line\">INNER JOIN Websites ON access_log.site_id=Websites.id)</span><br><span class=\"line\"> GROUP BY Websites.name</span><br><span class=\"line\"> HAVING SUM(access_log.count) &gt; 200;</span><br></pre></td></tr></table></figure>\n\n<p>执行以上 SQL 输出结果如下：</p>\n<p>现在我们想要查找总访问量大于 200 的网站，并且 alexa 排名小于 200。</p>\n<p>我们在 SQL 语句中增加一个普通的 WHERE 子句：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Websites.name, SUM(access_log.count) AS nums FROM Websites </span><br><span class=\"line\">INNER JOIN access_log </span><br><span class=\"line\">ON Websites.id=access_log.site_id </span><br><span class=\"line\">WHERE Websites.alexa &lt; 200 </span><br><span class=\"line\">GROUP BY Websites.name </span><br><span class=\"line\">HAVING SUM(access_log.count) &gt; 200;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"SQL-HAVING-子句\"><a href=\"#SQL-HAVING-子句\" class=\"headerlink\" title=\"SQL HAVING 子句\"></a>SQL HAVING 子句</h2><hr>\n<p><code>HAVING</code> 子句使你能够指定过滤条件，从而控制查询结果中哪些组可以出现在最终结果里面。</p>\n<p><code>WHERE </code>子句对被选择的列施加条件，而 <code>HAVING </code>子句则对 <code>GROUP BY</code> 子句所产生的组施加条件。</p>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><p>下面可以看到 <code>HAVING</code> 子句在 <code>SEL ECT </code>查询中的位置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT</span><br><span class=\"line\">FROM</span><br><span class=\"line\">WHERE</span><br><span class=\"line\">GROUP BY</span><br><span class=\"line\">HAVING</span><br><span class=\"line\">ORDER BY</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>SELECT</code> 查询中，<code>HAVING</code> 子句必须紧随 <code>GROUP BY</code> 子句，并出现在 <code>ORDER BY</code> 子句（如果有的话）之前。带有 <code>HAVING</code> 子句的 <code>SELECT</code> 语句的语法如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column1, column2   </span><br><span class=\"line\">FROM table1, table2</span><br><span class=\"line\">WHERE [ conditions ]</span><br><span class=\"line\">GROUP BY column1, column2</span><br><span class=\"line\">HAVING [ conditions ]</span><br><span class=\"line\">ORDER BY column1, column2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><hr>\n<p>考虑 <code>CUSTOMERS</code> 表，表中的记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |  4500.00 |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    | 10000.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>下面是一个有关 <code>HAVING</code> 子句使用的实例，该实例将会筛选出出现次数大于或等于 2 的所有记录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL &gt; SELECT ID, NAME, AGE, ADDRESS, SALARY</span><br><span class=\"line\">FROM CUSTOMERS</span><br><span class=\"line\">GROUP BY age</span><br><span class=\"line\">HAVING COUNT(age) &gt;= 2;</span><br></pre></td></tr></table></figure>\n\n<p>其执行结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+---------+---------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS | SALARY  |</span><br><span class=\"line\">+----+----------+-----+---------+---------+</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi   | 1500.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai  | 6500.00 |</span><br><span class=\"line\">+----+----------+-----+---------+---------+</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SQL-HAVING-实例\"><a href=\"#SQL-HAVING-实例\" class=\"headerlink\" title=\"SQL HAVING 实例\"></a>SQL HAVING 实例</h2><p>现在我们想要查找总访问量大于 200 的网站。</p>\n<p>我们使用下面的 SQL 语句：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Websites.name, Websites.url, SUM(access_log.count) AS nums FROM (access_log </span><br><span class=\"line\">INNER JOIN Websites ON access_log.site_id=Websites.id)</span><br><span class=\"line\"> GROUP BY Websites.name</span><br><span class=\"line\"> HAVING SUM(access_log.count) &gt; 200;</span><br></pre></td></tr></table></figure>\n\n<p>执行以上 SQL 输出结果如下：</p>\n<p>现在我们想要查找总访问量大于 200 的网站，并且 alexa 排名小于 200。</p>\n<p>我们在 SQL 语句中增加一个普通的 WHERE 子句：</p>\n<p>示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT Websites.name, SUM(access_log.count) AS nums FROM Websites </span><br><span class=\"line\">INNER JOIN access_log </span><br><span class=\"line\">ON Websites.id=access_log.site_id </span><br><span class=\"line\">WHERE Websites.alexa &lt; 200 </span><br><span class=\"line\">GROUP BY Websites.name </span><br><span class=\"line\">HAVING SUM(access_log.count) &gt; 200;</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"SQL 空值","order":10,"_content":"\n## 什么是SQL NULL值？\n\n------\n\nSQL 中，**NULL** 用于表示缺失的值。数据表中的 NULL 值表示该值所处的字段为空。\n\n具有NULL值的字段是没有值的字段。\n\n如果表中的字段是可选的，则可以插入新记录或更新记录而不向该字段添加值。然后，该字段将被保存为NULL值。\n\n值为 NULL 的字段没有值。尤其要明白的是，NULL 值与 0 或者包含空白（spaces）的字段是不同的。\n\n> **注意**：理解NULL值与零值或包含空格的字段不同是非常重要的。具有NULL值的字段是在记录创建期间留空的字段！\n\n## 如何测试NULL值？\n\n------\n\n使用比较运算符（例如=，<或<>）来测试NULL值是不可行的。\n\n我们将不得不使用IS NULL和IS NOT NULL运算符。\n\n### IS NULL语法\n\n```\nSELECT column_names\nFROM table_name\nWHERE column_name IS NULL;\n```\n\n### IS NOT NULL语法\n\n```\nSELECT column_names\nFROM table_name\nWHERE column_name IS NOT NULL;\n```\n\n## 演示数据库\n\n------\n\n假设我们有以下的\"人员\"表：\n\n| ID   | LastName | FirstName | Address            | City     |\n| :--- | :------- | :-------- | :----------------- | :------- |\n| 1    | Doe      | John      | 542 W. 27th Street | New York |\n| 2    | Bloggs   | Joe       |                    | London   |\n| 3    | Roe      | Jane      |                    | New York |\n| 4    | Smith    | John      | 110 Bishopsgate    | London   |\n\n假设\"人员\"表中的\"Address\"列是可选的。如果插入的记录没有\"Address\"值，则\"Address\"列将以空值保存。\n\n## IS NULL运算符\n\n------\n\n以下SQL语句使用IS NULL运算符来列出所有没有地址的人员：\n\n```\nSELECT LastName, FirstName, Address FROM Persons\nWHERE Address IS NULL;\n```\n\n结果集将如下所示：\n\n| LastName | FirstName | Address |\n| :------- | :-------- | :------ |\n| Bloggs   | Joe       |         |\n| Roe      | Jane      |         |\n\n> **提示**：始终使用IS NULL来查找空值。\n\n## IS NOT NULL运算符\n\n------\n\n以下SQL语句使用IS NOT NULL运算符来列出所有具有地址的人员：\n\n```\nSELECT LastName, FirstName, Address FROM Persons\nWHERE Address IS NOT NULL;\n```\n\n结果集将如下所示：\n\n| LastName | FirstName | Address            |\n| :------- | :-------- | :----------------- |\n| Doe      | John      | 542 W. 27th Street |\n| Smith    | John      | 110 Bishopsgate    |\n\n## 语法：\n\n------\n\n创建表的时候，NULL 的基本语法如下：\n\n```\nSQL> CREATE TABLE CUSTOMERS(\n   ID   INT              NOT NULL,\n   NAME VARCHAR (20)     NOT NULL,\n   AGE  INT              NOT NULL,\n   ADDRESS  CHAR (25) ,\n   SALARY   DECIMAL (18, 2),       \n   PRIMARY KEY (ID)\n);\n```\n\n这里，**NOT NULL**表示对于给定列，必须按照其数据类型明确赋值。有两列并没有使用 NOT NULL 来限定，也就是说这些列可以为 NULL。\n\n值为 NULL 的字段是在记录创建的过程中留空的字段。\n\n## 示例：\n\n------\n\nNULL 值会给选取数据带来麻烦。不过，因为 NULL 和其他任何值作比较，其结果总是未知的，所以含有 NULL 的记录不会包含在最终结果里面。\n\n必须使用 **IS NULL** 或者 **IS NOT NULL** 来检测某个字段是否为 NULL。\n\n考虑下面的 CUSTOMERS 数据表，里面包含的记录如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |          |\n|  7 | Muffy    |  24 | Indore    |          |\n+----+----------+-----+-----------+----------+\n```\n\n下面是 **IS NOT NULL** 运算符的用法：\n\n```\nSQL> SELECT  ID, NAME, AGE, ADDRESS, SALARY\n     FROM CUSTOMERS\n     WHERE SALARY IS NOT NULL;\n```\n\n上面语句的运行结果如下：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n+----+----------+-----+-----------+----------+\n```\n\n下面是 **IS NULL** 运算符的用法：\n\n```\nSQL> SELECT  ID, NAME, AGE, ADDRESS, SALARY\n     FROM CUSTOMERS\n     WHERE SALARY IS NULL;\n```\n\n其运行结果如下：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  6 | Komal    |  22 | MP        |          |\n|  7 | Muffy    |  24 | Indore    |          |\n+----+----------+-----+-----------+----------+\n```\n","source":"wiki/sql/sentence/kongzhi.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL 空值\norder: 10\n---\n\n## 什么是SQL NULL值？\n\n------\n\nSQL 中，**NULL** 用于表示缺失的值。数据表中的 NULL 值表示该值所处的字段为空。\n\n具有NULL值的字段是没有值的字段。\n\n如果表中的字段是可选的，则可以插入新记录或更新记录而不向该字段添加值。然后，该字段将被保存为NULL值。\n\n值为 NULL 的字段没有值。尤其要明白的是，NULL 值与 0 或者包含空白（spaces）的字段是不同的。\n\n> **注意**：理解NULL值与零值或包含空格的字段不同是非常重要的。具有NULL值的字段是在记录创建期间留空的字段！\n\n## 如何测试NULL值？\n\n------\n\n使用比较运算符（例如=，<或<>）来测试NULL值是不可行的。\n\n我们将不得不使用IS NULL和IS NOT NULL运算符。\n\n### IS NULL语法\n\n```\nSELECT column_names\nFROM table_name\nWHERE column_name IS NULL;\n```\n\n### IS NOT NULL语法\n\n```\nSELECT column_names\nFROM table_name\nWHERE column_name IS NOT NULL;\n```\n\n## 演示数据库\n\n------\n\n假设我们有以下的\"人员\"表：\n\n| ID   | LastName | FirstName | Address            | City     |\n| :--- | :------- | :-------- | :----------------- | :------- |\n| 1    | Doe      | John      | 542 W. 27th Street | New York |\n| 2    | Bloggs   | Joe       |                    | London   |\n| 3    | Roe      | Jane      |                    | New York |\n| 4    | Smith    | John      | 110 Bishopsgate    | London   |\n\n假设\"人员\"表中的\"Address\"列是可选的。如果插入的记录没有\"Address\"值，则\"Address\"列将以空值保存。\n\n## IS NULL运算符\n\n------\n\n以下SQL语句使用IS NULL运算符来列出所有没有地址的人员：\n\n```\nSELECT LastName, FirstName, Address FROM Persons\nWHERE Address IS NULL;\n```\n\n结果集将如下所示：\n\n| LastName | FirstName | Address |\n| :------- | :-------- | :------ |\n| Bloggs   | Joe       |         |\n| Roe      | Jane      |         |\n\n> **提示**：始终使用IS NULL来查找空值。\n\n## IS NOT NULL运算符\n\n------\n\n以下SQL语句使用IS NOT NULL运算符来列出所有具有地址的人员：\n\n```\nSELECT LastName, FirstName, Address FROM Persons\nWHERE Address IS NOT NULL;\n```\n\n结果集将如下所示：\n\n| LastName | FirstName | Address            |\n| :------- | :-------- | :----------------- |\n| Doe      | John      | 542 W. 27th Street |\n| Smith    | John      | 110 Bishopsgate    |\n\n## 语法：\n\n------\n\n创建表的时候，NULL 的基本语法如下：\n\n```\nSQL> CREATE TABLE CUSTOMERS(\n   ID   INT              NOT NULL,\n   NAME VARCHAR (20)     NOT NULL,\n   AGE  INT              NOT NULL,\n   ADDRESS  CHAR (25) ,\n   SALARY   DECIMAL (18, 2),       \n   PRIMARY KEY (ID)\n);\n```\n\n这里，**NOT NULL**表示对于给定列，必须按照其数据类型明确赋值。有两列并没有使用 NOT NULL 来限定，也就是说这些列可以为 NULL。\n\n值为 NULL 的字段是在记录创建的过程中留空的字段。\n\n## 示例：\n\n------\n\nNULL 值会给选取数据带来麻烦。不过，因为 NULL 和其他任何值作比较，其结果总是未知的，所以含有 NULL 的记录不会包含在最终结果里面。\n\n必须使用 **IS NULL** 或者 **IS NOT NULL** 来检测某个字段是否为 NULL。\n\n考虑下面的 CUSTOMERS 数据表，里面包含的记录如下所示：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n|  6 | Komal    |  22 | MP        |          |\n|  7 | Muffy    |  24 | Indore    |          |\n+----+----------+-----+-----------+----------+\n```\n\n下面是 **IS NOT NULL** 运算符的用法：\n\n```\nSQL> SELECT  ID, NAME, AGE, ADDRESS, SALARY\n     FROM CUSTOMERS\n     WHERE SALARY IS NOT NULL;\n```\n\n上面语句的运行结果如下：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |\n|  2 | Khilan   |  25 | Delhi     |  1500.00 |\n|  3 | kaushik  |  23 | Kota      |  2000.00 |\n|  4 | Chaitali |  25 | Mumbai    |  6500.00 |\n|  5 | Hardik   |  27 | Bhopal    |  8500.00 |\n+----+----------+-----+-----------+----------+\n```\n\n下面是 **IS NULL** 运算符的用法：\n\n```\nSQL> SELECT  ID, NAME, AGE, ADDRESS, SALARY\n     FROM CUSTOMERS\n     WHERE SALARY IS NULL;\n```\n\n其运行结果如下：\n\n```\n+----+----------+-----+-----------+----------+\n| ID | NAME     | AGE | ADDRESS   | SALARY   |\n+----+----------+-----+-----------+----------+\n|  6 | Komal    |  22 | MP        |          |\n|  7 | Muffy    |  24 | Indore    |          |\n+----+----------+-----+-----------+----------+\n```\n","date":"2025-06-11T07:10:48.448Z","updated":"2025-06-10T14:09:57.218Z","path":"wiki/sql/sentence/kongzhi.html","comments":1,"_id":"cmbrn2fo5000l44x00954faqo","content":"<h2 id=\"什么是SQL-NULL值？\"><a href=\"#什么是SQL-NULL值？\" class=\"headerlink\" title=\"什么是SQL NULL值？\"></a>什么是SQL NULL值？</h2><hr>\n<p>SQL 中，<strong>NULL</strong> 用于表示缺失的值。数据表中的 NULL 值表示该值所处的字段为空。</p>\n<p>具有NULL值的字段是没有值的字段。</p>\n<p>如果表中的字段是可选的，则可以插入新记录或更新记录而不向该字段添加值。然后，该字段将被保存为NULL值。</p>\n<p>值为 NULL 的字段没有值。尤其要明白的是，NULL 值与 0 或者包含空白（spaces）的字段是不同的。</p>\n<blockquote>\n<p><strong>注意</strong>：理解NULL值与零值或包含空格的字段不同是非常重要的。具有NULL值的字段是在记录创建期间留空的字段！</p>\n</blockquote>\n<h2 id=\"如何测试NULL值？\"><a href=\"#如何测试NULL值？\" class=\"headerlink\" title=\"如何测试NULL值？\"></a>如何测试NULL值？</h2><hr>\n<p>使用比较运算符（例如&#x3D;，&lt;或&lt;&gt;）来测试NULL值是不可行的。</p>\n<p>我们将不得不使用IS NULL和IS NOT NULL运算符。</p>\n<h3 id=\"IS-NULL语法\"><a href=\"#IS-NULL语法\" class=\"headerlink\" title=\"IS NULL语法\"></a>IS NULL语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_names</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE column_name IS NULL;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"IS-NOT-NULL语法\"><a href=\"#IS-NOT-NULL语法\" class=\"headerlink\" title=\"IS NOT NULL语法\"></a>IS NOT NULL语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_names</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE column_name IS NOT NULL;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>假设我们有以下的”人员”表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">ID</th>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Doe</td>\n<td align=\"left\">John</td>\n<td align=\"left\">542 W. 27th Street</td>\n<td align=\"left\">New York</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Bloggs</td>\n<td align=\"left\">Joe</td>\n<td align=\"left\"></td>\n<td align=\"left\">London</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Roe</td>\n<td align=\"left\">Jane</td>\n<td align=\"left\"></td>\n<td align=\"left\">New York</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Smith</td>\n<td align=\"left\">John</td>\n<td align=\"left\">110 Bishopsgate</td>\n<td align=\"left\">London</td>\n</tr>\n</tbody></table>\n<p>假设”人员”表中的”Address”列是可选的。如果插入的记录没有”Address”值，则”Address”列将以空值保存。</p>\n<h2 id=\"IS-NULL运算符\"><a href=\"#IS-NULL运算符\" class=\"headerlink\" title=\"IS NULL运算符\"></a>IS NULL运算符</h2><hr>\n<p>以下SQL语句使用IS NULL运算符来列出所有没有地址的人员：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LastName, FirstName, Address FROM Persons</span><br><span class=\"line\">WHERE Address IS NULL;</span><br></pre></td></tr></table></figure>\n\n<p>结果集将如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Bloggs</td>\n<td align=\"left\">Joe</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Roe</td>\n<td align=\"left\">Jane</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>提示</strong>：始终使用IS NULL来查找空值。</p>\n</blockquote>\n<h2 id=\"IS-NOT-NULL运算符\"><a href=\"#IS-NOT-NULL运算符\" class=\"headerlink\" title=\"IS NOT NULL运算符\"></a>IS NOT NULL运算符</h2><hr>\n<p>以下SQL语句使用IS NOT NULL运算符来列出所有具有地址的人员：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LastName, FirstName, Address FROM Persons</span><br><span class=\"line\">WHERE Address IS NOT NULL;</span><br></pre></td></tr></table></figure>\n\n<p>结果集将如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Doe</td>\n<td align=\"left\">John</td>\n<td align=\"left\">542 W. 27th Street</td>\n</tr>\n<tr>\n<td align=\"left\">Smith</td>\n<td align=\"left\">John</td>\n<td align=\"left\">110 Bishopsgate</td>\n</tr>\n</tbody></table>\n<h2 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h2><hr>\n<p>创建表的时候，NULL 的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; CREATE TABLE CUSTOMERS(</span><br><span class=\"line\">   ID   INT              NOT NULL,</span><br><span class=\"line\">   NAME VARCHAR (20)     NOT NULL,</span><br><span class=\"line\">   AGE  INT              NOT NULL,</span><br><span class=\"line\">   ADDRESS  CHAR (25) ,</span><br><span class=\"line\">   SALARY   DECIMAL (18, 2),       </span><br><span class=\"line\">   PRIMARY KEY (ID)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>这里，<strong>NOT NULL</strong>表示对于给定列，必须按照其数据类型明确赋值。有两列并没有使用 NOT NULL 来限定，也就是说这些列可以为 NULL。</p>\n<p>值为 NULL 的字段是在记录创建的过程中留空的字段。</p>\n<h2 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h2><hr>\n<p>NULL 值会给选取数据带来麻烦。不过，因为 NULL 和其他任何值作比较，其结果总是未知的，所以含有 NULL 的记录不会包含在最终结果里面。</p>\n<p>必须使用 <strong>IS NULL</strong> 或者 <strong>IS NOT NULL</strong> 来检测某个字段是否为 NULL。</p>\n<p>考虑下面的 CUSTOMERS 数据表，里面包含的记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |          |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    |          |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>下面是 <strong>IS NOT NULL</strong> 运算符的用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID, NAME, AGE, ADDRESS, SALARY</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     WHERE SALARY IS NOT NULL;</span><br></pre></td></tr></table></figure>\n\n<p>上面语句的运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>下面是 <strong>IS NULL</strong> 运算符的用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID, NAME, AGE, ADDRESS, SALARY</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     WHERE SALARY IS NULL;</span><br></pre></td></tr></table></figure>\n\n<p>其运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |          |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    |          |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"什么是SQL-NULL值？\"><a href=\"#什么是SQL-NULL值？\" class=\"headerlink\" title=\"什么是SQL NULL值？\"></a>什么是SQL NULL值？</h2><hr>\n<p>SQL 中，<strong>NULL</strong> 用于表示缺失的值。数据表中的 NULL 值表示该值所处的字段为空。</p>\n<p>具有NULL值的字段是没有值的字段。</p>\n<p>如果表中的字段是可选的，则可以插入新记录或更新记录而不向该字段添加值。然后，该字段将被保存为NULL值。</p>\n<p>值为 NULL 的字段没有值。尤其要明白的是，NULL 值与 0 或者包含空白（spaces）的字段是不同的。</p>\n<blockquote>\n<p><strong>注意</strong>：理解NULL值与零值或包含空格的字段不同是非常重要的。具有NULL值的字段是在记录创建期间留空的字段！</p>\n</blockquote>\n<h2 id=\"如何测试NULL值？\"><a href=\"#如何测试NULL值？\" class=\"headerlink\" title=\"如何测试NULL值？\"></a>如何测试NULL值？</h2><hr>\n<p>使用比较运算符（例如&#x3D;，&lt;或&lt;&gt;）来测试NULL值是不可行的。</p>\n<p>我们将不得不使用IS NULL和IS NOT NULL运算符。</p>\n<h3 id=\"IS-NULL语法\"><a href=\"#IS-NULL语法\" class=\"headerlink\" title=\"IS NULL语法\"></a>IS NULL语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_names</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE column_name IS NULL;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"IS-NOT-NULL语法\"><a href=\"#IS-NOT-NULL语法\" class=\"headerlink\" title=\"IS NOT NULL语法\"></a>IS NOT NULL语法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT column_names</span><br><span class=\"line\">FROM table_name</span><br><span class=\"line\">WHERE column_name IS NOT NULL;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"演示数据库\"><a href=\"#演示数据库\" class=\"headerlink\" title=\"演示数据库\"></a>演示数据库</h2><hr>\n<p>假设我们有以下的”人员”表：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">ID</th>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n<th align=\"left\">City</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Doe</td>\n<td align=\"left\">John</td>\n<td align=\"left\">542 W. 27th Street</td>\n<td align=\"left\">New York</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Bloggs</td>\n<td align=\"left\">Joe</td>\n<td align=\"left\"></td>\n<td align=\"left\">London</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Roe</td>\n<td align=\"left\">Jane</td>\n<td align=\"left\"></td>\n<td align=\"left\">New York</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Smith</td>\n<td align=\"left\">John</td>\n<td align=\"left\">110 Bishopsgate</td>\n<td align=\"left\">London</td>\n</tr>\n</tbody></table>\n<p>假设”人员”表中的”Address”列是可选的。如果插入的记录没有”Address”值，则”Address”列将以空值保存。</p>\n<h2 id=\"IS-NULL运算符\"><a href=\"#IS-NULL运算符\" class=\"headerlink\" title=\"IS NULL运算符\"></a>IS NULL运算符</h2><hr>\n<p>以下SQL语句使用IS NULL运算符来列出所有没有地址的人员：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LastName, FirstName, Address FROM Persons</span><br><span class=\"line\">WHERE Address IS NULL;</span><br></pre></td></tr></table></figure>\n\n<p>结果集将如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Bloggs</td>\n<td align=\"left\">Joe</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">Roe</td>\n<td align=\"left\">Jane</td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>提示</strong>：始终使用IS NULL来查找空值。</p>\n</blockquote>\n<h2 id=\"IS-NOT-NULL运算符\"><a href=\"#IS-NOT-NULL运算符\" class=\"headerlink\" title=\"IS NOT NULL运算符\"></a>IS NOT NULL运算符</h2><hr>\n<p>以下SQL语句使用IS NOT NULL运算符来列出所有具有地址的人员：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT LastName, FirstName, Address FROM Persons</span><br><span class=\"line\">WHERE Address IS NOT NULL;</span><br></pre></td></tr></table></figure>\n\n<p>结果集将如下所示：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">LastName</th>\n<th align=\"left\">FirstName</th>\n<th align=\"left\">Address</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Doe</td>\n<td align=\"left\">John</td>\n<td align=\"left\">542 W. 27th Street</td>\n</tr>\n<tr>\n<td align=\"left\">Smith</td>\n<td align=\"left\">John</td>\n<td align=\"left\">110 Bishopsgate</td>\n</tr>\n</tbody></table>\n<h2 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h2><hr>\n<p>创建表的时候，NULL 的基本语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; CREATE TABLE CUSTOMERS(</span><br><span class=\"line\">   ID   INT              NOT NULL,</span><br><span class=\"line\">   NAME VARCHAR (20)     NOT NULL,</span><br><span class=\"line\">   AGE  INT              NOT NULL,</span><br><span class=\"line\">   ADDRESS  CHAR (25) ,</span><br><span class=\"line\">   SALARY   DECIMAL (18, 2),       </span><br><span class=\"line\">   PRIMARY KEY (ID)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p>这里，<strong>NOT NULL</strong>表示对于给定列，必须按照其数据类型明确赋值。有两列并没有使用 NOT NULL 来限定，也就是说这些列可以为 NULL。</p>\n<p>值为 NULL 的字段是在记录创建的过程中留空的字段。</p>\n<h2 id=\"示例：\"><a href=\"#示例：\" class=\"headerlink\" title=\"示例：\"></a>示例：</h2><hr>\n<p>NULL 值会给选取数据带来麻烦。不过，因为 NULL 和其他任何值作比较，其结果总是未知的，所以含有 NULL 的记录不会包含在最终结果里面。</p>\n<p>必须使用 <strong>IS NULL</strong> 或者 <strong>IS NOT NULL</strong> 来检测某个字段是否为 NULL。</p>\n<p>考虑下面的 CUSTOMERS 数据表，里面包含的记录如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |          |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    |          |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>下面是 <strong>IS NOT NULL</strong> 运算符的用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID, NAME, AGE, ADDRESS, SALARY</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     WHERE SALARY IS NOT NULL;</span><br></pre></td></tr></table></figure>\n\n<p>上面语句的运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |</span><br><span class=\"line\">|  2 | Khilan   |  25 | Delhi     |  1500.00 |</span><br><span class=\"line\">|  3 | kaushik  |  23 | Kota      |  2000.00 |</span><br><span class=\"line\">|  4 | Chaitali |  25 | Mumbai    |  6500.00 |</span><br><span class=\"line\">|  5 | Hardik   |  27 | Bhopal    |  8500.00 |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n\n<p>下面是 <strong>IS NULL</strong> 运算符的用法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SQL&gt; SELECT  ID, NAME, AGE, ADDRESS, SALARY</span><br><span class=\"line\">     FROM CUSTOMERS</span><br><span class=\"line\">     WHERE SALARY IS NULL;</span><br></pre></td></tr></table></figure>\n\n<p>其运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">| ID | NAME     | AGE | ADDRESS   | SALARY   |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br><span class=\"line\">|  6 | Komal    |  22 | MP        |          |</span><br><span class=\"line\">|  7 | Muffy    |  24 | Indore    |          |</span><br><span class=\"line\">+----+----------+-----+-----------+----------+</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"全面解析SQL存储过程","order":2,"_content":"\n## 全面解析SQL存储过程\n\n------\n\n存储过程(Stored Procedure),是一组为了完成特定功能的SQL 语句，类似一门程序设计语言，也包括了数据类型、流程控制、输入和输出和它自己的函数库。存储过程可以说是一个记录集，它是由一些T-SQL语句组成的代码块，这些T-SQL语句代码像一个方法一样实现一些功能（对单表或多表的增删改查），然后再给这个代码块取一个名字，在用到这个功能的时候调用他就行了。不过SQL存储过程对于一些初学者来说还是比较抽象难理解的，因此本文将由浅至深地剖析SQL存储过程，帮助你学习它。\n\n## 存储过程的优点\n\n------\n\n1. 存储过程只在创造时进行编译，以后每次执行存储过程都不需再重新编译，而一般SQL语句每执行一次就编译一次,所以使用存储过程可提高数据库执行速度，效率要比T-SQL语句高。\n2. 当对数据库进行复杂操作时，可将此复杂操作用存储过程封装起来与数据库提供的事务处理结合一起使用。\n3. 一个存储过程在程序在网络中交互时可以替代大堆的T-SQL语句，所以也能降低网络的通信量，提高通信速率。\n4. 存储过程可以重复使用,可减少数据库开发人员的工作量。\n5. 安全性高,可设定只有某些用户才具有对指定存储过程的使用权\n\n## 存储过程基本语法\n\n```\n--------------创建存储过程-----------------\n\nCREATE PROC [ EDURE ] procedure_name [ ; number ]\n    [ { @parameter data_type }\n        [ VARYING ] [ = default ] [ OUTPUT ]\n    ] [ ,...n ]\n\n[ WITH\n    { RECOMPILE | ENCRYPTION | RECOMPILE , ENCRYPTION } ]\n\n[ FOR REPLICATION ]\n\nAS sql_statement [ ...n ]\n\n--------------调用存储过程-----------------\n\nEXECUTE Procedure_name '' --存储过程如果有参数，后面加参数格式为：@参数名=value，也可直接为参数值value\n\n--------------删除存储过程-----------------\n\ndrop procedure procedure_name    --在存储过程中能调用另外一个存储过程，而不能删除另外一个存储过程\n```\n\n## 创建存储过程的参数\n\n------\n\n1. `procedure_name `：存储过程的名称，在前面加#为局部临时存储过程，加##为全局临时存储过程。\n2. `number`：是可选的整数，用来对同名的过程分组，以便用一条 DROP PROCEDURE 语句即可将同组的过程一起除去。例如，名为 orders 的应用程序使用的过程可以命名为 orderproc;1、orderproc;2 等。DROP PROCEDURE orderproc 语句将除去整个组。如果名称中包含定界标识符，则数字不应包含在标识符中，只应在 procedure_name 前后使用适当的定界符。\n3. `@parameter`：存储过程的参数。可以有一个或多个。用户必须在执行过程时提供每个所声明参数的值（除非定义了该参数的默认值）。存储过程最多可以有 2100 个参数。\n   使用 @ 符号作为第一个字符来指定参数名称。参数名称必须符合标识符的规则。每个过程的参数仅用于该过程本身；相同的参数名称可以用在其它过程中。默认情况下，参数只能代替常量，而不能用于代替表名、列名或其它数据库对象的名称。有关更多信息，请参见 EXECUTE。\n4. `data_type`：参数的数据类型。所有数据类型（包括 text、ntext 和 image）均可以用作存储过程的参数。不过，cursor 数据类型只能用于 OUTPUT 参数。如果指定的数据类型为 cursor，也必须同时指定 VARYING 和 OUTPUT 关键字。有关 SQL Server 提供的数据类型及其语法的更多信息，请参见数据类型。\n   说明对于可以是 cursor 数据类型的输出参数，没有最大数目的限制。\n5. `VARYING`：指定作为输出参数支持的结果集（由存储过程动态构造，内容可以变化）。仅适用于游标参数。\n6. `default`： 参数的默认值。如果定义了默认值，不必指定该参数的值即可执行过程。默认值必须是常量或 NULL。如果过程将对该参数使用 LIKE 关键字，那么默认值中可以包含通配符（%、_、[] 和 [^]）。\n7. `OUTPUT`：表明参数是返回参数。该选项的值可以返回给 EXEC[UTE]。使用 OUTPUT 参数可将信息返回给调用过程。Text、ntext 和 image 参数可用作 OUTPUT 参数。使用 OUTPUT 关键字的输出参数可以是游标占位符。\n8. `RECOMPILE`: 表明 SQL Server 不会缓存该过程的计划，该过程将在运行时重新编译。在使用非典型值或临时值而不希望覆盖缓存在内存中的执行计划时，请使用 RECOMPILE 选项。\n9. `ENCRYPTION`: 表示 SQL Server 加密 syscomments 表中包含 CREATE PROCEDURE 语句文本的条目。使用 ENCRYPTION 可防止将过程作为 SQL Server 复制的一部分发布。 说明在升级过程中，SQL Server 利用存储在 syscomments 中的加密注释来重新创建加密过程。\n10. `FOR REPLICATION`:指定不能在订阅服务器上执行为复制创建的存储过程。.使用 FOR REPLICATION 选项创建的存储过程可用作存储过程筛选，且只能在复制过程中执行。本选项不能和 WITH RECOMPILE 选项一起使用。\n11. AS:指定过程要执行的操作。\n12. `sql_statement`:过程中要包含的任意数目和类型的 Transact-SQL 语句。但有一些限制。\n\n## 实例操作学习\n\n------\n\n下面通过表Student来具体了解一下存储过程，因为是要了解存储过程的简单用法，所以例子很简单。\n\n### **无参数存储过程**\n\n选出Student表中的所有信息\n\n```\ncreate proc StuProc\nas      //此处 as 不可以省略不写\nbegin   //begin 和 end 是一对，不可以只写其中一个，但可以都不写\nselect S#,Sname,Sage,Ssex from student\nend\ngo\n```\n\n### **有参数存储过程**\n\n**　全局变量**\n\n全局变量也称为外部变量，是在函数的外部定义的，它的作用域为从变量定义处开始，到本程序文件的末尾。\n\n选出指定姓名的学生信息:\n\n```\ncreate proc StuProc\n@sname varchar(100)   \nas \nbegin\nselect S#,Sname,Sage,Ssex from student where sname=@sname\nend\ngo\n\nexec StuProc '赵雷'   //执行语句\n```\n\n上面是在外部给变量赋值，也可以在内部直接给变量设置默认值\n\n```\ncreate proc StuProc\n@sname varchar(100)='赵雷'\nas \nbegin\nselect S#,Sname,Sage,Ssex from student where sname=@sname\nend\ngo\n\nexec StuProc\n```\n\n也可以把变量的内容输出，使用output\n\n```\ncreate proc StuProc\n@sname varchar(100),\n@IsRight int  output //传出参数\nas \nif exists (select S#,Sname,Sage,Ssex from student where sname=@sname)\nset @IsRight =1\nelse\nset @IsRight=0\ngo\n\ndeclare @IsRight int \nexec StuProc '赵雷' , @IsRight output\nselect @IsRight\n```\n\n以上是全局变量，下面来了解局部变量\n\n**　局部变量**\n\n局部变量也称为内部变量。局部变量是在函数内作定义说明的。其作用域仅限于函数内部，离开该函数后再使用这种变量是非法的。\n\n**　局部变量的定义**\n\n必须先用Declare命令定以后才可以使用，declare\n\n**　局部变量的赋值方法**\n\nset{@变量名=表达式}或者select\n\n**　局部变量的显示**\n\n```\ncreate proc StuProc\nas \ndeclare @sname varchar(100)\nset @sname='赵雷'\nselect S#,Sname,Sage,Ssex from student where sname=@sname\ngo\n\nexec StuProc\n```\n\n那如果是要把局部变量的数据显示出来怎么办呢？\n\n```\ncreate proc StuProc\nas \ndeclare @sname varchar(100)\nset @sname=(select Sname from student where S#=01)\nselect @sname\ngo\n\nexec StuProc\n```\n\n## 更详细的实例操作学习\n\n------\n\n比如，在SQL Server查询编辑器窗口中用CREATE PROCEDURE语句创建存储过程PROC_InsertEmployee，用于实现向员工信息表（tb_Employee）中添加信息，同时生成自动编号。其SQL语句如下：\n\n```\nIF EXISTS (SELECT name  \n   FROM   sysobjects  \n   WHERE  name = 'Proc_InsertEmployee'  \n   AND          type = 'P') \nDROP PROCEDURE Proc_InsertEmployee \nGO \nCREATE PROCEDURE Proc_InsertEmployee \n@PName nvarchar(50), \n@PSex nvarchar(4), \n@PAge int, \n@PWage money \nAS \nbegin \n   declare @PID nvarchar(50) \n   select @PID=Max(员工编号) from tb_Employee \n   if(@PID is null) \n       set @PID='P1001' \n   else \n       set @PID='P'+cast(cast(substring(@PID,2,4) as int)+1 as nvarchar(50)) \n   begin \n       insert into tb_Employee values(@PID,@PName,@PSex,@PAge,@PWage) \n   end \nend \ngo\n```\n\n### **存储过程的修改**\n\n创建完存储过程之后，如果需要重新修改存储过程的功能及参数，可以在SQL Server 2005中通过以下两种方法进行修改：一种是用Microsoft SQL Server Mangement修改存储过程；另外一种是用T-SQL语句修改存储过程。\n\n**　使用Microsoft SQL Server Mangement修改存储过程，步骤如下：**\n　（1）在SQL Server Management Studio的\"对象资源管理器\"中，选择要修改存储过程所在的数据库（如：db_18），然后在该数据库下，选择\"可编程性\"。\n　（2）打开\"存储过程\"文件夹，右键单击要修改的存储过程（如：PROC_SEINFO），在弹出的快捷菜单中选择\"修改\"命令，将会出现查询编辑器窗口。用户可以在此窗口中编辑T-SQL代码，完成编辑后，单击工具栏中的\"执行（X）\"按钮，执行修改代码。用户可以在查询编辑器下方的Message窗口中看到执行结果信息。\n\n**　使用Transact-SQL修改存储过程：**\n　使用ALTER PROCEDURE语句修改存储过程，它不会影响存储过程的权限设定，也不会更改存储过程的名称。\n\n语法：\n\n```\nALTER PROC [ EDURE ] procedure_name [ ; number ] \n    [ { @parameter data_type }  \n         [ VARYING ] [ = default ] [ OUTPUT ] \n    ] [ ,...n ]  \n[ WITH \n    { RECOMPILE | ENCRYPTION \n        | RECOMPILE , ENCRYPTION   }  \n] \n[ FOR REPLICATION ]  \nAS \n    sql_statement [ ...n ]\n```\n\n### **参数说明**\n\nprocedure_name：是要更改的存储过程的名称。\n\n交叉链接：关于ALTER PROCEDURE语句的其他参数与CREATE PROCEDURE语句相同，可参见上面的\"创建存储过程的参数\"。\n\n例如，修改存储过程PROC_SEINFO，用于查询年龄大于35的员工信息。SQL语句如下：\n\n```\nALTER PROCEDURE [dbo].[PROC_SEINFO] \nAS \nBEGIN \nSELECT * FROM tb_Employee where 员工年龄>35 \nEND\n```\n\n### **存储过程的删除**\n\n**　使用Microsoft SQL Server Mangement删除存储过程，步骤如下：**\n\n（1）在SQL Server Management Studio的\"对象资源管理器\"中，选择要删除存储过程所在的数据库（如：db_student），然后在该数据库下选择\"可编程性\"。\n\n（2）打开\"存储过程\"文件夹，右键单击要删除的存储过程（如：PROC_SEINFO），在弹出的快捷菜单中选择\"删除\"命令。\n\n（3）单击\"确定\"按钮，即可删除所选定的存储过程。\n\n> **注意：**删除数据表后，并不会删除相关联的存储过程，只是其存储过程无法执行。\n\n**　使用T-SQL删除存储过程：**\n\nDROP PROCEDURE语句用于从当前数据库中删除一个或多个存储过程或过程组。\n\n语法：\n\n```\nDROP PROCEDURE { procedure } [ ,...n ]\n```\n\n参数说明：\n\n- Procedure：是要删除的存储过程或存储过程组的名称。过程名称必须符合标识符规则。可以选择是否指定过程所有者名称，但不能指定服务器名称和数据库名称。\n- n：是表示可以指定多个过程的占位符。\n\n例如删除PROC_SEINFO存储过程的SQL语句如下。\n\n```\nDROP PROCEDURE PROC_SEINFO\n```\n\n例如，删除多个存储过程proc10、proc20和proc30。\n\n```\nDROP PROCEDURE proc10, proc20, proc30\n```\n\n例如，删除存储过程组procs（其中包含存储过程proc1、proc2、proc3）。\n\n```\nDROP PROCEDURE procs\n```\n\n> **注意：**SQL语句DROP不能删除存储过程组中的单个存储过程。\n\n### **应用存储过程验证用户登录身份：**\n\n目前，验证用户登录身份的方法有多种，而通过调用存储过程来实现用户身份验证是目前最好的解决方案之一。因为存储过程在创建时即在服务器上进行编译，所以执行起来比单个SQL语句要快得多。\n\n本例是通过调用存储过程来验证用户登录的用户名和密码是否正确。运行本实例，在\"用户名\"和\"密码\"文本框中输入相应的用户名和密码，单击\"登录\"按钮即可。\n\n程序开发步骤：\n\n（1）新建一个网站，将其命名为\"index\"，默认主页名为Default.aspx。\n\n（2）Default.aspx页面涉及到的控件如表1所示。\n\n（3）主要程序代码如下。\n　打开SQL Server Management Studio，并连接到SQL Server2005中的数据库。单击工具栏中\" \"按钮，新建查询编辑器。在该查询编辑器中，创建验证登录用户身份的存储过程PROC_EXISTS，具体的SQL语句如下：\n\n```\nCREATE PROC PROC_EXISTS \n( \n@UserName NVARCHAR(20), \n@PassWord NVARCHAR(20), \n@ReturnValue int OUTPUT \n) \nAS \nIF EXISTS(select * from tb_member where userName=@UserName AND passWord=@PassWord) \n       set @ReturnValue= 100 \nELSE \n       set @ReturnValue= -100 \nGO\n```\n\n在\"登录\"按钮的Click事件下，执行验证登录用户身份的存储过程，如果输入的用户名和密码正确，则弹出对话框提示用户登录成功，代码如下：\n\n```\nprotected void btnLogin_Click(object sender, EventArgs e) \n    { \n        //连接数据库 \n        myConn = new SqlConnection(ConfigurationManager.AppSettings[\"ConnectionString\"].ToString()); \n        myCmd = new SqlCommand(\"PROC_EXISTS\", myConn);   //调用存储过程，判断用户是否存在\n        myCmd.CommandType = CommandType.StoredProcedure; \n        //为存储过程的参数赋值 \n        SqlParameter userName=new SqlParameter(\"@UserName\", SqlDbType.NVarChar, 20); \n        userName.Value=this.txtName.Text.Trim(); \n        myCmd.Parameters.Add(userName); \n        SqlParameter passWord=new SqlParameter(\"@PassWord\", SqlDbType.NVarChar, 20); \n        passWord.Value = this.txtPassword.Text.Trim(); \n        myCmd.Parameters.Add(passWord); \n        //指出该参数是存储过程的OUTPUT参数 \n        SqlParameter ReturnValue = new SqlParameter(\"@ReturnValue\",SqlDbType.Int ,4); \n        ReturnValue.Direction = ParameterDirection.Output; \n        myCmd.Parameters.Add(ReturnValue); \n        try \n        { \n            myConn.Open(); \n            myCmd.ExecuteNonQuery(); \n            if (int.Parse(ReturnValue.Value.ToString()) == 100) \n            { \n                Response.Write(\"<script>alert('您是合法用户，登录成功！')</script>\"); \n                return; \n            } \n            else \n            { \n                Response.Write(\"<script>alert('您输入的用户名和密码不正确，请重新输入！')</script>\"); \n                return; \n            } \n        } \n        catch(Exception ex) \n        { \n            Response.Write(ex.Message.ToString()); \n        } \n        finally \n        { \n            myConn.Close(); \n            myConn.Dispose(); \n            myCmd.Dispose(); \n        }}\n```\n","source":"wiki/sql/summary/storage.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: 全面解析SQL存储过程\norder: 2\n---\n\n## 全面解析SQL存储过程\n\n------\n\n存储过程(Stored Procedure),是一组为了完成特定功能的SQL 语句，类似一门程序设计语言，也包括了数据类型、流程控制、输入和输出和它自己的函数库。存储过程可以说是一个记录集，它是由一些T-SQL语句组成的代码块，这些T-SQL语句代码像一个方法一样实现一些功能（对单表或多表的增删改查），然后再给这个代码块取一个名字，在用到这个功能的时候调用他就行了。不过SQL存储过程对于一些初学者来说还是比较抽象难理解的，因此本文将由浅至深地剖析SQL存储过程，帮助你学习它。\n\n## 存储过程的优点\n\n------\n\n1. 存储过程只在创造时进行编译，以后每次执行存储过程都不需再重新编译，而一般SQL语句每执行一次就编译一次,所以使用存储过程可提高数据库执行速度，效率要比T-SQL语句高。\n2. 当对数据库进行复杂操作时，可将此复杂操作用存储过程封装起来与数据库提供的事务处理结合一起使用。\n3. 一个存储过程在程序在网络中交互时可以替代大堆的T-SQL语句，所以也能降低网络的通信量，提高通信速率。\n4. 存储过程可以重复使用,可减少数据库开发人员的工作量。\n5. 安全性高,可设定只有某些用户才具有对指定存储过程的使用权\n\n## 存储过程基本语法\n\n```\n--------------创建存储过程-----------------\n\nCREATE PROC [ EDURE ] procedure_name [ ; number ]\n    [ { @parameter data_type }\n        [ VARYING ] [ = default ] [ OUTPUT ]\n    ] [ ,...n ]\n\n[ WITH\n    { RECOMPILE | ENCRYPTION | RECOMPILE , ENCRYPTION } ]\n\n[ FOR REPLICATION ]\n\nAS sql_statement [ ...n ]\n\n--------------调用存储过程-----------------\n\nEXECUTE Procedure_name '' --存储过程如果有参数，后面加参数格式为：@参数名=value，也可直接为参数值value\n\n--------------删除存储过程-----------------\n\ndrop procedure procedure_name    --在存储过程中能调用另外一个存储过程，而不能删除另外一个存储过程\n```\n\n## 创建存储过程的参数\n\n------\n\n1. `procedure_name `：存储过程的名称，在前面加#为局部临时存储过程，加##为全局临时存储过程。\n2. `number`：是可选的整数，用来对同名的过程分组，以便用一条 DROP PROCEDURE 语句即可将同组的过程一起除去。例如，名为 orders 的应用程序使用的过程可以命名为 orderproc;1、orderproc;2 等。DROP PROCEDURE orderproc 语句将除去整个组。如果名称中包含定界标识符，则数字不应包含在标识符中，只应在 procedure_name 前后使用适当的定界符。\n3. `@parameter`：存储过程的参数。可以有一个或多个。用户必须在执行过程时提供每个所声明参数的值（除非定义了该参数的默认值）。存储过程最多可以有 2100 个参数。\n   使用 @ 符号作为第一个字符来指定参数名称。参数名称必须符合标识符的规则。每个过程的参数仅用于该过程本身；相同的参数名称可以用在其它过程中。默认情况下，参数只能代替常量，而不能用于代替表名、列名或其它数据库对象的名称。有关更多信息，请参见 EXECUTE。\n4. `data_type`：参数的数据类型。所有数据类型（包括 text、ntext 和 image）均可以用作存储过程的参数。不过，cursor 数据类型只能用于 OUTPUT 参数。如果指定的数据类型为 cursor，也必须同时指定 VARYING 和 OUTPUT 关键字。有关 SQL Server 提供的数据类型及其语法的更多信息，请参见数据类型。\n   说明对于可以是 cursor 数据类型的输出参数，没有最大数目的限制。\n5. `VARYING`：指定作为输出参数支持的结果集（由存储过程动态构造，内容可以变化）。仅适用于游标参数。\n6. `default`： 参数的默认值。如果定义了默认值，不必指定该参数的值即可执行过程。默认值必须是常量或 NULL。如果过程将对该参数使用 LIKE 关键字，那么默认值中可以包含通配符（%、_、[] 和 [^]）。\n7. `OUTPUT`：表明参数是返回参数。该选项的值可以返回给 EXEC[UTE]。使用 OUTPUT 参数可将信息返回给调用过程。Text、ntext 和 image 参数可用作 OUTPUT 参数。使用 OUTPUT 关键字的输出参数可以是游标占位符。\n8. `RECOMPILE`: 表明 SQL Server 不会缓存该过程的计划，该过程将在运行时重新编译。在使用非典型值或临时值而不希望覆盖缓存在内存中的执行计划时，请使用 RECOMPILE 选项。\n9. `ENCRYPTION`: 表示 SQL Server 加密 syscomments 表中包含 CREATE PROCEDURE 语句文本的条目。使用 ENCRYPTION 可防止将过程作为 SQL Server 复制的一部分发布。 说明在升级过程中，SQL Server 利用存储在 syscomments 中的加密注释来重新创建加密过程。\n10. `FOR REPLICATION`:指定不能在订阅服务器上执行为复制创建的存储过程。.使用 FOR REPLICATION 选项创建的存储过程可用作存储过程筛选，且只能在复制过程中执行。本选项不能和 WITH RECOMPILE 选项一起使用。\n11. AS:指定过程要执行的操作。\n12. `sql_statement`:过程中要包含的任意数目和类型的 Transact-SQL 语句。但有一些限制。\n\n## 实例操作学习\n\n------\n\n下面通过表Student来具体了解一下存储过程，因为是要了解存储过程的简单用法，所以例子很简单。\n\n### **无参数存储过程**\n\n选出Student表中的所有信息\n\n```\ncreate proc StuProc\nas      //此处 as 不可以省略不写\nbegin   //begin 和 end 是一对，不可以只写其中一个，但可以都不写\nselect S#,Sname,Sage,Ssex from student\nend\ngo\n```\n\n### **有参数存储过程**\n\n**　全局变量**\n\n全局变量也称为外部变量，是在函数的外部定义的，它的作用域为从变量定义处开始，到本程序文件的末尾。\n\n选出指定姓名的学生信息:\n\n```\ncreate proc StuProc\n@sname varchar(100)   \nas \nbegin\nselect S#,Sname,Sage,Ssex from student where sname=@sname\nend\ngo\n\nexec StuProc '赵雷'   //执行语句\n```\n\n上面是在外部给变量赋值，也可以在内部直接给变量设置默认值\n\n```\ncreate proc StuProc\n@sname varchar(100)='赵雷'\nas \nbegin\nselect S#,Sname,Sage,Ssex from student where sname=@sname\nend\ngo\n\nexec StuProc\n```\n\n也可以把变量的内容输出，使用output\n\n```\ncreate proc StuProc\n@sname varchar(100),\n@IsRight int  output //传出参数\nas \nif exists (select S#,Sname,Sage,Ssex from student where sname=@sname)\nset @IsRight =1\nelse\nset @IsRight=0\ngo\n\ndeclare @IsRight int \nexec StuProc '赵雷' , @IsRight output\nselect @IsRight\n```\n\n以上是全局变量，下面来了解局部变量\n\n**　局部变量**\n\n局部变量也称为内部变量。局部变量是在函数内作定义说明的。其作用域仅限于函数内部，离开该函数后再使用这种变量是非法的。\n\n**　局部变量的定义**\n\n必须先用Declare命令定以后才可以使用，declare\n\n**　局部变量的赋值方法**\n\nset{@变量名=表达式}或者select\n\n**　局部变量的显示**\n\n```\ncreate proc StuProc\nas \ndeclare @sname varchar(100)\nset @sname='赵雷'\nselect S#,Sname,Sage,Ssex from student where sname=@sname\ngo\n\nexec StuProc\n```\n\n那如果是要把局部变量的数据显示出来怎么办呢？\n\n```\ncreate proc StuProc\nas \ndeclare @sname varchar(100)\nset @sname=(select Sname from student where S#=01)\nselect @sname\ngo\n\nexec StuProc\n```\n\n## 更详细的实例操作学习\n\n------\n\n比如，在SQL Server查询编辑器窗口中用CREATE PROCEDURE语句创建存储过程PROC_InsertEmployee，用于实现向员工信息表（tb_Employee）中添加信息，同时生成自动编号。其SQL语句如下：\n\n```\nIF EXISTS (SELECT name  \n   FROM   sysobjects  \n   WHERE  name = 'Proc_InsertEmployee'  \n   AND          type = 'P') \nDROP PROCEDURE Proc_InsertEmployee \nGO \nCREATE PROCEDURE Proc_InsertEmployee \n@PName nvarchar(50), \n@PSex nvarchar(4), \n@PAge int, \n@PWage money \nAS \nbegin \n   declare @PID nvarchar(50) \n   select @PID=Max(员工编号) from tb_Employee \n   if(@PID is null) \n       set @PID='P1001' \n   else \n       set @PID='P'+cast(cast(substring(@PID,2,4) as int)+1 as nvarchar(50)) \n   begin \n       insert into tb_Employee values(@PID,@PName,@PSex,@PAge,@PWage) \n   end \nend \ngo\n```\n\n### **存储过程的修改**\n\n创建完存储过程之后，如果需要重新修改存储过程的功能及参数，可以在SQL Server 2005中通过以下两种方法进行修改：一种是用Microsoft SQL Server Mangement修改存储过程；另外一种是用T-SQL语句修改存储过程。\n\n**　使用Microsoft SQL Server Mangement修改存储过程，步骤如下：**\n　（1）在SQL Server Management Studio的\"对象资源管理器\"中，选择要修改存储过程所在的数据库（如：db_18），然后在该数据库下，选择\"可编程性\"。\n　（2）打开\"存储过程\"文件夹，右键单击要修改的存储过程（如：PROC_SEINFO），在弹出的快捷菜单中选择\"修改\"命令，将会出现查询编辑器窗口。用户可以在此窗口中编辑T-SQL代码，完成编辑后，单击工具栏中的\"执行（X）\"按钮，执行修改代码。用户可以在查询编辑器下方的Message窗口中看到执行结果信息。\n\n**　使用Transact-SQL修改存储过程：**\n　使用ALTER PROCEDURE语句修改存储过程，它不会影响存储过程的权限设定，也不会更改存储过程的名称。\n\n语法：\n\n```\nALTER PROC [ EDURE ] procedure_name [ ; number ] \n    [ { @parameter data_type }  \n         [ VARYING ] [ = default ] [ OUTPUT ] \n    ] [ ,...n ]  \n[ WITH \n    { RECOMPILE | ENCRYPTION \n        | RECOMPILE , ENCRYPTION   }  \n] \n[ FOR REPLICATION ]  \nAS \n    sql_statement [ ...n ]\n```\n\n### **参数说明**\n\nprocedure_name：是要更改的存储过程的名称。\n\n交叉链接：关于ALTER PROCEDURE语句的其他参数与CREATE PROCEDURE语句相同，可参见上面的\"创建存储过程的参数\"。\n\n例如，修改存储过程PROC_SEINFO，用于查询年龄大于35的员工信息。SQL语句如下：\n\n```\nALTER PROCEDURE [dbo].[PROC_SEINFO] \nAS \nBEGIN \nSELECT * FROM tb_Employee where 员工年龄>35 \nEND\n```\n\n### **存储过程的删除**\n\n**　使用Microsoft SQL Server Mangement删除存储过程，步骤如下：**\n\n（1）在SQL Server Management Studio的\"对象资源管理器\"中，选择要删除存储过程所在的数据库（如：db_student），然后在该数据库下选择\"可编程性\"。\n\n（2）打开\"存储过程\"文件夹，右键单击要删除的存储过程（如：PROC_SEINFO），在弹出的快捷菜单中选择\"删除\"命令。\n\n（3）单击\"确定\"按钮，即可删除所选定的存储过程。\n\n> **注意：**删除数据表后，并不会删除相关联的存储过程，只是其存储过程无法执行。\n\n**　使用T-SQL删除存储过程：**\n\nDROP PROCEDURE语句用于从当前数据库中删除一个或多个存储过程或过程组。\n\n语法：\n\n```\nDROP PROCEDURE { procedure } [ ,...n ]\n```\n\n参数说明：\n\n- Procedure：是要删除的存储过程或存储过程组的名称。过程名称必须符合标识符规则。可以选择是否指定过程所有者名称，但不能指定服务器名称和数据库名称。\n- n：是表示可以指定多个过程的占位符。\n\n例如删除PROC_SEINFO存储过程的SQL语句如下。\n\n```\nDROP PROCEDURE PROC_SEINFO\n```\n\n例如，删除多个存储过程proc10、proc20和proc30。\n\n```\nDROP PROCEDURE proc10, proc20, proc30\n```\n\n例如，删除存储过程组procs（其中包含存储过程proc1、proc2、proc3）。\n\n```\nDROP PROCEDURE procs\n```\n\n> **注意：**SQL语句DROP不能删除存储过程组中的单个存储过程。\n\n### **应用存储过程验证用户登录身份：**\n\n目前，验证用户登录身份的方法有多种，而通过调用存储过程来实现用户身份验证是目前最好的解决方案之一。因为存储过程在创建时即在服务器上进行编译，所以执行起来比单个SQL语句要快得多。\n\n本例是通过调用存储过程来验证用户登录的用户名和密码是否正确。运行本实例，在\"用户名\"和\"密码\"文本框中输入相应的用户名和密码，单击\"登录\"按钮即可。\n\n程序开发步骤：\n\n（1）新建一个网站，将其命名为\"index\"，默认主页名为Default.aspx。\n\n（2）Default.aspx页面涉及到的控件如表1所示。\n\n（3）主要程序代码如下。\n　打开SQL Server Management Studio，并连接到SQL Server2005中的数据库。单击工具栏中\" \"按钮，新建查询编辑器。在该查询编辑器中，创建验证登录用户身份的存储过程PROC_EXISTS，具体的SQL语句如下：\n\n```\nCREATE PROC PROC_EXISTS \n( \n@UserName NVARCHAR(20), \n@PassWord NVARCHAR(20), \n@ReturnValue int OUTPUT \n) \nAS \nIF EXISTS(select * from tb_member where userName=@UserName AND passWord=@PassWord) \n       set @ReturnValue= 100 \nELSE \n       set @ReturnValue= -100 \nGO\n```\n\n在\"登录\"按钮的Click事件下，执行验证登录用户身份的存储过程，如果输入的用户名和密码正确，则弹出对话框提示用户登录成功，代码如下：\n\n```\nprotected void btnLogin_Click(object sender, EventArgs e) \n    { \n        //连接数据库 \n        myConn = new SqlConnection(ConfigurationManager.AppSettings[\"ConnectionString\"].ToString()); \n        myCmd = new SqlCommand(\"PROC_EXISTS\", myConn);   //调用存储过程，判断用户是否存在\n        myCmd.CommandType = CommandType.StoredProcedure; \n        //为存储过程的参数赋值 \n        SqlParameter userName=new SqlParameter(\"@UserName\", SqlDbType.NVarChar, 20); \n        userName.Value=this.txtName.Text.Trim(); \n        myCmd.Parameters.Add(userName); \n        SqlParameter passWord=new SqlParameter(\"@PassWord\", SqlDbType.NVarChar, 20); \n        passWord.Value = this.txtPassword.Text.Trim(); \n        myCmd.Parameters.Add(passWord); \n        //指出该参数是存储过程的OUTPUT参数 \n        SqlParameter ReturnValue = new SqlParameter(\"@ReturnValue\",SqlDbType.Int ,4); \n        ReturnValue.Direction = ParameterDirection.Output; \n        myCmd.Parameters.Add(ReturnValue); \n        try \n        { \n            myConn.Open(); \n            myCmd.ExecuteNonQuery(); \n            if (int.Parse(ReturnValue.Value.ToString()) == 100) \n            { \n                Response.Write(\"<script>alert('您是合法用户，登录成功！')</script>\"); \n                return; \n            } \n            else \n            { \n                Response.Write(\"<script>alert('您输入的用户名和密码不正确，请重新输入！')</script>\"); \n                return; \n            } \n        } \n        catch(Exception ex) \n        { \n            Response.Write(ex.Message.ToString()); \n        } \n        finally \n        { \n            myConn.Close(); \n            myConn.Dispose(); \n            myCmd.Dispose(); \n        }}\n```\n","date":"2025-06-11T07:36:39.558Z","updated":"2025-06-11T07:36:39.558Z","path":"wiki/sql/summary/storage.html","comments":1,"_id":"cmbrn2fo7000n44x0g6r03os5","content":"<h2 id=\"全面解析SQL存储过程\"><a href=\"#全面解析SQL存储过程\" class=\"headerlink\" title=\"全面解析SQL存储过程\"></a>全面解析SQL存储过程</h2><hr>\n<p>存储过程(Stored Procedure),是一组为了完成特定功能的SQL 语句，类似一门程序设计语言，也包括了数据类型、流程控制、输入和输出和它自己的函数库。存储过程可以说是一个记录集，它是由一些T-SQL语句组成的代码块，这些T-SQL语句代码像一个方法一样实现一些功能（对单表或多表的增删改查），然后再给这个代码块取一个名字，在用到这个功能的时候调用他就行了。不过SQL存储过程对于一些初学者来说还是比较抽象难理解的，因此本文将由浅至深地剖析SQL存储过程，帮助你学习它。</p>\n<h2 id=\"存储过程的优点\"><a href=\"#存储过程的优点\" class=\"headerlink\" title=\"存储过程的优点\"></a>存储过程的优点</h2><hr>\n<ol>\n<li>存储过程只在创造时进行编译，以后每次执行存储过程都不需再重新编译，而一般SQL语句每执行一次就编译一次,所以使用存储过程可提高数据库执行速度，效率要比T-SQL语句高。</li>\n<li>当对数据库进行复杂操作时，可将此复杂操作用存储过程封装起来与数据库提供的事务处理结合一起使用。</li>\n<li>一个存储过程在程序在网络中交互时可以替代大堆的T-SQL语句，所以也能降低网络的通信量，提高通信速率。</li>\n<li>存储过程可以重复使用,可减少数据库开发人员的工作量。</li>\n<li>安全性高,可设定只有某些用户才具有对指定存储过程的使用权</li>\n</ol>\n<h2 id=\"存储过程基本语法\"><a href=\"#存储过程基本语法\" class=\"headerlink\" title=\"存储过程基本语法\"></a>存储过程基本语法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">--------------创建存储过程-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE PROC [ EDURE ] procedure_name [ ; number ]</span><br><span class=\"line\">    [ &#123; @parameter data_type &#125;</span><br><span class=\"line\">        [ VARYING ] [ = default ] [ OUTPUT ]</span><br><span class=\"line\">    ] [ ,...n ]</span><br><span class=\"line\"></span><br><span class=\"line\">[ WITH</span><br><span class=\"line\">    &#123; RECOMPILE | ENCRYPTION | RECOMPILE , ENCRYPTION &#125; ]</span><br><span class=\"line\"></span><br><span class=\"line\">[ FOR REPLICATION ]</span><br><span class=\"line\"></span><br><span class=\"line\">AS sql_statement [ ...n ]</span><br><span class=\"line\"></span><br><span class=\"line\">--------------调用存储过程-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">EXECUTE Procedure_name &#x27;&#x27; --存储过程如果有参数，后面加参数格式为：@参数名=value，也可直接为参数值value</span><br><span class=\"line\"></span><br><span class=\"line\">--------------删除存储过程-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">drop procedure procedure_name    --在存储过程中能调用另外一个存储过程，而不能删除另外一个存储过程</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建存储过程的参数\"><a href=\"#创建存储过程的参数\" class=\"headerlink\" title=\"创建存储过程的参数\"></a>创建存储过程的参数</h2><hr>\n<ol>\n<li><code>procedure_name </code>：存储过程的名称，在前面加#为局部临时存储过程，加##为全局临时存储过程。</li>\n<li><code>number</code>：是可选的整数，用来对同名的过程分组，以便用一条 DROP PROCEDURE 语句即可将同组的过程一起除去。例如，名为 orders 的应用程序使用的过程可以命名为 orderproc;1、orderproc;2 等。DROP PROCEDURE orderproc 语句将除去整个组。如果名称中包含定界标识符，则数字不应包含在标识符中，只应在 procedure_name 前后使用适当的定界符。</li>\n<li><code>@parameter</code>：存储过程的参数。可以有一个或多个。用户必须在执行过程时提供每个所声明参数的值（除非定义了该参数的默认值）。存储过程最多可以有 2100 个参数。<br>使用 @ 符号作为第一个字符来指定参数名称。参数名称必须符合标识符的规则。每个过程的参数仅用于该过程本身；相同的参数名称可以用在其它过程中。默认情况下，参数只能代替常量，而不能用于代替表名、列名或其它数据库对象的名称。有关更多信息，请参见 EXECUTE。</li>\n<li><code>data_type</code>：参数的数据类型。所有数据类型（包括 text、ntext 和 image）均可以用作存储过程的参数。不过，cursor 数据类型只能用于 OUTPUT 参数。如果指定的数据类型为 cursor，也必须同时指定 VARYING 和 OUTPUT 关键字。有关 SQL Server 提供的数据类型及其语法的更多信息，请参见数据类型。<br>说明对于可以是 cursor 数据类型的输出参数，没有最大数目的限制。</li>\n<li><code>VARYING</code>：指定作为输出参数支持的结果集（由存储过程动态构造，内容可以变化）。仅适用于游标参数。</li>\n<li><code>default</code>： 参数的默认值。如果定义了默认值，不必指定该参数的值即可执行过程。默认值必须是常量或 NULL。如果过程将对该参数使用 LIKE 关键字，那么默认值中可以包含通配符（%、_、[] 和 [^]）。</li>\n<li><code>OUTPUT</code>：表明参数是返回参数。该选项的值可以返回给 EXEC[UTE]。使用 OUTPUT 参数可将信息返回给调用过程。Text、ntext 和 image 参数可用作 OUTPUT 参数。使用 OUTPUT 关键字的输出参数可以是游标占位符。</li>\n<li><code>RECOMPILE</code>: 表明 SQL Server 不会缓存该过程的计划，该过程将在运行时重新编译。在使用非典型值或临时值而不希望覆盖缓存在内存中的执行计划时，请使用 RECOMPILE 选项。</li>\n<li><code>ENCRYPTION</code>: 表示 SQL Server 加密 syscomments 表中包含 CREATE PROCEDURE 语句文本的条目。使用 ENCRYPTION 可防止将过程作为 SQL Server 复制的一部分发布。 说明在升级过程中，SQL Server 利用存储在 syscomments 中的加密注释来重新创建加密过程。</li>\n<li><code>FOR REPLICATION</code>:指定不能在订阅服务器上执行为复制创建的存储过程。.使用 FOR REPLICATION 选项创建的存储过程可用作存储过程筛选，且只能在复制过程中执行。本选项不能和 WITH RECOMPILE 选项一起使用。</li>\n<li>AS:指定过程要执行的操作。</li>\n<li><code>sql_statement</code>:过程中要包含的任意数目和类型的 Transact-SQL 语句。但有一些限制。</li>\n</ol>\n<h2 id=\"实例操作学习\"><a href=\"#实例操作学习\" class=\"headerlink\" title=\"实例操作学习\"></a>实例操作学习</h2><hr>\n<p>下面通过表Student来具体了解一下存储过程，因为是要了解存储过程的简单用法，所以例子很简单。</p>\n<h3 id=\"无参数存储过程\"><a href=\"#无参数存储过程\" class=\"headerlink\" title=\"无参数存储过程\"></a><strong>无参数存储过程</strong></h3><p>选出Student表中的所有信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create proc StuProc</span><br><span class=\"line\">as      //此处 as 不可以省略不写</span><br><span class=\"line\">begin   //begin 和 end 是一对，不可以只写其中一个，但可以都不写</span><br><span class=\"line\">select S#,Sname,Sage,Ssex from student</span><br><span class=\"line\">end</span><br><span class=\"line\">go</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"有参数存储过程\"><a href=\"#有参数存储过程\" class=\"headerlink\" title=\"有参数存储过程\"></a><strong>有参数存储过程</strong></h3><p>**　全局变量**</p>\n<p>全局变量也称为外部变量，是在函数的外部定义的，它的作用域为从变量定义处开始，到本程序文件的末尾。</p>\n<p>选出指定姓名的学生信息:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create proc StuProc</span><br><span class=\"line\">@sname varchar(100)   </span><br><span class=\"line\">as </span><br><span class=\"line\">begin</span><br><span class=\"line\">select S#,Sname,Sage,Ssex from student where sname=@sname</span><br><span class=\"line\">end</span><br><span class=\"line\">go</span><br><span class=\"line\"></span><br><span class=\"line\">exec StuProc &#x27;赵雷&#x27;   //执行语句</span><br></pre></td></tr></table></figure>\n\n<p>上面是在外部给变量赋值，也可以在内部直接给变量设置默认值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create proc StuProc</span><br><span class=\"line\">@sname varchar(100)=&#x27;赵雷&#x27;</span><br><span class=\"line\">as </span><br><span class=\"line\">begin</span><br><span class=\"line\">select S#,Sname,Sage,Ssex from student where sname=@sname</span><br><span class=\"line\">end</span><br><span class=\"line\">go</span><br><span class=\"line\"></span><br><span class=\"line\">exec StuProc</span><br></pre></td></tr></table></figure>\n\n<p>也可以把变量的内容输出，使用output</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create proc StuProc</span><br><span class=\"line\">@sname varchar(100),</span><br><span class=\"line\">@IsRight int  output //传出参数</span><br><span class=\"line\">as </span><br><span class=\"line\">if exists (select S#,Sname,Sage,Ssex from student where sname=@sname)</span><br><span class=\"line\">set @IsRight =1</span><br><span class=\"line\">else</span><br><span class=\"line\">set @IsRight=0</span><br><span class=\"line\">go</span><br><span class=\"line\"></span><br><span class=\"line\">declare @IsRight int </span><br><span class=\"line\">exec StuProc &#x27;赵雷&#x27; , @IsRight output</span><br><span class=\"line\">select @IsRight</span><br></pre></td></tr></table></figure>\n\n<p>以上是全局变量，下面来了解局部变量</p>\n<p>**　局部变量**</p>\n<p>局部变量也称为内部变量。局部变量是在函数内作定义说明的。其作用域仅限于函数内部，离开该函数后再使用这种变量是非法的。</p>\n<p>**　局部变量的定义**</p>\n<p>必须先用Declare命令定以后才可以使用，declare</p>\n<p>**　局部变量的赋值方法**</p>\n<p>set{@变量名&#x3D;表达式}或者select</p>\n<p>**　局部变量的显示**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create proc StuProc</span><br><span class=\"line\">as </span><br><span class=\"line\">declare @sname varchar(100)</span><br><span class=\"line\">set @sname=&#x27;赵雷&#x27;</span><br><span class=\"line\">select S#,Sname,Sage,Ssex from student where sname=@sname</span><br><span class=\"line\">go</span><br><span class=\"line\"></span><br><span class=\"line\">exec StuProc</span><br></pre></td></tr></table></figure>\n\n<p>那如果是要把局部变量的数据显示出来怎么办呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create proc StuProc</span><br><span class=\"line\">as </span><br><span class=\"line\">declare @sname varchar(100)</span><br><span class=\"line\">set @sname=(select Sname from student where S#=01)</span><br><span class=\"line\">select @sname</span><br><span class=\"line\">go</span><br><span class=\"line\"></span><br><span class=\"line\">exec StuProc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更详细的实例操作学习\"><a href=\"#更详细的实例操作学习\" class=\"headerlink\" title=\"更详细的实例操作学习\"></a>更详细的实例操作学习</h2><hr>\n<p>比如，在SQL Server查询编辑器窗口中用CREATE PROCEDURE语句创建存储过程PROC_InsertEmployee，用于实现向员工信息表（tb_Employee）中添加信息，同时生成自动编号。其SQL语句如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">IF EXISTS (SELECT name  </span><br><span class=\"line\">   FROM   sysobjects  </span><br><span class=\"line\">   WHERE  name = &#x27;Proc_InsertEmployee&#x27;  </span><br><span class=\"line\">   AND          type = &#x27;P&#x27;) </span><br><span class=\"line\">DROP PROCEDURE Proc_InsertEmployee </span><br><span class=\"line\">GO </span><br><span class=\"line\">CREATE PROCEDURE Proc_InsertEmployee </span><br><span class=\"line\">@PName nvarchar(50), </span><br><span class=\"line\">@PSex nvarchar(4), </span><br><span class=\"line\">@PAge int, </span><br><span class=\"line\">@PWage money </span><br><span class=\"line\">AS </span><br><span class=\"line\">begin </span><br><span class=\"line\">   declare @PID nvarchar(50) </span><br><span class=\"line\">   select @PID=Max(员工编号) from tb_Employee </span><br><span class=\"line\">   if(@PID is null) </span><br><span class=\"line\">       set @PID=&#x27;P1001&#x27; </span><br><span class=\"line\">   else </span><br><span class=\"line\">       set @PID=&#x27;P&#x27;+cast(cast(substring(@PID,2,4) as int)+1 as nvarchar(50)) </span><br><span class=\"line\">   begin </span><br><span class=\"line\">       insert into tb_Employee values(@PID,@PName,@PSex,@PAge,@PWage) </span><br><span class=\"line\">   end </span><br><span class=\"line\">end </span><br><span class=\"line\">go</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"存储过程的修改\"><a href=\"#存储过程的修改\" class=\"headerlink\" title=\"存储过程的修改\"></a><strong>存储过程的修改</strong></h3><p>创建完存储过程之后，如果需要重新修改存储过程的功能及参数，可以在SQL Server 2005中通过以下两种方法进行修改：一种是用Microsoft SQL Server Mangement修改存储过程；另外一种是用T-SQL语句修改存储过程。</p>\n<p>**　使用Microsoft SQL Server Mangement修改存储过程，步骤如下：**<br>　（1）在SQL Server Management Studio的”对象资源管理器”中，选择要修改存储过程所在的数据库（如：db_18），然后在该数据库下，选择”可编程性”。<br>　（2）打开”存储过程”文件夹，右键单击要修改的存储过程（如：PROC_SEINFO），在弹出的快捷菜单中选择”修改”命令，将会出现查询编辑器窗口。用户可以在此窗口中编辑T-SQL代码，完成编辑后，单击工具栏中的”执行（X）”按钮，执行修改代码。用户可以在查询编辑器下方的Message窗口中看到执行结果信息。</p>\n<p>**　使用Transact-SQL修改存储过程：**<br>　使用ALTER PROCEDURE语句修改存储过程，它不会影响存储过程的权限设定，也不会更改存储过程的名称。</p>\n<p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER PROC [ EDURE ] procedure_name [ ; number ] </span><br><span class=\"line\">    [ &#123; @parameter data_type &#125;  </span><br><span class=\"line\">         [ VARYING ] [ = default ] [ OUTPUT ] </span><br><span class=\"line\">    ] [ ,...n ]  </span><br><span class=\"line\">[ WITH </span><br><span class=\"line\">    &#123; RECOMPILE | ENCRYPTION </span><br><span class=\"line\">        | RECOMPILE , ENCRYPTION   &#125;  </span><br><span class=\"line\">] </span><br><span class=\"line\">[ FOR REPLICATION ]  </span><br><span class=\"line\">AS </span><br><span class=\"line\">    sql_statement [ ...n ]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a><strong>参数说明</strong></h3><p>procedure_name：是要更改的存储过程的名称。</p>\n<p>交叉链接：关于ALTER PROCEDURE语句的其他参数与CREATE PROCEDURE语句相同，可参见上面的”创建存储过程的参数”。</p>\n<p>例如，修改存储过程PROC_SEINFO，用于查询年龄大于35的员工信息。SQL语句如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER PROCEDURE [dbo].[PROC_SEINFO] </span><br><span class=\"line\">AS </span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">SELECT * FROM tb_Employee where 员工年龄&gt;35 </span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"存储过程的删除\"><a href=\"#存储过程的删除\" class=\"headerlink\" title=\"存储过程的删除\"></a><strong>存储过程的删除</strong></h3><p>**　使用Microsoft SQL Server Mangement删除存储过程，步骤如下：**</p>\n<p>（1）在SQL Server Management Studio的”对象资源管理器”中，选择要删除存储过程所在的数据库（如：db_student），然后在该数据库下选择”可编程性”。</p>\n<p>（2）打开”存储过程”文件夹，右键单击要删除的存储过程（如：PROC_SEINFO），在弹出的快捷菜单中选择”删除”命令。</p>\n<p>（3）单击”确定”按钮，即可删除所选定的存储过程。</p>\n<blockquote>\n<p>**注意：**删除数据表后，并不会删除相关联的存储过程，只是其存储过程无法执行。</p>\n</blockquote>\n<p>**　使用T-SQL删除存储过程：**</p>\n<p>DROP PROCEDURE语句用于从当前数据库中删除一个或多个存储过程或过程组。</p>\n<p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP PROCEDURE &#123; procedure &#125; [ ,...n ]</span><br></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<ul>\n<li>Procedure：是要删除的存储过程或存储过程组的名称。过程名称必须符合标识符规则。可以选择是否指定过程所有者名称，但不能指定服务器名称和数据库名称。</li>\n<li>n：是表示可以指定多个过程的占位符。</li>\n</ul>\n<p>例如删除PROC_SEINFO存储过程的SQL语句如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP PROCEDURE PROC_SEINFO</span><br></pre></td></tr></table></figure>\n\n<p>例如，删除多个存储过程proc10、proc20和proc30。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP PROCEDURE proc10, proc20, proc30</span><br></pre></td></tr></table></figure>\n\n<p>例如，删除存储过程组procs（其中包含存储过程proc1、proc2、proc3）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP PROCEDURE procs</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注意：**SQL语句DROP不能删除存储过程组中的单个存储过程。</p>\n</blockquote>\n<h3 id=\"应用存储过程验证用户登录身份：\"><a href=\"#应用存储过程验证用户登录身份：\" class=\"headerlink\" title=\"应用存储过程验证用户登录身份：\"></a><strong>应用存储过程验证用户登录身份：</strong></h3><p>目前，验证用户登录身份的方法有多种，而通过调用存储过程来实现用户身份验证是目前最好的解决方案之一。因为存储过程在创建时即在服务器上进行编译，所以执行起来比单个SQL语句要快得多。</p>\n<p>本例是通过调用存储过程来验证用户登录的用户名和密码是否正确。运行本实例，在”用户名”和”密码”文本框中输入相应的用户名和密码，单击”登录”按钮即可。</p>\n<p>程序开发步骤：</p>\n<p>（1）新建一个网站，将其命名为”index”，默认主页名为Default.aspx。</p>\n<p>（2）Default.aspx页面涉及到的控件如表1所示。</p>\n<p>（3）主要程序代码如下。<br>　打开SQL Server Management Studio，并连接到SQL Server2005中的数据库。单击工具栏中” “按钮，新建查询编辑器。在该查询编辑器中，创建验证登录用户身份的存储过程PROC_EXISTS，具体的SQL语句如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE PROC PROC_EXISTS </span><br><span class=\"line\">( </span><br><span class=\"line\">@UserName NVARCHAR(20), </span><br><span class=\"line\">@PassWord NVARCHAR(20), </span><br><span class=\"line\">@ReturnValue int OUTPUT </span><br><span class=\"line\">) </span><br><span class=\"line\">AS </span><br><span class=\"line\">IF EXISTS(select * from tb_member where userName=@UserName AND passWord=@PassWord) </span><br><span class=\"line\">       set @ReturnValue= 100 </span><br><span class=\"line\">ELSE </span><br><span class=\"line\">       set @ReturnValue= -100 </span><br><span class=\"line\">GO</span><br></pre></td></tr></table></figure>\n\n<p>在”登录”按钮的Click事件下，执行验证登录用户身份的存储过程，如果输入的用户名和密码正确，则弹出对话框提示用户登录成功，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">protected void btnLogin_Click(object sender, EventArgs e) </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        //连接数据库 </span><br><span class=\"line\">        myConn = new SqlConnection(ConfigurationManager.AppSettings[&quot;ConnectionString&quot;].ToString()); </span><br><span class=\"line\">        myCmd = new SqlCommand(&quot;PROC_EXISTS&quot;, myConn);   //调用存储过程，判断用户是否存在</span><br><span class=\"line\">        myCmd.CommandType = CommandType.StoredProcedure; </span><br><span class=\"line\">        //为存储过程的参数赋值 </span><br><span class=\"line\">        SqlParameter userName=new SqlParameter(&quot;@UserName&quot;, SqlDbType.NVarChar, 20); </span><br><span class=\"line\">        userName.Value=this.txtName.Text.Trim(); </span><br><span class=\"line\">        myCmd.Parameters.Add(userName); </span><br><span class=\"line\">        SqlParameter passWord=new SqlParameter(&quot;@PassWord&quot;, SqlDbType.NVarChar, 20); </span><br><span class=\"line\">        passWord.Value = this.txtPassword.Text.Trim(); </span><br><span class=\"line\">        myCmd.Parameters.Add(passWord); </span><br><span class=\"line\">        //指出该参数是存储过程的OUTPUT参数 </span><br><span class=\"line\">        SqlParameter ReturnValue = new SqlParameter(&quot;@ReturnValue&quot;,SqlDbType.Int ,4); </span><br><span class=\"line\">        ReturnValue.Direction = ParameterDirection.Output; </span><br><span class=\"line\">        myCmd.Parameters.Add(ReturnValue); </span><br><span class=\"line\">        try </span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            myConn.Open(); </span><br><span class=\"line\">            myCmd.ExecuteNonQuery(); </span><br><span class=\"line\">            if (int.Parse(ReturnValue.Value.ToString()) == 100) </span><br><span class=\"line\">            &#123; </span><br><span class=\"line\">                Response.Write(&quot;&lt;script&gt;alert(&#x27;您是合法用户，登录成功！&#x27;)&lt;/script&gt;&quot;); </span><br><span class=\"line\">                return; </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            else </span><br><span class=\"line\">            &#123; </span><br><span class=\"line\">                Response.Write(&quot;&lt;script&gt;alert(&#x27;您输入的用户名和密码不正确，请重新输入！&#x27;)&lt;/script&gt;&quot;); </span><br><span class=\"line\">                return; </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        catch(Exception ex) </span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            Response.Write(ex.Message.ToString()); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        finally </span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            myConn.Close(); </span><br><span class=\"line\">            myConn.Dispose(); </span><br><span class=\"line\">            myCmd.Dispose(); </span><br><span class=\"line\">        &#125;&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"全面解析SQL存储过程\"><a href=\"#全面解析SQL存储过程\" class=\"headerlink\" title=\"全面解析SQL存储过程\"></a>全面解析SQL存储过程</h2><hr>\n<p>存储过程(Stored Procedure),是一组为了完成特定功能的SQL 语句，类似一门程序设计语言，也包括了数据类型、流程控制、输入和输出和它自己的函数库。存储过程可以说是一个记录集，它是由一些T-SQL语句组成的代码块，这些T-SQL语句代码像一个方法一样实现一些功能（对单表或多表的增删改查），然后再给这个代码块取一个名字，在用到这个功能的时候调用他就行了。不过SQL存储过程对于一些初学者来说还是比较抽象难理解的，因此本文将由浅至深地剖析SQL存储过程，帮助你学习它。</p>\n<h2 id=\"存储过程的优点\"><a href=\"#存储过程的优点\" class=\"headerlink\" title=\"存储过程的优点\"></a>存储过程的优点</h2><hr>\n<ol>\n<li>存储过程只在创造时进行编译，以后每次执行存储过程都不需再重新编译，而一般SQL语句每执行一次就编译一次,所以使用存储过程可提高数据库执行速度，效率要比T-SQL语句高。</li>\n<li>当对数据库进行复杂操作时，可将此复杂操作用存储过程封装起来与数据库提供的事务处理结合一起使用。</li>\n<li>一个存储过程在程序在网络中交互时可以替代大堆的T-SQL语句，所以也能降低网络的通信量，提高通信速率。</li>\n<li>存储过程可以重复使用,可减少数据库开发人员的工作量。</li>\n<li>安全性高,可设定只有某些用户才具有对指定存储过程的使用权</li>\n</ol>\n<h2 id=\"存储过程基本语法\"><a href=\"#存储过程基本语法\" class=\"headerlink\" title=\"存储过程基本语法\"></a>存储过程基本语法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">--------------创建存储过程-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE PROC [ EDURE ] procedure_name [ ; number ]</span><br><span class=\"line\">    [ &#123; @parameter data_type &#125;</span><br><span class=\"line\">        [ VARYING ] [ = default ] [ OUTPUT ]</span><br><span class=\"line\">    ] [ ,...n ]</span><br><span class=\"line\"></span><br><span class=\"line\">[ WITH</span><br><span class=\"line\">    &#123; RECOMPILE | ENCRYPTION | RECOMPILE , ENCRYPTION &#125; ]</span><br><span class=\"line\"></span><br><span class=\"line\">[ FOR REPLICATION ]</span><br><span class=\"line\"></span><br><span class=\"line\">AS sql_statement [ ...n ]</span><br><span class=\"line\"></span><br><span class=\"line\">--------------调用存储过程-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">EXECUTE Procedure_name &#x27;&#x27; --存储过程如果有参数，后面加参数格式为：@参数名=value，也可直接为参数值value</span><br><span class=\"line\"></span><br><span class=\"line\">--------------删除存储过程-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">drop procedure procedure_name    --在存储过程中能调用另外一个存储过程，而不能删除另外一个存储过程</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建存储过程的参数\"><a href=\"#创建存储过程的参数\" class=\"headerlink\" title=\"创建存储过程的参数\"></a>创建存储过程的参数</h2><hr>\n<ol>\n<li><code>procedure_name </code>：存储过程的名称，在前面加#为局部临时存储过程，加##为全局临时存储过程。</li>\n<li><code>number</code>：是可选的整数，用来对同名的过程分组，以便用一条 DROP PROCEDURE 语句即可将同组的过程一起除去。例如，名为 orders 的应用程序使用的过程可以命名为 orderproc;1、orderproc;2 等。DROP PROCEDURE orderproc 语句将除去整个组。如果名称中包含定界标识符，则数字不应包含在标识符中，只应在 procedure_name 前后使用适当的定界符。</li>\n<li><code>@parameter</code>：存储过程的参数。可以有一个或多个。用户必须在执行过程时提供每个所声明参数的值（除非定义了该参数的默认值）。存储过程最多可以有 2100 个参数。<br>使用 @ 符号作为第一个字符来指定参数名称。参数名称必须符合标识符的规则。每个过程的参数仅用于该过程本身；相同的参数名称可以用在其它过程中。默认情况下，参数只能代替常量，而不能用于代替表名、列名或其它数据库对象的名称。有关更多信息，请参见 EXECUTE。</li>\n<li><code>data_type</code>：参数的数据类型。所有数据类型（包括 text、ntext 和 image）均可以用作存储过程的参数。不过，cursor 数据类型只能用于 OUTPUT 参数。如果指定的数据类型为 cursor，也必须同时指定 VARYING 和 OUTPUT 关键字。有关 SQL Server 提供的数据类型及其语法的更多信息，请参见数据类型。<br>说明对于可以是 cursor 数据类型的输出参数，没有最大数目的限制。</li>\n<li><code>VARYING</code>：指定作为输出参数支持的结果集（由存储过程动态构造，内容可以变化）。仅适用于游标参数。</li>\n<li><code>default</code>： 参数的默认值。如果定义了默认值，不必指定该参数的值即可执行过程。默认值必须是常量或 NULL。如果过程将对该参数使用 LIKE 关键字，那么默认值中可以包含通配符（%、_、[] 和 [^]）。</li>\n<li><code>OUTPUT</code>：表明参数是返回参数。该选项的值可以返回给 EXEC[UTE]。使用 OUTPUT 参数可将信息返回给调用过程。Text、ntext 和 image 参数可用作 OUTPUT 参数。使用 OUTPUT 关键字的输出参数可以是游标占位符。</li>\n<li><code>RECOMPILE</code>: 表明 SQL Server 不会缓存该过程的计划，该过程将在运行时重新编译。在使用非典型值或临时值而不希望覆盖缓存在内存中的执行计划时，请使用 RECOMPILE 选项。</li>\n<li><code>ENCRYPTION</code>: 表示 SQL Server 加密 syscomments 表中包含 CREATE PROCEDURE 语句文本的条目。使用 ENCRYPTION 可防止将过程作为 SQL Server 复制的一部分发布。 说明在升级过程中，SQL Server 利用存储在 syscomments 中的加密注释来重新创建加密过程。</li>\n<li><code>FOR REPLICATION</code>:指定不能在订阅服务器上执行为复制创建的存储过程。.使用 FOR REPLICATION 选项创建的存储过程可用作存储过程筛选，且只能在复制过程中执行。本选项不能和 WITH RECOMPILE 选项一起使用。</li>\n<li>AS:指定过程要执行的操作。</li>\n<li><code>sql_statement</code>:过程中要包含的任意数目和类型的 Transact-SQL 语句。但有一些限制。</li>\n</ol>\n<h2 id=\"实例操作学习\"><a href=\"#实例操作学习\" class=\"headerlink\" title=\"实例操作学习\"></a>实例操作学习</h2><hr>\n<p>下面通过表Student来具体了解一下存储过程，因为是要了解存储过程的简单用法，所以例子很简单。</p>\n<h3 id=\"无参数存储过程\"><a href=\"#无参数存储过程\" class=\"headerlink\" title=\"无参数存储过程\"></a><strong>无参数存储过程</strong></h3><p>选出Student表中的所有信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create proc StuProc</span><br><span class=\"line\">as      //此处 as 不可以省略不写</span><br><span class=\"line\">begin   //begin 和 end 是一对，不可以只写其中一个，但可以都不写</span><br><span class=\"line\">select S#,Sname,Sage,Ssex from student</span><br><span class=\"line\">end</span><br><span class=\"line\">go</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"有参数存储过程\"><a href=\"#有参数存储过程\" class=\"headerlink\" title=\"有参数存储过程\"></a><strong>有参数存储过程</strong></h3><p>**　全局变量**</p>\n<p>全局变量也称为外部变量，是在函数的外部定义的，它的作用域为从变量定义处开始，到本程序文件的末尾。</p>\n<p>选出指定姓名的学生信息:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create proc StuProc</span><br><span class=\"line\">@sname varchar(100)   </span><br><span class=\"line\">as </span><br><span class=\"line\">begin</span><br><span class=\"line\">select S#,Sname,Sage,Ssex from student where sname=@sname</span><br><span class=\"line\">end</span><br><span class=\"line\">go</span><br><span class=\"line\"></span><br><span class=\"line\">exec StuProc &#x27;赵雷&#x27;   //执行语句</span><br></pre></td></tr></table></figure>\n\n<p>上面是在外部给变量赋值，也可以在内部直接给变量设置默认值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create proc StuProc</span><br><span class=\"line\">@sname varchar(100)=&#x27;赵雷&#x27;</span><br><span class=\"line\">as </span><br><span class=\"line\">begin</span><br><span class=\"line\">select S#,Sname,Sage,Ssex from student where sname=@sname</span><br><span class=\"line\">end</span><br><span class=\"line\">go</span><br><span class=\"line\"></span><br><span class=\"line\">exec StuProc</span><br></pre></td></tr></table></figure>\n\n<p>也可以把变量的内容输出，使用output</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create proc StuProc</span><br><span class=\"line\">@sname varchar(100),</span><br><span class=\"line\">@IsRight int  output //传出参数</span><br><span class=\"line\">as </span><br><span class=\"line\">if exists (select S#,Sname,Sage,Ssex from student where sname=@sname)</span><br><span class=\"line\">set @IsRight =1</span><br><span class=\"line\">else</span><br><span class=\"line\">set @IsRight=0</span><br><span class=\"line\">go</span><br><span class=\"line\"></span><br><span class=\"line\">declare @IsRight int </span><br><span class=\"line\">exec StuProc &#x27;赵雷&#x27; , @IsRight output</span><br><span class=\"line\">select @IsRight</span><br></pre></td></tr></table></figure>\n\n<p>以上是全局变量，下面来了解局部变量</p>\n<p>**　局部变量**</p>\n<p>局部变量也称为内部变量。局部变量是在函数内作定义说明的。其作用域仅限于函数内部，离开该函数后再使用这种变量是非法的。</p>\n<p>**　局部变量的定义**</p>\n<p>必须先用Declare命令定以后才可以使用，declare</p>\n<p>**　局部变量的赋值方法**</p>\n<p>set{@变量名&#x3D;表达式}或者select</p>\n<p>**　局部变量的显示**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create proc StuProc</span><br><span class=\"line\">as </span><br><span class=\"line\">declare @sname varchar(100)</span><br><span class=\"line\">set @sname=&#x27;赵雷&#x27;</span><br><span class=\"line\">select S#,Sname,Sage,Ssex from student where sname=@sname</span><br><span class=\"line\">go</span><br><span class=\"line\"></span><br><span class=\"line\">exec StuProc</span><br></pre></td></tr></table></figure>\n\n<p>那如果是要把局部变量的数据显示出来怎么办呢？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create proc StuProc</span><br><span class=\"line\">as </span><br><span class=\"line\">declare @sname varchar(100)</span><br><span class=\"line\">set @sname=(select Sname from student where S#=01)</span><br><span class=\"line\">select @sname</span><br><span class=\"line\">go</span><br><span class=\"line\"></span><br><span class=\"line\">exec StuProc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"更详细的实例操作学习\"><a href=\"#更详细的实例操作学习\" class=\"headerlink\" title=\"更详细的实例操作学习\"></a>更详细的实例操作学习</h2><hr>\n<p>比如，在SQL Server查询编辑器窗口中用CREATE PROCEDURE语句创建存储过程PROC_InsertEmployee，用于实现向员工信息表（tb_Employee）中添加信息，同时生成自动编号。其SQL语句如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">IF EXISTS (SELECT name  </span><br><span class=\"line\">   FROM   sysobjects  </span><br><span class=\"line\">   WHERE  name = &#x27;Proc_InsertEmployee&#x27;  </span><br><span class=\"line\">   AND          type = &#x27;P&#x27;) </span><br><span class=\"line\">DROP PROCEDURE Proc_InsertEmployee </span><br><span class=\"line\">GO </span><br><span class=\"line\">CREATE PROCEDURE Proc_InsertEmployee </span><br><span class=\"line\">@PName nvarchar(50), </span><br><span class=\"line\">@PSex nvarchar(4), </span><br><span class=\"line\">@PAge int, </span><br><span class=\"line\">@PWage money </span><br><span class=\"line\">AS </span><br><span class=\"line\">begin </span><br><span class=\"line\">   declare @PID nvarchar(50) </span><br><span class=\"line\">   select @PID=Max(员工编号) from tb_Employee </span><br><span class=\"line\">   if(@PID is null) </span><br><span class=\"line\">       set @PID=&#x27;P1001&#x27; </span><br><span class=\"line\">   else </span><br><span class=\"line\">       set @PID=&#x27;P&#x27;+cast(cast(substring(@PID,2,4) as int)+1 as nvarchar(50)) </span><br><span class=\"line\">   begin </span><br><span class=\"line\">       insert into tb_Employee values(@PID,@PName,@PSex,@PAge,@PWage) </span><br><span class=\"line\">   end </span><br><span class=\"line\">end </span><br><span class=\"line\">go</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"存储过程的修改\"><a href=\"#存储过程的修改\" class=\"headerlink\" title=\"存储过程的修改\"></a><strong>存储过程的修改</strong></h3><p>创建完存储过程之后，如果需要重新修改存储过程的功能及参数，可以在SQL Server 2005中通过以下两种方法进行修改：一种是用Microsoft SQL Server Mangement修改存储过程；另外一种是用T-SQL语句修改存储过程。</p>\n<p>**　使用Microsoft SQL Server Mangement修改存储过程，步骤如下：**<br>　（1）在SQL Server Management Studio的”对象资源管理器”中，选择要修改存储过程所在的数据库（如：db_18），然后在该数据库下，选择”可编程性”。<br>　（2）打开”存储过程”文件夹，右键单击要修改的存储过程（如：PROC_SEINFO），在弹出的快捷菜单中选择”修改”命令，将会出现查询编辑器窗口。用户可以在此窗口中编辑T-SQL代码，完成编辑后，单击工具栏中的”执行（X）”按钮，执行修改代码。用户可以在查询编辑器下方的Message窗口中看到执行结果信息。</p>\n<p>**　使用Transact-SQL修改存储过程：**<br>　使用ALTER PROCEDURE语句修改存储过程，它不会影响存储过程的权限设定，也不会更改存储过程的名称。</p>\n<p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER PROC [ EDURE ] procedure_name [ ; number ] </span><br><span class=\"line\">    [ &#123; @parameter data_type &#125;  </span><br><span class=\"line\">         [ VARYING ] [ = default ] [ OUTPUT ] </span><br><span class=\"line\">    ] [ ,...n ]  </span><br><span class=\"line\">[ WITH </span><br><span class=\"line\">    &#123; RECOMPILE | ENCRYPTION </span><br><span class=\"line\">        | RECOMPILE , ENCRYPTION   &#125;  </span><br><span class=\"line\">] </span><br><span class=\"line\">[ FOR REPLICATION ]  </span><br><span class=\"line\">AS </span><br><span class=\"line\">    sql_statement [ ...n ]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a><strong>参数说明</strong></h3><p>procedure_name：是要更改的存储过程的名称。</p>\n<p>交叉链接：关于ALTER PROCEDURE语句的其他参数与CREATE PROCEDURE语句相同，可参见上面的”创建存储过程的参数”。</p>\n<p>例如，修改存储过程PROC_SEINFO，用于查询年龄大于35的员工信息。SQL语句如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER PROCEDURE [dbo].[PROC_SEINFO] </span><br><span class=\"line\">AS </span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">SELECT * FROM tb_Employee where 员工年龄&gt;35 </span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"存储过程的删除\"><a href=\"#存储过程的删除\" class=\"headerlink\" title=\"存储过程的删除\"></a><strong>存储过程的删除</strong></h3><p>**　使用Microsoft SQL Server Mangement删除存储过程，步骤如下：**</p>\n<p>（1）在SQL Server Management Studio的”对象资源管理器”中，选择要删除存储过程所在的数据库（如：db_student），然后在该数据库下选择”可编程性”。</p>\n<p>（2）打开”存储过程”文件夹，右键单击要删除的存储过程（如：PROC_SEINFO），在弹出的快捷菜单中选择”删除”命令。</p>\n<p>（3）单击”确定”按钮，即可删除所选定的存储过程。</p>\n<blockquote>\n<p>**注意：**删除数据表后，并不会删除相关联的存储过程，只是其存储过程无法执行。</p>\n</blockquote>\n<p>**　使用T-SQL删除存储过程：**</p>\n<p>DROP PROCEDURE语句用于从当前数据库中删除一个或多个存储过程或过程组。</p>\n<p>语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP PROCEDURE &#123; procedure &#125; [ ,...n ]</span><br></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<ul>\n<li>Procedure：是要删除的存储过程或存储过程组的名称。过程名称必须符合标识符规则。可以选择是否指定过程所有者名称，但不能指定服务器名称和数据库名称。</li>\n<li>n：是表示可以指定多个过程的占位符。</li>\n</ul>\n<p>例如删除PROC_SEINFO存储过程的SQL语句如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP PROCEDURE PROC_SEINFO</span><br></pre></td></tr></table></figure>\n\n<p>例如，删除多个存储过程proc10、proc20和proc30。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP PROCEDURE proc10, proc20, proc30</span><br></pre></td></tr></table></figure>\n\n<p>例如，删除存储过程组procs（其中包含存储过程proc1、proc2、proc3）。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP PROCEDURE procs</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注意：**SQL语句DROP不能删除存储过程组中的单个存储过程。</p>\n</blockquote>\n<h3 id=\"应用存储过程验证用户登录身份：\"><a href=\"#应用存储过程验证用户登录身份：\" class=\"headerlink\" title=\"应用存储过程验证用户登录身份：\"></a><strong>应用存储过程验证用户登录身份：</strong></h3><p>目前，验证用户登录身份的方法有多种，而通过调用存储过程来实现用户身份验证是目前最好的解决方案之一。因为存储过程在创建时即在服务器上进行编译，所以执行起来比单个SQL语句要快得多。</p>\n<p>本例是通过调用存储过程来验证用户登录的用户名和密码是否正确。运行本实例，在”用户名”和”密码”文本框中输入相应的用户名和密码，单击”登录”按钮即可。</p>\n<p>程序开发步骤：</p>\n<p>（1）新建一个网站，将其命名为”index”，默认主页名为Default.aspx。</p>\n<p>（2）Default.aspx页面涉及到的控件如表1所示。</p>\n<p>（3）主要程序代码如下。<br>　打开SQL Server Management Studio，并连接到SQL Server2005中的数据库。单击工具栏中” “按钮，新建查询编辑器。在该查询编辑器中，创建验证登录用户身份的存储过程PROC_EXISTS，具体的SQL语句如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE PROC PROC_EXISTS </span><br><span class=\"line\">( </span><br><span class=\"line\">@UserName NVARCHAR(20), </span><br><span class=\"line\">@PassWord NVARCHAR(20), </span><br><span class=\"line\">@ReturnValue int OUTPUT </span><br><span class=\"line\">) </span><br><span class=\"line\">AS </span><br><span class=\"line\">IF EXISTS(select * from tb_member where userName=@UserName AND passWord=@PassWord) </span><br><span class=\"line\">       set @ReturnValue= 100 </span><br><span class=\"line\">ELSE </span><br><span class=\"line\">       set @ReturnValue= -100 </span><br><span class=\"line\">GO</span><br></pre></td></tr></table></figure>\n\n<p>在”登录”按钮的Click事件下，执行验证登录用户身份的存储过程，如果输入的用户名和密码正确，则弹出对话框提示用户登录成功，代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">protected void btnLogin_Click(object sender, EventArgs e) </span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        //连接数据库 </span><br><span class=\"line\">        myConn = new SqlConnection(ConfigurationManager.AppSettings[&quot;ConnectionString&quot;].ToString()); </span><br><span class=\"line\">        myCmd = new SqlCommand(&quot;PROC_EXISTS&quot;, myConn);   //调用存储过程，判断用户是否存在</span><br><span class=\"line\">        myCmd.CommandType = CommandType.StoredProcedure; </span><br><span class=\"line\">        //为存储过程的参数赋值 </span><br><span class=\"line\">        SqlParameter userName=new SqlParameter(&quot;@UserName&quot;, SqlDbType.NVarChar, 20); </span><br><span class=\"line\">        userName.Value=this.txtName.Text.Trim(); </span><br><span class=\"line\">        myCmd.Parameters.Add(userName); </span><br><span class=\"line\">        SqlParameter passWord=new SqlParameter(&quot;@PassWord&quot;, SqlDbType.NVarChar, 20); </span><br><span class=\"line\">        passWord.Value = this.txtPassword.Text.Trim(); </span><br><span class=\"line\">        myCmd.Parameters.Add(passWord); </span><br><span class=\"line\">        //指出该参数是存储过程的OUTPUT参数 </span><br><span class=\"line\">        SqlParameter ReturnValue = new SqlParameter(&quot;@ReturnValue&quot;,SqlDbType.Int ,4); </span><br><span class=\"line\">        ReturnValue.Direction = ParameterDirection.Output; </span><br><span class=\"line\">        myCmd.Parameters.Add(ReturnValue); </span><br><span class=\"line\">        try </span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            myConn.Open(); </span><br><span class=\"line\">            myCmd.ExecuteNonQuery(); </span><br><span class=\"line\">            if (int.Parse(ReturnValue.Value.ToString()) == 100) </span><br><span class=\"line\">            &#123; </span><br><span class=\"line\">                Response.Write(&quot;&lt;script&gt;alert(&#x27;您是合法用户，登录成功！&#x27;)&lt;/script&gt;&quot;); </span><br><span class=\"line\">                return; </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">            else </span><br><span class=\"line\">            &#123; </span><br><span class=\"line\">                Response.Write(&quot;&lt;script&gt;alert(&#x27;您输入的用户名和密码不正确，请重新输入！&#x27;)&lt;/script&gt;&quot;); </span><br><span class=\"line\">                return; </span><br><span class=\"line\">            &#125; </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        catch(Exception ex) </span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            Response.Write(ex.Message.ToString()); </span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">        finally </span><br><span class=\"line\">        &#123; </span><br><span class=\"line\">            myConn.Close(); </span><br><span class=\"line\">            myConn.Dispose(); </span><br><span class=\"line\">            myCmd.Dispose(); </span><br><span class=\"line\">        &#125;&#125;</span><br></pre></td></tr></table></figure>\n"},{"layout":"wiki","wiki":"sql","title":"关于SQL学习过程","order":1,"_content":"\n## 我们已经学习了 SQL，下一步学习什么呢？\n\n------\n\n### SQL 学习过程\n\n本 SQL 教程已经向您讲解了用来访问和处理数据库系统的标准计算机语言。\n\n我们已经学习了如何使用 SQL 在数据库中执行查询、获取数据、插入新的记录、删除记录以及更新记录。\n\n我们已经学习了如何通过 SQL 创建数据库、表、索引，以及如何撤销它们。\n\n我们已经学习了 SQL 中最重要的 Aggregate 函数。\n\nSQL 是一种与数据库系统协同工作的标准语言，这些数据库系统包括 MS SQL Server、IBM DB2、Oracle、MySQL 和 MS Access 等等。\n\n\n\n## 关于SQL 主机选择\n\n------\n\n如果您想要您的网站存储数据在数据库并从数据库显示数据，您的 Web 服务器必须能使用 SQL 语言访问数据库系统。\n\n如果您的 Web 服务器托管在互联网服务提供商（ISP，全称 Internet Service Provider），您必须寻找 SQL 主机计划。\n\n最常见的 SQL 主机数据库是 MySQL、MS SQL Server 和 MS Access。\n\n您可以在 Windows 和 Linux/UNIX 操作系统上运行 SQL 主机数据库。\n\n下面是操作系统上对应运行的数据库系统的概览。\n\n- **MS SQL Server**\n  只在 Windows OS 上运行。\n- **MySQL**\n  在 Windows, Mac OS X 和 Linux/UNIX 操作系统上运行。\n- **MS Access** （只建议用于小型网站）\n  只在 Windows OS 上运行。\n","source":"wiki/sql/summary/study.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: 关于SQL学习过程\norder: 1\n---\n\n## 我们已经学习了 SQL，下一步学习什么呢？\n\n------\n\n### SQL 学习过程\n\n本 SQL 教程已经向您讲解了用来访问和处理数据库系统的标准计算机语言。\n\n我们已经学习了如何使用 SQL 在数据库中执行查询、获取数据、插入新的记录、删除记录以及更新记录。\n\n我们已经学习了如何通过 SQL 创建数据库、表、索引，以及如何撤销它们。\n\n我们已经学习了 SQL 中最重要的 Aggregate 函数。\n\nSQL 是一种与数据库系统协同工作的标准语言，这些数据库系统包括 MS SQL Server、IBM DB2、Oracle、MySQL 和 MS Access 等等。\n\n\n\n## 关于SQL 主机选择\n\n------\n\n如果您想要您的网站存储数据在数据库并从数据库显示数据，您的 Web 服务器必须能使用 SQL 语言访问数据库系统。\n\n如果您的 Web 服务器托管在互联网服务提供商（ISP，全称 Internet Service Provider），您必须寻找 SQL 主机计划。\n\n最常见的 SQL 主机数据库是 MySQL、MS SQL Server 和 MS Access。\n\n您可以在 Windows 和 Linux/UNIX 操作系统上运行 SQL 主机数据库。\n\n下面是操作系统上对应运行的数据库系统的概览。\n\n- **MS SQL Server**\n  只在 Windows OS 上运行。\n- **MySQL**\n  在 Windows, Mac OS X 和 Linux/UNIX 操作系统上运行。\n- **MS Access** （只建议用于小型网站）\n  只在 Windows OS 上运行。\n","date":"2025-06-11T07:39:40.727Z","updated":"2025-06-11T07:39:40.727Z","path":"wiki/sql/summary/study.html","_id":"cmbrn2fo8000o44x0dlpxdlm0","comments":1,"content":"<h2 id=\"我们已经学习了-SQL，下一步学习什么呢？\"><a href=\"#我们已经学习了-SQL，下一步学习什么呢？\" class=\"headerlink\" title=\"我们已经学习了 SQL，下一步学习什么呢？\"></a>我们已经学习了 SQL，下一步学习什么呢？</h2><hr>\n<h3 id=\"SQL-学习过程\"><a href=\"#SQL-学习过程\" class=\"headerlink\" title=\"SQL 学习过程\"></a>SQL 学习过程</h3><p>本 SQL 教程已经向您讲解了用来访问和处理数据库系统的标准计算机语言。</p>\n<p>我们已经学习了如何使用 SQL 在数据库中执行查询、获取数据、插入新的记录、删除记录以及更新记录。</p>\n<p>我们已经学习了如何通过 SQL 创建数据库、表、索引，以及如何撤销它们。</p>\n<p>我们已经学习了 SQL 中最重要的 Aggregate 函数。</p>\n<p>SQL 是一种与数据库系统协同工作的标准语言，这些数据库系统包括 MS SQL Server、IBM DB2、Oracle、MySQL 和 MS Access 等等。</p>\n<h2 id=\"关于SQL-主机选择\"><a href=\"#关于SQL-主机选择\" class=\"headerlink\" title=\"关于SQL 主机选择\"></a>关于SQL 主机选择</h2><hr>\n<p>如果您想要您的网站存储数据在数据库并从数据库显示数据，您的 Web 服务器必须能使用 SQL 语言访问数据库系统。</p>\n<p>如果您的 Web 服务器托管在互联网服务提供商（ISP，全称 Internet Service Provider），您必须寻找 SQL 主机计划。</p>\n<p>最常见的 SQL 主机数据库是 MySQL、MS SQL Server 和 MS Access。</p>\n<p>您可以在 Windows 和 Linux&#x2F;UNIX 操作系统上运行 SQL 主机数据库。</p>\n<p>下面是操作系统上对应运行的数据库系统的概览。</p>\n<ul>\n<li><strong>MS SQL Server</strong><br>只在 Windows OS 上运行。</li>\n<li><strong>MySQL</strong><br>在 Windows, Mac OS X 和 Linux&#x2F;UNIX 操作系统上运行。</li>\n<li><strong>MS Access</strong> （只建议用于小型网站）<br>只在 Windows OS 上运行。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"我们已经学习了-SQL，下一步学习什么呢？\"><a href=\"#我们已经学习了-SQL，下一步学习什么呢？\" class=\"headerlink\" title=\"我们已经学习了 SQL，下一步学习什么呢？\"></a>我们已经学习了 SQL，下一步学习什么呢？</h2><hr>\n<h3 id=\"SQL-学习过程\"><a href=\"#SQL-学习过程\" class=\"headerlink\" title=\"SQL 学习过程\"></a>SQL 学习过程</h3><p>本 SQL 教程已经向您讲解了用来访问和处理数据库系统的标准计算机语言。</p>\n<p>我们已经学习了如何使用 SQL 在数据库中执行查询、获取数据、插入新的记录、删除记录以及更新记录。</p>\n<p>我们已经学习了如何通过 SQL 创建数据库、表、索引，以及如何撤销它们。</p>\n<p>我们已经学习了 SQL 中最重要的 Aggregate 函数。</p>\n<p>SQL 是一种与数据库系统协同工作的标准语言，这些数据库系统包括 MS SQL Server、IBM DB2、Oracle、MySQL 和 MS Access 等等。</p>\n<h2 id=\"关于SQL-主机选择\"><a href=\"#关于SQL-主机选择\" class=\"headerlink\" title=\"关于SQL 主机选择\"></a>关于SQL 主机选择</h2><hr>\n<p>如果您想要您的网站存储数据在数据库并从数据库显示数据，您的 Web 服务器必须能使用 SQL 语言访问数据库系统。</p>\n<p>如果您的 Web 服务器托管在互联网服务提供商（ISP，全称 Internet Service Provider），您必须寻找 SQL 主机计划。</p>\n<p>最常见的 SQL 主机数据库是 MySQL、MS SQL Server 和 MS Access。</p>\n<p>您可以在 Windows 和 Linux&#x2F;UNIX 操作系统上运行 SQL 主机数据库。</p>\n<p>下面是操作系统上对应运行的数据库系统的概览。</p>\n<ul>\n<li><strong>MS SQL Server</strong><br>只在 Windows OS 上运行。</li>\n<li><strong>MySQL</strong><br>在 Windows, Mac OS X 和 Linux&#x2F;UNIX 操作系统上运行。</li>\n<li><strong>MS Access</strong> （只建议用于小型网站）<br>只在 Windows OS 上运行。</li>\n</ul>\n"},{"layout":"wiki","wiki":"sql","title":"SQL语句大全分类整理","order":1,"_content":"\n## 详尽的SQL语句大全分类整理\n\n------\n\nStructured Query Language 即结构化查询语言，简称 SQL。SQL 是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统；同时也是数据库脚本文件的扩展名。SQL 语句的种类还和数量都很多，其中的很多语句也是经常要用到的，下面就把常用的 SQL 语句分类整理一下，并且还可以打包下载，希望能对你有所帮助。\n\n- 先献上下载地址：\n\n## 一、基础篇\n\n------\n\n### **1、说明：创建数据库**\n\n```\nCREATE DATABASE database-name\n```\n\n### **2、说明：删除数据库**\n\n```\ndrop database dbname\n```\n\n### **3、说明：备份sql server**\n\n--- 创建 备份数据的 device\n\n```\nUSE master\nEXEC sp_addumpdevice 'disk', 'testBack', 'c:\\mssql7backup\\MyNwind_1.dat'\n```\n\n--- 开始 备份\n\n```\nBACKUP DATABASE pubs TO testBack\n```\n\n### **4、说明：创建新表**\n\n```\ncreate table tabname(col1 type1 [not null] [primary key],col2 type2 [not null],..)\n```\n\n根据已有的表创建新表：\n　A：create table tab_new like tab_old (使用旧表创建新表)\n　B ：create table tab_new as select col1,col2... from tab_old definition only\n\n### **5、说明：删除新表**\n\n```\ndrop table tabname\n```\n\n### **6、说明：增加一个列**\n\n```\nAlter table tabname add column col type\n```\n\n> **注：**列增加后将不能删除。DB2中列加上后数据类型也不能改变，唯一能改变的是增加varchar类型的长度。\n\n### **7****、说明：添加主键**\n\n```\nAlter table tabname add primary key(col)\n```\n\n删除主键：\n\n```\nAlter table tabname drop primary key(col)\n```\n\n### **8、说明：创建索引**\n\n```\ncreate [unique] index idxname on tabname(col....)\n```\n\n删除索引：\n\n```\nDROP INDEX index_name ON table_name\n```\n\n> **注：**索引是不可更改的，想更改必须删除重新建。\n\n### **9、说明：创建视图**\n\n```\ncreate view viewname as select statement\n```\n\n删除视图：\n\n```\ndrop view viewname\n```\n\n### **10、说明：几个简单的sql语句**\n\n- 选择：\n\n```\nselect * from table1 where 范围\n```\n\n- 插入：\n\n  ```\n  insert into table1(field1,field2) values(value1,value2)\n  ```\n\n- 删除：\n\n  ```\n  delete from table1 where 范围\n  ```\n\n- 更新：\n\n  ```\n  update table1 set field1=value1 where 范围\n  ```\n\n- 查找：\n\n  ```\n  select * from table1 where field1 like '%value1%'\n  ```\n\n  **---like** 的语法很精妙，请查资料!\n\n- 排序：\n\n  ```\n  select * from table1 order by field1,field2 [desc]\n  ```\n\n- 总数：\n\n  ```\n  select count as totalcount from table1\n  ```\n\n- 求和：\n\n  ```\n  select sum(field1) as sumvalue from table1\n  ```\n\n- 平均：\n\n  ```\n  select avg(field1) as avgvalue from table1\n  ```\n\n- 最大：\n\n  ```\n  select max(field1) as maxvalue from table1\n  ```\n\n- 最小：\n\n  ```\n  select min(field1) as minvalue from table1\n  ```\n\n### **11、说明：几个高级查询运算词**\n\n**　A： UNION 运算符**\n　UNION 运算符通过组合其他两个结果表（例如 TABLE1 和 TABLE2）并消去表中任何重复行而派生出一个结果表。当 ALL 随 UNION一起使用时（即 UNION ALL），不消除重复行。两种情况下，派生表的每一行不是来自 TABLE1 就是来自 TABLE2。\n\n**　B： EXCEPT 运算符** 　EXCEPT 运算符通过包括所有在 TABLE1 中但不在 TABLE2 中的行并消除所有重复行而派生出一个结果表。当 ALL 随 EXCEPT 一起使用时 (EXCEPT ALL)，不消除重复行。\n\n**　C： INTERSECT 运算符** 　INTERSECT 运算符通过只包括 TABLE1 和 TABLE2 中都有的行并消除所有重复行而派生出一个结果表。当 ALL 随 INTERSECT 一起使用时 (INTERSECT ALL)，不消除重复行。\n\n> **注：**使用运算词的几个查询结果行必须是一致的。\n\n### **12、说明：使用外连接**\n\n**　A、left （outer） join：**\n　左外连接（左连接）：结果集几包括连接表的匹配行，也包括左连接表的所有行。\n　SQL: select a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a = b.c\n\n**　B：right （outer） join:** 　右外连接(右连接)：结果集既包括连接表的匹配连接行，也包括右连接表的所有行。\n\n**　C：full/cross （outer） join：**\n　全外连接：不仅包括符号连接表的匹配行，还包括两个连接表中的所有记录。\n\n### **13、分组:Group by:**\n\n一张表，一旦分组 完成后，查询后只能得到组相关的信息。\n　组相关的信息：（统计信息） count,sum,max,min,avg 分组的标准)\n　在SQLServer中分组时：不能以 text,ntext,image类型的字段作为分组依据\n　在selecte统计函数中的字段，不能和普通的字段放在一起；\n\n### **14、对数据库进行操作**\n\n分离数据库： sp_detach_db; 附加数据库：sp_attach_db 后接表明，附加需要完整的路径名\n\n### **15、如何修改数据库的名称**\n\n```\nsp_renamedb 'old_name', 'new_name'\n```\n\n## 二、提升篇\n\n------\n\n### **1、说明：复制表**\n\n**(只复制结构,源表名：a 新表名：b) (Access可用)**\n\n**　方法一：**（仅用于SQlServer）\n\n```\nselect * into b from a where 1<>1\n```\n\n**　方法二：**\n\n```\nselect top 0 * into b from a\n```\n\n### **2、说明：拷贝表**\n\n**(拷贝数据,源表名：a 目标表名：b) (Access可用)**\n\n```\ninsert into b(a, b, c) select d,e,f from a;\n```\n\n### **3、说明：跨数据库之间表的拷贝**\n\n**(具体数据使用绝对路径) (Access可用)**\n\n```\ninsert into b(a, b, c) select d,e,f from b in '具体数据库' where 条件\n```\n\n例子：\n\n```\n..from b in '\"&Server.MapPath(\".\")&\"\\data.mdb\" &\"' where..\n```\n\n### **4、说明：子查询**\n\n**(表名1：a 表名2：b)**\n\n```\nselect a,b,c from a where a IN (select d from b )\n```\n\n或者:\n\n```\nselect a,b,c from a where a IN (1,2,3)\n```\n\n### **5、说明：显示文章、提交人和最后回复时间**\n\n```\nselect a.title,a.username,b.adddate from table a,(select max(adddate) adddate from table where table.title=a.title) b\n```\n\n### **6、说明：外连接查询**\n\n**(表名1：a 表名2：b)**\n\n```\nselect a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a = b.c\n```\n\n### **7、说明：在线视图查询**\n\n**(表名1：a )**\n\n```\nselect * from (SELECT a,b,c FROM a) T where t.a > 1;\n```\n\n### **8、说明：between的用法**\n\n**between限制查询数据范围时包括了边界值,not between不包括**\n\n```\nselect * from table1 where time between time1 and time2\n```\n\n```\nselect a,b,c, from table1 where a not between 数值1 and 数值2\n```\n\n### **9、说明：in 的使用方法**\n\n```\nselect * from table1 where a [not] in ('值1','值2','值4','值6')\n```\n\n### **10、说明：两张关联表删除主表中已经在副表中没有的信息**\n\n```\ndelete from table1 where not exists ( select * from table2 where table1.field1=table2.field1 )\n```\n\n### **11、说明：四表联查问题**\n\n```\nselect * from a left inner join b on a.a=b.b right inner join c on a.a=c.c inner join d on a.a=d.d where ......\n```\n\n### **12、说明：日程安排提前五分钟提醒**\n\n```\nselect * from 日程安排 where datediff('minute',f开始时间,getdate())>5\n```\n\n### **13、说明：一条sql 语句搞定数据库分页**\n\n```\nselect top 10 b.* from (select top 20 主键字段,排序字段 from 表名 order by 排序字段 desc) a,表名 b where b.主键字段 = a.主键字段 order by a.排序字段\n```\n\n**　具体实现：**\n　关于数据库分页：\n\n```\ndeclare @start int,@end int\n@sql nvarchar(600)\nset @sql='select top'+str(@end-@start+1)+'+from T where rid not in(select top'+str(@str-1)+'Rid from T where Rid>-1)'\nexec sp_executesql @sql\n```\n\n> **注意：**在top后不能直接跟一个变量，所以在实际应用中只有这样的进行特殊的处理。Rid为一个标识列，如果top后还有具体的字段，这样做是非常有好处的。因为这样可以避免 top的字段如果是逻辑索引的，查询的结果后实际表中的不一致（逻辑索引中的数据有可能和数据表中的不一致，而查询时如果处在索引则首先查询索引）\n\n### **14、说明：查询前10条记录**\n\n```\nselect top 10 * form table1 where 范围\n```\n\n### **15、说明：数据选择**\n\n选择在每一组b值相同的数据中对应的a最大的记录的所有信息(类似这样的用法可以用于论坛每月排行榜,每月热销产品分析,按科目成绩排名,等等.)\n\n```\nselect a,b,c from tablename ta where a=(select max(a) from tablename tb where tb.b=ta.b)\n```\n\n### **16、说明：派生表**\n\n包括所有在 TableA 中但不在 TableB和TableC 中的行并消除所有重复行而派生出一个结果表\n\n```\n(select a from tableA ) except (select a from tableB) except (select a from tableC)\n```\n\n### **17、说明：随机取出10条数据**\n\n```\nselect top 10 * from tablename order by newid()\n```\n\n### **18、说明：随机选择记录**\n\n```\nselect newid()\n```\n\n### **19、说明：删除重复记录**\n\n**　1、**\n\n```\ndelete from tablename where id not in (select max(id) from tablename group by col1,col2,...)\n```\n\n**　2、**\n\n```\nselect distinct * into temp from tablename \ndelete from tablename \ninsert into tablename select * from temp\n```\n\n> **评价：**这种操作牵连大量的数据的移动，这种做法不适合大容量但数据操作\n\n**3、** **例如：在一个外部表中导入数据，由于某些原因第一次只导入了一部分，但很难判断具体位置，这样只有在下一次全部导入，这样也就产生好多重复的字段，怎样删除重复字段**\n\n```\nalter table tablename \n--添加一个自增列 \nadd column_b int identity(1,1) \ndelete from tablename where column_b not in( \nselect max(column_b) from tablename group by column1,column2,...) \nalter table tablename drop column column_b\n```\n\n### **20、说明：列出数据库里所有的表名**\n\n```\nselect name from sysobjects where type='U' // U代表用户\n```\n\n### **21、说明：列出表里的所有的列名**\n\n```\nselect name from syscolumns where id=object_id('TableName')\n```\n\n### **22、说明：列示case**\n\n列示type、vender、pcs字段，以type字段排列，case可以方便地实现多重选择，类似select 中的case。\n\n```\nselect type,sum(case vender when 'A' then pcs else 0 end),sum(case vender when 'C' then pcs else 0 end),sum(case vender when 'B' then pcs else 0 end) FROM tablename group by type\n```\n\n显示结果：\n\n```\ntype vender pcs\n电脑 A 1 \n电脑 A 1 \n光盘 B 2 \n光盘 A 2 \n手机 B 3 \n手机 C 3\n```\n\n### **23、说明：初始化表table1**\n\n```\nTRUNCATE TABLE table1\n```\n\n### **24、说明：选择从10到15的记录**\n\n```\nselect top 5 * from (select top 15 * from table order by id asc) table_别名 order by id desc\n```\n\n## 三、技巧篇\n\n------\n\n### **1、SQL组合语句**\n\n1=1，1=2的使用，在SQL语句组合时用的较多\n\n**　\"where 1=** **1\" 是表示选择全部 \"where 1=2\"** **全部不选，**\n　如：\n\n```\nif @strWhere !='' \nbegin\nset @strSQL = 'select count(*) as Total from [' + @tblName + '] where ' + @strWhere \nend\nelse \nbegin\nset @strSQL = 'select count(*) as Total from [' + @tblName + ']' \nend\n```\n\n我们可以直接写成：\n\n```\n错误！未找到目录项。\nset @strSQL = 'select count(*) as Total from [' + @tblName + '] where 1=1 安定'+ @strWhere\n```\n\n### **2、收缩数据库**\n\n```\n--重建索引\nDBCC REINDEX\nDBCC INDEXDEFRAG\n--收缩数据和日志\nDBCC SHRINKDB\nDBCC SHRINKFILE\n```\n\n### **3、压缩数据库**\n\n```\ndbcc shrinkdatabase(dbname)\n```\n\n### **4、转移数据库给新用户以已存在用户权限**\n\n```\nexec sp_change_users_login 'update_one','newname','oldname'\ngo\n```\n\n### **5、检查备份集**\n\n```\nRESTORE VERIFYONLY from disk='E:\\dvbbs.bak'\n```\n\n### **6、修复数据库**\n\n```\nALTER DATABASE [dvbbs] SET SINGLE_USER\nGO\nDBCC CHECKDB('dvbbs',repair_allow_data_loss) WITH TABLOCK\nGO\nALTER DATABASE [dvbbs] SET MULTI_USER\nGO\n```\n\n### **7、日志清除**\n\n```\nSET NOCOUNT ON\nDECLARE @LogicalFileName sysname,\n@MaxMinutes INT,\n@NewSize INT\n```\n\n```\nUSE tablename -- 要操作的数据库名\nSELECT @LogicalFileName = 'tablename_log', -- 日志文件名 \n@MaxMinutes = 10, -- Limit on time allowed to wrap log.\n@NewSize = 1 -- 你想设定的日志文件的大小(M)\nSetup / initialize\nDECLARE @OriginalSize int\nSELECT @OriginalSize = size \nFROM sysfiles\nWHERE name = @LogicalFileName\nSELECT 'Original Size of ' + db_name() + ' LOG is ' + \nCONVERT(VARCHAR(30),@OriginalSize) + ' 8K pages or ' + \nCONVERT(VARCHAR(30),(@OriginalSize*8/1024)) + 'MB'\nFROM sysfiles\nWHERE name = @LogicalFileName\nCREATE TABLE DummyTrans\n(DummyColumn char (8000) not null)\n```\n\n```\nDECLARE @Counter INT,\n@StartTime DATETIME,\n@TruncLog VARCHAR(255)\nSELECT @StartTime = GETDATE(),\n@TruncLog = 'BACKUP LOG ' + db_name() + ' WITH TRUNCATE_ONLY'\nDBCC SHRINKFILE (@LogicalFileName, @NewSize)\nEXEC (@TruncLog)\n-- Wrap the log if necessary.\nWHILE @MaxMinutes > DATEDIFF (mi, @StartTime, GETDATE()) -- time has not expired\nAND @OriginalSize = (SELECT size FROM sysfiles WHERE name = @LogicalFileName) \nAND (@OriginalSize * 8 /1024) > @NewSize \nBEGIN -- Outer loop.\nSELECT @Counter = 0\nWHILE ((@Counter < @OriginalSize / 16) AND (@Counter < 50000))\nBEGIN -- update\nINSERT DummyTrans VALUES ('Fill Log') DELETE DummyTrans\nSELECT @Counter = @Counter + 1\nEND\nEXEC (@TruncLog) \nEND\nSELECT 'Final Size of ' + db_name() + ' LOG is ' +\nCONVERT(VARCHAR(30),size) + ' 8K pages or ' + \nCONVERT(VARCHAR(30),(size*8/1024)) + 'MB'\nFROM sysfiles \nWHERE name = @LogicalFileName\nDROP TABLE DummyTrans\nSET NOCOUNT OFF\n```\n\n### **8、说明：更改某个表**\n\n```\nexec sp_changeobjectowner 'tablename','dbo'\n```\n\n### **9、存储更改全部表**\n\n```\nCREATE PROCEDURE dbo.User_ChangeObjectOwnerBatch\n@OldOwner as NVARCHAR(128),\n@NewOwner as NVARCHAR(128)\nAS\nDECLARE @Name as NVARCHAR(128)\nDECLARE @Owner as NVARCHAR(128)\nDECLARE @OwnerName as NVARCHAR(128)\nDECLARE curObject CURSOR FOR \nselect 'Name' = name,\n'Owner' = user_name(uid)\nfrom sysobjects\nwhere user_name(uid)=@OldOwner\norder by name\nOPEN curObject\nFETCH NEXT FROM curObject INTO @Name, @Owner\nWHILE(@@FETCH_STATUS=0)\nBEGIN \nif @Owner=@OldOwner \nbegin\nset @OwnerName = @OldOwner + '.' + rtrim(@Name)\nexec sp_changeobjectowner @OwnerName, @NewOwner\nend\n-- select @name,@NewOwner,@OldOwner\nFETCH NEXT FROM curObject INTO @Name, @Owner\nEND\nclose curObject\ndeallocate curObject\nGO\n```\n\n### **10、SQL SERVER中直接循环写入数据**\n\n```\ndeclare @i int\nset @i=1\nwhile @i<30\nbegin\ninsert into test (userid) values(@i)\nset @i=@i+1\nend\n```\n\n案例 ：\n\n有如下表，要求就裱中所有沒有及格的成績，在每次增長0.1的基礎上，使他們剛好及格：\n\n```\nName score\nZhangshan 80\nLishi 59\nWangwu 50\nSongquan 69\nwhile((select min(score) from tb_table)<60) \nbegin \nupdate tb_table set score =score*1.01 \nwhere score<60 \nif (select min(score) from tb_table)>60 \nbreak \nelse \ncontinue \nend\n```\n\n## **四、数据开发篇**\n\n------\n\n### **1.按姓氏笔画排序**\n\n```\nSelect * From TableName Order By CustomerName Collate Chinese_PRC_Stroke_ci_as //从少到多\n```\n\n### **2.数据库加密**\n\n```\nselect encrypt('原始密码') \nselect pwdencrypt('原始密码') \nselect pwdcompare('原始密码','加密后密码') = 1--相同；否则不相同 encrypt('原始密码') \nselect pwdencrypt('原始密码') \nselect pwdcompare('原始密码','加密后密码') = 1--相同；否则不相同\n```\n\n### **3.取回表中字段**\n\n```\ndeclare @list varchar(1000), \n@sql nvarchar(1000)  \nselect @list=@list+','+b.name from sysobjects a,syscolumns b where a.id=b.id and a.name='表A' \nset @sql='select '+right(@list,len(@list)-1)+' from 表A'  \nexec (@sql)\n```\n\n### **4.查看硬盘分区**\n\n```\nEXEC master..xp_fixeddrives\n```\n\n### **5.比较A,B表是否相等**\n\n```\nif (select checksum_agg(binary_checksum(*)) from A) \n= \n(select checksum_agg(binary_checksum(*)) from B) \nprint '相等' \nelse \nprint '不相等'\n```\n\n### **6.杀掉所有的事件探察器进程**\n\n```\nDECLARE hcforeach CURSOR GLOBAL FOR SELECT 'kill '+RTRIM(spid) FROM master.dbo.sysprocesses \nWHERE program_name IN('SQL profiler',N'SQL 事件探查器') \nEXEC sp_msforeach_worker '?'\n```\n\n### **7.记录搜索**\n\n开头到N条记录\n\n```\nSelect Top N * From 表\n```\n\nN到M条记录(要有主索引ID)\n\n```\nSelect Top M-N * From 表 Where ID in (Select Top M ID From 表) Order by ID Desc\n```\n\nN到结尾记录\n\n```\nSelect Top N * From 表 Order by ID Desc\n```\n\n案例\n\n示例1：一张表有一万多条记录，表的第一个字段 RecID 是自增长字段， 写一个SQL语句， 找出表的第31到第40个记录。\n\n```\nselect top 10 recid from A where recid not in(select top 30 recid from A)\n```\n\n**　分析：**如果这样写会产生某些问题，如果recid在表中存在逻辑索引。\n\nselect top 10 recid from A where......是从索引中查找，而后面的select top 30 recid from A则在数据表中查找，这样由于索引中的顺序有可能和数据表中的不一致，这样就导致查询到的不是本来的欲得到的数据。\n\n**　解决方案**\n\n**　1， 用order by** select top 30 recid from A order by ricid **如果该字段不是自增长，就会出现问题**\n\n**　2， 在那个子查询中也加条件：**select top 30 recid from A where recid>-1\n\n**　示例2：查询表中的最后以条记录，并不知道这个表共有多少数据,以及表结构。**\n\n```\nset @s = 'select top 1 * from T where pid not in (select top ' + str(@count-1) + ' pid from T)'\nprint @s exec sp_executesql @s\n```\n\n### **9：获取当前数据库中的所有用户表**\n\n```\nselect Name from sysobjects where xtype='u' and status>=0\n```\n\n### **10：获取某一个表的所有字段**\n\n```\nselect name from syscolumns where id=object_id('表名')\n```\n\n```\nselect name from syscolumns where id in (select id from sysobjects where type = 'u' and name = '表名')\n```\n\n> **注：**以上两种方式的效果相同\n\n### **11：查看与某一个表相关的视图、存储过程、函数**\n\n```\nselect a.* from sysobjects a, syscomments b where a.id = b.id and b.text like '%表名%'\n```\n\n### **12：查看当前数据库中所有存储过程**\n\n```\nselect name as 存储过程名称 from sysobjects where xtype='P'\n```\n\n### **13：查询用户创建的所有数据库**\n\n```\nselect * from master..sysdatabases D where sid not in(select sid from master..syslogins where name='sa')\n```\n\n或者：\n\n```\nselect dbid, name AS DB_NAME from master..sysdatabases where sid <> 0x01\n```\n\n### **14：查询某一个表的字段和数据类型**\n\n```\nselect column_name,data_type from information_schema.columns \nwhere table_name = '表名'\n```\n\n### **15：不同服务器数据库之间的数据操作**\n\n--创建链接服务器\n\n```\nexec sp_addlinkedserver 'ITSV ', ' ', 'SQLOLEDB ', '远程服务器名或ip地址 '\nexec sp_addlinkedsrvlogin 'ITSV ', 'false ',null, '用户名 ', '密码 '\n```\n\n--查询示例\n\n```\nselect * from ITSV.数据库名.dbo.表名\n```\n\n--导入示例\n\n```\nselect * into 表 from ITSV.数据库名.dbo.表名\n```\n\n--以后不再使用时删除链接服务器\n\n```\nexec sp_dropserver 'ITSV ', 'droplogins '\n```\n\n--连接远程/局域网数据(openrowset/openquery/opendatasource)\n\n--1、openrowset\n\n--查询示例：\n\n```\nselect * from openrowset( 'SQLOLEDB ', 'sql服务器名 '; '用户名 '; '密码 ',数据库名.dbo.表名)\n```\n\n--生成本地表：\n\n```\nselect * into 表 from openrowset( 'SQLOLEDB ', 'sql服务器名 '; '用户名 '; '密码 ',数据库名.dbo.表名)\n```\n\n--把本地表导入远程表：\n\n```\ninsert openrowset( 'SQLOLEDB ', 'sql服务器名 '; '用户名 '; '密码 ',数据库名.dbo.表名)\nselect *from 本地表\n```\n\n--更新本地表：\n\n```\nupdate b\nset b.列A=a.列A\nfrom openrowset( 'SQLOLEDB ', 'sql服务器名 '; '用户名 '; '密码 ',数据库名.dbo.表名)as a inner join 本地表 b\non a.column1=b.column1\n```\n\n--openquery用法需要创建一个连接\n\n--首先创建一个连接创建链接服务器\n\n```\nexec sp_addlinkedserver 'ITSV ', ' ', 'SQLOLEDB ', '远程服务器名或ip地址 '\n```\n\n--查询\n\n```\nselect *\nFROM openquery(ITSV, 'SELECT * FROM 数据库.dbo.表名 ')\n```\n\n--把本地表导入远程表\n\n```\ninsert openquery(ITSV, 'SELECT * FROM 数据库.dbo.表名 ')\nselect * from 本地表\n```\n\n--更新本地表\n\n```\nupdate b\nset b.列B=a.列B\nFROM openquery(ITSV, 'SELECT * FROM 数据库.dbo.表名 ') as a\ninner join 本地表 b on a.列A=b.列A\n```\n\n--3、opendatasource/openrowset\n\n```\nSELECT *\nFROM opendatasource( 'SQLOLEDB ', 'Data Source=ip/ServerName;User ID=登陆名;Password=密码' ).test.dbo.roy_ta\n```\n\n--把本地表导入远程表\n\n```\ninsert opendatasource( 'SQLOLEDB ', 'Data Source=ip/ServerName;User ID=登陆名;Password=密码 ').数据库.dbo.表名\nselect * from 本地表\n```\n","source":"wiki/sql/appendix/appendix.md","raw":"---\nlayout: wiki  # 使用wiki布局模板\nwiki: sql # 这是项目id，对应 /_data/wiki/sql.yml\ntitle: SQL语句大全分类整理\norder: 1\n---\n\n## 详尽的SQL语句大全分类整理\n\n------\n\nStructured Query Language 即结构化查询语言，简称 SQL。SQL 是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统；同时也是数据库脚本文件的扩展名。SQL 语句的种类还和数量都很多，其中的很多语句也是经常要用到的，下面就把常用的 SQL 语句分类整理一下，并且还可以打包下载，希望能对你有所帮助。\n\n- 先献上下载地址：\n\n## 一、基础篇\n\n------\n\n### **1、说明：创建数据库**\n\n```\nCREATE DATABASE database-name\n```\n\n### **2、说明：删除数据库**\n\n```\ndrop database dbname\n```\n\n### **3、说明：备份sql server**\n\n--- 创建 备份数据的 device\n\n```\nUSE master\nEXEC sp_addumpdevice 'disk', 'testBack', 'c:\\mssql7backup\\MyNwind_1.dat'\n```\n\n--- 开始 备份\n\n```\nBACKUP DATABASE pubs TO testBack\n```\n\n### **4、说明：创建新表**\n\n```\ncreate table tabname(col1 type1 [not null] [primary key],col2 type2 [not null],..)\n```\n\n根据已有的表创建新表：\n　A：create table tab_new like tab_old (使用旧表创建新表)\n　B ：create table tab_new as select col1,col2... from tab_old definition only\n\n### **5、说明：删除新表**\n\n```\ndrop table tabname\n```\n\n### **6、说明：增加一个列**\n\n```\nAlter table tabname add column col type\n```\n\n> **注：**列增加后将不能删除。DB2中列加上后数据类型也不能改变，唯一能改变的是增加varchar类型的长度。\n\n### **7****、说明：添加主键**\n\n```\nAlter table tabname add primary key(col)\n```\n\n删除主键：\n\n```\nAlter table tabname drop primary key(col)\n```\n\n### **8、说明：创建索引**\n\n```\ncreate [unique] index idxname on tabname(col....)\n```\n\n删除索引：\n\n```\nDROP INDEX index_name ON table_name\n```\n\n> **注：**索引是不可更改的，想更改必须删除重新建。\n\n### **9、说明：创建视图**\n\n```\ncreate view viewname as select statement\n```\n\n删除视图：\n\n```\ndrop view viewname\n```\n\n### **10、说明：几个简单的sql语句**\n\n- 选择：\n\n```\nselect * from table1 where 范围\n```\n\n- 插入：\n\n  ```\n  insert into table1(field1,field2) values(value1,value2)\n  ```\n\n- 删除：\n\n  ```\n  delete from table1 where 范围\n  ```\n\n- 更新：\n\n  ```\n  update table1 set field1=value1 where 范围\n  ```\n\n- 查找：\n\n  ```\n  select * from table1 where field1 like '%value1%'\n  ```\n\n  **---like** 的语法很精妙，请查资料!\n\n- 排序：\n\n  ```\n  select * from table1 order by field1,field2 [desc]\n  ```\n\n- 总数：\n\n  ```\n  select count as totalcount from table1\n  ```\n\n- 求和：\n\n  ```\n  select sum(field1) as sumvalue from table1\n  ```\n\n- 平均：\n\n  ```\n  select avg(field1) as avgvalue from table1\n  ```\n\n- 最大：\n\n  ```\n  select max(field1) as maxvalue from table1\n  ```\n\n- 最小：\n\n  ```\n  select min(field1) as minvalue from table1\n  ```\n\n### **11、说明：几个高级查询运算词**\n\n**　A： UNION 运算符**\n　UNION 运算符通过组合其他两个结果表（例如 TABLE1 和 TABLE2）并消去表中任何重复行而派生出一个结果表。当 ALL 随 UNION一起使用时（即 UNION ALL），不消除重复行。两种情况下，派生表的每一行不是来自 TABLE1 就是来自 TABLE2。\n\n**　B： EXCEPT 运算符** 　EXCEPT 运算符通过包括所有在 TABLE1 中但不在 TABLE2 中的行并消除所有重复行而派生出一个结果表。当 ALL 随 EXCEPT 一起使用时 (EXCEPT ALL)，不消除重复行。\n\n**　C： INTERSECT 运算符** 　INTERSECT 运算符通过只包括 TABLE1 和 TABLE2 中都有的行并消除所有重复行而派生出一个结果表。当 ALL 随 INTERSECT 一起使用时 (INTERSECT ALL)，不消除重复行。\n\n> **注：**使用运算词的几个查询结果行必须是一致的。\n\n### **12、说明：使用外连接**\n\n**　A、left （outer） join：**\n　左外连接（左连接）：结果集几包括连接表的匹配行，也包括左连接表的所有行。\n　SQL: select a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a = b.c\n\n**　B：right （outer） join:** 　右外连接(右连接)：结果集既包括连接表的匹配连接行，也包括右连接表的所有行。\n\n**　C：full/cross （outer） join：**\n　全外连接：不仅包括符号连接表的匹配行，还包括两个连接表中的所有记录。\n\n### **13、分组:Group by:**\n\n一张表，一旦分组 完成后，查询后只能得到组相关的信息。\n　组相关的信息：（统计信息） count,sum,max,min,avg 分组的标准)\n　在SQLServer中分组时：不能以 text,ntext,image类型的字段作为分组依据\n　在selecte统计函数中的字段，不能和普通的字段放在一起；\n\n### **14、对数据库进行操作**\n\n分离数据库： sp_detach_db; 附加数据库：sp_attach_db 后接表明，附加需要完整的路径名\n\n### **15、如何修改数据库的名称**\n\n```\nsp_renamedb 'old_name', 'new_name'\n```\n\n## 二、提升篇\n\n------\n\n### **1、说明：复制表**\n\n**(只复制结构,源表名：a 新表名：b) (Access可用)**\n\n**　方法一：**（仅用于SQlServer）\n\n```\nselect * into b from a where 1<>1\n```\n\n**　方法二：**\n\n```\nselect top 0 * into b from a\n```\n\n### **2、说明：拷贝表**\n\n**(拷贝数据,源表名：a 目标表名：b) (Access可用)**\n\n```\ninsert into b(a, b, c) select d,e,f from a;\n```\n\n### **3、说明：跨数据库之间表的拷贝**\n\n**(具体数据使用绝对路径) (Access可用)**\n\n```\ninsert into b(a, b, c) select d,e,f from b in '具体数据库' where 条件\n```\n\n例子：\n\n```\n..from b in '\"&Server.MapPath(\".\")&\"\\data.mdb\" &\"' where..\n```\n\n### **4、说明：子查询**\n\n**(表名1：a 表名2：b)**\n\n```\nselect a,b,c from a where a IN (select d from b )\n```\n\n或者:\n\n```\nselect a,b,c from a where a IN (1,2,3)\n```\n\n### **5、说明：显示文章、提交人和最后回复时间**\n\n```\nselect a.title,a.username,b.adddate from table a,(select max(adddate) adddate from table where table.title=a.title) b\n```\n\n### **6、说明：外连接查询**\n\n**(表名1：a 表名2：b)**\n\n```\nselect a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a = b.c\n```\n\n### **7、说明：在线视图查询**\n\n**(表名1：a )**\n\n```\nselect * from (SELECT a,b,c FROM a) T where t.a > 1;\n```\n\n### **8、说明：between的用法**\n\n**between限制查询数据范围时包括了边界值,not between不包括**\n\n```\nselect * from table1 where time between time1 and time2\n```\n\n```\nselect a,b,c, from table1 where a not between 数值1 and 数值2\n```\n\n### **9、说明：in 的使用方法**\n\n```\nselect * from table1 where a [not] in ('值1','值2','值4','值6')\n```\n\n### **10、说明：两张关联表删除主表中已经在副表中没有的信息**\n\n```\ndelete from table1 where not exists ( select * from table2 where table1.field1=table2.field1 )\n```\n\n### **11、说明：四表联查问题**\n\n```\nselect * from a left inner join b on a.a=b.b right inner join c on a.a=c.c inner join d on a.a=d.d where ......\n```\n\n### **12、说明：日程安排提前五分钟提醒**\n\n```\nselect * from 日程安排 where datediff('minute',f开始时间,getdate())>5\n```\n\n### **13、说明：一条sql 语句搞定数据库分页**\n\n```\nselect top 10 b.* from (select top 20 主键字段,排序字段 from 表名 order by 排序字段 desc) a,表名 b where b.主键字段 = a.主键字段 order by a.排序字段\n```\n\n**　具体实现：**\n　关于数据库分页：\n\n```\ndeclare @start int,@end int\n@sql nvarchar(600)\nset @sql='select top'+str(@end-@start+1)+'+from T where rid not in(select top'+str(@str-1)+'Rid from T where Rid>-1)'\nexec sp_executesql @sql\n```\n\n> **注意：**在top后不能直接跟一个变量，所以在实际应用中只有这样的进行特殊的处理。Rid为一个标识列，如果top后还有具体的字段，这样做是非常有好处的。因为这样可以避免 top的字段如果是逻辑索引的，查询的结果后实际表中的不一致（逻辑索引中的数据有可能和数据表中的不一致，而查询时如果处在索引则首先查询索引）\n\n### **14、说明：查询前10条记录**\n\n```\nselect top 10 * form table1 where 范围\n```\n\n### **15、说明：数据选择**\n\n选择在每一组b值相同的数据中对应的a最大的记录的所有信息(类似这样的用法可以用于论坛每月排行榜,每月热销产品分析,按科目成绩排名,等等.)\n\n```\nselect a,b,c from tablename ta where a=(select max(a) from tablename tb where tb.b=ta.b)\n```\n\n### **16、说明：派生表**\n\n包括所有在 TableA 中但不在 TableB和TableC 中的行并消除所有重复行而派生出一个结果表\n\n```\n(select a from tableA ) except (select a from tableB) except (select a from tableC)\n```\n\n### **17、说明：随机取出10条数据**\n\n```\nselect top 10 * from tablename order by newid()\n```\n\n### **18、说明：随机选择记录**\n\n```\nselect newid()\n```\n\n### **19、说明：删除重复记录**\n\n**　1、**\n\n```\ndelete from tablename where id not in (select max(id) from tablename group by col1,col2,...)\n```\n\n**　2、**\n\n```\nselect distinct * into temp from tablename \ndelete from tablename \ninsert into tablename select * from temp\n```\n\n> **评价：**这种操作牵连大量的数据的移动，这种做法不适合大容量但数据操作\n\n**3、** **例如：在一个外部表中导入数据，由于某些原因第一次只导入了一部分，但很难判断具体位置，这样只有在下一次全部导入，这样也就产生好多重复的字段，怎样删除重复字段**\n\n```\nalter table tablename \n--添加一个自增列 \nadd column_b int identity(1,1) \ndelete from tablename where column_b not in( \nselect max(column_b) from tablename group by column1,column2,...) \nalter table tablename drop column column_b\n```\n\n### **20、说明：列出数据库里所有的表名**\n\n```\nselect name from sysobjects where type='U' // U代表用户\n```\n\n### **21、说明：列出表里的所有的列名**\n\n```\nselect name from syscolumns where id=object_id('TableName')\n```\n\n### **22、说明：列示case**\n\n列示type、vender、pcs字段，以type字段排列，case可以方便地实现多重选择，类似select 中的case。\n\n```\nselect type,sum(case vender when 'A' then pcs else 0 end),sum(case vender when 'C' then pcs else 0 end),sum(case vender when 'B' then pcs else 0 end) FROM tablename group by type\n```\n\n显示结果：\n\n```\ntype vender pcs\n电脑 A 1 \n电脑 A 1 \n光盘 B 2 \n光盘 A 2 \n手机 B 3 \n手机 C 3\n```\n\n### **23、说明：初始化表table1**\n\n```\nTRUNCATE TABLE table1\n```\n\n### **24、说明：选择从10到15的记录**\n\n```\nselect top 5 * from (select top 15 * from table order by id asc) table_别名 order by id desc\n```\n\n## 三、技巧篇\n\n------\n\n### **1、SQL组合语句**\n\n1=1，1=2的使用，在SQL语句组合时用的较多\n\n**　\"where 1=** **1\" 是表示选择全部 \"where 1=2\"** **全部不选，**\n　如：\n\n```\nif @strWhere !='' \nbegin\nset @strSQL = 'select count(*) as Total from [' + @tblName + '] where ' + @strWhere \nend\nelse \nbegin\nset @strSQL = 'select count(*) as Total from [' + @tblName + ']' \nend\n```\n\n我们可以直接写成：\n\n```\n错误！未找到目录项。\nset @strSQL = 'select count(*) as Total from [' + @tblName + '] where 1=1 安定'+ @strWhere\n```\n\n### **2、收缩数据库**\n\n```\n--重建索引\nDBCC REINDEX\nDBCC INDEXDEFRAG\n--收缩数据和日志\nDBCC SHRINKDB\nDBCC SHRINKFILE\n```\n\n### **3、压缩数据库**\n\n```\ndbcc shrinkdatabase(dbname)\n```\n\n### **4、转移数据库给新用户以已存在用户权限**\n\n```\nexec sp_change_users_login 'update_one','newname','oldname'\ngo\n```\n\n### **5、检查备份集**\n\n```\nRESTORE VERIFYONLY from disk='E:\\dvbbs.bak'\n```\n\n### **6、修复数据库**\n\n```\nALTER DATABASE [dvbbs] SET SINGLE_USER\nGO\nDBCC CHECKDB('dvbbs',repair_allow_data_loss) WITH TABLOCK\nGO\nALTER DATABASE [dvbbs] SET MULTI_USER\nGO\n```\n\n### **7、日志清除**\n\n```\nSET NOCOUNT ON\nDECLARE @LogicalFileName sysname,\n@MaxMinutes INT,\n@NewSize INT\n```\n\n```\nUSE tablename -- 要操作的数据库名\nSELECT @LogicalFileName = 'tablename_log', -- 日志文件名 \n@MaxMinutes = 10, -- Limit on time allowed to wrap log.\n@NewSize = 1 -- 你想设定的日志文件的大小(M)\nSetup / initialize\nDECLARE @OriginalSize int\nSELECT @OriginalSize = size \nFROM sysfiles\nWHERE name = @LogicalFileName\nSELECT 'Original Size of ' + db_name() + ' LOG is ' + \nCONVERT(VARCHAR(30),@OriginalSize) + ' 8K pages or ' + \nCONVERT(VARCHAR(30),(@OriginalSize*8/1024)) + 'MB'\nFROM sysfiles\nWHERE name = @LogicalFileName\nCREATE TABLE DummyTrans\n(DummyColumn char (8000) not null)\n```\n\n```\nDECLARE @Counter INT,\n@StartTime DATETIME,\n@TruncLog VARCHAR(255)\nSELECT @StartTime = GETDATE(),\n@TruncLog = 'BACKUP LOG ' + db_name() + ' WITH TRUNCATE_ONLY'\nDBCC SHRINKFILE (@LogicalFileName, @NewSize)\nEXEC (@TruncLog)\n-- Wrap the log if necessary.\nWHILE @MaxMinutes > DATEDIFF (mi, @StartTime, GETDATE()) -- time has not expired\nAND @OriginalSize = (SELECT size FROM sysfiles WHERE name = @LogicalFileName) \nAND (@OriginalSize * 8 /1024) > @NewSize \nBEGIN -- Outer loop.\nSELECT @Counter = 0\nWHILE ((@Counter < @OriginalSize / 16) AND (@Counter < 50000))\nBEGIN -- update\nINSERT DummyTrans VALUES ('Fill Log') DELETE DummyTrans\nSELECT @Counter = @Counter + 1\nEND\nEXEC (@TruncLog) \nEND\nSELECT 'Final Size of ' + db_name() + ' LOG is ' +\nCONVERT(VARCHAR(30),size) + ' 8K pages or ' + \nCONVERT(VARCHAR(30),(size*8/1024)) + 'MB'\nFROM sysfiles \nWHERE name = @LogicalFileName\nDROP TABLE DummyTrans\nSET NOCOUNT OFF\n```\n\n### **8、说明：更改某个表**\n\n```\nexec sp_changeobjectowner 'tablename','dbo'\n```\n\n### **9、存储更改全部表**\n\n```\nCREATE PROCEDURE dbo.User_ChangeObjectOwnerBatch\n@OldOwner as NVARCHAR(128),\n@NewOwner as NVARCHAR(128)\nAS\nDECLARE @Name as NVARCHAR(128)\nDECLARE @Owner as NVARCHAR(128)\nDECLARE @OwnerName as NVARCHAR(128)\nDECLARE curObject CURSOR FOR \nselect 'Name' = name,\n'Owner' = user_name(uid)\nfrom sysobjects\nwhere user_name(uid)=@OldOwner\norder by name\nOPEN curObject\nFETCH NEXT FROM curObject INTO @Name, @Owner\nWHILE(@@FETCH_STATUS=0)\nBEGIN \nif @Owner=@OldOwner \nbegin\nset @OwnerName = @OldOwner + '.' + rtrim(@Name)\nexec sp_changeobjectowner @OwnerName, @NewOwner\nend\n-- select @name,@NewOwner,@OldOwner\nFETCH NEXT FROM curObject INTO @Name, @Owner\nEND\nclose curObject\ndeallocate curObject\nGO\n```\n\n### **10、SQL SERVER中直接循环写入数据**\n\n```\ndeclare @i int\nset @i=1\nwhile @i<30\nbegin\ninsert into test (userid) values(@i)\nset @i=@i+1\nend\n```\n\n案例 ：\n\n有如下表，要求就裱中所有沒有及格的成績，在每次增長0.1的基礎上，使他們剛好及格：\n\n```\nName score\nZhangshan 80\nLishi 59\nWangwu 50\nSongquan 69\nwhile((select min(score) from tb_table)<60) \nbegin \nupdate tb_table set score =score*1.01 \nwhere score<60 \nif (select min(score) from tb_table)>60 \nbreak \nelse \ncontinue \nend\n```\n\n## **四、数据开发篇**\n\n------\n\n### **1.按姓氏笔画排序**\n\n```\nSelect * From TableName Order By CustomerName Collate Chinese_PRC_Stroke_ci_as //从少到多\n```\n\n### **2.数据库加密**\n\n```\nselect encrypt('原始密码') \nselect pwdencrypt('原始密码') \nselect pwdcompare('原始密码','加密后密码') = 1--相同；否则不相同 encrypt('原始密码') \nselect pwdencrypt('原始密码') \nselect pwdcompare('原始密码','加密后密码') = 1--相同；否则不相同\n```\n\n### **3.取回表中字段**\n\n```\ndeclare @list varchar(1000), \n@sql nvarchar(1000)  \nselect @list=@list+','+b.name from sysobjects a,syscolumns b where a.id=b.id and a.name='表A' \nset @sql='select '+right(@list,len(@list)-1)+' from 表A'  \nexec (@sql)\n```\n\n### **4.查看硬盘分区**\n\n```\nEXEC master..xp_fixeddrives\n```\n\n### **5.比较A,B表是否相等**\n\n```\nif (select checksum_agg(binary_checksum(*)) from A) \n= \n(select checksum_agg(binary_checksum(*)) from B) \nprint '相等' \nelse \nprint '不相等'\n```\n\n### **6.杀掉所有的事件探察器进程**\n\n```\nDECLARE hcforeach CURSOR GLOBAL FOR SELECT 'kill '+RTRIM(spid) FROM master.dbo.sysprocesses \nWHERE program_name IN('SQL profiler',N'SQL 事件探查器') \nEXEC sp_msforeach_worker '?'\n```\n\n### **7.记录搜索**\n\n开头到N条记录\n\n```\nSelect Top N * From 表\n```\n\nN到M条记录(要有主索引ID)\n\n```\nSelect Top M-N * From 表 Where ID in (Select Top M ID From 表) Order by ID Desc\n```\n\nN到结尾记录\n\n```\nSelect Top N * From 表 Order by ID Desc\n```\n\n案例\n\n示例1：一张表有一万多条记录，表的第一个字段 RecID 是自增长字段， 写一个SQL语句， 找出表的第31到第40个记录。\n\n```\nselect top 10 recid from A where recid not in(select top 30 recid from A)\n```\n\n**　分析：**如果这样写会产生某些问题，如果recid在表中存在逻辑索引。\n\nselect top 10 recid from A where......是从索引中查找，而后面的select top 30 recid from A则在数据表中查找，这样由于索引中的顺序有可能和数据表中的不一致，这样就导致查询到的不是本来的欲得到的数据。\n\n**　解决方案**\n\n**　1， 用order by** select top 30 recid from A order by ricid **如果该字段不是自增长，就会出现问题**\n\n**　2， 在那个子查询中也加条件：**select top 30 recid from A where recid>-1\n\n**　示例2：查询表中的最后以条记录，并不知道这个表共有多少数据,以及表结构。**\n\n```\nset @s = 'select top 1 * from T where pid not in (select top ' + str(@count-1) + ' pid from T)'\nprint @s exec sp_executesql @s\n```\n\n### **9：获取当前数据库中的所有用户表**\n\n```\nselect Name from sysobjects where xtype='u' and status>=0\n```\n\n### **10：获取某一个表的所有字段**\n\n```\nselect name from syscolumns where id=object_id('表名')\n```\n\n```\nselect name from syscolumns where id in (select id from sysobjects where type = 'u' and name = '表名')\n```\n\n> **注：**以上两种方式的效果相同\n\n### **11：查看与某一个表相关的视图、存储过程、函数**\n\n```\nselect a.* from sysobjects a, syscomments b where a.id = b.id and b.text like '%表名%'\n```\n\n### **12：查看当前数据库中所有存储过程**\n\n```\nselect name as 存储过程名称 from sysobjects where xtype='P'\n```\n\n### **13：查询用户创建的所有数据库**\n\n```\nselect * from master..sysdatabases D where sid not in(select sid from master..syslogins where name='sa')\n```\n\n或者：\n\n```\nselect dbid, name AS DB_NAME from master..sysdatabases where sid <> 0x01\n```\n\n### **14：查询某一个表的字段和数据类型**\n\n```\nselect column_name,data_type from information_schema.columns \nwhere table_name = '表名'\n```\n\n### **15：不同服务器数据库之间的数据操作**\n\n--创建链接服务器\n\n```\nexec sp_addlinkedserver 'ITSV ', ' ', 'SQLOLEDB ', '远程服务器名或ip地址 '\nexec sp_addlinkedsrvlogin 'ITSV ', 'false ',null, '用户名 ', '密码 '\n```\n\n--查询示例\n\n```\nselect * from ITSV.数据库名.dbo.表名\n```\n\n--导入示例\n\n```\nselect * into 表 from ITSV.数据库名.dbo.表名\n```\n\n--以后不再使用时删除链接服务器\n\n```\nexec sp_dropserver 'ITSV ', 'droplogins '\n```\n\n--连接远程/局域网数据(openrowset/openquery/opendatasource)\n\n--1、openrowset\n\n--查询示例：\n\n```\nselect * from openrowset( 'SQLOLEDB ', 'sql服务器名 '; '用户名 '; '密码 ',数据库名.dbo.表名)\n```\n\n--生成本地表：\n\n```\nselect * into 表 from openrowset( 'SQLOLEDB ', 'sql服务器名 '; '用户名 '; '密码 ',数据库名.dbo.表名)\n```\n\n--把本地表导入远程表：\n\n```\ninsert openrowset( 'SQLOLEDB ', 'sql服务器名 '; '用户名 '; '密码 ',数据库名.dbo.表名)\nselect *from 本地表\n```\n\n--更新本地表：\n\n```\nupdate b\nset b.列A=a.列A\nfrom openrowset( 'SQLOLEDB ', 'sql服务器名 '; '用户名 '; '密码 ',数据库名.dbo.表名)as a inner join 本地表 b\non a.column1=b.column1\n```\n\n--openquery用法需要创建一个连接\n\n--首先创建一个连接创建链接服务器\n\n```\nexec sp_addlinkedserver 'ITSV ', ' ', 'SQLOLEDB ', '远程服务器名或ip地址 '\n```\n\n--查询\n\n```\nselect *\nFROM openquery(ITSV, 'SELECT * FROM 数据库.dbo.表名 ')\n```\n\n--把本地表导入远程表\n\n```\ninsert openquery(ITSV, 'SELECT * FROM 数据库.dbo.表名 ')\nselect * from 本地表\n```\n\n--更新本地表\n\n```\nupdate b\nset b.列B=a.列B\nFROM openquery(ITSV, 'SELECT * FROM 数据库.dbo.表名 ') as a\ninner join 本地表 b on a.列A=b.列A\n```\n\n--3、opendatasource/openrowset\n\n```\nSELECT *\nFROM opendatasource( 'SQLOLEDB ', 'Data Source=ip/ServerName;User ID=登陆名;Password=密码' ).test.dbo.roy_ta\n```\n\n--把本地表导入远程表\n\n```\ninsert opendatasource( 'SQLOLEDB ', 'Data Source=ip/ServerName;User ID=登陆名;Password=密码 ').数据库.dbo.表名\nselect * from 本地表\n```\n","date":"2025-06-11T07:50:58.418Z","updated":"2025-06-11T07:50:58.414Z","path":"wiki/sql/appendix/appendix.html","_id":"cmbrn5caf0000mxx04q5n4mb1","comments":1,"content":"<h2 id=\"详尽的SQL语句大全分类整理\"><a href=\"#详尽的SQL语句大全分类整理\" class=\"headerlink\" title=\"详尽的SQL语句大全分类整理\"></a>详尽的SQL语句大全分类整理</h2><hr>\n<p>Structured Query Language 即结构化查询语言，简称 SQL。SQL 是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统；同时也是数据库脚本文件的扩展名。SQL 语句的种类还和数量都很多，其中的很多语句也是经常要用到的，下面就把常用的 SQL 语句分类整理一下，并且还可以打包下载，希望能对你有所帮助。</p>\n<ul>\n<li>先献上下载地址：</li>\n</ul>\n<h2 id=\"一、基础篇\"><a href=\"#一、基础篇\" class=\"headerlink\" title=\"一、基础篇\"></a>一、基础篇</h2><hr>\n<h3 id=\"1、说明：创建数据库\"><a href=\"#1、说明：创建数据库\" class=\"headerlink\" title=\"1、说明：创建数据库\"></a><strong>1、说明：创建数据库</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE database-name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、说明：删除数据库\"><a href=\"#2、说明：删除数据库\" class=\"headerlink\" title=\"2、说明：删除数据库\"></a><strong>2、说明：删除数据库</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">drop database dbname</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、说明：备份sql-server\"><a href=\"#3、说明：备份sql-server\" class=\"headerlink\" title=\"3、说明：备份sql server\"></a><strong>3、说明：备份sql server</strong></h3><p>— 创建 备份数据的 device</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">USE master</span><br><span class=\"line\">EXEC sp_addumpdevice &#x27;disk&#x27;, &#x27;testBack&#x27;, &#x27;c:\\mssql7backup\\MyNwind_1.dat&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>— 开始 备份</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">BACKUP DATABASE pubs TO testBack</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、说明：创建新表\"><a href=\"#4、说明：创建新表\" class=\"headerlink\" title=\"4、说明：创建新表\"></a><strong>4、说明：创建新表</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create table tabname(col1 type1 [not null] [primary key],col2 type2 [not null],..)</span><br></pre></td></tr></table></figure>\n\n<p>根据已有的表创建新表：<br>　A：create table tab_new like tab_old (使用旧表创建新表)<br>　B ：create table tab_new as select col1,col2… from tab_old definition only</p>\n<h3 id=\"5、说明：删除新表\"><a href=\"#5、说明：删除新表\" class=\"headerlink\" title=\"5、说明：删除新表\"></a><strong>5、说明：删除新表</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">drop table tabname</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、说明：增加一个列\"><a href=\"#6、说明：增加一个列\" class=\"headerlink\" title=\"6、说明：增加一个列\"></a><strong>6、说明：增加一个列</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Alter table tabname add column col type</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注：**列增加后将不能删除。DB2中列加上后数据类型也不能改变，唯一能改变的是增加varchar类型的长度。</p>\n</blockquote>\n<h3 id=\"7、说明：添加主键\"><a href=\"#7、说明：添加主键\" class=\"headerlink\" title=\"7、说明：添加主键\"></a><strong>7</strong><strong>、说明：添加主键</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Alter table tabname add primary key(col)</span><br></pre></td></tr></table></figure>\n\n<p>删除主键：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Alter table tabname drop primary key(col)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、说明：创建索引\"><a href=\"#8、说明：创建索引\" class=\"headerlink\" title=\"8、说明：创建索引\"></a><strong>8、说明：创建索引</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create [unique] index idxname on tabname(col....)</span><br></pre></td></tr></table></figure>\n\n<p>删除索引：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP INDEX index_name ON table_name</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注：**索引是不可更改的，想更改必须删除重新建。</p>\n</blockquote>\n<h3 id=\"9、说明：创建视图\"><a href=\"#9、说明：创建视图\" class=\"headerlink\" title=\"9、说明：创建视图\"></a><strong>9、说明：创建视图</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create view viewname as select statement</span><br></pre></td></tr></table></figure>\n\n<p>删除视图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">drop view viewname</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、说明：几个简单的sql语句\"><a href=\"#10、说明：几个简单的sql语句\" class=\"headerlink\" title=\"10、说明：几个简单的sql语句\"></a><strong>10、说明：几个简单的sql语句</strong></h3><ul>\n<li>选择：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from table1 where 范围</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>插入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert into table1(field1,field2) values(value1,value2)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">delete from table1 where 范围</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">update table1 set field1=value1 where 范围</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查找：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from table1 where field1 like &#x27;%value1%&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><strong>—like</strong> 的语法很精妙，请查资料!</p>\n</li>\n<li><p>排序：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from table1 order by field1,field2 [desc]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select count as totalcount from table1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>求和：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select sum(field1) as sumvalue from table1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>平均：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select avg(field1) as avgvalue from table1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最大：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select max(field1) as maxvalue from table1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最小：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select min(field1) as minvalue from table1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"11、说明：几个高级查询运算词\"><a href=\"#11、说明：几个高级查询运算词\" class=\"headerlink\" title=\"11、说明：几个高级查询运算词\"></a><strong>11、说明：几个高级查询运算词</strong></h3><p>**　A： UNION 运算符**<br>　UNION 运算符通过组合其他两个结果表（例如 TABLE1 和 TABLE2）并消去表中任何重复行而派生出一个结果表。当 ALL 随 UNION一起使用时（即 UNION ALL），不消除重复行。两种情况下，派生表的每一行不是来自 TABLE1 就是来自 TABLE2。</p>\n<p>**　B： EXCEPT 运算符** 　EXCEPT 运算符通过包括所有在 TABLE1 中但不在 TABLE2 中的行并消除所有重复行而派生出一个结果表。当 ALL 随 EXCEPT 一起使用时 (EXCEPT ALL)，不消除重复行。</p>\n<p>**　C： INTERSECT 运算符** 　INTERSECT 运算符通过只包括 TABLE1 和 TABLE2 中都有的行并消除所有重复行而派生出一个结果表。当 ALL 随 INTERSECT 一起使用时 (INTERSECT ALL)，不消除重复行。</p>\n<blockquote>\n<p>**注：**使用运算词的几个查询结果行必须是一致的。</p>\n</blockquote>\n<h3 id=\"12、说明：使用外连接\"><a href=\"#12、说明：使用外连接\" class=\"headerlink\" title=\"12、说明：使用外连接\"></a><strong>12、说明：使用外连接</strong></h3><p>**　A、left （outer） join：**<br>　左外连接（左连接）：结果集几包括连接表的匹配行，也包括左连接表的所有行。<br>　SQL: select a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a &#x3D; b.c</p>\n<p>**　B：right （outer） join:** 　右外连接(右连接)：结果集既包括连接表的匹配连接行，也包括右连接表的所有行。</p>\n<p>**　C：full&#x2F;cross （outer） join：**<br>　全外连接：不仅包括符号连接表的匹配行，还包括两个连接表中的所有记录。</p>\n<h3 id=\"13、分组-Group-by\"><a href=\"#13、分组-Group-by\" class=\"headerlink\" title=\"13、分组:Group by:\"></a><strong>13、分组:Group by:</strong></h3><p>一张表，一旦分组 完成后，查询后只能得到组相关的信息。<br>　组相关的信息：（统计信息） count,sum,max,min,avg 分组的标准)<br>　在SQLServer中分组时：不能以 text,ntext,image类型的字段作为分组依据<br>　在selecte统计函数中的字段，不能和普通的字段放在一起；</p>\n<h3 id=\"14、对数据库进行操作\"><a href=\"#14、对数据库进行操作\" class=\"headerlink\" title=\"14、对数据库进行操作\"></a><strong>14、对数据库进行操作</strong></h3><p>分离数据库： sp_detach_db; 附加数据库：sp_attach_db 后接表明，附加需要完整的路径名</p>\n<h3 id=\"15、如何修改数据库的名称\"><a href=\"#15、如何修改数据库的名称\" class=\"headerlink\" title=\"15、如何修改数据库的名称\"></a><strong>15、如何修改数据库的名称</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sp_renamedb &#x27;old_name&#x27;, &#x27;new_name&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、提升篇\"><a href=\"#二、提升篇\" class=\"headerlink\" title=\"二、提升篇\"></a>二、提升篇</h2><hr>\n<h3 id=\"1、说明：复制表\"><a href=\"#1、说明：复制表\" class=\"headerlink\" title=\"1、说明：复制表\"></a><strong>1、说明：复制表</strong></h3><p><strong>(只复制结构,源表名：a 新表名：b) (Access可用)</strong></p>\n<p>**　方法一：**（仅用于SQlServer）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * into b from a where 1&lt;&gt;1</span><br></pre></td></tr></table></figure>\n\n<p>**　方法二：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select top 0 * into b from a</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、说明：拷贝表\"><a href=\"#2、说明：拷贝表\" class=\"headerlink\" title=\"2、说明：拷贝表\"></a><strong>2、说明：拷贝表</strong></h3><p><strong>(拷贝数据,源表名：a 目标表名：b) (Access可用)</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert into b(a, b, c) select d,e,f from a;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、说明：跨数据库之间表的拷贝\"><a href=\"#3、说明：跨数据库之间表的拷贝\" class=\"headerlink\" title=\"3、说明：跨数据库之间表的拷贝\"></a><strong>3、说明：跨数据库之间表的拷贝</strong></h3><p><strong>(具体数据使用绝对路径) (Access可用)</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert into b(a, b, c) select d,e,f from b in &#x27;具体数据库&#x27; where 条件</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">..from b in &#x27;&quot;&amp;Server.MapPath(&quot;.&quot;)&amp;&quot;\\data.mdb&quot; &amp;&quot;&#x27; where..</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、说明：子查询\"><a href=\"#4、说明：子查询\" class=\"headerlink\" title=\"4、说明：子查询\"></a><strong>4、说明：子查询</strong></h3><p><strong>(表名1：a 表名2：b)</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select a,b,c from a where a IN (select d from b )</span><br></pre></td></tr></table></figure>\n\n<p>或者:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select a,b,c from a where a IN (1,2,3)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、说明：显示文章、提交人和最后回复时间\"><a href=\"#5、说明：显示文章、提交人和最后回复时间\" class=\"headerlink\" title=\"5、说明：显示文章、提交人和最后回复时间\"></a><strong>5、说明：显示文章、提交人和最后回复时间</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select a.title,a.username,b.adddate from table a,(select max(adddate) adddate from table where table.title=a.title) b</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、说明：外连接查询\"><a href=\"#6、说明：外连接查询\" class=\"headerlink\" title=\"6、说明：外连接查询\"></a><strong>6、说明：外连接查询</strong></h3><p><strong>(表名1：a 表名2：b)</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a = b.c</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、说明：在线视图查询\"><a href=\"#7、说明：在线视图查询\" class=\"headerlink\" title=\"7、说明：在线视图查询\"></a><strong>7、说明：在线视图查询</strong></h3><p><strong>(表名1：a )</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from (SELECT a,b,c FROM a) T where t.a &gt; 1;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、说明：between的用法\"><a href=\"#8、说明：between的用法\" class=\"headerlink\" title=\"8、说明：between的用法\"></a><strong>8、说明：between的用法</strong></h3><p><strong>between限制查询数据范围时包括了边界值,not between不包括</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from table1 where time between time1 and time2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select a,b,c, from table1 where a not between 数值1 and 数值2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、说明：in-的使用方法\"><a href=\"#9、说明：in-的使用方法\" class=\"headerlink\" title=\"9、说明：in 的使用方法\"></a><strong>9、说明：in 的使用方法</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from table1 where a [not] in (&#x27;值1&#x27;,&#x27;值2&#x27;,&#x27;值4&#x27;,&#x27;值6&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、说明：两张关联表删除主表中已经在副表中没有的信息\"><a href=\"#10、说明：两张关联表删除主表中已经在副表中没有的信息\" class=\"headerlink\" title=\"10、说明：两张关联表删除主表中已经在副表中没有的信息\"></a><strong>10、说明：两张关联表删除主表中已经在副表中没有的信息</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">delete from table1 where not exists ( select * from table2 where table1.field1=table2.field1 )</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、说明：四表联查问题\"><a href=\"#11、说明：四表联查问题\" class=\"headerlink\" title=\"11、说明：四表联查问题\"></a><strong>11、说明：四表联查问题</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from a left inner join b on a.a=b.b right inner join c on a.a=c.c inner join d on a.a=d.d where ......</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12、说明：日程安排提前五分钟提醒\"><a href=\"#12、说明：日程安排提前五分钟提醒\" class=\"headerlink\" title=\"12、说明：日程安排提前五分钟提醒\"></a><strong>12、说明：日程安排提前五分钟提醒</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from 日程安排 where datediff(&#x27;minute&#x27;,f开始时间,getdate())&gt;5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13、说明：一条sql-语句搞定数据库分页\"><a href=\"#13、说明：一条sql-语句搞定数据库分页\" class=\"headerlink\" title=\"13、说明：一条sql 语句搞定数据库分页\"></a><strong>13、说明：一条sql 语句搞定数据库分页</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select top 10 b.* from (select top 20 主键字段,排序字段 from 表名 order by 排序字段 desc) a,表名 b where b.主键字段 = a.主键字段 order by a.排序字段</span><br></pre></td></tr></table></figure>\n\n<p>**　具体实现：**<br>　关于数据库分页：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">declare @start int,@end int</span><br><span class=\"line\">@sql nvarchar(600)</span><br><span class=\"line\">set @sql=&#x27;select top&#x27;+str(@end-@start+1)+&#x27;+from T where rid not in(select top&#x27;+str(@str-1)+&#x27;Rid from T where Rid&gt;-1)&#x27;</span><br><span class=\"line\">exec sp_executesql @sql</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注意：**在top后不能直接跟一个变量，所以在实际应用中只有这样的进行特殊的处理。Rid为一个标识列，如果top后还有具体的字段，这样做是非常有好处的。因为这样可以避免 top的字段如果是逻辑索引的，查询的结果后实际表中的不一致（逻辑索引中的数据有可能和数据表中的不一致，而查询时如果处在索引则首先查询索引）</p>\n</blockquote>\n<h3 id=\"14、说明：查询前10条记录\"><a href=\"#14、说明：查询前10条记录\" class=\"headerlink\" title=\"14、说明：查询前10条记录\"></a><strong>14、说明：查询前10条记录</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select top 10 * form table1 where 范围</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15、说明：数据选择\"><a href=\"#15、说明：数据选择\" class=\"headerlink\" title=\"15、说明：数据选择\"></a><strong>15、说明：数据选择</strong></h3><p>选择在每一组b值相同的数据中对应的a最大的记录的所有信息(类似这样的用法可以用于论坛每月排行榜,每月热销产品分析,按科目成绩排名,等等.)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select a,b,c from tablename ta where a=(select max(a) from tablename tb where tb.b=ta.b)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16、说明：派生表\"><a href=\"#16、说明：派生表\" class=\"headerlink\" title=\"16、说明：派生表\"></a><strong>16、说明：派生表</strong></h3><p>包括所有在 TableA 中但不在 TableB和TableC 中的行并消除所有重复行而派生出一个结果表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(select a from tableA ) except (select a from tableB) except (select a from tableC)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17、说明：随机取出10条数据\"><a href=\"#17、说明：随机取出10条数据\" class=\"headerlink\" title=\"17、说明：随机取出10条数据\"></a><strong>17、说明：随机取出10条数据</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select top 10 * from tablename order by newid()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18、说明：随机选择记录\"><a href=\"#18、说明：随机选择记录\" class=\"headerlink\" title=\"18、说明：随机选择记录\"></a><strong>18、说明：随机选择记录</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select newid()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19、说明：删除重复记录\"><a href=\"#19、说明：删除重复记录\" class=\"headerlink\" title=\"19、说明：删除重复记录\"></a><strong>19、说明：删除重复记录</strong></h3><p>**　1、**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">delete from tablename where id not in (select max(id) from tablename group by col1,col2,...)</span><br></pre></td></tr></table></figure>\n\n<p>**　2、**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select distinct * into temp from tablename </span><br><span class=\"line\">delete from tablename </span><br><span class=\"line\">insert into tablename select * from temp</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**评价：**这种操作牵连大量的数据的移动，这种做法不适合大容量但数据操作</p>\n</blockquote>\n<p><strong>3、</strong> <strong>例如：在一个外部表中导入数据，由于某些原因第一次只导入了一部分，但很难判断具体位置，这样只有在下一次全部导入，这样也就产生好多重复的字段，怎样删除重复字段</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">alter table tablename </span><br><span class=\"line\">--添加一个自增列 </span><br><span class=\"line\">add column_b int identity(1,1) </span><br><span class=\"line\">delete from tablename where column_b not in( </span><br><span class=\"line\">select max(column_b) from tablename group by column1,column2,...) </span><br><span class=\"line\">alter table tablename drop column column_b</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20、说明：列出数据库里所有的表名\"><a href=\"#20、说明：列出数据库里所有的表名\" class=\"headerlink\" title=\"20、说明：列出数据库里所有的表名\"></a><strong>20、说明：列出数据库里所有的表名</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select name from sysobjects where type=&#x27;U&#x27; // U代表用户</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"21、说明：列出表里的所有的列名\"><a href=\"#21、说明：列出表里的所有的列名\" class=\"headerlink\" title=\"21、说明：列出表里的所有的列名\"></a><strong>21、说明：列出表里的所有的列名</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select name from syscolumns where id=object_id(&#x27;TableName&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"22、说明：列示case\"><a href=\"#22、说明：列示case\" class=\"headerlink\" title=\"22、说明：列示case\"></a><strong>22、说明：列示case</strong></h3><p>列示type、vender、pcs字段，以type字段排列，case可以方便地实现多重选择，类似select 中的case。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select type,sum(case vender when &#x27;A&#x27; then pcs else 0 end),sum(case vender when &#x27;C&#x27; then pcs else 0 end),sum(case vender when &#x27;B&#x27; then pcs else 0 end) FROM tablename group by type</span><br></pre></td></tr></table></figure>\n\n<p>显示结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">type vender pcs</span><br><span class=\"line\">电脑 A 1 </span><br><span class=\"line\">电脑 A 1 </span><br><span class=\"line\">光盘 B 2 </span><br><span class=\"line\">光盘 A 2 </span><br><span class=\"line\">手机 B 3 </span><br><span class=\"line\">手机 C 3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"23、说明：初始化表table1\"><a href=\"#23、说明：初始化表table1\" class=\"headerlink\" title=\"23、说明：初始化表table1\"></a><strong>23、说明：初始化表table1</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">TRUNCATE TABLE table1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"24、说明：选择从10到15的记录\"><a href=\"#24、说明：选择从10到15的记录\" class=\"headerlink\" title=\"24、说明：选择从10到15的记录\"></a><strong>24、说明：选择从10到15的记录</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select top 5 * from (select top 15 * from table order by id asc) table_别名 order by id desc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、技巧篇\"><a href=\"#三、技巧篇\" class=\"headerlink\" title=\"三、技巧篇\"></a>三、技巧篇</h2><hr>\n<h3 id=\"1、SQL组合语句\"><a href=\"#1、SQL组合语句\" class=\"headerlink\" title=\"1、SQL组合语句\"></a><strong>1、SQL组合语句</strong></h3><p>1&#x3D;1，1&#x3D;2的使用，在SQL语句组合时用的较多</p>\n<p>**　“where 1&#x3D;** <strong>1” 是表示选择全部 “where 1&#x3D;2”</strong> <strong>全部不选，</strong><br>　如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if @strWhere !=&#x27;&#x27; </span><br><span class=\"line\">begin</span><br><span class=\"line\">set @strSQL = &#x27;select count(*) as Total from [&#x27; + @tblName + &#x27;] where &#x27; + @strWhere </span><br><span class=\"line\">end</span><br><span class=\"line\">else </span><br><span class=\"line\">begin</span><br><span class=\"line\">set @strSQL = &#x27;select count(*) as Total from [&#x27; + @tblName + &#x27;]&#x27; </span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>我们可以直接写成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误！未找到目录项。</span><br><span class=\"line\">set @strSQL = &#x27;select count(*) as Total from [&#x27; + @tblName + &#x27;] where 1=1 安定&#x27;+ @strWhere</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、收缩数据库\"><a href=\"#2、收缩数据库\" class=\"headerlink\" title=\"2、收缩数据库\"></a><strong>2、收缩数据库</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">--重建索引</span><br><span class=\"line\">DBCC REINDEX</span><br><span class=\"line\">DBCC INDEXDEFRAG</span><br><span class=\"line\">--收缩数据和日志</span><br><span class=\"line\">DBCC SHRINKDB</span><br><span class=\"line\">DBCC SHRINKFILE</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、压缩数据库\"><a href=\"#3、压缩数据库\" class=\"headerlink\" title=\"3、压缩数据库\"></a><strong>3、压缩数据库</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">dbcc shrinkdatabase(dbname)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、转移数据库给新用户以已存在用户权限\"><a href=\"#4、转移数据库给新用户以已存在用户权限\" class=\"headerlink\" title=\"4、转移数据库给新用户以已存在用户权限\"></a><strong>4、转移数据库给新用户以已存在用户权限</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">exec sp_change_users_login &#x27;update_one&#x27;,&#x27;newname&#x27;,&#x27;oldname&#x27;</span><br><span class=\"line\">go</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、检查备份集\"><a href=\"#5、检查备份集\" class=\"headerlink\" title=\"5、检查备份集\"></a><strong>5、检查备份集</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">RESTORE VERIFYONLY from disk=&#x27;E:\\dvbbs.bak&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、修复数据库\"><a href=\"#6、修复数据库\" class=\"headerlink\" title=\"6、修复数据库\"></a><strong>6、修复数据库</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER DATABASE [dvbbs] SET SINGLE_USER</span><br><span class=\"line\">GO</span><br><span class=\"line\">DBCC CHECKDB(&#x27;dvbbs&#x27;,repair_allow_data_loss) WITH TABLOCK</span><br><span class=\"line\">GO</span><br><span class=\"line\">ALTER DATABASE [dvbbs] SET MULTI_USER</span><br><span class=\"line\">GO</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、日志清除\"><a href=\"#7、日志清除\" class=\"headerlink\" title=\"7、日志清除\"></a><strong>7、日志清除</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SET NOCOUNT ON</span><br><span class=\"line\">DECLARE @LogicalFileName sysname,</span><br><span class=\"line\">@MaxMinutes INT,</span><br><span class=\"line\">@NewSize INT</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">USE tablename -- 要操作的数据库名</span><br><span class=\"line\">SELECT @LogicalFileName = &#x27;tablename_log&#x27;, -- 日志文件名 </span><br><span class=\"line\">@MaxMinutes = 10, -- Limit on time allowed to wrap log.</span><br><span class=\"line\">@NewSize = 1 -- 你想设定的日志文件的大小(M)</span><br><span class=\"line\">Setup / initialize</span><br><span class=\"line\">DECLARE @OriginalSize int</span><br><span class=\"line\">SELECT @OriginalSize = size </span><br><span class=\"line\">FROM sysfiles</span><br><span class=\"line\">WHERE name = @LogicalFileName</span><br><span class=\"line\">SELECT &#x27;Original Size of &#x27; + db_name() + &#x27; LOG is &#x27; + </span><br><span class=\"line\">CONVERT(VARCHAR(30),@OriginalSize) + &#x27; 8K pages or &#x27; + </span><br><span class=\"line\">CONVERT(VARCHAR(30),(@OriginalSize*8/1024)) + &#x27;MB&#x27;</span><br><span class=\"line\">FROM sysfiles</span><br><span class=\"line\">WHERE name = @LogicalFileName</span><br><span class=\"line\">CREATE TABLE DummyTrans</span><br><span class=\"line\">(DummyColumn char (8000) not null)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DECLARE @Counter INT,</span><br><span class=\"line\">@StartTime DATETIME,</span><br><span class=\"line\">@TruncLog VARCHAR(255)</span><br><span class=\"line\">SELECT @StartTime = GETDATE(),</span><br><span class=\"line\">@TruncLog = &#x27;BACKUP LOG &#x27; + db_name() + &#x27; WITH TRUNCATE_ONLY&#x27;</span><br><span class=\"line\">DBCC SHRINKFILE (@LogicalFileName, @NewSize)</span><br><span class=\"line\">EXEC (@TruncLog)</span><br><span class=\"line\">-- Wrap the log if necessary.</span><br><span class=\"line\">WHILE @MaxMinutes &gt; DATEDIFF (mi, @StartTime, GETDATE()) -- time has not expired</span><br><span class=\"line\">AND @OriginalSize = (SELECT size FROM sysfiles WHERE name = @LogicalFileName) </span><br><span class=\"line\">AND (@OriginalSize * 8 /1024) &gt; @NewSize </span><br><span class=\"line\">BEGIN -- Outer loop.</span><br><span class=\"line\">SELECT @Counter = 0</span><br><span class=\"line\">WHILE ((@Counter &lt; @OriginalSize / 16) AND (@Counter &lt; 50000))</span><br><span class=\"line\">BEGIN -- update</span><br><span class=\"line\">INSERT DummyTrans VALUES (&#x27;Fill Log&#x27;) DELETE DummyTrans</span><br><span class=\"line\">SELECT @Counter = @Counter + 1</span><br><span class=\"line\">END</span><br><span class=\"line\">EXEC (@TruncLog) </span><br><span class=\"line\">END</span><br><span class=\"line\">SELECT &#x27;Final Size of &#x27; + db_name() + &#x27; LOG is &#x27; +</span><br><span class=\"line\">CONVERT(VARCHAR(30),size) + &#x27; 8K pages or &#x27; + </span><br><span class=\"line\">CONVERT(VARCHAR(30),(size*8/1024)) + &#x27;MB&#x27;</span><br><span class=\"line\">FROM sysfiles </span><br><span class=\"line\">WHERE name = @LogicalFileName</span><br><span class=\"line\">DROP TABLE DummyTrans</span><br><span class=\"line\">SET NOCOUNT OFF</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、说明：更改某个表\"><a href=\"#8、说明：更改某个表\" class=\"headerlink\" title=\"8、说明：更改某个表\"></a><strong>8、说明：更改某个表</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">exec sp_changeobjectowner &#x27;tablename&#x27;,&#x27;dbo&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、存储更改全部表\"><a href=\"#9、存储更改全部表\" class=\"headerlink\" title=\"9、存储更改全部表\"></a><strong>9、存储更改全部表</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE PROCEDURE dbo.User_ChangeObjectOwnerBatch</span><br><span class=\"line\">@OldOwner as NVARCHAR(128),</span><br><span class=\"line\">@NewOwner as NVARCHAR(128)</span><br><span class=\"line\">AS</span><br><span class=\"line\">DECLARE @Name as NVARCHAR(128)</span><br><span class=\"line\">DECLARE @Owner as NVARCHAR(128)</span><br><span class=\"line\">DECLARE @OwnerName as NVARCHAR(128)</span><br><span class=\"line\">DECLARE curObject CURSOR FOR </span><br><span class=\"line\">select &#x27;Name&#x27; = name,</span><br><span class=\"line\">&#x27;Owner&#x27; = user_name(uid)</span><br><span class=\"line\">from sysobjects</span><br><span class=\"line\">where user_name(uid)=@OldOwner</span><br><span class=\"line\">order by name</span><br><span class=\"line\">OPEN curObject</span><br><span class=\"line\">FETCH NEXT FROM curObject INTO @Name, @Owner</span><br><span class=\"line\">WHILE(@@FETCH_STATUS=0)</span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">if @Owner=@OldOwner </span><br><span class=\"line\">begin</span><br><span class=\"line\">set @OwnerName = @OldOwner + &#x27;.&#x27; + rtrim(@Name)</span><br><span class=\"line\">exec sp_changeobjectowner @OwnerName, @NewOwner</span><br><span class=\"line\">end</span><br><span class=\"line\">-- select @name,@NewOwner,@OldOwner</span><br><span class=\"line\">FETCH NEXT FROM curObject INTO @Name, @Owner</span><br><span class=\"line\">END</span><br><span class=\"line\">close curObject</span><br><span class=\"line\">deallocate curObject</span><br><span class=\"line\">GO</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、SQL-SERVER中直接循环写入数据\"><a href=\"#10、SQL-SERVER中直接循环写入数据\" class=\"headerlink\" title=\"10、SQL SERVER中直接循环写入数据\"></a><strong>10、SQL SERVER中直接循环写入数据</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">declare @i int</span><br><span class=\"line\">set @i=1</span><br><span class=\"line\">while @i&lt;30</span><br><span class=\"line\">begin</span><br><span class=\"line\">insert into test (userid) values(@i)</span><br><span class=\"line\">set @i=@i+1</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>案例 ：</p>\n<p>有如下表，要求就裱中所有沒有及格的成績，在每次增長0.1的基礎上，使他們剛好及格：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Name score</span><br><span class=\"line\">Zhangshan 80</span><br><span class=\"line\">Lishi 59</span><br><span class=\"line\">Wangwu 50</span><br><span class=\"line\">Songquan 69</span><br><span class=\"line\">while((select min(score) from tb_table)&lt;60) </span><br><span class=\"line\">begin </span><br><span class=\"line\">update tb_table set score =score*1.01 </span><br><span class=\"line\">where score&lt;60 </span><br><span class=\"line\">if (select min(score) from tb_table)&gt;60 </span><br><span class=\"line\">break </span><br><span class=\"line\">else </span><br><span class=\"line\">continue </span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、数据开发篇\"><a href=\"#四、数据开发篇\" class=\"headerlink\" title=\"四、数据开发篇\"></a><strong>四、数据开发篇</strong></h2><hr>\n<h3 id=\"1-按姓氏笔画排序\"><a href=\"#1-按姓氏笔画排序\" class=\"headerlink\" title=\"1.按姓氏笔画排序\"></a><strong>1.按姓氏笔画排序</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Select * From TableName Order By CustomerName Collate Chinese_PRC_Stroke_ci_as //从少到多</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-数据库加密\"><a href=\"#2-数据库加密\" class=\"headerlink\" title=\"2.数据库加密\"></a><strong>2.数据库加密</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select encrypt(&#x27;原始密码&#x27;) </span><br><span class=\"line\">select pwdencrypt(&#x27;原始密码&#x27;) </span><br><span class=\"line\">select pwdcompare(&#x27;原始密码&#x27;,&#x27;加密后密码&#x27;) = 1--相同；否则不相同 encrypt(&#x27;原始密码&#x27;) </span><br><span class=\"line\">select pwdencrypt(&#x27;原始密码&#x27;) </span><br><span class=\"line\">select pwdcompare(&#x27;原始密码&#x27;,&#x27;加密后密码&#x27;) = 1--相同；否则不相同</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-取回表中字段\"><a href=\"#3-取回表中字段\" class=\"headerlink\" title=\"3.取回表中字段\"></a><strong>3.取回表中字段</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">declare @list varchar(1000), </span><br><span class=\"line\">@sql nvarchar(1000)  </span><br><span class=\"line\">select @list=@list+&#x27;,&#x27;+b.name from sysobjects a,syscolumns b where a.id=b.id and a.name=&#x27;表A&#x27; </span><br><span class=\"line\">set @sql=&#x27;select &#x27;+right(@list,len(@list)-1)+&#x27; from 表A&#x27;  </span><br><span class=\"line\">exec (@sql)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-查看硬盘分区\"><a href=\"#4-查看硬盘分区\" class=\"headerlink\" title=\"4.查看硬盘分区\"></a><strong>4.查看硬盘分区</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">EXEC master..xp_fixeddrives</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-比较A-B表是否相等\"><a href=\"#5-比较A-B表是否相等\" class=\"headerlink\" title=\"5.比较A,B表是否相等\"></a><strong>5.比较A,B表是否相等</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if (select checksum_agg(binary_checksum(*)) from A) </span><br><span class=\"line\">= </span><br><span class=\"line\">(select checksum_agg(binary_checksum(*)) from B) </span><br><span class=\"line\">print &#x27;相等&#x27; </span><br><span class=\"line\">else </span><br><span class=\"line\">print &#x27;不相等&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-杀掉所有的事件探察器进程\"><a href=\"#6-杀掉所有的事件探察器进程\" class=\"headerlink\" title=\"6.杀掉所有的事件探察器进程\"></a><strong>6.杀掉所有的事件探察器进程</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DECLARE hcforeach CURSOR GLOBAL FOR SELECT &#x27;kill &#x27;+RTRIM(spid) FROM master.dbo.sysprocesses </span><br><span class=\"line\">WHERE program_name IN(&#x27;SQL profiler&#x27;,N&#x27;SQL 事件探查器&#x27;) </span><br><span class=\"line\">EXEC sp_msforeach_worker &#x27;?&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-记录搜索\"><a href=\"#7-记录搜索\" class=\"headerlink\" title=\"7.记录搜索\"></a><strong>7.记录搜索</strong></h3><p>开头到N条记录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Select Top N * From 表</span><br></pre></td></tr></table></figure>\n\n<p>N到M条记录(要有主索引ID)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Select Top M-N * From 表 Where ID in (Select Top M ID From 表) Order by ID Desc</span><br></pre></td></tr></table></figure>\n\n<p>N到结尾记录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Select Top N * From 表 Order by ID Desc</span><br></pre></td></tr></table></figure>\n\n<p>案例</p>\n<p>示例1：一张表有一万多条记录，表的第一个字段 RecID 是自增长字段， 写一个SQL语句， 找出表的第31到第40个记录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select top 10 recid from A where recid not in(select top 30 recid from A)</span><br></pre></td></tr></table></figure>\n\n<p>**　分析：**如果这样写会产生某些问题，如果recid在表中存在逻辑索引。</p>\n<p>select top 10 recid from A where……是从索引中查找，而后面的select top 30 recid from A则在数据表中查找，这样由于索引中的顺序有可能和数据表中的不一致，这样就导致查询到的不是本来的欲得到的数据。</p>\n<p>**　解决方案**</p>\n<p>**　1， 用order by** select top 30 recid from A order by ricid <strong>如果该字段不是自增长，就会出现问题</strong></p>\n<p>**　2， 在那个子查询中也加条件：**select top 30 recid from A where recid&gt;-1</p>\n<p>**　示例2：查询表中的最后以条记录，并不知道这个表共有多少数据,以及表结构。**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">set @s = &#x27;select top 1 * from T where pid not in (select top &#x27; + str(@count-1) + &#x27; pid from T)&#x27;</span><br><span class=\"line\">print @s exec sp_executesql @s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9：获取当前数据库中的所有用户表\"><a href=\"#9：获取当前数据库中的所有用户表\" class=\"headerlink\" title=\"9：获取当前数据库中的所有用户表\"></a><strong>9：获取当前数据库中的所有用户表</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select Name from sysobjects where xtype=&#x27;u&#x27; and status&gt;=0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10：获取某一个表的所有字段\"><a href=\"#10：获取某一个表的所有字段\" class=\"headerlink\" title=\"10：获取某一个表的所有字段\"></a><strong>10：获取某一个表的所有字段</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select name from syscolumns where id=object_id(&#x27;表名&#x27;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select name from syscolumns where id in (select id from sysobjects where type = &#x27;u&#x27; and name = &#x27;表名&#x27;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注：**以上两种方式的效果相同</p>\n</blockquote>\n<h3 id=\"11：查看与某一个表相关的视图、存储过程、函数\"><a href=\"#11：查看与某一个表相关的视图、存储过程、函数\" class=\"headerlink\" title=\"11：查看与某一个表相关的视图、存储过程、函数\"></a><strong>11：查看与某一个表相关的视图、存储过程、函数</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select a.* from sysobjects a, syscomments b where a.id = b.id and b.text like &#x27;%表名%&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12：查看当前数据库中所有存储过程\"><a href=\"#12：查看当前数据库中所有存储过程\" class=\"headerlink\" title=\"12：查看当前数据库中所有存储过程\"></a><strong>12：查看当前数据库中所有存储过程</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select name as 存储过程名称 from sysobjects where xtype=&#x27;P&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13：查询用户创建的所有数据库\"><a href=\"#13：查询用户创建的所有数据库\" class=\"headerlink\" title=\"13：查询用户创建的所有数据库\"></a><strong>13：查询用户创建的所有数据库</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from master..sysdatabases D where sid not in(select sid from master..syslogins where name=&#x27;sa&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>或者：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select dbid, name AS DB_NAME from master..sysdatabases where sid &lt;&gt; 0x01</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14：查询某一个表的字段和数据类型\"><a href=\"#14：查询某一个表的字段和数据类型\" class=\"headerlink\" title=\"14：查询某一个表的字段和数据类型\"></a><strong>14：查询某一个表的字段和数据类型</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select column_name,data_type from information_schema.columns </span><br><span class=\"line\">where table_name = &#x27;表名&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15：不同服务器数据库之间的数据操作\"><a href=\"#15：不同服务器数据库之间的数据操作\" class=\"headerlink\" title=\"15：不同服务器数据库之间的数据操作\"></a><strong>15：不同服务器数据库之间的数据操作</strong></h3><p>–创建链接服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">exec sp_addlinkedserver &#x27;ITSV &#x27;, &#x27; &#x27;, &#x27;SQLOLEDB &#x27;, &#x27;远程服务器名或ip地址 &#x27;</span><br><span class=\"line\">exec sp_addlinkedsrvlogin &#x27;ITSV &#x27;, &#x27;false &#x27;,null, &#x27;用户名 &#x27;, &#x27;密码 &#x27;</span><br></pre></td></tr></table></figure>\n\n<p>–查询示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from ITSV.数据库名.dbo.表名</span><br></pre></td></tr></table></figure>\n\n<p>–导入示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * into 表 from ITSV.数据库名.dbo.表名</span><br></pre></td></tr></table></figure>\n\n<p>–以后不再使用时删除链接服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">exec sp_dropserver &#x27;ITSV &#x27;, &#x27;droplogins &#x27;</span><br></pre></td></tr></table></figure>\n\n<p>–连接远程&#x2F;局域网数据(openrowset&#x2F;openquery&#x2F;opendatasource)</p>\n<p>–1、openrowset</p>\n<p>–查询示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from openrowset( &#x27;SQLOLEDB &#x27;, &#x27;sql服务器名 &#x27;; &#x27;用户名 &#x27;; &#x27;密码 &#x27;,数据库名.dbo.表名)</span><br></pre></td></tr></table></figure>\n\n<p>–生成本地表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * into 表 from openrowset( &#x27;SQLOLEDB &#x27;, &#x27;sql服务器名 &#x27;; &#x27;用户名 &#x27;; &#x27;密码 &#x27;,数据库名.dbo.表名)</span><br></pre></td></tr></table></figure>\n\n<p>–把本地表导入远程表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert openrowset( &#x27;SQLOLEDB &#x27;, &#x27;sql服务器名 &#x27;; &#x27;用户名 &#x27;; &#x27;密码 &#x27;,数据库名.dbo.表名)</span><br><span class=\"line\">select *from 本地表</span><br></pre></td></tr></table></figure>\n\n<p>–更新本地表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">update b</span><br><span class=\"line\">set b.列A=a.列A</span><br><span class=\"line\">from openrowset( &#x27;SQLOLEDB &#x27;, &#x27;sql服务器名 &#x27;; &#x27;用户名 &#x27;; &#x27;密码 &#x27;,数据库名.dbo.表名)as a inner join 本地表 b</span><br><span class=\"line\">on a.column1=b.column1</span><br></pre></td></tr></table></figure>\n\n<p>–openquery用法需要创建一个连接</p>\n<p>–首先创建一个连接创建链接服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">exec sp_addlinkedserver &#x27;ITSV &#x27;, &#x27; &#x27;, &#x27;SQLOLEDB &#x27;, &#x27;远程服务器名或ip地址 &#x27;</span><br></pre></td></tr></table></figure>\n\n<p>–查询</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select *</span><br><span class=\"line\">FROM openquery(ITSV, &#x27;SELECT * FROM 数据库.dbo.表名 &#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>–把本地表导入远程表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert openquery(ITSV, &#x27;SELECT * FROM 数据库.dbo.表名 &#x27;)</span><br><span class=\"line\">select * from 本地表</span><br></pre></td></tr></table></figure>\n\n<p>–更新本地表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">update b</span><br><span class=\"line\">set b.列B=a.列B</span><br><span class=\"line\">FROM openquery(ITSV, &#x27;SELECT * FROM 数据库.dbo.表名 &#x27;) as a</span><br><span class=\"line\">inner join 本地表 b on a.列A=b.列A</span><br></pre></td></tr></table></figure>\n\n<p>–3、opendatasource&#x2F;openrowset</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM opendatasource( &#x27;SQLOLEDB &#x27;, &#x27;Data Source=ip/ServerName;User ID=登陆名;Password=密码&#x27; ).test.dbo.roy_ta</span><br></pre></td></tr></table></figure>\n\n<p>–把本地表导入远程表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert opendatasource( &#x27;SQLOLEDB &#x27;, &#x27;Data Source=ip/ServerName;User ID=登陆名;Password=密码 &#x27;).数据库.dbo.表名</span><br><span class=\"line\">select * from 本地表</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"详尽的SQL语句大全分类整理\"><a href=\"#详尽的SQL语句大全分类整理\" class=\"headerlink\" title=\"详尽的SQL语句大全分类整理\"></a>详尽的SQL语句大全分类整理</h2><hr>\n<p>Structured Query Language 即结构化查询语言，简称 SQL。SQL 是一种特殊目的的编程语言，是一种数据库查询和程序设计语言，用于存取数据以及查询、更新和管理关系数据库系统；同时也是数据库脚本文件的扩展名。SQL 语句的种类还和数量都很多，其中的很多语句也是经常要用到的，下面就把常用的 SQL 语句分类整理一下，并且还可以打包下载，希望能对你有所帮助。</p>\n<ul>\n<li>先献上下载地址：</li>\n</ul>\n<h2 id=\"一、基础篇\"><a href=\"#一、基础篇\" class=\"headerlink\" title=\"一、基础篇\"></a>一、基础篇</h2><hr>\n<h3 id=\"1、说明：创建数据库\"><a href=\"#1、说明：创建数据库\" class=\"headerlink\" title=\"1、说明：创建数据库\"></a><strong>1、说明：创建数据库</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE DATABASE database-name</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、说明：删除数据库\"><a href=\"#2、说明：删除数据库\" class=\"headerlink\" title=\"2、说明：删除数据库\"></a><strong>2、说明：删除数据库</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">drop database dbname</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、说明：备份sql-server\"><a href=\"#3、说明：备份sql-server\" class=\"headerlink\" title=\"3、说明：备份sql server\"></a><strong>3、说明：备份sql server</strong></h3><p>— 创建 备份数据的 device</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">USE master</span><br><span class=\"line\">EXEC sp_addumpdevice &#x27;disk&#x27;, &#x27;testBack&#x27;, &#x27;c:\\mssql7backup\\MyNwind_1.dat&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>— 开始 备份</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">BACKUP DATABASE pubs TO testBack</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、说明：创建新表\"><a href=\"#4、说明：创建新表\" class=\"headerlink\" title=\"4、说明：创建新表\"></a><strong>4、说明：创建新表</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create table tabname(col1 type1 [not null] [primary key],col2 type2 [not null],..)</span><br></pre></td></tr></table></figure>\n\n<p>根据已有的表创建新表：<br>　A：create table tab_new like tab_old (使用旧表创建新表)<br>　B ：create table tab_new as select col1,col2… from tab_old definition only</p>\n<h3 id=\"5、说明：删除新表\"><a href=\"#5、说明：删除新表\" class=\"headerlink\" title=\"5、说明：删除新表\"></a><strong>5、说明：删除新表</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">drop table tabname</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、说明：增加一个列\"><a href=\"#6、说明：增加一个列\" class=\"headerlink\" title=\"6、说明：增加一个列\"></a><strong>6、说明：增加一个列</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Alter table tabname add column col type</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注：**列增加后将不能删除。DB2中列加上后数据类型也不能改变，唯一能改变的是增加varchar类型的长度。</p>\n</blockquote>\n<h3 id=\"7、说明：添加主键\"><a href=\"#7、说明：添加主键\" class=\"headerlink\" title=\"7、说明：添加主键\"></a><strong>7</strong><strong>、说明：添加主键</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Alter table tabname add primary key(col)</span><br></pre></td></tr></table></figure>\n\n<p>删除主键：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Alter table tabname drop primary key(col)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、说明：创建索引\"><a href=\"#8、说明：创建索引\" class=\"headerlink\" title=\"8、说明：创建索引\"></a><strong>8、说明：创建索引</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create [unique] index idxname on tabname(col....)</span><br></pre></td></tr></table></figure>\n\n<p>删除索引：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DROP INDEX index_name ON table_name</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注：**索引是不可更改的，想更改必须删除重新建。</p>\n</blockquote>\n<h3 id=\"9、说明：创建视图\"><a href=\"#9、说明：创建视图\" class=\"headerlink\" title=\"9、说明：创建视图\"></a><strong>9、说明：创建视图</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">create view viewname as select statement</span><br></pre></td></tr></table></figure>\n\n<p>删除视图：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">drop view viewname</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、说明：几个简单的sql语句\"><a href=\"#10、说明：几个简单的sql语句\" class=\"headerlink\" title=\"10、说明：几个简单的sql语句\"></a><strong>10、说明：几个简单的sql语句</strong></h3><ul>\n<li>选择：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from table1 where 范围</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>插入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert into table1(field1,field2) values(value1,value2)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">delete from table1 where 范围</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>更新：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">update table1 set field1=value1 where 范围</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查找：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from table1 where field1 like &#x27;%value1%&#x27;</span><br></pre></td></tr></table></figure>\n\n<p><strong>—like</strong> 的语法很精妙，请查资料!</p>\n</li>\n<li><p>排序：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from table1 order by field1,field2 [desc]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>总数：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select count as totalcount from table1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>求和：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select sum(field1) as sumvalue from table1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>平均：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select avg(field1) as avgvalue from table1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最大：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select max(field1) as maxvalue from table1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>最小：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select min(field1) as minvalue from table1</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"11、说明：几个高级查询运算词\"><a href=\"#11、说明：几个高级查询运算词\" class=\"headerlink\" title=\"11、说明：几个高级查询运算词\"></a><strong>11、说明：几个高级查询运算词</strong></h3><p>**　A： UNION 运算符**<br>　UNION 运算符通过组合其他两个结果表（例如 TABLE1 和 TABLE2）并消去表中任何重复行而派生出一个结果表。当 ALL 随 UNION一起使用时（即 UNION ALL），不消除重复行。两种情况下，派生表的每一行不是来自 TABLE1 就是来自 TABLE2。</p>\n<p>**　B： EXCEPT 运算符** 　EXCEPT 运算符通过包括所有在 TABLE1 中但不在 TABLE2 中的行并消除所有重复行而派生出一个结果表。当 ALL 随 EXCEPT 一起使用时 (EXCEPT ALL)，不消除重复行。</p>\n<p>**　C： INTERSECT 运算符** 　INTERSECT 运算符通过只包括 TABLE1 和 TABLE2 中都有的行并消除所有重复行而派生出一个结果表。当 ALL 随 INTERSECT 一起使用时 (INTERSECT ALL)，不消除重复行。</p>\n<blockquote>\n<p>**注：**使用运算词的几个查询结果行必须是一致的。</p>\n</blockquote>\n<h3 id=\"12、说明：使用外连接\"><a href=\"#12、说明：使用外连接\" class=\"headerlink\" title=\"12、说明：使用外连接\"></a><strong>12、说明：使用外连接</strong></h3><p>**　A、left （outer） join：**<br>　左外连接（左连接）：结果集几包括连接表的匹配行，也包括左连接表的所有行。<br>　SQL: select a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a &#x3D; b.c</p>\n<p>**　B：right （outer） join:** 　右外连接(右连接)：结果集既包括连接表的匹配连接行，也包括右连接表的所有行。</p>\n<p>**　C：full&#x2F;cross （outer） join：**<br>　全外连接：不仅包括符号连接表的匹配行，还包括两个连接表中的所有记录。</p>\n<h3 id=\"13、分组-Group-by\"><a href=\"#13、分组-Group-by\" class=\"headerlink\" title=\"13、分组:Group by:\"></a><strong>13、分组:Group by:</strong></h3><p>一张表，一旦分组 完成后，查询后只能得到组相关的信息。<br>　组相关的信息：（统计信息） count,sum,max,min,avg 分组的标准)<br>　在SQLServer中分组时：不能以 text,ntext,image类型的字段作为分组依据<br>　在selecte统计函数中的字段，不能和普通的字段放在一起；</p>\n<h3 id=\"14、对数据库进行操作\"><a href=\"#14、对数据库进行操作\" class=\"headerlink\" title=\"14、对数据库进行操作\"></a><strong>14、对数据库进行操作</strong></h3><p>分离数据库： sp_detach_db; 附加数据库：sp_attach_db 后接表明，附加需要完整的路径名</p>\n<h3 id=\"15、如何修改数据库的名称\"><a href=\"#15、如何修改数据库的名称\" class=\"headerlink\" title=\"15、如何修改数据库的名称\"></a><strong>15、如何修改数据库的名称</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">sp_renamedb &#x27;old_name&#x27;, &#x27;new_name&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二、提升篇\"><a href=\"#二、提升篇\" class=\"headerlink\" title=\"二、提升篇\"></a>二、提升篇</h2><hr>\n<h3 id=\"1、说明：复制表\"><a href=\"#1、说明：复制表\" class=\"headerlink\" title=\"1、说明：复制表\"></a><strong>1、说明：复制表</strong></h3><p><strong>(只复制结构,源表名：a 新表名：b) (Access可用)</strong></p>\n<p>**　方法一：**（仅用于SQlServer）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * into b from a where 1&lt;&gt;1</span><br></pre></td></tr></table></figure>\n\n<p>**　方法二：**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select top 0 * into b from a</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、说明：拷贝表\"><a href=\"#2、说明：拷贝表\" class=\"headerlink\" title=\"2、说明：拷贝表\"></a><strong>2、说明：拷贝表</strong></h3><p><strong>(拷贝数据,源表名：a 目标表名：b) (Access可用)</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert into b(a, b, c) select d,e,f from a;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、说明：跨数据库之间表的拷贝\"><a href=\"#3、说明：跨数据库之间表的拷贝\" class=\"headerlink\" title=\"3、说明：跨数据库之间表的拷贝\"></a><strong>3、说明：跨数据库之间表的拷贝</strong></h3><p><strong>(具体数据使用绝对路径) (Access可用)</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert into b(a, b, c) select d,e,f from b in &#x27;具体数据库&#x27; where 条件</span><br></pre></td></tr></table></figure>\n\n<p>例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">..from b in &#x27;&quot;&amp;Server.MapPath(&quot;.&quot;)&amp;&quot;\\data.mdb&quot; &amp;&quot;&#x27; where..</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、说明：子查询\"><a href=\"#4、说明：子查询\" class=\"headerlink\" title=\"4、说明：子查询\"></a><strong>4、说明：子查询</strong></h3><p><strong>(表名1：a 表名2：b)</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select a,b,c from a where a IN (select d from b )</span><br></pre></td></tr></table></figure>\n\n<p>或者:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select a,b,c from a where a IN (1,2,3)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、说明：显示文章、提交人和最后回复时间\"><a href=\"#5、说明：显示文章、提交人和最后回复时间\" class=\"headerlink\" title=\"5、说明：显示文章、提交人和最后回复时间\"></a><strong>5、说明：显示文章、提交人和最后回复时间</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select a.title,a.username,b.adddate from table a,(select max(adddate) adddate from table where table.title=a.title) b</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、说明：外连接查询\"><a href=\"#6、说明：外连接查询\" class=\"headerlink\" title=\"6、说明：外连接查询\"></a><strong>6、说明：外连接查询</strong></h3><p><strong>(表名1：a 表名2：b)</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select a.a, a.b, a.c, b.c, b.d, b.f from a LEFT OUT JOIN b ON a.a = b.c</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、说明：在线视图查询\"><a href=\"#7、说明：在线视图查询\" class=\"headerlink\" title=\"7、说明：在线视图查询\"></a><strong>7、说明：在线视图查询</strong></h3><p><strong>(表名1：a )</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from (SELECT a,b,c FROM a) T where t.a &gt; 1;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、说明：between的用法\"><a href=\"#8、说明：between的用法\" class=\"headerlink\" title=\"8、说明：between的用法\"></a><strong>8、说明：between的用法</strong></h3><p><strong>between限制查询数据范围时包括了边界值,not between不包括</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from table1 where time between time1 and time2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select a,b,c, from table1 where a not between 数值1 and 数值2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、说明：in-的使用方法\"><a href=\"#9、说明：in-的使用方法\" class=\"headerlink\" title=\"9、说明：in 的使用方法\"></a><strong>9、说明：in 的使用方法</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from table1 where a [not] in (&#x27;值1&#x27;,&#x27;值2&#x27;,&#x27;值4&#x27;,&#x27;值6&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、说明：两张关联表删除主表中已经在副表中没有的信息\"><a href=\"#10、说明：两张关联表删除主表中已经在副表中没有的信息\" class=\"headerlink\" title=\"10、说明：两张关联表删除主表中已经在副表中没有的信息\"></a><strong>10、说明：两张关联表删除主表中已经在副表中没有的信息</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">delete from table1 where not exists ( select * from table2 where table1.field1=table2.field1 )</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11、说明：四表联查问题\"><a href=\"#11、说明：四表联查问题\" class=\"headerlink\" title=\"11、说明：四表联查问题\"></a><strong>11、说明：四表联查问题</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from a left inner join b on a.a=b.b right inner join c on a.a=c.c inner join d on a.a=d.d where ......</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12、说明：日程安排提前五分钟提醒\"><a href=\"#12、说明：日程安排提前五分钟提醒\" class=\"headerlink\" title=\"12、说明：日程安排提前五分钟提醒\"></a><strong>12、说明：日程安排提前五分钟提醒</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from 日程安排 where datediff(&#x27;minute&#x27;,f开始时间,getdate())&gt;5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13、说明：一条sql-语句搞定数据库分页\"><a href=\"#13、说明：一条sql-语句搞定数据库分页\" class=\"headerlink\" title=\"13、说明：一条sql 语句搞定数据库分页\"></a><strong>13、说明：一条sql 语句搞定数据库分页</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select top 10 b.* from (select top 20 主键字段,排序字段 from 表名 order by 排序字段 desc) a,表名 b where b.主键字段 = a.主键字段 order by a.排序字段</span><br></pre></td></tr></table></figure>\n\n<p>**　具体实现：**<br>　关于数据库分页：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">declare @start int,@end int</span><br><span class=\"line\">@sql nvarchar(600)</span><br><span class=\"line\">set @sql=&#x27;select top&#x27;+str(@end-@start+1)+&#x27;+from T where rid not in(select top&#x27;+str(@str-1)+&#x27;Rid from T where Rid&gt;-1)&#x27;</span><br><span class=\"line\">exec sp_executesql @sql</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注意：**在top后不能直接跟一个变量，所以在实际应用中只有这样的进行特殊的处理。Rid为一个标识列，如果top后还有具体的字段，这样做是非常有好处的。因为这样可以避免 top的字段如果是逻辑索引的，查询的结果后实际表中的不一致（逻辑索引中的数据有可能和数据表中的不一致，而查询时如果处在索引则首先查询索引）</p>\n</blockquote>\n<h3 id=\"14、说明：查询前10条记录\"><a href=\"#14、说明：查询前10条记录\" class=\"headerlink\" title=\"14、说明：查询前10条记录\"></a><strong>14、说明：查询前10条记录</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select top 10 * form table1 where 范围</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15、说明：数据选择\"><a href=\"#15、说明：数据选择\" class=\"headerlink\" title=\"15、说明：数据选择\"></a><strong>15、说明：数据选择</strong></h3><p>选择在每一组b值相同的数据中对应的a最大的记录的所有信息(类似这样的用法可以用于论坛每月排行榜,每月热销产品分析,按科目成绩排名,等等.)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select a,b,c from tablename ta where a=(select max(a) from tablename tb where tb.b=ta.b)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16、说明：派生表\"><a href=\"#16、说明：派生表\" class=\"headerlink\" title=\"16、说明：派生表\"></a><strong>16、说明：派生表</strong></h3><p>包括所有在 TableA 中但不在 TableB和TableC 中的行并消除所有重复行而派生出一个结果表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">(select a from tableA ) except (select a from tableB) except (select a from tableC)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17、说明：随机取出10条数据\"><a href=\"#17、说明：随机取出10条数据\" class=\"headerlink\" title=\"17、说明：随机取出10条数据\"></a><strong>17、说明：随机取出10条数据</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select top 10 * from tablename order by newid()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18、说明：随机选择记录\"><a href=\"#18、说明：随机选择记录\" class=\"headerlink\" title=\"18、说明：随机选择记录\"></a><strong>18、说明：随机选择记录</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select newid()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"19、说明：删除重复记录\"><a href=\"#19、说明：删除重复记录\" class=\"headerlink\" title=\"19、说明：删除重复记录\"></a><strong>19、说明：删除重复记录</strong></h3><p>**　1、**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">delete from tablename where id not in (select max(id) from tablename group by col1,col2,...)</span><br></pre></td></tr></table></figure>\n\n<p>**　2、**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select distinct * into temp from tablename </span><br><span class=\"line\">delete from tablename </span><br><span class=\"line\">insert into tablename select * from temp</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**评价：**这种操作牵连大量的数据的移动，这种做法不适合大容量但数据操作</p>\n</blockquote>\n<p><strong>3、</strong> <strong>例如：在一个外部表中导入数据，由于某些原因第一次只导入了一部分，但很难判断具体位置，这样只有在下一次全部导入，这样也就产生好多重复的字段，怎样删除重复字段</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">alter table tablename </span><br><span class=\"line\">--添加一个自增列 </span><br><span class=\"line\">add column_b int identity(1,1) </span><br><span class=\"line\">delete from tablename where column_b not in( </span><br><span class=\"line\">select max(column_b) from tablename group by column1,column2,...) </span><br><span class=\"line\">alter table tablename drop column column_b</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20、说明：列出数据库里所有的表名\"><a href=\"#20、说明：列出数据库里所有的表名\" class=\"headerlink\" title=\"20、说明：列出数据库里所有的表名\"></a><strong>20、说明：列出数据库里所有的表名</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select name from sysobjects where type=&#x27;U&#x27; // U代表用户</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"21、说明：列出表里的所有的列名\"><a href=\"#21、说明：列出表里的所有的列名\" class=\"headerlink\" title=\"21、说明：列出表里的所有的列名\"></a><strong>21、说明：列出表里的所有的列名</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select name from syscolumns where id=object_id(&#x27;TableName&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"22、说明：列示case\"><a href=\"#22、说明：列示case\" class=\"headerlink\" title=\"22、说明：列示case\"></a><strong>22、说明：列示case</strong></h3><p>列示type、vender、pcs字段，以type字段排列，case可以方便地实现多重选择，类似select 中的case。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select type,sum(case vender when &#x27;A&#x27; then pcs else 0 end),sum(case vender when &#x27;C&#x27; then pcs else 0 end),sum(case vender when &#x27;B&#x27; then pcs else 0 end) FROM tablename group by type</span><br></pre></td></tr></table></figure>\n\n<p>显示结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">type vender pcs</span><br><span class=\"line\">电脑 A 1 </span><br><span class=\"line\">电脑 A 1 </span><br><span class=\"line\">光盘 B 2 </span><br><span class=\"line\">光盘 A 2 </span><br><span class=\"line\">手机 B 3 </span><br><span class=\"line\">手机 C 3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"23、说明：初始化表table1\"><a href=\"#23、说明：初始化表table1\" class=\"headerlink\" title=\"23、说明：初始化表table1\"></a><strong>23、说明：初始化表table1</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">TRUNCATE TABLE table1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"24、说明：选择从10到15的记录\"><a href=\"#24、说明：选择从10到15的记录\" class=\"headerlink\" title=\"24、说明：选择从10到15的记录\"></a><strong>24、说明：选择从10到15的记录</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select top 5 * from (select top 15 * from table order by id asc) table_别名 order by id desc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三、技巧篇\"><a href=\"#三、技巧篇\" class=\"headerlink\" title=\"三、技巧篇\"></a>三、技巧篇</h2><hr>\n<h3 id=\"1、SQL组合语句\"><a href=\"#1、SQL组合语句\" class=\"headerlink\" title=\"1、SQL组合语句\"></a><strong>1、SQL组合语句</strong></h3><p>1&#x3D;1，1&#x3D;2的使用，在SQL语句组合时用的较多</p>\n<p>**　“where 1&#x3D;** <strong>1” 是表示选择全部 “where 1&#x3D;2”</strong> <strong>全部不选，</strong><br>　如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if @strWhere !=&#x27;&#x27; </span><br><span class=\"line\">begin</span><br><span class=\"line\">set @strSQL = &#x27;select count(*) as Total from [&#x27; + @tblName + &#x27;] where &#x27; + @strWhere </span><br><span class=\"line\">end</span><br><span class=\"line\">else </span><br><span class=\"line\">begin</span><br><span class=\"line\">set @strSQL = &#x27;select count(*) as Total from [&#x27; + @tblName + &#x27;]&#x27; </span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>我们可以直接写成：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">错误！未找到目录项。</span><br><span class=\"line\">set @strSQL = &#x27;select count(*) as Total from [&#x27; + @tblName + &#x27;] where 1=1 安定&#x27;+ @strWhere</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、收缩数据库\"><a href=\"#2、收缩数据库\" class=\"headerlink\" title=\"2、收缩数据库\"></a><strong>2、收缩数据库</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">--重建索引</span><br><span class=\"line\">DBCC REINDEX</span><br><span class=\"line\">DBCC INDEXDEFRAG</span><br><span class=\"line\">--收缩数据和日志</span><br><span class=\"line\">DBCC SHRINKDB</span><br><span class=\"line\">DBCC SHRINKFILE</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、压缩数据库\"><a href=\"#3、压缩数据库\" class=\"headerlink\" title=\"3、压缩数据库\"></a><strong>3、压缩数据库</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">dbcc shrinkdatabase(dbname)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、转移数据库给新用户以已存在用户权限\"><a href=\"#4、转移数据库给新用户以已存在用户权限\" class=\"headerlink\" title=\"4、转移数据库给新用户以已存在用户权限\"></a><strong>4、转移数据库给新用户以已存在用户权限</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">exec sp_change_users_login &#x27;update_one&#x27;,&#x27;newname&#x27;,&#x27;oldname&#x27;</span><br><span class=\"line\">go</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5、检查备份集\"><a href=\"#5、检查备份集\" class=\"headerlink\" title=\"5、检查备份集\"></a><strong>5、检查备份集</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">RESTORE VERIFYONLY from disk=&#x27;E:\\dvbbs.bak&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6、修复数据库\"><a href=\"#6、修复数据库\" class=\"headerlink\" title=\"6、修复数据库\"></a><strong>6、修复数据库</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ALTER DATABASE [dvbbs] SET SINGLE_USER</span><br><span class=\"line\">GO</span><br><span class=\"line\">DBCC CHECKDB(&#x27;dvbbs&#x27;,repair_allow_data_loss) WITH TABLOCK</span><br><span class=\"line\">GO</span><br><span class=\"line\">ALTER DATABASE [dvbbs] SET MULTI_USER</span><br><span class=\"line\">GO</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、日志清除\"><a href=\"#7、日志清除\" class=\"headerlink\" title=\"7、日志清除\"></a><strong>7、日志清除</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SET NOCOUNT ON</span><br><span class=\"line\">DECLARE @LogicalFileName sysname,</span><br><span class=\"line\">@MaxMinutes INT,</span><br><span class=\"line\">@NewSize INT</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">USE tablename -- 要操作的数据库名</span><br><span class=\"line\">SELECT @LogicalFileName = &#x27;tablename_log&#x27;, -- 日志文件名 </span><br><span class=\"line\">@MaxMinutes = 10, -- Limit on time allowed to wrap log.</span><br><span class=\"line\">@NewSize = 1 -- 你想设定的日志文件的大小(M)</span><br><span class=\"line\">Setup / initialize</span><br><span class=\"line\">DECLARE @OriginalSize int</span><br><span class=\"line\">SELECT @OriginalSize = size </span><br><span class=\"line\">FROM sysfiles</span><br><span class=\"line\">WHERE name = @LogicalFileName</span><br><span class=\"line\">SELECT &#x27;Original Size of &#x27; + db_name() + &#x27; LOG is &#x27; + </span><br><span class=\"line\">CONVERT(VARCHAR(30),@OriginalSize) + &#x27; 8K pages or &#x27; + </span><br><span class=\"line\">CONVERT(VARCHAR(30),(@OriginalSize*8/1024)) + &#x27;MB&#x27;</span><br><span class=\"line\">FROM sysfiles</span><br><span class=\"line\">WHERE name = @LogicalFileName</span><br><span class=\"line\">CREATE TABLE DummyTrans</span><br><span class=\"line\">(DummyColumn char (8000) not null)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DECLARE @Counter INT,</span><br><span class=\"line\">@StartTime DATETIME,</span><br><span class=\"line\">@TruncLog VARCHAR(255)</span><br><span class=\"line\">SELECT @StartTime = GETDATE(),</span><br><span class=\"line\">@TruncLog = &#x27;BACKUP LOG &#x27; + db_name() + &#x27; WITH TRUNCATE_ONLY&#x27;</span><br><span class=\"line\">DBCC SHRINKFILE (@LogicalFileName, @NewSize)</span><br><span class=\"line\">EXEC (@TruncLog)</span><br><span class=\"line\">-- Wrap the log if necessary.</span><br><span class=\"line\">WHILE @MaxMinutes &gt; DATEDIFF (mi, @StartTime, GETDATE()) -- time has not expired</span><br><span class=\"line\">AND @OriginalSize = (SELECT size FROM sysfiles WHERE name = @LogicalFileName) </span><br><span class=\"line\">AND (@OriginalSize * 8 /1024) &gt; @NewSize </span><br><span class=\"line\">BEGIN -- Outer loop.</span><br><span class=\"line\">SELECT @Counter = 0</span><br><span class=\"line\">WHILE ((@Counter &lt; @OriginalSize / 16) AND (@Counter &lt; 50000))</span><br><span class=\"line\">BEGIN -- update</span><br><span class=\"line\">INSERT DummyTrans VALUES (&#x27;Fill Log&#x27;) DELETE DummyTrans</span><br><span class=\"line\">SELECT @Counter = @Counter + 1</span><br><span class=\"line\">END</span><br><span class=\"line\">EXEC (@TruncLog) </span><br><span class=\"line\">END</span><br><span class=\"line\">SELECT &#x27;Final Size of &#x27; + db_name() + &#x27; LOG is &#x27; +</span><br><span class=\"line\">CONVERT(VARCHAR(30),size) + &#x27; 8K pages or &#x27; + </span><br><span class=\"line\">CONVERT(VARCHAR(30),(size*8/1024)) + &#x27;MB&#x27;</span><br><span class=\"line\">FROM sysfiles </span><br><span class=\"line\">WHERE name = @LogicalFileName</span><br><span class=\"line\">DROP TABLE DummyTrans</span><br><span class=\"line\">SET NOCOUNT OFF</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8、说明：更改某个表\"><a href=\"#8、说明：更改某个表\" class=\"headerlink\" title=\"8、说明：更改某个表\"></a><strong>8、说明：更改某个表</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">exec sp_changeobjectowner &#x27;tablename&#x27;,&#x27;dbo&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9、存储更改全部表\"><a href=\"#9、存储更改全部表\" class=\"headerlink\" title=\"9、存储更改全部表\"></a><strong>9、存储更改全部表</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">CREATE PROCEDURE dbo.User_ChangeObjectOwnerBatch</span><br><span class=\"line\">@OldOwner as NVARCHAR(128),</span><br><span class=\"line\">@NewOwner as NVARCHAR(128)</span><br><span class=\"line\">AS</span><br><span class=\"line\">DECLARE @Name as NVARCHAR(128)</span><br><span class=\"line\">DECLARE @Owner as NVARCHAR(128)</span><br><span class=\"line\">DECLARE @OwnerName as NVARCHAR(128)</span><br><span class=\"line\">DECLARE curObject CURSOR FOR </span><br><span class=\"line\">select &#x27;Name&#x27; = name,</span><br><span class=\"line\">&#x27;Owner&#x27; = user_name(uid)</span><br><span class=\"line\">from sysobjects</span><br><span class=\"line\">where user_name(uid)=@OldOwner</span><br><span class=\"line\">order by name</span><br><span class=\"line\">OPEN curObject</span><br><span class=\"line\">FETCH NEXT FROM curObject INTO @Name, @Owner</span><br><span class=\"line\">WHILE(@@FETCH_STATUS=0)</span><br><span class=\"line\">BEGIN </span><br><span class=\"line\">if @Owner=@OldOwner </span><br><span class=\"line\">begin</span><br><span class=\"line\">set @OwnerName = @OldOwner + &#x27;.&#x27; + rtrim(@Name)</span><br><span class=\"line\">exec sp_changeobjectowner @OwnerName, @NewOwner</span><br><span class=\"line\">end</span><br><span class=\"line\">-- select @name,@NewOwner,@OldOwner</span><br><span class=\"line\">FETCH NEXT FROM curObject INTO @Name, @Owner</span><br><span class=\"line\">END</span><br><span class=\"line\">close curObject</span><br><span class=\"line\">deallocate curObject</span><br><span class=\"line\">GO</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10、SQL-SERVER中直接循环写入数据\"><a href=\"#10、SQL-SERVER中直接循环写入数据\" class=\"headerlink\" title=\"10、SQL SERVER中直接循环写入数据\"></a><strong>10、SQL SERVER中直接循环写入数据</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">declare @i int</span><br><span class=\"line\">set @i=1</span><br><span class=\"line\">while @i&lt;30</span><br><span class=\"line\">begin</span><br><span class=\"line\">insert into test (userid) values(@i)</span><br><span class=\"line\">set @i=@i+1</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>案例 ：</p>\n<p>有如下表，要求就裱中所有沒有及格的成績，在每次增長0.1的基礎上，使他們剛好及格：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Name score</span><br><span class=\"line\">Zhangshan 80</span><br><span class=\"line\">Lishi 59</span><br><span class=\"line\">Wangwu 50</span><br><span class=\"line\">Songquan 69</span><br><span class=\"line\">while((select min(score) from tb_table)&lt;60) </span><br><span class=\"line\">begin </span><br><span class=\"line\">update tb_table set score =score*1.01 </span><br><span class=\"line\">where score&lt;60 </span><br><span class=\"line\">if (select min(score) from tb_table)&gt;60 </span><br><span class=\"line\">break </span><br><span class=\"line\">else </span><br><span class=\"line\">continue </span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"四、数据开发篇\"><a href=\"#四、数据开发篇\" class=\"headerlink\" title=\"四、数据开发篇\"></a><strong>四、数据开发篇</strong></h2><hr>\n<h3 id=\"1-按姓氏笔画排序\"><a href=\"#1-按姓氏笔画排序\" class=\"headerlink\" title=\"1.按姓氏笔画排序\"></a><strong>1.按姓氏笔画排序</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Select * From TableName Order By CustomerName Collate Chinese_PRC_Stroke_ci_as //从少到多</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-数据库加密\"><a href=\"#2-数据库加密\" class=\"headerlink\" title=\"2.数据库加密\"></a><strong>2.数据库加密</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select encrypt(&#x27;原始密码&#x27;) </span><br><span class=\"line\">select pwdencrypt(&#x27;原始密码&#x27;) </span><br><span class=\"line\">select pwdcompare(&#x27;原始密码&#x27;,&#x27;加密后密码&#x27;) = 1--相同；否则不相同 encrypt(&#x27;原始密码&#x27;) </span><br><span class=\"line\">select pwdencrypt(&#x27;原始密码&#x27;) </span><br><span class=\"line\">select pwdcompare(&#x27;原始密码&#x27;,&#x27;加密后密码&#x27;) = 1--相同；否则不相同</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-取回表中字段\"><a href=\"#3-取回表中字段\" class=\"headerlink\" title=\"3.取回表中字段\"></a><strong>3.取回表中字段</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">declare @list varchar(1000), </span><br><span class=\"line\">@sql nvarchar(1000)  </span><br><span class=\"line\">select @list=@list+&#x27;,&#x27;+b.name from sysobjects a,syscolumns b where a.id=b.id and a.name=&#x27;表A&#x27; </span><br><span class=\"line\">set @sql=&#x27;select &#x27;+right(@list,len(@list)-1)+&#x27; from 表A&#x27;  </span><br><span class=\"line\">exec (@sql)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-查看硬盘分区\"><a href=\"#4-查看硬盘分区\" class=\"headerlink\" title=\"4.查看硬盘分区\"></a><strong>4.查看硬盘分区</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">EXEC master..xp_fixeddrives</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-比较A-B表是否相等\"><a href=\"#5-比较A-B表是否相等\" class=\"headerlink\" title=\"5.比较A,B表是否相等\"></a><strong>5.比较A,B表是否相等</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">if (select checksum_agg(binary_checksum(*)) from A) </span><br><span class=\"line\">= </span><br><span class=\"line\">(select checksum_agg(binary_checksum(*)) from B) </span><br><span class=\"line\">print &#x27;相等&#x27; </span><br><span class=\"line\">else </span><br><span class=\"line\">print &#x27;不相等&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-杀掉所有的事件探察器进程\"><a href=\"#6-杀掉所有的事件探察器进程\" class=\"headerlink\" title=\"6.杀掉所有的事件探察器进程\"></a><strong>6.杀掉所有的事件探察器进程</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">DECLARE hcforeach CURSOR GLOBAL FOR SELECT &#x27;kill &#x27;+RTRIM(spid) FROM master.dbo.sysprocesses </span><br><span class=\"line\">WHERE program_name IN(&#x27;SQL profiler&#x27;,N&#x27;SQL 事件探查器&#x27;) </span><br><span class=\"line\">EXEC sp_msforeach_worker &#x27;?&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-记录搜索\"><a href=\"#7-记录搜索\" class=\"headerlink\" title=\"7.记录搜索\"></a><strong>7.记录搜索</strong></h3><p>开头到N条记录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Select Top N * From 表</span><br></pre></td></tr></table></figure>\n\n<p>N到M条记录(要有主索引ID)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Select Top M-N * From 表 Where ID in (Select Top M ID From 表) Order by ID Desc</span><br></pre></td></tr></table></figure>\n\n<p>N到结尾记录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Select Top N * From 表 Order by ID Desc</span><br></pre></td></tr></table></figure>\n\n<p>案例</p>\n<p>示例1：一张表有一万多条记录，表的第一个字段 RecID 是自增长字段， 写一个SQL语句， 找出表的第31到第40个记录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select top 10 recid from A where recid not in(select top 30 recid from A)</span><br></pre></td></tr></table></figure>\n\n<p>**　分析：**如果这样写会产生某些问题，如果recid在表中存在逻辑索引。</p>\n<p>select top 10 recid from A where……是从索引中查找，而后面的select top 30 recid from A则在数据表中查找，这样由于索引中的顺序有可能和数据表中的不一致，这样就导致查询到的不是本来的欲得到的数据。</p>\n<p>**　解决方案**</p>\n<p>**　1， 用order by** select top 30 recid from A order by ricid <strong>如果该字段不是自增长，就会出现问题</strong></p>\n<p>**　2， 在那个子查询中也加条件：**select top 30 recid from A where recid&gt;-1</p>\n<p>**　示例2：查询表中的最后以条记录，并不知道这个表共有多少数据,以及表结构。**</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">set @s = &#x27;select top 1 * from T where pid not in (select top &#x27; + str(@count-1) + &#x27; pid from T)&#x27;</span><br><span class=\"line\">print @s exec sp_executesql @s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9：获取当前数据库中的所有用户表\"><a href=\"#9：获取当前数据库中的所有用户表\" class=\"headerlink\" title=\"9：获取当前数据库中的所有用户表\"></a><strong>9：获取当前数据库中的所有用户表</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select Name from sysobjects where xtype=&#x27;u&#x27; and status&gt;=0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10：获取某一个表的所有字段\"><a href=\"#10：获取某一个表的所有字段\" class=\"headerlink\" title=\"10：获取某一个表的所有字段\"></a><strong>10：获取某一个表的所有字段</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select name from syscolumns where id=object_id(&#x27;表名&#x27;)</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select name from syscolumns where id in (select id from sysobjects where type = &#x27;u&#x27; and name = &#x27;表名&#x27;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>**注：**以上两种方式的效果相同</p>\n</blockquote>\n<h3 id=\"11：查看与某一个表相关的视图、存储过程、函数\"><a href=\"#11：查看与某一个表相关的视图、存储过程、函数\" class=\"headerlink\" title=\"11：查看与某一个表相关的视图、存储过程、函数\"></a><strong>11：查看与某一个表相关的视图、存储过程、函数</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select a.* from sysobjects a, syscomments b where a.id = b.id and b.text like &#x27;%表名%&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12：查看当前数据库中所有存储过程\"><a href=\"#12：查看当前数据库中所有存储过程\" class=\"headerlink\" title=\"12：查看当前数据库中所有存储过程\"></a><strong>12：查看当前数据库中所有存储过程</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select name as 存储过程名称 from sysobjects where xtype=&#x27;P&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13：查询用户创建的所有数据库\"><a href=\"#13：查询用户创建的所有数据库\" class=\"headerlink\" title=\"13：查询用户创建的所有数据库\"></a><strong>13：查询用户创建的所有数据库</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from master..sysdatabases D where sid not in(select sid from master..syslogins where name=&#x27;sa&#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>或者：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select dbid, name AS DB_NAME from master..sysdatabases where sid &lt;&gt; 0x01</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14：查询某一个表的字段和数据类型\"><a href=\"#14：查询某一个表的字段和数据类型\" class=\"headerlink\" title=\"14：查询某一个表的字段和数据类型\"></a><strong>14：查询某一个表的字段和数据类型</strong></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select column_name,data_type from information_schema.columns </span><br><span class=\"line\">where table_name = &#x27;表名&#x27;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15：不同服务器数据库之间的数据操作\"><a href=\"#15：不同服务器数据库之间的数据操作\" class=\"headerlink\" title=\"15：不同服务器数据库之间的数据操作\"></a><strong>15：不同服务器数据库之间的数据操作</strong></h3><p>–创建链接服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">exec sp_addlinkedserver &#x27;ITSV &#x27;, &#x27; &#x27;, &#x27;SQLOLEDB &#x27;, &#x27;远程服务器名或ip地址 &#x27;</span><br><span class=\"line\">exec sp_addlinkedsrvlogin &#x27;ITSV &#x27;, &#x27;false &#x27;,null, &#x27;用户名 &#x27;, &#x27;密码 &#x27;</span><br></pre></td></tr></table></figure>\n\n<p>–查询示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from ITSV.数据库名.dbo.表名</span><br></pre></td></tr></table></figure>\n\n<p>–导入示例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * into 表 from ITSV.数据库名.dbo.表名</span><br></pre></td></tr></table></figure>\n\n<p>–以后不再使用时删除链接服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">exec sp_dropserver &#x27;ITSV &#x27;, &#x27;droplogins &#x27;</span><br></pre></td></tr></table></figure>\n\n<p>–连接远程&#x2F;局域网数据(openrowset&#x2F;openquery&#x2F;opendatasource)</p>\n<p>–1、openrowset</p>\n<p>–查询示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * from openrowset( &#x27;SQLOLEDB &#x27;, &#x27;sql服务器名 &#x27;; &#x27;用户名 &#x27;; &#x27;密码 &#x27;,数据库名.dbo.表名)</span><br></pre></td></tr></table></figure>\n\n<p>–生成本地表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select * into 表 from openrowset( &#x27;SQLOLEDB &#x27;, &#x27;sql服务器名 &#x27;; &#x27;用户名 &#x27;; &#x27;密码 &#x27;,数据库名.dbo.表名)</span><br></pre></td></tr></table></figure>\n\n<p>–把本地表导入远程表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert openrowset( &#x27;SQLOLEDB &#x27;, &#x27;sql服务器名 &#x27;; &#x27;用户名 &#x27;; &#x27;密码 &#x27;,数据库名.dbo.表名)</span><br><span class=\"line\">select *from 本地表</span><br></pre></td></tr></table></figure>\n\n<p>–更新本地表：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">update b</span><br><span class=\"line\">set b.列A=a.列A</span><br><span class=\"line\">from openrowset( &#x27;SQLOLEDB &#x27;, &#x27;sql服务器名 &#x27;; &#x27;用户名 &#x27;; &#x27;密码 &#x27;,数据库名.dbo.表名)as a inner join 本地表 b</span><br><span class=\"line\">on a.column1=b.column1</span><br></pre></td></tr></table></figure>\n\n<p>–openquery用法需要创建一个连接</p>\n<p>–首先创建一个连接创建链接服务器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">exec sp_addlinkedserver &#x27;ITSV &#x27;, &#x27; &#x27;, &#x27;SQLOLEDB &#x27;, &#x27;远程服务器名或ip地址 &#x27;</span><br></pre></td></tr></table></figure>\n\n<p>–查询</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">select *</span><br><span class=\"line\">FROM openquery(ITSV, &#x27;SELECT * FROM 数据库.dbo.表名 &#x27;)</span><br></pre></td></tr></table></figure>\n\n<p>–把本地表导入远程表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert openquery(ITSV, &#x27;SELECT * FROM 数据库.dbo.表名 &#x27;)</span><br><span class=\"line\">select * from 本地表</span><br></pre></td></tr></table></figure>\n\n<p>–更新本地表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">update b</span><br><span class=\"line\">set b.列B=a.列B</span><br><span class=\"line\">FROM openquery(ITSV, &#x27;SELECT * FROM 数据库.dbo.表名 &#x27;) as a</span><br><span class=\"line\">inner join 本地表 b on a.列A=b.列A</span><br></pre></td></tr></table></figure>\n\n<p>–3、opendatasource&#x2F;openrowset</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">SELECT *</span><br><span class=\"line\">FROM opendatasource( &#x27;SQLOLEDB &#x27;, &#x27;Data Source=ip/ServerName;User ID=登陆名;Password=密码&#x27; ).test.dbo.roy_ta</span><br></pre></td></tr></table></figure>\n\n<p>–把本地表导入远程表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">insert opendatasource( &#x27;SQLOLEDB &#x27;, &#x27;Data Source=ip/ServerName;User ID=登陆名;Password=密码 &#x27;).数据库.dbo.表名</span><br><span class=\"line\">select * from 本地表</span><br></pre></td></tr></table></figure>\n"}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncategories: [测试]\ntags: [标签云]\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2025-06-09T05:09:43.388Z","updated":"2025-06-09T05:09:43.388Z","comments":1,"layout":"post","photos":[],"_id":"cmbpzhabd0001s2x0gst11mll","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Typora+Github+PicGo搭建个人免费图床","_content":"\n# 一、配置GitHub\n\n## 1、新建公开仓库\n\n### 1.1、New repository\n\n[![img](https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150012537.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220901738-2024171065.png)\n\n### 1.2、定义仓库名称，设置公开属性\n\n[![img](https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150012570.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220901265-1393623121.png)\n\n## 2、创建私人令牌（token）\n\n### 2.1、个人头像 --> Settings\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220900607-256612593.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220900607-256612593.png)\n\n### 2.2、左侧列底部点击 Developer settings\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220859820-723517043.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220859820-723517043.png)\n\n### 2.3、选择 Generate new token (classic)\n\n> 依此点击 Personal access tokens --> Tokens(classic) --> Generate new token --> Generate new token(classic)\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220859206-1834857940.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220859206-1834857940.png)\n\n### 2.4、密码验证\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220858530-227799129.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220858530-227799129.png)\n\n### 2.5、创建令牌\n\n> Note：标记作用，任意写\n>\n> Token 过期时间：为了安全性，不建议选择永久\n>\n> 访问权限：选择repo，对私有库享有完全控制\n\n[![img](https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150013595.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220857739-1764979956.png)\n\n[![img](https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150013583.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220857204-874985880.png)\n\n### 2.6、记事本记下token\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220856771-24639529.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220856771-24639529.png)\n\n# 二、配置PicGo\n\n## 1、PicGo下载地址\n\n[Molunerfinn/PicGo](https://github.com/Molunerfinn/PicGo/releases)\n\n> 依据自身的操作系统下载安装软件包\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220855596-495781787.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220855596-495781787.png)\n\n## 2、图床设置\n\n> 图床设置 --> GitHub\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220854595-1257469519.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220854595-1257469519.png)\n\n## 3、具体图床参数配置\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220854045-451301020.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220854045-451301020.png)\n\n### 3.1、图床配置名\n\n当前图床的名称，自定义\n\n### 3.2、设定仓库名\n\n> 格式：用户名/仓库名\n>\n> 可以通过GitHub上创建仓库页的域名快速得到\n\n\n\nbash\n\n```bash\n# 例如我这边的仓库名就是\nmisakivv/Cloud-Image-Hosting\n```\n\n[![img](https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150014655.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220853562-1698621985.png)\n\n### 3.3、设定分支名\n\n> 默认情况下均为 main 分支\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220852995-684255350.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220852995-684255350.png)\n\n### 3.4、设定Token\n\n上面 一、2.6、保存的Token\n\n### 3.5、设定存储路径\n\n存放至 Github 指定仓库的哪个文件夹下\n\n- 如果直接放到仓库的根目录下就不需要填写这一栏\n- 如果需要放到某个目录下，格式：/\n- 当填写的目录不存在时，Github会自动创建对应目录\n\n### 3.6、设定自定义域名\n\n> 这里使用免费的CDN：jsDelivr\n>\n> 官网链接：[jsDelivr - A free, fast, and reliable CDN for JS and open source](https://www.jsdelivr.com/)\n\n\n\nbash\n\n```bash\n# https://cdn.jsdelivr.net/gh/：固定的前缀，相当于替换掉了Github地址中的https://github.com/\n# user：Github上的用户名\n# repo：仓库名\n# @version：版本号（这里我们可以不管）\n# file：文件名（这里我们也不需要加上，因为上传完图片后，它会自动将上传的图片的名字作为存储的文件名）\n# 例如我这里的填写\nhttps://cdn.jsdelivr.net/gh/misakivv/Cloud-Image-Hosting\n```\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220852595-1340430072.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220852595-1340430072.png)\n\n这里值得注意的是，如果需要指定上传到哪个分支，此时需要在自定义域名后面使用@ + 分支名，如果是仓库默认的分支，可以省略指定分支这一步。\n\neg：我需要上传到 k8s 分支上，此时自定义域名就变成了：https://cdn.jsdelivr.net/gh/misakivv/Cloud-Image-Hosting@k8s\n\n# 三、测试\n\n上述配置完成后即可上传本地图片生成对应云端平台链接使用\n\n## 1、本地上传图片\n\n> 上传区 --> 选择GitHub图床 --> 点击上传\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220851740-788124223.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220851740-788124223.png)\n\n## 2、相册查看\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220850907-1584285037.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220850907-1584285037.png)\n\n## 3、时间戳重命名\n\n> 添加时间戳命名选项可以避免上传相同图片被覆盖的情况\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220850483-751662635.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220850483-751662635.png)\n\n# 四、Typora插入图片实现自动上传至PicGo（可选）\n\n> 需要将PicGo图床的链接格式换成Markdonw格式才能实现功能\n\n[![img](https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150017317.png)](https://gcore.jsdelivr.net/gh/misakivv/Cloud-Image/Default/20241231202037169.png)\n\n## 1、打开 Typora 偏好设置\n\n> ctrl + , 快捷键\n\n[![img](https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150015804.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220850023-1681762472.png)\n\n## 2、插入图片选项选择上传图片\n\n[![img](https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150016826.png)](https://gcore.jsdelivr.net/gh/misakivv/Cloud-Image/Default/20241231201935722.png)\n\n## 3、上传服务设定\n\n- 上传服务选择 PicGo（app）\n- PicGo 路径为安装 PicGo 目录\n","source":"_posts/2025/06/Typora-Github-PicGo.md","raw":"---\ntitle: Typora+Github+PicGo搭建个人免费图床\ncategories: [装修日记]\ntags: [主题装修]\n---\n\n# 一、配置GitHub\n\n## 1、新建公开仓库\n\n### 1.1、New repository\n\n[![img](https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150012537.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220901738-2024171065.png)\n\n### 1.2、定义仓库名称，设置公开属性\n\n[![img](https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150012570.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220901265-1393623121.png)\n\n## 2、创建私人令牌（token）\n\n### 2.1、个人头像 --> Settings\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220900607-256612593.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220900607-256612593.png)\n\n### 2.2、左侧列底部点击 Developer settings\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220859820-723517043.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220859820-723517043.png)\n\n### 2.3、选择 Generate new token (classic)\n\n> 依此点击 Personal access tokens --> Tokens(classic) --> Generate new token --> Generate new token(classic)\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220859206-1834857940.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220859206-1834857940.png)\n\n### 2.4、密码验证\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220858530-227799129.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220858530-227799129.png)\n\n### 2.5、创建令牌\n\n> Note：标记作用，任意写\n>\n> Token 过期时间：为了安全性，不建议选择永久\n>\n> 访问权限：选择repo，对私有库享有完全控制\n\n[![img](https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150013595.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220857739-1764979956.png)\n\n[![img](https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150013583.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220857204-874985880.png)\n\n### 2.6、记事本记下token\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220856771-24639529.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220856771-24639529.png)\n\n# 二、配置PicGo\n\n## 1、PicGo下载地址\n\n[Molunerfinn/PicGo](https://github.com/Molunerfinn/PicGo/releases)\n\n> 依据自身的操作系统下载安装软件包\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220855596-495781787.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220855596-495781787.png)\n\n## 2、图床设置\n\n> 图床设置 --> GitHub\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220854595-1257469519.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220854595-1257469519.png)\n\n## 3、具体图床参数配置\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220854045-451301020.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220854045-451301020.png)\n\n### 3.1、图床配置名\n\n当前图床的名称，自定义\n\n### 3.2、设定仓库名\n\n> 格式：用户名/仓库名\n>\n> 可以通过GitHub上创建仓库页的域名快速得到\n\n\n\nbash\n\n```bash\n# 例如我这边的仓库名就是\nmisakivv/Cloud-Image-Hosting\n```\n\n[![img](https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150014655.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220853562-1698621985.png)\n\n### 3.3、设定分支名\n\n> 默认情况下均为 main 分支\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220852995-684255350.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220852995-684255350.png)\n\n### 3.4、设定Token\n\n上面 一、2.6、保存的Token\n\n### 3.5、设定存储路径\n\n存放至 Github 指定仓库的哪个文件夹下\n\n- 如果直接放到仓库的根目录下就不需要填写这一栏\n- 如果需要放到某个目录下，格式：/\n- 当填写的目录不存在时，Github会自动创建对应目录\n\n### 3.6、设定自定义域名\n\n> 这里使用免费的CDN：jsDelivr\n>\n> 官网链接：[jsDelivr - A free, fast, and reliable CDN for JS and open source](https://www.jsdelivr.com/)\n\n\n\nbash\n\n```bash\n# https://cdn.jsdelivr.net/gh/：固定的前缀，相当于替换掉了Github地址中的https://github.com/\n# user：Github上的用户名\n# repo：仓库名\n# @version：版本号（这里我们可以不管）\n# file：文件名（这里我们也不需要加上，因为上传完图片后，它会自动将上传的图片的名字作为存储的文件名）\n# 例如我这里的填写\nhttps://cdn.jsdelivr.net/gh/misakivv/Cloud-Image-Hosting\n```\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220852595-1340430072.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220852595-1340430072.png)\n\n这里值得注意的是，如果需要指定上传到哪个分支，此时需要在自定义域名后面使用@ + 分支名，如果是仓库默认的分支，可以省略指定分支这一步。\n\neg：我需要上传到 k8s 分支上，此时自定义域名就变成了：https://cdn.jsdelivr.net/gh/misakivv/Cloud-Image-Hosting@k8s\n\n# 三、测试\n\n上述配置完成后即可上传本地图片生成对应云端平台链接使用\n\n## 1、本地上传图片\n\n> 上传区 --> 选择GitHub图床 --> 点击上传\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220851740-788124223.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220851740-788124223.png)\n\n## 2、相册查看\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220850907-1584285037.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220850907-1584285037.png)\n\n## 3、时间戳重命名\n\n> 添加时间戳命名选项可以避免上传相同图片被覆盖的情况\n\n[![img](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220850483-751662635.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220850483-751662635.png)\n\n# 四、Typora插入图片实现自动上传至PicGo（可选）\n\n> 需要将PicGo图床的链接格式换成Markdonw格式才能实现功能\n\n[![img](https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150017317.png)](https://gcore.jsdelivr.net/gh/misakivv/Cloud-Image/Default/20241231202037169.png)\n\n## 1、打开 Typora 偏好设置\n\n> ctrl + , 快捷键\n\n[![img](https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150015804.png)](https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220850023-1681762472.png)\n\n## 2、插入图片选项选择上传图片\n\n[![img](https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150016826.png)](https://gcore.jsdelivr.net/gh/misakivv/Cloud-Image/Default/20241231201935722.png)\n\n## 3、上传服务设定\n\n- 上传服务选择 PicGo（app）\n- PicGo 路径为安装 PicGo 目录\n","slug":"2025/06/Typora-Github-PicGo","published":1,"date":"2025-06-09T07:08:53.925Z","updated":"2025-06-09T07:08:53.925Z","comments":1,"layout":"post","photos":[],"_id":"cmbpzhabn0003s2x0eoy7fha4","content":"<h1 id=\"一、配置GitHub\"><a href=\"#一、配置GitHub\" class=\"headerlink\" title=\"一、配置GitHub\"></a>一、配置GitHub</h1><h2 id=\"1、新建公开仓库\"><a href=\"#1、新建公开仓库\" class=\"headerlink\" title=\"1、新建公开仓库\"></a>1、新建公开仓库</h2><h3 id=\"1-1、New-repository\"><a href=\"#1-1、New-repository\" class=\"headerlink\" title=\"1.1、New repository\"></a>1.1、New repository</h3><p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220901738-2024171065.png\"><img src=\"https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150012537.png\" alt=\"img\"></a></p>\n<h3 id=\"1-2、定义仓库名称，设置公开属性\"><a href=\"#1-2、定义仓库名称，设置公开属性\" class=\"headerlink\" title=\"1.2、定义仓库名称，设置公开属性\"></a>1.2、定义仓库名称，设置公开属性</h3><p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220901265-1393623121.png\"><img src=\"https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150012570.png\" alt=\"img\"></a></p>\n<h2 id=\"2、创建私人令牌（token）\"><a href=\"#2、创建私人令牌（token）\" class=\"headerlink\" title=\"2、创建私人令牌（token）\"></a>2、创建私人令牌（token）</h2><h3 id=\"2-1、个人头像-–-Settings\"><a href=\"#2-1、个人头像-–-Settings\" class=\"headerlink\" title=\"2.1、个人头像 –&gt; Settings\"></a>2.1、个人头像 –&gt; Settings</h3><p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220900607-256612593.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220900607-256612593.png\" alt=\"img\"></a></p>\n<h3 id=\"2-2、左侧列底部点击-Developer-settings\"><a href=\"#2-2、左侧列底部点击-Developer-settings\" class=\"headerlink\" title=\"2.2、左侧列底部点击 Developer settings\"></a>2.2、左侧列底部点击 Developer settings</h3><p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220859820-723517043.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220859820-723517043.png\" alt=\"img\"></a></p>\n<h3 id=\"2-3、选择-Generate-new-token-classic\"><a href=\"#2-3、选择-Generate-new-token-classic\" class=\"headerlink\" title=\"2.3、选择 Generate new token (classic)\"></a>2.3、选择 Generate new token (classic)</h3><blockquote>\n<p>依此点击 Personal access tokens –&gt; Tokens(classic) –&gt; Generate new token –&gt; Generate new token(classic)</p>\n</blockquote>\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220859206-1834857940.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220859206-1834857940.png\" alt=\"img\"></a></p>\n<h3 id=\"2-4、密码验证\"><a href=\"#2-4、密码验证\" class=\"headerlink\" title=\"2.4、密码验证\"></a>2.4、密码验证</h3><p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220858530-227799129.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220858530-227799129.png\" alt=\"img\"></a></p>\n<h3 id=\"2-5、创建令牌\"><a href=\"#2-5、创建令牌\" class=\"headerlink\" title=\"2.5、创建令牌\"></a>2.5、创建令牌</h3><blockquote>\n<p>Note：标记作用，任意写</p>\n<p>Token 过期时间：为了安全性，不建议选择永久</p>\n<p>访问权限：选择repo，对私有库享有完全控制</p>\n</blockquote>\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220857739-1764979956.png\"><img src=\"https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150013595.png\" alt=\"img\"></a></p>\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220857204-874985880.png\"><img src=\"https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150013583.png\" alt=\"img\"></a></p>\n<h3 id=\"2-6、记事本记下token\"><a href=\"#2-6、记事本记下token\" class=\"headerlink\" title=\"2.6、记事本记下token\"></a>2.6、记事本记下token</h3><p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220856771-24639529.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220856771-24639529.png\" alt=\"img\"></a></p>\n<h1 id=\"二、配置PicGo\"><a href=\"#二、配置PicGo\" class=\"headerlink\" title=\"二、配置PicGo\"></a>二、配置PicGo</h1><h2 id=\"1、PicGo下载地址\"><a href=\"#1、PicGo下载地址\" class=\"headerlink\" title=\"1、PicGo下载地址\"></a>1、PicGo下载地址</h2><p><a href=\"https://github.com/Molunerfinn/PicGo/releases\">Molunerfinn&#x2F;PicGo</a></p>\n<blockquote>\n<p>依据自身的操作系统下载安装软件包</p>\n</blockquote>\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220855596-495781787.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220855596-495781787.png\" alt=\"img\"></a></p>\n<h2 id=\"2、图床设置\"><a href=\"#2、图床设置\" class=\"headerlink\" title=\"2、图床设置\"></a>2、图床设置</h2><blockquote>\n<p>图床设置 –&gt; GitHub</p>\n</blockquote>\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220854595-1257469519.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220854595-1257469519.png\" alt=\"img\"></a></p>\n<h2 id=\"3、具体图床参数配置\"><a href=\"#3、具体图床参数配置\" class=\"headerlink\" title=\"3、具体图床参数配置\"></a>3、具体图床参数配置</h2><p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220854045-451301020.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220854045-451301020.png\" alt=\"img\"></a></p>\n<h3 id=\"3-1、图床配置名\"><a href=\"#3-1、图床配置名\" class=\"headerlink\" title=\"3.1、图床配置名\"></a>3.1、图床配置名</h3><p>当前图床的名称，自定义</p>\n<h3 id=\"3-2、设定仓库名\"><a href=\"#3-2、设定仓库名\" class=\"headerlink\" title=\"3.2、设定仓库名\"></a>3.2、设定仓库名</h3><blockquote>\n<p>格式：用户名&#x2F;仓库名</p>\n<p>可以通过GitHub上创建仓库页的域名快速得到</p>\n</blockquote>\n<p>bash</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 例如我这边的仓库名就是</span></span><br><span class=\"line\">misakivv/Cloud-Image-Hosting</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220853562-1698621985.png\"><img src=\"https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150014655.png\" alt=\"img\"></a></p>\n<h3 id=\"3-3、设定分支名\"><a href=\"#3-3、设定分支名\" class=\"headerlink\" title=\"3.3、设定分支名\"></a>3.3、设定分支名</h3><blockquote>\n<p>默认情况下均为 main 分支</p>\n</blockquote>\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220852995-684255350.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220852995-684255350.png\" alt=\"img\"></a></p>\n<h3 id=\"3-4、设定Token\"><a href=\"#3-4、设定Token\" class=\"headerlink\" title=\"3.4、设定Token\"></a>3.4、设定Token</h3><p>上面 一、2.6、保存的Token</p>\n<h3 id=\"3-5、设定存储路径\"><a href=\"#3-5、设定存储路径\" class=\"headerlink\" title=\"3.5、设定存储路径\"></a>3.5、设定存储路径</h3><p>存放至 Github 指定仓库的哪个文件夹下</p>\n<ul>\n<li>如果直接放到仓库的根目录下就不需要填写这一栏</li>\n<li>如果需要放到某个目录下，格式：&#x2F;</li>\n<li>当填写的目录不存在时，Github会自动创建对应目录</li>\n</ul>\n<h3 id=\"3-6、设定自定义域名\"><a href=\"#3-6、设定自定义域名\" class=\"headerlink\" title=\"3.6、设定自定义域名\"></a>3.6、设定自定义域名</h3><blockquote>\n<p>这里使用免费的CDN：jsDelivr</p>\n<p>官网链接：<a href=\"https://www.jsdelivr.com/\">jsDelivr - A free, fast, and reliable CDN for JS and open source</a></p>\n</blockquote>\n<p>bash</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># https://cdn.jsdelivr.net/gh/：固定的前缀，相当于替换掉了Github地址中的https://github.com/</span></span><br><span class=\"line\"><span class=\"comment\"># user：Github上的用户名</span></span><br><span class=\"line\"><span class=\"comment\"># repo：仓库名</span></span><br><span class=\"line\"><span class=\"comment\"># @version：版本号（这里我们可以不管）</span></span><br><span class=\"line\"><span class=\"comment\"># file：文件名（这里我们也不需要加上，因为上传完图片后，它会自动将上传的图片的名字作为存储的文件名）</span></span><br><span class=\"line\"><span class=\"comment\"># 例如我这里的填写</span></span><br><span class=\"line\">https://cdn.jsdelivr.net/gh/misakivv/Cloud-Image-Hosting</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220852595-1340430072.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220852595-1340430072.png\" alt=\"img\"></a></p>\n<p>这里值得注意的是，如果需要指定上传到哪个分支，此时需要在自定义域名后面使用@ + 分支名，如果是仓库默认的分支，可以省略指定分支这一步。</p>\n<p>eg：我需要上传到 k8s 分支上，此时自定义域名就变成了：<a href=\"https://cdn.jsdelivr.net/gh/misakivv/Cloud-Image-Hosting@k8s\">https://cdn.jsdelivr.net/gh/misakivv/Cloud-Image-Hosting@k8s</a></p>\n<h1 id=\"三、测试\"><a href=\"#三、测试\" class=\"headerlink\" title=\"三、测试\"></a>三、测试</h1><p>上述配置完成后即可上传本地图片生成对应云端平台链接使用</p>\n<h2 id=\"1、本地上传图片\"><a href=\"#1、本地上传图片\" class=\"headerlink\" title=\"1、本地上传图片\"></a>1、本地上传图片</h2><blockquote>\n<p>上传区 –&gt; 选择GitHub图床 –&gt; 点击上传</p>\n</blockquote>\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220851740-788124223.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220851740-788124223.png\" alt=\"img\"></a></p>\n<h2 id=\"2、相册查看\"><a href=\"#2、相册查看\" class=\"headerlink\" title=\"2、相册查看\"></a>2、相册查看</h2><p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220850907-1584285037.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220850907-1584285037.png\" alt=\"img\"></a></p>\n<h2 id=\"3、时间戳重命名\"><a href=\"#3、时间戳重命名\" class=\"headerlink\" title=\"3、时间戳重命名\"></a>3、时间戳重命名</h2><blockquote>\n<p>添加时间戳命名选项可以避免上传相同图片被覆盖的情况</p>\n</blockquote>\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220850483-751662635.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220850483-751662635.png\" alt=\"img\"></a></p>\n<h1 id=\"四、Typora插入图片实现自动上传至PicGo（可选）\"><a href=\"#四、Typora插入图片实现自动上传至PicGo（可选）\" class=\"headerlink\" title=\"四、Typora插入图片实现自动上传至PicGo（可选）\"></a>四、Typora插入图片实现自动上传至PicGo（可选）</h1><blockquote>\n<p>需要将PicGo图床的链接格式换成Markdonw格式才能实现功能</p>\n</blockquote>\n<p><a href=\"https://gcore.jsdelivr.net/gh/misakivv/Cloud-Image/Default/20241231202037169.png\"><img src=\"https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150017317.png\" alt=\"img\"></a></p>\n<h2 id=\"1、打开-Typora-偏好设置\"><a href=\"#1、打开-Typora-偏好设置\" class=\"headerlink\" title=\"1、打开 Typora 偏好设置\"></a>1、打开 Typora 偏好设置</h2><blockquote>\n<p>ctrl + , 快捷键</p>\n</blockquote>\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220850023-1681762472.png\"><img src=\"https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150015804.png\" alt=\"img\"></a></p>\n<h2 id=\"2、插入图片选项选择上传图片\"><a href=\"#2、插入图片选项选择上传图片\" class=\"headerlink\" title=\"2、插入图片选项选择上传图片\"></a>2、插入图片选项选择上传图片</h2><p><a href=\"https://gcore.jsdelivr.net/gh/misakivv/Cloud-Image/Default/20241231201935722.png\"><img src=\"https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150016826.png\" alt=\"img\"></a></p>\n<h2 id=\"3、上传服务设定\"><a href=\"#3、上传服务设定\" class=\"headerlink\" title=\"3、上传服务设定\"></a>3、上传服务设定</h2><ul>\n<li>上传服务选择 PicGo（app）</li>\n<li>PicGo 路径为安装 PicGo 目录</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"一、配置GitHub\"><a href=\"#一、配置GitHub\" class=\"headerlink\" title=\"一、配置GitHub\"></a>一、配置GitHub</h1><h2 id=\"1、新建公开仓库\"><a href=\"#1、新建公开仓库\" class=\"headerlink\" title=\"1、新建公开仓库\"></a>1、新建公开仓库</h2><h3 id=\"1-1、New-repository\"><a href=\"#1-1、New-repository\" class=\"headerlink\" title=\"1.1、New repository\"></a>1.1、New repository</h3><p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220901738-2024171065.png\"><img src=\"https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150012537.png\" alt=\"img\"></a></p>\n<h3 id=\"1-2、定义仓库名称，设置公开属性\"><a href=\"#1-2、定义仓库名称，设置公开属性\" class=\"headerlink\" title=\"1.2、定义仓库名称，设置公开属性\"></a>1.2、定义仓库名称，设置公开属性</h3><p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220901265-1393623121.png\"><img src=\"https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150012570.png\" alt=\"img\"></a></p>\n<h2 id=\"2、创建私人令牌（token）\"><a href=\"#2、创建私人令牌（token）\" class=\"headerlink\" title=\"2、创建私人令牌（token）\"></a>2、创建私人令牌（token）</h2><h3 id=\"2-1、个人头像-–-Settings\"><a href=\"#2-1、个人头像-–-Settings\" class=\"headerlink\" title=\"2.1、个人头像 –&gt; Settings\"></a>2.1、个人头像 –&gt; Settings</h3><p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220900607-256612593.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220900607-256612593.png\" alt=\"img\"></a></p>\n<h3 id=\"2-2、左侧列底部点击-Developer-settings\"><a href=\"#2-2、左侧列底部点击-Developer-settings\" class=\"headerlink\" title=\"2.2、左侧列底部点击 Developer settings\"></a>2.2、左侧列底部点击 Developer settings</h3><p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220859820-723517043.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220859820-723517043.png\" alt=\"img\"></a></p>\n<h3 id=\"2-3、选择-Generate-new-token-classic\"><a href=\"#2-3、选择-Generate-new-token-classic\" class=\"headerlink\" title=\"2.3、选择 Generate new token (classic)\"></a>2.3、选择 Generate new token (classic)</h3><blockquote>\n<p>依此点击 Personal access tokens –&gt; Tokens(classic) –&gt; Generate new token –&gt; Generate new token(classic)</p>\n</blockquote>\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220859206-1834857940.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220859206-1834857940.png\" alt=\"img\"></a></p>\n<h3 id=\"2-4、密码验证\"><a href=\"#2-4、密码验证\" class=\"headerlink\" title=\"2.4、密码验证\"></a>2.4、密码验证</h3><p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220858530-227799129.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220858530-227799129.png\" alt=\"img\"></a></p>\n<h3 id=\"2-5、创建令牌\"><a href=\"#2-5、创建令牌\" class=\"headerlink\" title=\"2.5、创建令牌\"></a>2.5、创建令牌</h3><blockquote>\n<p>Note：标记作用，任意写</p>\n<p>Token 过期时间：为了安全性，不建议选择永久</p>\n<p>访问权限：选择repo，对私有库享有完全控制</p>\n</blockquote>\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220857739-1764979956.png\"><img src=\"https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150013595.png\" alt=\"img\"></a></p>\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220857204-874985880.png\"><img src=\"https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150013583.png\" alt=\"img\"></a></p>\n<h3 id=\"2-6、记事本记下token\"><a href=\"#2-6、记事本记下token\" class=\"headerlink\" title=\"2.6、记事本记下token\"></a>2.6、记事本记下token</h3><p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220856771-24639529.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220856771-24639529.png\" alt=\"img\"></a></p>\n<h1 id=\"二、配置PicGo\"><a href=\"#二、配置PicGo\" class=\"headerlink\" title=\"二、配置PicGo\"></a>二、配置PicGo</h1><h2 id=\"1、PicGo下载地址\"><a href=\"#1、PicGo下载地址\" class=\"headerlink\" title=\"1、PicGo下载地址\"></a>1、PicGo下载地址</h2><p><a href=\"https://github.com/Molunerfinn/PicGo/releases\">Molunerfinn&#x2F;PicGo</a></p>\n<blockquote>\n<p>依据自身的操作系统下载安装软件包</p>\n</blockquote>\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220855596-495781787.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220855596-495781787.png\" alt=\"img\"></a></p>\n<h2 id=\"2、图床设置\"><a href=\"#2、图床设置\" class=\"headerlink\" title=\"2、图床设置\"></a>2、图床设置</h2><blockquote>\n<p>图床设置 –&gt; GitHub</p>\n</blockquote>\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220854595-1257469519.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220854595-1257469519.png\" alt=\"img\"></a></p>\n<h2 id=\"3、具体图床参数配置\"><a href=\"#3、具体图床参数配置\" class=\"headerlink\" title=\"3、具体图床参数配置\"></a>3、具体图床参数配置</h2><p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220854045-451301020.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220854045-451301020.png\" alt=\"img\"></a></p>\n<h3 id=\"3-1、图床配置名\"><a href=\"#3-1、图床配置名\" class=\"headerlink\" title=\"3.1、图床配置名\"></a>3.1、图床配置名</h3><p>当前图床的名称，自定义</p>\n<h3 id=\"3-2、设定仓库名\"><a href=\"#3-2、设定仓库名\" class=\"headerlink\" title=\"3.2、设定仓库名\"></a>3.2、设定仓库名</h3><blockquote>\n<p>格式：用户名&#x2F;仓库名</p>\n<p>可以通过GitHub上创建仓库页的域名快速得到</p>\n</blockquote>\n<p>bash</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 例如我这边的仓库名就是</span></span><br><span class=\"line\">misakivv/Cloud-Image-Hosting</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220853562-1698621985.png\"><img src=\"https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150014655.png\" alt=\"img\"></a></p>\n<h3 id=\"3-3、设定分支名\"><a href=\"#3-3、设定分支名\" class=\"headerlink\" title=\"3.3、设定分支名\"></a>3.3、设定分支名</h3><blockquote>\n<p>默认情况下均为 main 分支</p>\n</blockquote>\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220852995-684255350.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220852995-684255350.png\" alt=\"img\"></a></p>\n<h3 id=\"3-4、设定Token\"><a href=\"#3-4、设定Token\" class=\"headerlink\" title=\"3.4、设定Token\"></a>3.4、设定Token</h3><p>上面 一、2.6、保存的Token</p>\n<h3 id=\"3-5、设定存储路径\"><a href=\"#3-5、设定存储路径\" class=\"headerlink\" title=\"3.5、设定存储路径\"></a>3.5、设定存储路径</h3><p>存放至 Github 指定仓库的哪个文件夹下</p>\n<ul>\n<li>如果直接放到仓库的根目录下就不需要填写这一栏</li>\n<li>如果需要放到某个目录下，格式：&#x2F;</li>\n<li>当填写的目录不存在时，Github会自动创建对应目录</li>\n</ul>\n<h3 id=\"3-6、设定自定义域名\"><a href=\"#3-6、设定自定义域名\" class=\"headerlink\" title=\"3.6、设定自定义域名\"></a>3.6、设定自定义域名</h3><blockquote>\n<p>这里使用免费的CDN：jsDelivr</p>\n<p>官网链接：<a href=\"https://www.jsdelivr.com/\">jsDelivr - A free, fast, and reliable CDN for JS and open source</a></p>\n</blockquote>\n<p>bash</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># https://cdn.jsdelivr.net/gh/：固定的前缀，相当于替换掉了Github地址中的https://github.com/</span></span><br><span class=\"line\"><span class=\"comment\"># user：Github上的用户名</span></span><br><span class=\"line\"><span class=\"comment\"># repo：仓库名</span></span><br><span class=\"line\"><span class=\"comment\"># @version：版本号（这里我们可以不管）</span></span><br><span class=\"line\"><span class=\"comment\"># file：文件名（这里我们也不需要加上，因为上传完图片后，它会自动将上传的图片的名字作为存储的文件名）</span></span><br><span class=\"line\"><span class=\"comment\"># 例如我这里的填写</span></span><br><span class=\"line\">https://cdn.jsdelivr.net/gh/misakivv/Cloud-Image-Hosting</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220852595-1340430072.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220852595-1340430072.png\" alt=\"img\"></a></p>\n<p>这里值得注意的是，如果需要指定上传到哪个分支，此时需要在自定义域名后面使用@ + 分支名，如果是仓库默认的分支，可以省略指定分支这一步。</p>\n<p>eg：我需要上传到 k8s 分支上，此时自定义域名就变成了：<a href=\"https://cdn.jsdelivr.net/gh/misakivv/Cloud-Image-Hosting@k8s\">https://cdn.jsdelivr.net/gh/misakivv/Cloud-Image-Hosting@k8s</a></p>\n<h1 id=\"三、测试\"><a href=\"#三、测试\" class=\"headerlink\" title=\"三、测试\"></a>三、测试</h1><p>上述配置完成后即可上传本地图片生成对应云端平台链接使用</p>\n<h2 id=\"1、本地上传图片\"><a href=\"#1、本地上传图片\" class=\"headerlink\" title=\"1、本地上传图片\"></a>1、本地上传图片</h2><blockquote>\n<p>上传区 –&gt; 选择GitHub图床 –&gt; 点击上传</p>\n</blockquote>\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220851740-788124223.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220851740-788124223.png\" alt=\"img\"></a></p>\n<h2 id=\"2、相册查看\"><a href=\"#2、相册查看\" class=\"headerlink\" title=\"2、相册查看\"></a>2、相册查看</h2><p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220850907-1584285037.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220850907-1584285037.png\" alt=\"img\"></a></p>\n<h2 id=\"3、时间戳重命名\"><a href=\"#3、时间戳重命名\" class=\"headerlink\" title=\"3、时间戳重命名\"></a>3、时间戳重命名</h2><blockquote>\n<p>添加时间戳命名选项可以避免上传相同图片被覆盖的情况</p>\n</blockquote>\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220850483-751662635.png\"><img src=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220850483-751662635.png\" alt=\"img\"></a></p>\n<h1 id=\"四、Typora插入图片实现自动上传至PicGo（可选）\"><a href=\"#四、Typora插入图片实现自动上传至PicGo（可选）\" class=\"headerlink\" title=\"四、Typora插入图片实现自动上传至PicGo（可选）\"></a>四、Typora插入图片实现自动上传至PicGo（可选）</h1><blockquote>\n<p>需要将PicGo图床的链接格式换成Markdonw格式才能实现功能</p>\n</blockquote>\n<p><a href=\"https://gcore.jsdelivr.net/gh/misakivv/Cloud-Image/Default/20241231202037169.png\"><img src=\"https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150017317.png\" alt=\"img\"></a></p>\n<h2 id=\"1、打开-Typora-偏好设置\"><a href=\"#1、打开-Typora-偏好设置\" class=\"headerlink\" title=\"1、打开 Typora 偏好设置\"></a>1、打开 Typora 偏好设置</h2><blockquote>\n<p>ctrl + , 快捷键</p>\n</blockquote>\n<p><a href=\"https://img2023.cnblogs.com/blog/3332572/202412/3332572-20241208220850023-1681762472.png\"><img src=\"https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150015804.png\" alt=\"img\"></a></p>\n<h2 id=\"2、插入图片选项选择上传图片\"><a href=\"#2、插入图片选项选择上传图片\" class=\"headerlink\" title=\"2、插入图片选项选择上传图片\"></a>2、插入图片选项选择上传图片</h2><p><a href=\"https://gcore.jsdelivr.net/gh/misakivv/Cloud-Image/Default/20241231201935722.png\"><img src=\"https://cdn.jsdelivr.net/gh/yanhuo075/images-repo/upload/20250609150016826.png\" alt=\"img\"></a></p>\n<h2 id=\"3、上传服务设定\"><a href=\"#3、上传服务设定\" class=\"headerlink\" title=\"3、上传服务设定\"></a>3、上传服务设定</h2><ul>\n<li>上传服务选择 PicGo（app）</li>\n<li>PicGo 路径为安装 PicGo 目录</li>\n</ul>\n"},{"title":"Hexo-Stellar主题装修日记(一)","_content":"\n## 前言\n\n记录一下自己从默认主题样式到现在本网站的样子中间都修改了哪些地方，也作为完善博客期间的备份。\n\n## 博客引用资源\n\n### 本地资源文件夹\n\n将头像、图标、css、js等文件放在source下\n\n### 静态资源本地化\n\n有两次发现通过jsdelivr引入的静态资源会失效，为了网站的稳定性，决定将所有**通过jsdelivr引入的静态资源**保存到本地，防止失效后网站无法访问。\n\n### 引用落霞孤鹜字体\n\n```\ntale/_config.ymlinject:\n  head:\n    - <link rel=\"stylesheet\" href=\"https://npm.elemecdn.com/lxgw-wenkai-screen-webfont/style.css\" media=\"print\" onload=\"this.media='all'\"> #字体\n\nCopy\ntale/_config.stellar.ymlstyle:\n  font-family:\n    body: '\"LXGW WenKai Screen\", sans-serif'\n\nCopy\n```\n\n### 引用鸿蒙字体\n\n```\ntale/_config.ymlinject:\n  head:\n    - <link rel=\"preconnect\" href=\"https://s1.hdslb.com/\" /> \n    - <link rel=\"stylesheet\" href=\"//s1.hdslb.com/bfs/static/jinkela/long/font/regular.css\" media=\"all\" onload=\"this.media='all'\" /> #鸿蒙正常字体\n    - <link rel=\"stylesheet\" href=\"//s1.hdslb.com/bfs/static/jinkela/long/font/medium.css\" media=\"all\" onload=\"this.media='all'\" /> #鸿蒙加粗字体\n\nCopy\ntale/_config.stellar.ymlstyle:\n  font-family:\n    body: 'HarmonyOS_Regular' # 鸿蒙正常字体\n    #body: 'HarmonyOS_Regular' # 鸿蒙加粗字体\n\nCopy\n```\n\n## 博客基本配置\n\n### 基本信息\n\n```\ntale/_config.yml# Site\ntitle: SFZhang #网站名称\navatar: /customize/images/sfzhang.jpg #博客头像\nfavicon: /customize/images/sfzhang.jpg #网站图标\nsubtitle: \"SFZhang's blog | blog.sfzhang.cn\" #鼠标移入翻转效果\ndescription: '一个积极生活的人'\nkeywords:\nauthor: SFZhang #博客作者\nlanguage: zh-CN #博客语言：en、zh-CN\ntimezone: ''\n\nCopy\n```\n\n### 显示导航\n\n```\ntale/_config.stellar.ymlsidebar:\n  menu:\n    post: '[btn.blog](/)'\n    wiki: '[btn.wiki](/)'\n    friends: '[友链](/)'\n    about: '[关于](/)'\n\nCopy\n```\n\n### 图片放大（fancybox）\n\n其中selector设置为需要放大图片的HTML选择器：\n\n```\ntale/_config.ymltag_plugins:\n  # {% image %}\n  image:\n    fancybox: true # true, false\n    parse_markdown: true # 把 markdown 格式的图片解析成图片标签\n\n######## JS Plugins ########\nplugins:\n  # https://fancyapps.com/docs/ui/fancybox/\n  # available for {% image xxx %}\n  fancybox:\n    enable: true\n    #js: /customize/js/fancybox.umd.js\n    css: /customize/css/fancybox.css\n    js: https://fastly.jsdelivr.net/npm/@fancyapps/ui@4.0/dist/fancybox.umd.js\n    #css: https://fastly.jsdelivr.net/npm/@fancyapps/ui@4.0/dist/fancybox.css\n    # 可以处理评论区的图片（不支持 iframe 类评论系统）例如：\n    # 使用twikoo评论可以写: .tk-content img:not([class*=\"emo\"])\n    # 使用waline评论可以写: #waline_container .vcontent img\n    selector: .swiper-slide img, .md-text.content p>img, .md-text.content li img , .wl-content img, .image-bg img # 多个选择器用英文逗号隔开\n    #selector: .swiper-slide img # 多个选择器用英文逗号隔开\n\nCopy\n```\n\n## 侧边栏\n\n### 侧边栏底部按钮\n\n```\ntale/_config.stellar.ymlfooter:\n  social:\n    QQ:\n      icon: '<img src=\"/customize/svg/contact.svg\"/>'\n      url: https://wpa.qq.com/msgrd?v=3&uin=1119716380&site=qq&menu=yes&jumpflag=1\n    github:\n      icon: '<img src=\"/customize/svg/github.svg\"/>'\n      url: https://github.com/z23654262\n    #iconfont:\n    #  icon: '<img src=\"/customize/svg/iconfont.svg\"/>'\n    #  url: https://www.iconfont.cn/\n    unsplash:\n      icon: '<img src=\"/customize/svg/unsplash.svg\"/>'\n      url: https://unsplash.com/@z23654262\n    train:\n      icon: '<img src=\"/customize/svg/train.svg\"/>'\n      url: https://unsplash.com/@z23654262\n    Moon:\n      icon: '<img id=\"ThemeM\" src=\"/customize/svg/moon.svg\"/>'\n      url: javaScript:void('永夜');\n    Sun:\n      icon: '<img id=\"ThemeL\" src=\"/customize/svg/sun.svg\"/>'\n      url: javaScript:void('永昼');\n    #AI:\n    # icon: '<img id=\"ThemeAI\" src=\"/customize/svg/auto.svg\"/>'\n    # url: javaScript:void('跟随系统');\n\nCopy\n```\n\n### 小组件\n\n```\ntale/source/_data/widget,ymlwelcome:\n  layout: markdown\n  title: '欢迎来到SFZhang的知识库'\n  content: |\n    不以物喜，不以己悲\n    <script src=\"https://v1.hitokoto.cn/?c=i&encode=js&select=%23hitokoto\" defer=\"\"></script>\n    <p>一诗：<span id=\"hitokoto\"></span></p>\n\nyiyan:\n  layout: markdown\n  title: '一诗'\n  content: |\n    <script src=\"https://v1.hitokoto.cn/?c=i&encode=js&select=%23hitokoto\" defer=\"\"></script>\n    <p><span id=\"hitokoto\"></span></p>\n\ntimeline:\n  layout: timeline\n  title: 生活碎片\n  api: https://api.github.com/repos/z23654262/blog-life/issues?per_page=10 # 若你想限制数量，在api链接后面加上?per_page=1指限制为1条\n  user: # 是否过滤只显示某个人发布的内容，如果要筛选多人，用英文逗号隔开\n  hide: # title,footer # 隐藏标题或底部 # 此功能需要 Stellar v1.13.0\n\nghuser:\n  layout: ghuser\n  username: z23654262 # your github login username\n  avatar: true # show avatar or not\n  menu: true # show menu or not\n\n#搜索\nsearch_blog:\n  layout: search\n  filter: /blog/ # or /posts/ ...\n  placeholder: 文章搜索\n\nsearch_all_docs:\n  layout: search\n  filter: /wiki/\n  placeholder: 文档系统搜索\n\nsearch_docs:\n  layout: search\n  filter: auto\n  placeholder: 文档内搜索\n\nCopy\n```\n\n## 生活碎片\n\n### 添加页面\n\n\n\n### 添加首页按钮\n\n```\ntale/_config.stellar.ymlpost-index: # 近期发布 分类 标签 归档 and ...\n  '生活碎片': /life\n\nCopy\n```\n\n### 导航高亮问题\n\n```\ntale/node_modules/hexo-theme-stellar/layout/_partial/main/navbar/list_post.ejsif (full_url_for(page.path) == full_url_for(obj[key]))\n\nCopy\n```\n\n修改为\n\n```\ntale/node_modules/hexo-theme-stellar/layout/_partial/main/navbar/list_post.ejsif (full_url_for(page.path) == full_url_for(obj[key]) + '/index.html')\n\nCopy\n```\n\n### 新建github仓库并添加一条issue\n\n![img](https://bu.dusays.com/2023/10/10/6525053ada517.png)\n\n### 编辑生活碎片页面\n\n```\ntale/source/life/index.md---\ntitle: \nmenu_id: post #侧边栏首页高亮\nbreadcrumb: false # 隐藏面包屑导航\npost_list: true # 显示首页导航\ndate: 2023-10-10 10:34:34\n---\n\n{% note color:orange 分享自己的生活碎片！ %}\n\n{% timeline api:https://api.github.com/repos/z23654262/blog-life/issues?direction=asc&per_page=30 %}{% endtimeline %}\n\nCopy\n```\n\n### 预览生活碎片页面\n\n![img](https://bu.dusays.com/2023/10/10/6525053c629b0.png)\n\n## 添加评论系统giscus\n\n### 新增github仓库\n\n新增blog-comments仓库并开启Discussions功能并勾选**blog-comments/Settings/Features/Discussions**即可。\n\n### 修改配置\n\n```\ntale/_config.stellar.ymlcomments:\n  service: giscus\n  # giscus\n  # https://giscus.app/zh-CN\n  giscus:\n    data-repo: xxx/xxx # [在此输入仓库]\n    data-repo-id: # [在此输入仓库 ID]\n    data-category: # [在此输入分类名]\n    data-category-id:\n    data-mapping: pathname\n    data-strict: 0\n    data-reactions-enabled: 1\n    data-emit-metadata: 0\n    data-input-position: top # top, bottom\n    data-theme: preferred_color_scheme\n    data-lang: zh-CN\n    data-loading: lazy\n    crossorigin: anonymous\n\nCopy\n```\n\n### 测试giscus评论系统\n\n博客内评论：\n\n![img](https://bu.dusays.com/2023/10/10/652506ecef464.png)\n\ngithub仓库中Discussions：\n\n![img](https://bu.dusays.com/2023/10/10/65250743df7b0.png)\n\n## 添加waline评论系统\n\n[waline官方教程](https://waline.js.org/guide/get-started/)\n\nwaline程序托管于vercel，数据存储使用learncloud国际版，域名使用waline.sfzhang.top二级域名\n\n### learncloud国际版设置\n\n1. [登录](https://console.leancloud.app/login) 或 [注册](https://console.leancloud.app/register) `LeanCloud 国际版` 并进入 [控制台](https://console.leancloud.app/apps)\n\n2. 点击左上角`创建应用`并起一个你喜欢的名字 (请选择免费的开发版)\n\n   ![img](https://bu.dusays.com/2023/10/25/653934aa64f92.png)\n\n3. 进入应用，选择左下角的 `设置` > `应用 Key`。你可以看到你的 `APP ID`,`APP Key` 和 `Master Key`。请记录它们，以便后续使用。\n\n   ![img](https://bu.dusays.com/2023/10/25/653934abc41c2.png)\n\n### vercel设置\n\n1. 点击[Vercel](https://vercel.com/new/clone?repository-url=https://github.com/walinejs/waline/tree/main/example)，跳转至 Vercel 进行 Server 端部署。（如果登录无法访问github，则使用邮箱登录）\n\n2. 跳转后会自动机遇waline仓库进行初始化，只需要填写Vercel仓库名称即可。\n\n   ![img](https://bu.dusays.com/2023/10/25/653939ea76abe.png)\n\n3. 点击顶部的 `Settings` - `Environment Variables` 进入环境变量配置页，并配置三个环境变量 `LEAN_ID`, `LEAN_KEY` 和 `LEAN_MASTER_KEY` 。它们的值分别对应上一步在 LeanCloud 中获得的 `APP ID`, `APP KEY`, `Master Key`。\n\n   ![img](https://bu.dusays.com/2023/10/25/653939ec3590b.png)\n\n4. 环境变量配置完成之后点击顶部的 `Deployments` 点击顶部最新的一次部署右侧的 `Redeploy` 按钮进行重新部署。该步骤是为了让刚才设置的环境变量生效。\n\n   ![img](https://bu.dusays.com/2023/10/25/653939edb10db.png)\n\n5. 此时会跳转到 `Overview` 界面开始部署，等待片刻后 `STATUS` 会变成 `Ready`。此时请点击 `Visit` ，即可跳转到部署好的网站地址，此地址即为你的服务端地址。\n\n### Vercel绑定域名\n\n1. 点击顶部的 `Settings` - `Domains` 进入域名配置页，并输入需要绑定的域名\n\n   ![img](https://bu.dusays.com/2023/10/25/653939ef268d9.png)\n\n2. 在阿里云处配置域名解析\n\n   ![img](https://bu.dusays.com/2023/10/25/653939f04aa4b.png)\n\n### 博客配置文件\n\n```\ntale/_config.staller.yml######## Comments ########\ncomments:\n  service: waline # beaudar, utterances, giscus, twikoo, waline, artalk\n  \n  # Waline\n  # https://waline.js.org/\n  waline:\n    js: https://unpkg.com/@waline/client@2.14.1/dist/waline.js\n    css: https://unpkg.com/@waline/client@2.14.1/dist/waline.css\n    # Waline server address url, you should set this to your own link\n    serverURL: https://domain\n    # If false, comment count will only be displayed in post page, not in home page\n    commentCount: true\n    # Pageviews count, Note: You should not enable both `waline.pageview` and `leancloud_visitors`.\n    pageview: false\n    # Custom emoji\n    # emoji:\n    #   - https://unpkg.com/@waline/emojis@1.1.0/weibo\n    #   - https://unpkg.com/@waline/emojis@1.1.0/alus\n    #   - https://unpkg.com/@waline/emojis@1.1.0/bilibili\n    #   - https://unpkg.com/@waline/emojis@1.1.0/qq\n    #   - https://unpkg.com/@waline/emojis@1.1.0/tieba\n    #   - https://unpkg.com/@waline/emojis@1.1.0/tw-emoji\n    #   - https://unpkg.com/@waline/emojis@1.1.0/bmoji\n    # 设置自己的图床服务，替换默认的 Base 64 编码嵌入（有体积大小限制），在评论中上传图片更加方便\n    # imageUploader:\n      # 适配了兰空图床V1、V2版本\n      # 以兰空图床V1为例，下列填写内容为：\n      # fileName: file\n      # tokenName: Authorization\n      # api: https://xxxxxx/api/v1/upload\n      # token: Bearer xxxxxxxxxxxxxx\n      # resp: data.links.url\n      # 以兰空图床V2为例，下列填写内容为：\n      # fileName: image\n      # tokenName: token\n      # api: https://xxxxxx/api/upload\n      # token: xxxxxxxxxxxxxx\n      # resp: data.url\n    #   fileName: # 根据版本二选一\n    #   tokenName: # 根据版本二选一\n    #   api: # 图床 api 地址\n    #   token: # 图床验证\n    #   resp: # 图片地址返回值的字段\n```\n","source":"_posts/2025/06/theme-design1.md","raw":"---\ntitle: Hexo-Stellar主题装修日记(一)\ncategories: [装修日记]\ntags: [主题装修]\n---\n\n## 前言\n\n记录一下自己从默认主题样式到现在本网站的样子中间都修改了哪些地方，也作为完善博客期间的备份。\n\n## 博客引用资源\n\n### 本地资源文件夹\n\n将头像、图标、css、js等文件放在source下\n\n### 静态资源本地化\n\n有两次发现通过jsdelivr引入的静态资源会失效，为了网站的稳定性，决定将所有**通过jsdelivr引入的静态资源**保存到本地，防止失效后网站无法访问。\n\n### 引用落霞孤鹜字体\n\n```\ntale/_config.ymlinject:\n  head:\n    - <link rel=\"stylesheet\" href=\"https://npm.elemecdn.com/lxgw-wenkai-screen-webfont/style.css\" media=\"print\" onload=\"this.media='all'\"> #字体\n\nCopy\ntale/_config.stellar.ymlstyle:\n  font-family:\n    body: '\"LXGW WenKai Screen\", sans-serif'\n\nCopy\n```\n\n### 引用鸿蒙字体\n\n```\ntale/_config.ymlinject:\n  head:\n    - <link rel=\"preconnect\" href=\"https://s1.hdslb.com/\" /> \n    - <link rel=\"stylesheet\" href=\"//s1.hdslb.com/bfs/static/jinkela/long/font/regular.css\" media=\"all\" onload=\"this.media='all'\" /> #鸿蒙正常字体\n    - <link rel=\"stylesheet\" href=\"//s1.hdslb.com/bfs/static/jinkela/long/font/medium.css\" media=\"all\" onload=\"this.media='all'\" /> #鸿蒙加粗字体\n\nCopy\ntale/_config.stellar.ymlstyle:\n  font-family:\n    body: 'HarmonyOS_Regular' # 鸿蒙正常字体\n    #body: 'HarmonyOS_Regular' # 鸿蒙加粗字体\n\nCopy\n```\n\n## 博客基本配置\n\n### 基本信息\n\n```\ntale/_config.yml# Site\ntitle: SFZhang #网站名称\navatar: /customize/images/sfzhang.jpg #博客头像\nfavicon: /customize/images/sfzhang.jpg #网站图标\nsubtitle: \"SFZhang's blog | blog.sfzhang.cn\" #鼠标移入翻转效果\ndescription: '一个积极生活的人'\nkeywords:\nauthor: SFZhang #博客作者\nlanguage: zh-CN #博客语言：en、zh-CN\ntimezone: ''\n\nCopy\n```\n\n### 显示导航\n\n```\ntale/_config.stellar.ymlsidebar:\n  menu:\n    post: '[btn.blog](/)'\n    wiki: '[btn.wiki](/)'\n    friends: '[友链](/)'\n    about: '[关于](/)'\n\nCopy\n```\n\n### 图片放大（fancybox）\n\n其中selector设置为需要放大图片的HTML选择器：\n\n```\ntale/_config.ymltag_plugins:\n  # {% image %}\n  image:\n    fancybox: true # true, false\n    parse_markdown: true # 把 markdown 格式的图片解析成图片标签\n\n######## JS Plugins ########\nplugins:\n  # https://fancyapps.com/docs/ui/fancybox/\n  # available for {% image xxx %}\n  fancybox:\n    enable: true\n    #js: /customize/js/fancybox.umd.js\n    css: /customize/css/fancybox.css\n    js: https://fastly.jsdelivr.net/npm/@fancyapps/ui@4.0/dist/fancybox.umd.js\n    #css: https://fastly.jsdelivr.net/npm/@fancyapps/ui@4.0/dist/fancybox.css\n    # 可以处理评论区的图片（不支持 iframe 类评论系统）例如：\n    # 使用twikoo评论可以写: .tk-content img:not([class*=\"emo\"])\n    # 使用waline评论可以写: #waline_container .vcontent img\n    selector: .swiper-slide img, .md-text.content p>img, .md-text.content li img , .wl-content img, .image-bg img # 多个选择器用英文逗号隔开\n    #selector: .swiper-slide img # 多个选择器用英文逗号隔开\n\nCopy\n```\n\n## 侧边栏\n\n### 侧边栏底部按钮\n\n```\ntale/_config.stellar.ymlfooter:\n  social:\n    QQ:\n      icon: '<img src=\"/customize/svg/contact.svg\"/>'\n      url: https://wpa.qq.com/msgrd?v=3&uin=1119716380&site=qq&menu=yes&jumpflag=1\n    github:\n      icon: '<img src=\"/customize/svg/github.svg\"/>'\n      url: https://github.com/z23654262\n    #iconfont:\n    #  icon: '<img src=\"/customize/svg/iconfont.svg\"/>'\n    #  url: https://www.iconfont.cn/\n    unsplash:\n      icon: '<img src=\"/customize/svg/unsplash.svg\"/>'\n      url: https://unsplash.com/@z23654262\n    train:\n      icon: '<img src=\"/customize/svg/train.svg\"/>'\n      url: https://unsplash.com/@z23654262\n    Moon:\n      icon: '<img id=\"ThemeM\" src=\"/customize/svg/moon.svg\"/>'\n      url: javaScript:void('永夜');\n    Sun:\n      icon: '<img id=\"ThemeL\" src=\"/customize/svg/sun.svg\"/>'\n      url: javaScript:void('永昼');\n    #AI:\n    # icon: '<img id=\"ThemeAI\" src=\"/customize/svg/auto.svg\"/>'\n    # url: javaScript:void('跟随系统');\n\nCopy\n```\n\n### 小组件\n\n```\ntale/source/_data/widget,ymlwelcome:\n  layout: markdown\n  title: '欢迎来到SFZhang的知识库'\n  content: |\n    不以物喜，不以己悲\n    <script src=\"https://v1.hitokoto.cn/?c=i&encode=js&select=%23hitokoto\" defer=\"\"></script>\n    <p>一诗：<span id=\"hitokoto\"></span></p>\n\nyiyan:\n  layout: markdown\n  title: '一诗'\n  content: |\n    <script src=\"https://v1.hitokoto.cn/?c=i&encode=js&select=%23hitokoto\" defer=\"\"></script>\n    <p><span id=\"hitokoto\"></span></p>\n\ntimeline:\n  layout: timeline\n  title: 生活碎片\n  api: https://api.github.com/repos/z23654262/blog-life/issues?per_page=10 # 若你想限制数量，在api链接后面加上?per_page=1指限制为1条\n  user: # 是否过滤只显示某个人发布的内容，如果要筛选多人，用英文逗号隔开\n  hide: # title,footer # 隐藏标题或底部 # 此功能需要 Stellar v1.13.0\n\nghuser:\n  layout: ghuser\n  username: z23654262 # your github login username\n  avatar: true # show avatar or not\n  menu: true # show menu or not\n\n#搜索\nsearch_blog:\n  layout: search\n  filter: /blog/ # or /posts/ ...\n  placeholder: 文章搜索\n\nsearch_all_docs:\n  layout: search\n  filter: /wiki/\n  placeholder: 文档系统搜索\n\nsearch_docs:\n  layout: search\n  filter: auto\n  placeholder: 文档内搜索\n\nCopy\n```\n\n## 生活碎片\n\n### 添加页面\n\n\n\n### 添加首页按钮\n\n```\ntale/_config.stellar.ymlpost-index: # 近期发布 分类 标签 归档 and ...\n  '生活碎片': /life\n\nCopy\n```\n\n### 导航高亮问题\n\n```\ntale/node_modules/hexo-theme-stellar/layout/_partial/main/navbar/list_post.ejsif (full_url_for(page.path) == full_url_for(obj[key]))\n\nCopy\n```\n\n修改为\n\n```\ntale/node_modules/hexo-theme-stellar/layout/_partial/main/navbar/list_post.ejsif (full_url_for(page.path) == full_url_for(obj[key]) + '/index.html')\n\nCopy\n```\n\n### 新建github仓库并添加一条issue\n\n![img](https://bu.dusays.com/2023/10/10/6525053ada517.png)\n\n### 编辑生活碎片页面\n\n```\ntale/source/life/index.md---\ntitle: \nmenu_id: post #侧边栏首页高亮\nbreadcrumb: false # 隐藏面包屑导航\npost_list: true # 显示首页导航\ndate: 2023-10-10 10:34:34\n---\n\n{% note color:orange 分享自己的生活碎片！ %}\n\n{% timeline api:https://api.github.com/repos/z23654262/blog-life/issues?direction=asc&per_page=30 %}{% endtimeline %}\n\nCopy\n```\n\n### 预览生活碎片页面\n\n![img](https://bu.dusays.com/2023/10/10/6525053c629b0.png)\n\n## 添加评论系统giscus\n\n### 新增github仓库\n\n新增blog-comments仓库并开启Discussions功能并勾选**blog-comments/Settings/Features/Discussions**即可。\n\n### 修改配置\n\n```\ntale/_config.stellar.ymlcomments:\n  service: giscus\n  # giscus\n  # https://giscus.app/zh-CN\n  giscus:\n    data-repo: xxx/xxx # [在此输入仓库]\n    data-repo-id: # [在此输入仓库 ID]\n    data-category: # [在此输入分类名]\n    data-category-id:\n    data-mapping: pathname\n    data-strict: 0\n    data-reactions-enabled: 1\n    data-emit-metadata: 0\n    data-input-position: top # top, bottom\n    data-theme: preferred_color_scheme\n    data-lang: zh-CN\n    data-loading: lazy\n    crossorigin: anonymous\n\nCopy\n```\n\n### 测试giscus评论系统\n\n博客内评论：\n\n![img](https://bu.dusays.com/2023/10/10/652506ecef464.png)\n\ngithub仓库中Discussions：\n\n![img](https://bu.dusays.com/2023/10/10/65250743df7b0.png)\n\n## 添加waline评论系统\n\n[waline官方教程](https://waline.js.org/guide/get-started/)\n\nwaline程序托管于vercel，数据存储使用learncloud国际版，域名使用waline.sfzhang.top二级域名\n\n### learncloud国际版设置\n\n1. [登录](https://console.leancloud.app/login) 或 [注册](https://console.leancloud.app/register) `LeanCloud 国际版` 并进入 [控制台](https://console.leancloud.app/apps)\n\n2. 点击左上角`创建应用`并起一个你喜欢的名字 (请选择免费的开发版)\n\n   ![img](https://bu.dusays.com/2023/10/25/653934aa64f92.png)\n\n3. 进入应用，选择左下角的 `设置` > `应用 Key`。你可以看到你的 `APP ID`,`APP Key` 和 `Master Key`。请记录它们，以便后续使用。\n\n   ![img](https://bu.dusays.com/2023/10/25/653934abc41c2.png)\n\n### vercel设置\n\n1. 点击[Vercel](https://vercel.com/new/clone?repository-url=https://github.com/walinejs/waline/tree/main/example)，跳转至 Vercel 进行 Server 端部署。（如果登录无法访问github，则使用邮箱登录）\n\n2. 跳转后会自动机遇waline仓库进行初始化，只需要填写Vercel仓库名称即可。\n\n   ![img](https://bu.dusays.com/2023/10/25/653939ea76abe.png)\n\n3. 点击顶部的 `Settings` - `Environment Variables` 进入环境变量配置页，并配置三个环境变量 `LEAN_ID`, `LEAN_KEY` 和 `LEAN_MASTER_KEY` 。它们的值分别对应上一步在 LeanCloud 中获得的 `APP ID`, `APP KEY`, `Master Key`。\n\n   ![img](https://bu.dusays.com/2023/10/25/653939ec3590b.png)\n\n4. 环境变量配置完成之后点击顶部的 `Deployments` 点击顶部最新的一次部署右侧的 `Redeploy` 按钮进行重新部署。该步骤是为了让刚才设置的环境变量生效。\n\n   ![img](https://bu.dusays.com/2023/10/25/653939edb10db.png)\n\n5. 此时会跳转到 `Overview` 界面开始部署，等待片刻后 `STATUS` 会变成 `Ready`。此时请点击 `Visit` ，即可跳转到部署好的网站地址，此地址即为你的服务端地址。\n\n### Vercel绑定域名\n\n1. 点击顶部的 `Settings` - `Domains` 进入域名配置页，并输入需要绑定的域名\n\n   ![img](https://bu.dusays.com/2023/10/25/653939ef268d9.png)\n\n2. 在阿里云处配置域名解析\n\n   ![img](https://bu.dusays.com/2023/10/25/653939f04aa4b.png)\n\n### 博客配置文件\n\n```\ntale/_config.staller.yml######## Comments ########\ncomments:\n  service: waline # beaudar, utterances, giscus, twikoo, waline, artalk\n  \n  # Waline\n  # https://waline.js.org/\n  waline:\n    js: https://unpkg.com/@waline/client@2.14.1/dist/waline.js\n    css: https://unpkg.com/@waline/client@2.14.1/dist/waline.css\n    # Waline server address url, you should set this to your own link\n    serverURL: https://domain\n    # If false, comment count will only be displayed in post page, not in home page\n    commentCount: true\n    # Pageviews count, Note: You should not enable both `waline.pageview` and `leancloud_visitors`.\n    pageview: false\n    # Custom emoji\n    # emoji:\n    #   - https://unpkg.com/@waline/emojis@1.1.0/weibo\n    #   - https://unpkg.com/@waline/emojis@1.1.0/alus\n    #   - https://unpkg.com/@waline/emojis@1.1.0/bilibili\n    #   - https://unpkg.com/@waline/emojis@1.1.0/qq\n    #   - https://unpkg.com/@waline/emojis@1.1.0/tieba\n    #   - https://unpkg.com/@waline/emojis@1.1.0/tw-emoji\n    #   - https://unpkg.com/@waline/emojis@1.1.0/bmoji\n    # 设置自己的图床服务，替换默认的 Base 64 编码嵌入（有体积大小限制），在评论中上传图片更加方便\n    # imageUploader:\n      # 适配了兰空图床V1、V2版本\n      # 以兰空图床V1为例，下列填写内容为：\n      # fileName: file\n      # tokenName: Authorization\n      # api: https://xxxxxx/api/v1/upload\n      # token: Bearer xxxxxxxxxxxxxx\n      # resp: data.links.url\n      # 以兰空图床V2为例，下列填写内容为：\n      # fileName: image\n      # tokenName: token\n      # api: https://xxxxxx/api/upload\n      # token: xxxxxxxxxxxxxx\n      # resp: data.url\n    #   fileName: # 根据版本二选一\n    #   tokenName: # 根据版本二选一\n    #   api: # 图床 api 地址\n    #   token: # 图床验证\n    #   resp: # 图片地址返回值的字段\n```\n","slug":"2025/06/theme-design1","published":1,"date":"2025-06-09T05:09:43.388Z","updated":"2025-06-09T05:09:43.388Z","comments":1,"layout":"post","photos":[],"_id":"cmbpzhaby0007s2x05dxifzct","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>记录一下自己从默认主题样式到现在本网站的样子中间都修改了哪些地方，也作为完善博客期间的备份。</p>\n<h2 id=\"博客引用资源\"><a href=\"#博客引用资源\" class=\"headerlink\" title=\"博客引用资源\"></a>博客引用资源</h2><h3 id=\"本地资源文件夹\"><a href=\"#本地资源文件夹\" class=\"headerlink\" title=\"本地资源文件夹\"></a>本地资源文件夹</h3><p>将头像、图标、css、js等文件放在source下</p>\n<h3 id=\"静态资源本地化\"><a href=\"#静态资源本地化\" class=\"headerlink\" title=\"静态资源本地化\"></a>静态资源本地化</h3><p>有两次发现通过jsdelivr引入的静态资源会失效，为了网站的稳定性，决定将所有<strong>通过jsdelivr引入的静态资源</strong>保存到本地，防止失效后网站无法访问。</p>\n<h3 id=\"引用落霞孤鹜字体\"><a href=\"#引用落霞孤鹜字体\" class=\"headerlink\" title=\"引用落霞孤鹜字体\"></a>引用落霞孤鹜字体</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/_config.ymlinject:</span><br><span class=\"line\">  head:</span><br><span class=\"line\">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;https://npm.elemecdn.com/lxgw-wenkai-screen-webfont/style.css&quot; media=&quot;print&quot; onload=&quot;this.media=&#x27;all&#x27;&quot;&gt; #字体</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br><span class=\"line\">tale/_config.stellar.ymlstyle:</span><br><span class=\"line\">  font-family:</span><br><span class=\"line\">    body: &#x27;&quot;LXGW WenKai Screen&quot;, sans-serif&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用鸿蒙字体\"><a href=\"#引用鸿蒙字体\" class=\"headerlink\" title=\"引用鸿蒙字体\"></a>引用鸿蒙字体</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/_config.ymlinject:</span><br><span class=\"line\">  head:</span><br><span class=\"line\">    - &lt;link rel=&quot;preconnect&quot; href=&quot;https://s1.hdslb.com/&quot; /&gt; </span><br><span class=\"line\">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;//s1.hdslb.com/bfs/static/jinkela/long/font/regular.css&quot; media=&quot;all&quot; onload=&quot;this.media=&#x27;all&#x27;&quot; /&gt; #鸿蒙正常字体</span><br><span class=\"line\">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;//s1.hdslb.com/bfs/static/jinkela/long/font/medium.css&quot; media=&quot;all&quot; onload=&quot;this.media=&#x27;all&#x27;&quot; /&gt; #鸿蒙加粗字体</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br><span class=\"line\">tale/_config.stellar.ymlstyle:</span><br><span class=\"line\">  font-family:</span><br><span class=\"line\">    body: &#x27;HarmonyOS_Regular&#x27; # 鸿蒙正常字体</span><br><span class=\"line\">    #body: &#x27;HarmonyOS_Regular&#x27; # 鸿蒙加粗字体</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"博客基本配置\"><a href=\"#博客基本配置\" class=\"headerlink\" title=\"博客基本配置\"></a>博客基本配置</h2><h3 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/_config.yml# Site</span><br><span class=\"line\">title: SFZhang #网站名称</span><br><span class=\"line\">avatar: /customize/images/sfzhang.jpg #博客头像</span><br><span class=\"line\">favicon: /customize/images/sfzhang.jpg #网站图标</span><br><span class=\"line\">subtitle: &quot;SFZhang&#x27;s blog | blog.sfzhang.cn&quot; #鼠标移入翻转效果</span><br><span class=\"line\">description: &#x27;一个积极生活的人&#x27;</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: SFZhang #博客作者</span><br><span class=\"line\">language: zh-CN #博客语言：en、zh-CN</span><br><span class=\"line\">timezone: &#x27;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"显示导航\"><a href=\"#显示导航\" class=\"headerlink\" title=\"显示导航\"></a>显示导航</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/_config.stellar.ymlsidebar:</span><br><span class=\"line\">  menu:</span><br><span class=\"line\">    post: &#x27;[btn.blog](/)&#x27;</span><br><span class=\"line\">    wiki: &#x27;[btn.wiki](/)&#x27;</span><br><span class=\"line\">    friends: &#x27;[友链](/)&#x27;</span><br><span class=\"line\">    about: &#x27;[关于](/)&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图片放大（fancybox）\"><a href=\"#图片放大（fancybox）\" class=\"headerlink\" title=\"图片放大（fancybox）\"></a>图片放大（fancybox）</h3><p>其中selector设置为需要放大图片的HTML选择器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/_config.ymltag_plugins:</span><br><span class=\"line\">  # &#123;% image %&#125;</span><br><span class=\"line\">  image:</span><br><span class=\"line\">    fancybox: true # true, false</span><br><span class=\"line\">    parse_markdown: true # 把 markdown 格式的图片解析成图片标签</span><br><span class=\"line\"></span><br><span class=\"line\">######## JS Plugins ########</span><br><span class=\"line\">plugins:</span><br><span class=\"line\">  # https://fancyapps.com/docs/ui/fancybox/</span><br><span class=\"line\">  # available for &#123;% image xxx %&#125;</span><br><span class=\"line\">  fancybox:</span><br><span class=\"line\">    enable: true</span><br><span class=\"line\">    #js: /customize/js/fancybox.umd.js</span><br><span class=\"line\">    css: /customize/css/fancybox.css</span><br><span class=\"line\">    js: https://fastly.jsdelivr.net/npm/@fancyapps/ui@4.0/dist/fancybox.umd.js</span><br><span class=\"line\">    #css: https://fastly.jsdelivr.net/npm/@fancyapps/ui@4.0/dist/fancybox.css</span><br><span class=\"line\">    # 可以处理评论区的图片（不支持 iframe 类评论系统）例如：</span><br><span class=\"line\">    # 使用twikoo评论可以写: .tk-content img:not([class*=&quot;emo&quot;])</span><br><span class=\"line\">    # 使用waline评论可以写: #waline_container .vcontent img</span><br><span class=\"line\">    selector: .swiper-slide img, .md-text.content p&gt;img, .md-text.content li img , .wl-content img, .image-bg img # 多个选择器用英文逗号隔开</span><br><span class=\"line\">    #selector: .swiper-slide img # 多个选择器用英文逗号隔开</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"侧边栏\"><a href=\"#侧边栏\" class=\"headerlink\" title=\"侧边栏\"></a>侧边栏</h2><h3 id=\"侧边栏底部按钮\"><a href=\"#侧边栏底部按钮\" class=\"headerlink\" title=\"侧边栏底部按钮\"></a>侧边栏底部按钮</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/_config.stellar.ymlfooter:</span><br><span class=\"line\">  social:</span><br><span class=\"line\">    QQ:</span><br><span class=\"line\">      icon: &#x27;&lt;img src=&quot;/customize/svg/contact.svg&quot;/&gt;&#x27;</span><br><span class=\"line\">      url: https://wpa.qq.com/msgrd?v=3&amp;uin=1119716380&amp;site=qq&amp;menu=yes&amp;jumpflag=1</span><br><span class=\"line\">    github:</span><br><span class=\"line\">      icon: &#x27;&lt;img src=&quot;/customize/svg/github.svg&quot;/&gt;&#x27;</span><br><span class=\"line\">      url: https://github.com/z23654262</span><br><span class=\"line\">    #iconfont:</span><br><span class=\"line\">    #  icon: &#x27;&lt;img src=&quot;/customize/svg/iconfont.svg&quot;/&gt;&#x27;</span><br><span class=\"line\">    #  url: https://www.iconfont.cn/</span><br><span class=\"line\">    unsplash:</span><br><span class=\"line\">      icon: &#x27;&lt;img src=&quot;/customize/svg/unsplash.svg&quot;/&gt;&#x27;</span><br><span class=\"line\">      url: https://unsplash.com/@z23654262</span><br><span class=\"line\">    train:</span><br><span class=\"line\">      icon: &#x27;&lt;img src=&quot;/customize/svg/train.svg&quot;/&gt;&#x27;</span><br><span class=\"line\">      url: https://unsplash.com/@z23654262</span><br><span class=\"line\">    Moon:</span><br><span class=\"line\">      icon: &#x27;&lt;img id=&quot;ThemeM&quot; src=&quot;/customize/svg/moon.svg&quot;/&gt;&#x27;</span><br><span class=\"line\">      url: javaScript:void(&#x27;永夜&#x27;);</span><br><span class=\"line\">    Sun:</span><br><span class=\"line\">      icon: &#x27;&lt;img id=&quot;ThemeL&quot; src=&quot;/customize/svg/sun.svg&quot;/&gt;&#x27;</span><br><span class=\"line\">      url: javaScript:void(&#x27;永昼&#x27;);</span><br><span class=\"line\">    #AI:</span><br><span class=\"line\">    # icon: &#x27;&lt;img id=&quot;ThemeAI&quot; src=&quot;/customize/svg/auto.svg&quot;/&gt;&#x27;</span><br><span class=\"line\">    # url: javaScript:void(&#x27;跟随系统&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小组件\"><a href=\"#小组件\" class=\"headerlink\" title=\"小组件\"></a>小组件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/source/_data/widget,ymlwelcome:</span><br><span class=\"line\">  layout: markdown</span><br><span class=\"line\">  title: &#x27;欢迎来到SFZhang的知识库&#x27;</span><br><span class=\"line\">  content: |</span><br><span class=\"line\">    不以物喜，不以己悲</span><br><span class=\"line\">    &lt;script src=&quot;https://v1.hitokoto.cn/?c=i&amp;encode=js&amp;select=%23hitokoto&quot; defer=&quot;&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;p&gt;一诗：&lt;span id=&quot;hitokoto&quot;&gt;&lt;/span&gt;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">yiyan:</span><br><span class=\"line\">  layout: markdown</span><br><span class=\"line\">  title: &#x27;一诗&#x27;</span><br><span class=\"line\">  content: |</span><br><span class=\"line\">    &lt;script src=&quot;https://v1.hitokoto.cn/?c=i&amp;encode=js&amp;select=%23hitokoto&quot; defer=&quot;&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;span id=&quot;hitokoto&quot;&gt;&lt;/span&gt;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">timeline:</span><br><span class=\"line\">  layout: timeline</span><br><span class=\"line\">  title: 生活碎片</span><br><span class=\"line\">  api: https://api.github.com/repos/z23654262/blog-life/issues?per_page=10 # 若你想限制数量，在api链接后面加上?per_page=1指限制为1条</span><br><span class=\"line\">  user: # 是否过滤只显示某个人发布的内容，如果要筛选多人，用英文逗号隔开</span><br><span class=\"line\">  hide: # title,footer # 隐藏标题或底部 # 此功能需要 Stellar v1.13.0</span><br><span class=\"line\"></span><br><span class=\"line\">ghuser:</span><br><span class=\"line\">  layout: ghuser</span><br><span class=\"line\">  username: z23654262 # your github login username</span><br><span class=\"line\">  avatar: true # show avatar or not</span><br><span class=\"line\">  menu: true # show menu or not</span><br><span class=\"line\"></span><br><span class=\"line\">#搜索</span><br><span class=\"line\">search_blog:</span><br><span class=\"line\">  layout: search</span><br><span class=\"line\">  filter: /blog/ # or /posts/ ...</span><br><span class=\"line\">  placeholder: 文章搜索</span><br><span class=\"line\"></span><br><span class=\"line\">search_all_docs:</span><br><span class=\"line\">  layout: search</span><br><span class=\"line\">  filter: /wiki/</span><br><span class=\"line\">  placeholder: 文档系统搜索</span><br><span class=\"line\"></span><br><span class=\"line\">search_docs:</span><br><span class=\"line\">  layout: search</span><br><span class=\"line\">  filter: auto</span><br><span class=\"line\">  placeholder: 文档内搜索</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生活碎片\"><a href=\"#生活碎片\" class=\"headerlink\" title=\"生活碎片\"></a>生活碎片</h2><h3 id=\"添加页面\"><a href=\"#添加页面\" class=\"headerlink\" title=\"添加页面\"></a>添加页面</h3><h3 id=\"添加首页按钮\"><a href=\"#添加首页按钮\" class=\"headerlink\" title=\"添加首页按钮\"></a>添加首页按钮</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/_config.stellar.ymlpost-index: # 近期发布 分类 标签 归档 and ...</span><br><span class=\"line\">  &#x27;生活碎片&#x27;: /life</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导航高亮问题\"><a href=\"#导航高亮问题\" class=\"headerlink\" title=\"导航高亮问题\"></a>导航高亮问题</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/node_modules/hexo-theme-stellar/layout/_partial/main/navbar/list_post.ejsif (full_url_for(page.path) == full_url_for(obj[key]))</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<p>修改为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/node_modules/hexo-theme-stellar/layout/_partial/main/navbar/list_post.ejsif (full_url_for(page.path) == full_url_for(obj[key]) + &#x27;/index.html&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建github仓库并添加一条issue\"><a href=\"#新建github仓库并添加一条issue\" class=\"headerlink\" title=\"新建github仓库并添加一条issue\"></a>新建github仓库并添加一条issue</h3><p><img src=\"https://bu.dusays.com/2023/10/10/6525053ada517.png\" alt=\"img\"></p>\n<h3 id=\"编辑生活碎片页面\"><a href=\"#编辑生活碎片页面\" class=\"headerlink\" title=\"编辑生活碎片页面\"></a>编辑生活碎片页面</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/source/life/index.md---</span><br><span class=\"line\">title: </span><br><span class=\"line\">menu_id: post #侧边栏首页高亮</span><br><span class=\"line\">breadcrumb: false # 隐藏面包屑导航</span><br><span class=\"line\">post_list: true # 显示首页导航</span><br><span class=\"line\">date: 2023-10-10 10:34:34</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note color:orange 分享自己的生活碎片！ %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% timeline api:https://api.github.com/repos/z23654262/blog-life/issues?direction=asc&amp;per_page=30 %&#125;&#123;% endtimeline %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"预览生活碎片页面\"><a href=\"#预览生活碎片页面\" class=\"headerlink\" title=\"预览生活碎片页面\"></a>预览生活碎片页面</h3><p><img src=\"https://bu.dusays.com/2023/10/10/6525053c629b0.png\" alt=\"img\"></p>\n<h2 id=\"添加评论系统giscus\"><a href=\"#添加评论系统giscus\" class=\"headerlink\" title=\"添加评论系统giscus\"></a>添加评论系统giscus</h2><h3 id=\"新增github仓库\"><a href=\"#新增github仓库\" class=\"headerlink\" title=\"新增github仓库\"></a>新增github仓库</h3><p>新增blog-comments仓库并开启Discussions功能并勾选<strong>blog-comments&#x2F;Settings&#x2F;Features&#x2F;Discussions</strong>即可。</p>\n<h3 id=\"修改配置\"><a href=\"#修改配置\" class=\"headerlink\" title=\"修改配置\"></a>修改配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/_config.stellar.ymlcomments:</span><br><span class=\"line\">  service: giscus</span><br><span class=\"line\">  # giscus</span><br><span class=\"line\">  # https://giscus.app/zh-CN</span><br><span class=\"line\">  giscus:</span><br><span class=\"line\">    data-repo: xxx/xxx # [在此输入仓库]</span><br><span class=\"line\">    data-repo-id: # [在此输入仓库 ID]</span><br><span class=\"line\">    data-category: # [在此输入分类名]</span><br><span class=\"line\">    data-category-id:</span><br><span class=\"line\">    data-mapping: pathname</span><br><span class=\"line\">    data-strict: 0</span><br><span class=\"line\">    data-reactions-enabled: 1</span><br><span class=\"line\">    data-emit-metadata: 0</span><br><span class=\"line\">    data-input-position: top # top, bottom</span><br><span class=\"line\">    data-theme: preferred_color_scheme</span><br><span class=\"line\">    data-lang: zh-CN</span><br><span class=\"line\">    data-loading: lazy</span><br><span class=\"line\">    crossorigin: anonymous</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试giscus评论系统\"><a href=\"#测试giscus评论系统\" class=\"headerlink\" title=\"测试giscus评论系统\"></a>测试giscus评论系统</h3><p>博客内评论：</p>\n<p><img src=\"https://bu.dusays.com/2023/10/10/652506ecef464.png\" alt=\"img\"></p>\n<p>github仓库中Discussions：</p>\n<p><img src=\"https://bu.dusays.com/2023/10/10/65250743df7b0.png\" alt=\"img\"></p>\n<h2 id=\"添加waline评论系统\"><a href=\"#添加waline评论系统\" class=\"headerlink\" title=\"添加waline评论系统\"></a>添加waline评论系统</h2><p><a href=\"https://waline.js.org/guide/get-started/\">waline官方教程</a></p>\n<p>waline程序托管于vercel，数据存储使用learncloud国际版，域名使用waline.sfzhang.top二级域名</p>\n<h3 id=\"learncloud国际版设置\"><a href=\"#learncloud国际版设置\" class=\"headerlink\" title=\"learncloud国际版设置\"></a>learncloud国际版设置</h3><ol>\n<li><p><a href=\"https://console.leancloud.app/login\">登录</a> 或 <a href=\"https://console.leancloud.app/register\">注册</a> <code>LeanCloud 国际版</code> 并进入 <a href=\"https://console.leancloud.app/apps\">控制台</a></p>\n</li>\n<li><p>点击左上角<code>创建应用</code>并起一个你喜欢的名字 (请选择免费的开发版)</p>\n<p><img src=\"https://bu.dusays.com/2023/10/25/653934aa64f92.png\" alt=\"img\"></p>\n</li>\n<li><p>进入应用，选择左下角的 <code>设置</code> &gt; <code>应用 Key</code>。你可以看到你的 <code>APP ID</code>,<code>APP Key</code> 和 <code>Master Key</code>。请记录它们，以便后续使用。</p>\n<p><img src=\"https://bu.dusays.com/2023/10/25/653934abc41c2.png\" alt=\"img\"></p>\n</li>\n</ol>\n<h3 id=\"vercel设置\"><a href=\"#vercel设置\" class=\"headerlink\" title=\"vercel设置\"></a>vercel设置</h3><ol>\n<li><p>点击<a href=\"https://vercel.com/new/clone?repository-url=https://github.com/walinejs/waline/tree/main/example\">Vercel</a>，跳转至 Vercel 进行 Server 端部署。（如果登录无法访问github，则使用邮箱登录）</p>\n</li>\n<li><p>跳转后会自动机遇waline仓库进行初始化，只需要填写Vercel仓库名称即可。</p>\n<p><img src=\"https://bu.dusays.com/2023/10/25/653939ea76abe.png\" alt=\"img\"></p>\n</li>\n<li><p>点击顶部的 <code>Settings</code> - <code>Environment Variables</code> 进入环境变量配置页，并配置三个环境变量 <code>LEAN_ID</code>, <code>LEAN_KEY</code> 和 <code>LEAN_MASTER_KEY</code> 。它们的值分别对应上一步在 LeanCloud 中获得的 <code>APP ID</code>, <code>APP KEY</code>, <code>Master Key</code>。</p>\n<p><img src=\"https://bu.dusays.com/2023/10/25/653939ec3590b.png\" alt=\"img\"></p>\n</li>\n<li><p>环境变量配置完成之后点击顶部的 <code>Deployments</code> 点击顶部最新的一次部署右侧的 <code>Redeploy</code> 按钮进行重新部署。该步骤是为了让刚才设置的环境变量生效。</p>\n<p><img src=\"https://bu.dusays.com/2023/10/25/653939edb10db.png\" alt=\"img\"></p>\n</li>\n<li><p>此时会跳转到 <code>Overview</code> 界面开始部署，等待片刻后 <code>STATUS</code> 会变成 <code>Ready</code>。此时请点击 <code>Visit</code> ，即可跳转到部署好的网站地址，此地址即为你的服务端地址。</p>\n</li>\n</ol>\n<h3 id=\"Vercel绑定域名\"><a href=\"#Vercel绑定域名\" class=\"headerlink\" title=\"Vercel绑定域名\"></a>Vercel绑定域名</h3><ol>\n<li><p>点击顶部的 <code>Settings</code> - <code>Domains</code> 进入域名配置页，并输入需要绑定的域名</p>\n<p><img src=\"https://bu.dusays.com/2023/10/25/653939ef268d9.png\" alt=\"img\"></p>\n</li>\n<li><p>在阿里云处配置域名解析</p>\n<p><img src=\"https://bu.dusays.com/2023/10/25/653939f04aa4b.png\" alt=\"img\"></p>\n</li>\n</ol>\n<h3 id=\"博客配置文件\"><a href=\"#博客配置文件\" class=\"headerlink\" title=\"博客配置文件\"></a>博客配置文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/_config.staller.yml######## Comments ########</span><br><span class=\"line\">comments:</span><br><span class=\"line\">  service: waline # beaudar, utterances, giscus, twikoo, waline, artalk</span><br><span class=\"line\">  </span><br><span class=\"line\">  # Waline</span><br><span class=\"line\">  # https://waline.js.org/</span><br><span class=\"line\">  waline:</span><br><span class=\"line\">    js: https://unpkg.com/@waline/client@2.14.1/dist/waline.js</span><br><span class=\"line\">    css: https://unpkg.com/@waline/client@2.14.1/dist/waline.css</span><br><span class=\"line\">    # Waline server address url, you should set this to your own link</span><br><span class=\"line\">    serverURL: https://domain</span><br><span class=\"line\">    # If false, comment count will only be displayed in post page, not in home page</span><br><span class=\"line\">    commentCount: true</span><br><span class=\"line\">    # Pageviews count, Note: You should not enable both `waline.pageview` and `leancloud_visitors`.</span><br><span class=\"line\">    pageview: false</span><br><span class=\"line\">    # Custom emoji</span><br><span class=\"line\">    # emoji:</span><br><span class=\"line\">    #   - https://unpkg.com/@waline/emojis@1.1.0/weibo</span><br><span class=\"line\">    #   - https://unpkg.com/@waline/emojis@1.1.0/alus</span><br><span class=\"line\">    #   - https://unpkg.com/@waline/emojis@1.1.0/bilibili</span><br><span class=\"line\">    #   - https://unpkg.com/@waline/emojis@1.1.0/qq</span><br><span class=\"line\">    #   - https://unpkg.com/@waline/emojis@1.1.0/tieba</span><br><span class=\"line\">    #   - https://unpkg.com/@waline/emojis@1.1.0/tw-emoji</span><br><span class=\"line\">    #   - https://unpkg.com/@waline/emojis@1.1.0/bmoji</span><br><span class=\"line\">    # 设置自己的图床服务，替换默认的 Base 64 编码嵌入（有体积大小限制），在评论中上传图片更加方便</span><br><span class=\"line\">    # imageUploader:</span><br><span class=\"line\">      # 适配了兰空图床V1、V2版本</span><br><span class=\"line\">      # 以兰空图床V1为例，下列填写内容为：</span><br><span class=\"line\">      # fileName: file</span><br><span class=\"line\">      # tokenName: Authorization</span><br><span class=\"line\">      # api: https://xxxxxx/api/v1/upload</span><br><span class=\"line\">      # token: Bearer xxxxxxxxxxxxxx</span><br><span class=\"line\">      # resp: data.links.url</span><br><span class=\"line\">      # 以兰空图床V2为例，下列填写内容为：</span><br><span class=\"line\">      # fileName: image</span><br><span class=\"line\">      # tokenName: token</span><br><span class=\"line\">      # api: https://xxxxxx/api/upload</span><br><span class=\"line\">      # token: xxxxxxxxxxxxxx</span><br><span class=\"line\">      # resp: data.url</span><br><span class=\"line\">    #   fileName: # 根据版本二选一</span><br><span class=\"line\">    #   tokenName: # 根据版本二选一</span><br><span class=\"line\">    #   api: # 图床 api 地址</span><br><span class=\"line\">    #   token: # 图床验证</span><br><span class=\"line\">    #   resp: # 图片地址返回值的字段</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>记录一下自己从默认主题样式到现在本网站的样子中间都修改了哪些地方，也作为完善博客期间的备份。</p>\n<h2 id=\"博客引用资源\"><a href=\"#博客引用资源\" class=\"headerlink\" title=\"博客引用资源\"></a>博客引用资源</h2><h3 id=\"本地资源文件夹\"><a href=\"#本地资源文件夹\" class=\"headerlink\" title=\"本地资源文件夹\"></a>本地资源文件夹</h3><p>将头像、图标、css、js等文件放在source下</p>\n<h3 id=\"静态资源本地化\"><a href=\"#静态资源本地化\" class=\"headerlink\" title=\"静态资源本地化\"></a>静态资源本地化</h3><p>有两次发现通过jsdelivr引入的静态资源会失效，为了网站的稳定性，决定将所有<strong>通过jsdelivr引入的静态资源</strong>保存到本地，防止失效后网站无法访问。</p>\n<h3 id=\"引用落霞孤鹜字体\"><a href=\"#引用落霞孤鹜字体\" class=\"headerlink\" title=\"引用落霞孤鹜字体\"></a>引用落霞孤鹜字体</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/_config.ymlinject:</span><br><span class=\"line\">  head:</span><br><span class=\"line\">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;https://npm.elemecdn.com/lxgw-wenkai-screen-webfont/style.css&quot; media=&quot;print&quot; onload=&quot;this.media=&#x27;all&#x27;&quot;&gt; #字体</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br><span class=\"line\">tale/_config.stellar.ymlstyle:</span><br><span class=\"line\">  font-family:</span><br><span class=\"line\">    body: &#x27;&quot;LXGW WenKai Screen&quot;, sans-serif&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"引用鸿蒙字体\"><a href=\"#引用鸿蒙字体\" class=\"headerlink\" title=\"引用鸿蒙字体\"></a>引用鸿蒙字体</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/_config.ymlinject:</span><br><span class=\"line\">  head:</span><br><span class=\"line\">    - &lt;link rel=&quot;preconnect&quot; href=&quot;https://s1.hdslb.com/&quot; /&gt; </span><br><span class=\"line\">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;//s1.hdslb.com/bfs/static/jinkela/long/font/regular.css&quot; media=&quot;all&quot; onload=&quot;this.media=&#x27;all&#x27;&quot; /&gt; #鸿蒙正常字体</span><br><span class=\"line\">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;//s1.hdslb.com/bfs/static/jinkela/long/font/medium.css&quot; media=&quot;all&quot; onload=&quot;this.media=&#x27;all&#x27;&quot; /&gt; #鸿蒙加粗字体</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br><span class=\"line\">tale/_config.stellar.ymlstyle:</span><br><span class=\"line\">  font-family:</span><br><span class=\"line\">    body: &#x27;HarmonyOS_Regular&#x27; # 鸿蒙正常字体</span><br><span class=\"line\">    #body: &#x27;HarmonyOS_Regular&#x27; # 鸿蒙加粗字体</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"博客基本配置\"><a href=\"#博客基本配置\" class=\"headerlink\" title=\"博客基本配置\"></a>博客基本配置</h2><h3 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/_config.yml# Site</span><br><span class=\"line\">title: SFZhang #网站名称</span><br><span class=\"line\">avatar: /customize/images/sfzhang.jpg #博客头像</span><br><span class=\"line\">favicon: /customize/images/sfzhang.jpg #网站图标</span><br><span class=\"line\">subtitle: &quot;SFZhang&#x27;s blog | blog.sfzhang.cn&quot; #鼠标移入翻转效果</span><br><span class=\"line\">description: &#x27;一个积极生活的人&#x27;</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: SFZhang #博客作者</span><br><span class=\"line\">language: zh-CN #博客语言：en、zh-CN</span><br><span class=\"line\">timezone: &#x27;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"显示导航\"><a href=\"#显示导航\" class=\"headerlink\" title=\"显示导航\"></a>显示导航</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/_config.stellar.ymlsidebar:</span><br><span class=\"line\">  menu:</span><br><span class=\"line\">    post: &#x27;[btn.blog](/)&#x27;</span><br><span class=\"line\">    wiki: &#x27;[btn.wiki](/)&#x27;</span><br><span class=\"line\">    friends: &#x27;[友链](/)&#x27;</span><br><span class=\"line\">    about: &#x27;[关于](/)&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"图片放大（fancybox）\"><a href=\"#图片放大（fancybox）\" class=\"headerlink\" title=\"图片放大（fancybox）\"></a>图片放大（fancybox）</h3><p>其中selector设置为需要放大图片的HTML选择器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/_config.ymltag_plugins:</span><br><span class=\"line\">  # &#123;% image %&#125;</span><br><span class=\"line\">  image:</span><br><span class=\"line\">    fancybox: true # true, false</span><br><span class=\"line\">    parse_markdown: true # 把 markdown 格式的图片解析成图片标签</span><br><span class=\"line\"></span><br><span class=\"line\">######## JS Plugins ########</span><br><span class=\"line\">plugins:</span><br><span class=\"line\">  # https://fancyapps.com/docs/ui/fancybox/</span><br><span class=\"line\">  # available for &#123;% image xxx %&#125;</span><br><span class=\"line\">  fancybox:</span><br><span class=\"line\">    enable: true</span><br><span class=\"line\">    #js: /customize/js/fancybox.umd.js</span><br><span class=\"line\">    css: /customize/css/fancybox.css</span><br><span class=\"line\">    js: https://fastly.jsdelivr.net/npm/@fancyapps/ui@4.0/dist/fancybox.umd.js</span><br><span class=\"line\">    #css: https://fastly.jsdelivr.net/npm/@fancyapps/ui@4.0/dist/fancybox.css</span><br><span class=\"line\">    # 可以处理评论区的图片（不支持 iframe 类评论系统）例如：</span><br><span class=\"line\">    # 使用twikoo评论可以写: .tk-content img:not([class*=&quot;emo&quot;])</span><br><span class=\"line\">    # 使用waline评论可以写: #waline_container .vcontent img</span><br><span class=\"line\">    selector: .swiper-slide img, .md-text.content p&gt;img, .md-text.content li img , .wl-content img, .image-bg img # 多个选择器用英文逗号隔开</span><br><span class=\"line\">    #selector: .swiper-slide img # 多个选择器用英文逗号隔开</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"侧边栏\"><a href=\"#侧边栏\" class=\"headerlink\" title=\"侧边栏\"></a>侧边栏</h2><h3 id=\"侧边栏底部按钮\"><a href=\"#侧边栏底部按钮\" class=\"headerlink\" title=\"侧边栏底部按钮\"></a>侧边栏底部按钮</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/_config.stellar.ymlfooter:</span><br><span class=\"line\">  social:</span><br><span class=\"line\">    QQ:</span><br><span class=\"line\">      icon: &#x27;&lt;img src=&quot;/customize/svg/contact.svg&quot;/&gt;&#x27;</span><br><span class=\"line\">      url: https://wpa.qq.com/msgrd?v=3&amp;uin=1119716380&amp;site=qq&amp;menu=yes&amp;jumpflag=1</span><br><span class=\"line\">    github:</span><br><span class=\"line\">      icon: &#x27;&lt;img src=&quot;/customize/svg/github.svg&quot;/&gt;&#x27;</span><br><span class=\"line\">      url: https://github.com/z23654262</span><br><span class=\"line\">    #iconfont:</span><br><span class=\"line\">    #  icon: &#x27;&lt;img src=&quot;/customize/svg/iconfont.svg&quot;/&gt;&#x27;</span><br><span class=\"line\">    #  url: https://www.iconfont.cn/</span><br><span class=\"line\">    unsplash:</span><br><span class=\"line\">      icon: &#x27;&lt;img src=&quot;/customize/svg/unsplash.svg&quot;/&gt;&#x27;</span><br><span class=\"line\">      url: https://unsplash.com/@z23654262</span><br><span class=\"line\">    train:</span><br><span class=\"line\">      icon: &#x27;&lt;img src=&quot;/customize/svg/train.svg&quot;/&gt;&#x27;</span><br><span class=\"line\">      url: https://unsplash.com/@z23654262</span><br><span class=\"line\">    Moon:</span><br><span class=\"line\">      icon: &#x27;&lt;img id=&quot;ThemeM&quot; src=&quot;/customize/svg/moon.svg&quot;/&gt;&#x27;</span><br><span class=\"line\">      url: javaScript:void(&#x27;永夜&#x27;);</span><br><span class=\"line\">    Sun:</span><br><span class=\"line\">      icon: &#x27;&lt;img id=&quot;ThemeL&quot; src=&quot;/customize/svg/sun.svg&quot;/&gt;&#x27;</span><br><span class=\"line\">      url: javaScript:void(&#x27;永昼&#x27;);</span><br><span class=\"line\">    #AI:</span><br><span class=\"line\">    # icon: &#x27;&lt;img id=&quot;ThemeAI&quot; src=&quot;/customize/svg/auto.svg&quot;/&gt;&#x27;</span><br><span class=\"line\">    # url: javaScript:void(&#x27;跟随系统&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小组件\"><a href=\"#小组件\" class=\"headerlink\" title=\"小组件\"></a>小组件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/source/_data/widget,ymlwelcome:</span><br><span class=\"line\">  layout: markdown</span><br><span class=\"line\">  title: &#x27;欢迎来到SFZhang的知识库&#x27;</span><br><span class=\"line\">  content: |</span><br><span class=\"line\">    不以物喜，不以己悲</span><br><span class=\"line\">    &lt;script src=&quot;https://v1.hitokoto.cn/?c=i&amp;encode=js&amp;select=%23hitokoto&quot; defer=&quot;&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;p&gt;一诗：&lt;span id=&quot;hitokoto&quot;&gt;&lt;/span&gt;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">yiyan:</span><br><span class=\"line\">  layout: markdown</span><br><span class=\"line\">  title: &#x27;一诗&#x27;</span><br><span class=\"line\">  content: |</span><br><span class=\"line\">    &lt;script src=&quot;https://v1.hitokoto.cn/?c=i&amp;encode=js&amp;select=%23hitokoto&quot; defer=&quot;&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;span id=&quot;hitokoto&quot;&gt;&lt;/span&gt;&lt;/p&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">timeline:</span><br><span class=\"line\">  layout: timeline</span><br><span class=\"line\">  title: 生活碎片</span><br><span class=\"line\">  api: https://api.github.com/repos/z23654262/blog-life/issues?per_page=10 # 若你想限制数量，在api链接后面加上?per_page=1指限制为1条</span><br><span class=\"line\">  user: # 是否过滤只显示某个人发布的内容，如果要筛选多人，用英文逗号隔开</span><br><span class=\"line\">  hide: # title,footer # 隐藏标题或底部 # 此功能需要 Stellar v1.13.0</span><br><span class=\"line\"></span><br><span class=\"line\">ghuser:</span><br><span class=\"line\">  layout: ghuser</span><br><span class=\"line\">  username: z23654262 # your github login username</span><br><span class=\"line\">  avatar: true # show avatar or not</span><br><span class=\"line\">  menu: true # show menu or not</span><br><span class=\"line\"></span><br><span class=\"line\">#搜索</span><br><span class=\"line\">search_blog:</span><br><span class=\"line\">  layout: search</span><br><span class=\"line\">  filter: /blog/ # or /posts/ ...</span><br><span class=\"line\">  placeholder: 文章搜索</span><br><span class=\"line\"></span><br><span class=\"line\">search_all_docs:</span><br><span class=\"line\">  layout: search</span><br><span class=\"line\">  filter: /wiki/</span><br><span class=\"line\">  placeholder: 文档系统搜索</span><br><span class=\"line\"></span><br><span class=\"line\">search_docs:</span><br><span class=\"line\">  layout: search</span><br><span class=\"line\">  filter: auto</span><br><span class=\"line\">  placeholder: 文档内搜索</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生活碎片\"><a href=\"#生活碎片\" class=\"headerlink\" title=\"生活碎片\"></a>生活碎片</h2><h3 id=\"添加页面\"><a href=\"#添加页面\" class=\"headerlink\" title=\"添加页面\"></a>添加页面</h3><h3 id=\"添加首页按钮\"><a href=\"#添加首页按钮\" class=\"headerlink\" title=\"添加首页按钮\"></a>添加首页按钮</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/_config.stellar.ymlpost-index: # 近期发布 分类 标签 归档 and ...</span><br><span class=\"line\">  &#x27;生活碎片&#x27;: /life</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导航高亮问题\"><a href=\"#导航高亮问题\" class=\"headerlink\" title=\"导航高亮问题\"></a>导航高亮问题</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/node_modules/hexo-theme-stellar/layout/_partial/main/navbar/list_post.ejsif (full_url_for(page.path) == full_url_for(obj[key]))</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<p>修改为</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/node_modules/hexo-theme-stellar/layout/_partial/main/navbar/list_post.ejsif (full_url_for(page.path) == full_url_for(obj[key]) + &#x27;/index.html&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新建github仓库并添加一条issue\"><a href=\"#新建github仓库并添加一条issue\" class=\"headerlink\" title=\"新建github仓库并添加一条issue\"></a>新建github仓库并添加一条issue</h3><p><img src=\"https://bu.dusays.com/2023/10/10/6525053ada517.png\" alt=\"img\"></p>\n<h3 id=\"编辑生活碎片页面\"><a href=\"#编辑生活碎片页面\" class=\"headerlink\" title=\"编辑生活碎片页面\"></a>编辑生活碎片页面</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/source/life/index.md---</span><br><span class=\"line\">title: </span><br><span class=\"line\">menu_id: post #侧边栏首页高亮</span><br><span class=\"line\">breadcrumb: false # 隐藏面包屑导航</span><br><span class=\"line\">post_list: true # 显示首页导航</span><br><span class=\"line\">date: 2023-10-10 10:34:34</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% note color:orange 分享自己的生活碎片！ %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;% timeline api:https://api.github.com/repos/z23654262/blog-life/issues?direction=asc&amp;per_page=30 %&#125;&#123;% endtimeline %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"预览生活碎片页面\"><a href=\"#预览生活碎片页面\" class=\"headerlink\" title=\"预览生活碎片页面\"></a>预览生活碎片页面</h3><p><img src=\"https://bu.dusays.com/2023/10/10/6525053c629b0.png\" alt=\"img\"></p>\n<h2 id=\"添加评论系统giscus\"><a href=\"#添加评论系统giscus\" class=\"headerlink\" title=\"添加评论系统giscus\"></a>添加评论系统giscus</h2><h3 id=\"新增github仓库\"><a href=\"#新增github仓库\" class=\"headerlink\" title=\"新增github仓库\"></a>新增github仓库</h3><p>新增blog-comments仓库并开启Discussions功能并勾选<strong>blog-comments&#x2F;Settings&#x2F;Features&#x2F;Discussions</strong>即可。</p>\n<h3 id=\"修改配置\"><a href=\"#修改配置\" class=\"headerlink\" title=\"修改配置\"></a>修改配置</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/_config.stellar.ymlcomments:</span><br><span class=\"line\">  service: giscus</span><br><span class=\"line\">  # giscus</span><br><span class=\"line\">  # https://giscus.app/zh-CN</span><br><span class=\"line\">  giscus:</span><br><span class=\"line\">    data-repo: xxx/xxx # [在此输入仓库]</span><br><span class=\"line\">    data-repo-id: # [在此输入仓库 ID]</span><br><span class=\"line\">    data-category: # [在此输入分类名]</span><br><span class=\"line\">    data-category-id:</span><br><span class=\"line\">    data-mapping: pathname</span><br><span class=\"line\">    data-strict: 0</span><br><span class=\"line\">    data-reactions-enabled: 1</span><br><span class=\"line\">    data-emit-metadata: 0</span><br><span class=\"line\">    data-input-position: top # top, bottom</span><br><span class=\"line\">    data-theme: preferred_color_scheme</span><br><span class=\"line\">    data-lang: zh-CN</span><br><span class=\"line\">    data-loading: lazy</span><br><span class=\"line\">    crossorigin: anonymous</span><br><span class=\"line\"></span><br><span class=\"line\">Copy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试giscus评论系统\"><a href=\"#测试giscus评论系统\" class=\"headerlink\" title=\"测试giscus评论系统\"></a>测试giscus评论系统</h3><p>博客内评论：</p>\n<p><img src=\"https://bu.dusays.com/2023/10/10/652506ecef464.png\" alt=\"img\"></p>\n<p>github仓库中Discussions：</p>\n<p><img src=\"https://bu.dusays.com/2023/10/10/65250743df7b0.png\" alt=\"img\"></p>\n<h2 id=\"添加waline评论系统\"><a href=\"#添加waline评论系统\" class=\"headerlink\" title=\"添加waline评论系统\"></a>添加waline评论系统</h2><p><a href=\"https://waline.js.org/guide/get-started/\">waline官方教程</a></p>\n<p>waline程序托管于vercel，数据存储使用learncloud国际版，域名使用waline.sfzhang.top二级域名</p>\n<h3 id=\"learncloud国际版设置\"><a href=\"#learncloud国际版设置\" class=\"headerlink\" title=\"learncloud国际版设置\"></a>learncloud国际版设置</h3><ol>\n<li><p><a href=\"https://console.leancloud.app/login\">登录</a> 或 <a href=\"https://console.leancloud.app/register\">注册</a> <code>LeanCloud 国际版</code> 并进入 <a href=\"https://console.leancloud.app/apps\">控制台</a></p>\n</li>\n<li><p>点击左上角<code>创建应用</code>并起一个你喜欢的名字 (请选择免费的开发版)</p>\n<p><img src=\"https://bu.dusays.com/2023/10/25/653934aa64f92.png\" alt=\"img\"></p>\n</li>\n<li><p>进入应用，选择左下角的 <code>设置</code> &gt; <code>应用 Key</code>。你可以看到你的 <code>APP ID</code>,<code>APP Key</code> 和 <code>Master Key</code>。请记录它们，以便后续使用。</p>\n<p><img src=\"https://bu.dusays.com/2023/10/25/653934abc41c2.png\" alt=\"img\"></p>\n</li>\n</ol>\n<h3 id=\"vercel设置\"><a href=\"#vercel设置\" class=\"headerlink\" title=\"vercel设置\"></a>vercel设置</h3><ol>\n<li><p>点击<a href=\"https://vercel.com/new/clone?repository-url=https://github.com/walinejs/waline/tree/main/example\">Vercel</a>，跳转至 Vercel 进行 Server 端部署。（如果登录无法访问github，则使用邮箱登录）</p>\n</li>\n<li><p>跳转后会自动机遇waline仓库进行初始化，只需要填写Vercel仓库名称即可。</p>\n<p><img src=\"https://bu.dusays.com/2023/10/25/653939ea76abe.png\" alt=\"img\"></p>\n</li>\n<li><p>点击顶部的 <code>Settings</code> - <code>Environment Variables</code> 进入环境变量配置页，并配置三个环境变量 <code>LEAN_ID</code>, <code>LEAN_KEY</code> 和 <code>LEAN_MASTER_KEY</code> 。它们的值分别对应上一步在 LeanCloud 中获得的 <code>APP ID</code>, <code>APP KEY</code>, <code>Master Key</code>。</p>\n<p><img src=\"https://bu.dusays.com/2023/10/25/653939ec3590b.png\" alt=\"img\"></p>\n</li>\n<li><p>环境变量配置完成之后点击顶部的 <code>Deployments</code> 点击顶部最新的一次部署右侧的 <code>Redeploy</code> 按钮进行重新部署。该步骤是为了让刚才设置的环境变量生效。</p>\n<p><img src=\"https://bu.dusays.com/2023/10/25/653939edb10db.png\" alt=\"img\"></p>\n</li>\n<li><p>此时会跳转到 <code>Overview</code> 界面开始部署，等待片刻后 <code>STATUS</code> 会变成 <code>Ready</code>。此时请点击 <code>Visit</code> ，即可跳转到部署好的网站地址，此地址即为你的服务端地址。</p>\n</li>\n</ol>\n<h3 id=\"Vercel绑定域名\"><a href=\"#Vercel绑定域名\" class=\"headerlink\" title=\"Vercel绑定域名\"></a>Vercel绑定域名</h3><ol>\n<li><p>点击顶部的 <code>Settings</code> - <code>Domains</code> 进入域名配置页，并输入需要绑定的域名</p>\n<p><img src=\"https://bu.dusays.com/2023/10/25/653939ef268d9.png\" alt=\"img\"></p>\n</li>\n<li><p>在阿里云处配置域名解析</p>\n<p><img src=\"https://bu.dusays.com/2023/10/25/653939f04aa4b.png\" alt=\"img\"></p>\n</li>\n</ol>\n<h3 id=\"博客配置文件\"><a href=\"#博客配置文件\" class=\"headerlink\" title=\"博客配置文件\"></a>博客配置文件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tale/_config.staller.yml######## Comments ########</span><br><span class=\"line\">comments:</span><br><span class=\"line\">  service: waline # beaudar, utterances, giscus, twikoo, waline, artalk</span><br><span class=\"line\">  </span><br><span class=\"line\">  # Waline</span><br><span class=\"line\">  # https://waline.js.org/</span><br><span class=\"line\">  waline:</span><br><span class=\"line\">    js: https://unpkg.com/@waline/client@2.14.1/dist/waline.js</span><br><span class=\"line\">    css: https://unpkg.com/@waline/client@2.14.1/dist/waline.css</span><br><span class=\"line\">    # Waline server address url, you should set this to your own link</span><br><span class=\"line\">    serverURL: https://domain</span><br><span class=\"line\">    # If false, comment count will only be displayed in post page, not in home page</span><br><span class=\"line\">    commentCount: true</span><br><span class=\"line\">    # Pageviews count, Note: You should not enable both `waline.pageview` and `leancloud_visitors`.</span><br><span class=\"line\">    pageview: false</span><br><span class=\"line\">    # Custom emoji</span><br><span class=\"line\">    # emoji:</span><br><span class=\"line\">    #   - https://unpkg.com/@waline/emojis@1.1.0/weibo</span><br><span class=\"line\">    #   - https://unpkg.com/@waline/emojis@1.1.0/alus</span><br><span class=\"line\">    #   - https://unpkg.com/@waline/emojis@1.1.0/bilibili</span><br><span class=\"line\">    #   - https://unpkg.com/@waline/emojis@1.1.0/qq</span><br><span class=\"line\">    #   - https://unpkg.com/@waline/emojis@1.1.0/tieba</span><br><span class=\"line\">    #   - https://unpkg.com/@waline/emojis@1.1.0/tw-emoji</span><br><span class=\"line\">    #   - https://unpkg.com/@waline/emojis@1.1.0/bmoji</span><br><span class=\"line\">    # 设置自己的图床服务，替换默认的 Base 64 编码嵌入（有体积大小限制），在评论中上传图片更加方便</span><br><span class=\"line\">    # imageUploader:</span><br><span class=\"line\">      # 适配了兰空图床V1、V2版本</span><br><span class=\"line\">      # 以兰空图床V1为例，下列填写内容为：</span><br><span class=\"line\">      # fileName: file</span><br><span class=\"line\">      # tokenName: Authorization</span><br><span class=\"line\">      # api: https://xxxxxx/api/v1/upload</span><br><span class=\"line\">      # token: Bearer xxxxxxxxxxxxxx</span><br><span class=\"line\">      # resp: data.links.url</span><br><span class=\"line\">      # 以兰空图床V2为例，下列填写内容为：</span><br><span class=\"line\">      # fileName: image</span><br><span class=\"line\">      # tokenName: token</span><br><span class=\"line\">      # api: https://xxxxxx/api/upload</span><br><span class=\"line\">      # token: xxxxxxxxxxxxxx</span><br><span class=\"line\">      # resp: data.url</span><br><span class=\"line\">    #   fileName: # 根据版本二选一</span><br><span class=\"line\">    #   tokenName: # 根据版本二选一</span><br><span class=\"line\">    #   api: # 图床 api 地址</span><br><span class=\"line\">    #   token: # 图床验证</span><br><span class=\"line\">    #   resp: # 图片地址返回值的字段</span><br></pre></td></tr></table></figure>\n"},{"title":"Hexo-Stellar主题装修日记(二)","_content":"\n## 给超长代码块增加滚动条[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#给超长代码块增加滚动条)\n\n首先判断代码块是否过长，如果是，则设置最大高度并开启滚动。\n\n新建 `source/js/adjust-codeblock-height.js`，添加以下内容：\n\nadjust-code-block-height.js\n\n```\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n\n    // 选择所有的.md-text元素\n\n    var codeBlocks = document.querySelectorAll('.md-text');\n\n    // 遍历每个.md-text元素\n\n    codeBlocks.forEach(function(block) {\n\n      // 检查是否包含.highlight类的子元素，且父元素高度超过500px\n\n      var highlightBlocks = block.querySelectorAll('.highlight');\n\n      highlightBlocks.forEach(function(highlightBlock) {\n\n        if (highlightBlock.clientHeight > 800) {\n\n          highlightBlock.style.maxHeight = '300px';\n\n          highlightBlock.style.overflow = 'auto';\n\n        }\n\n      });\n\n    });\n\n  });\n```\n\n以上代码代表如果代码框高度超过 800px，则开启折叠，折叠框最大高度为 300px。其中，可自行设置判断阈值 `if (highlightBlock.clientHeight > 800) {` 以及折叠后最大高度 `highlightBlock.style.maxHeight = '300px';`。\n\n## 雪花特效[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#雪花特效)\n\n代码来自[这里](https://mengru.space/?posts/2021/12/嗖得一下11月##博客下雪的小脚本)。我稍微做了一点修改，做成了一个按钮引入到主题中并用 localStorage 记录下雪状态，很简单的代码完美的解决了我的强迫症～\n\n## 博客已运行x天x小时x分钟[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#博客已运行x天x小时x分钟)\n\n在网站页脚部分添加一个“博客已运行 x 天 x 小时 x 分钟”字样，显示效果：\n\n![勉强运行x天x小时x分钟x秒](Hexo-Stellar主题装修二/CleanShot 2024-04-16 at 21.51.07@2x-1749438579838-1030.webp)勉强运行x天x小时x分钟x秒\n\n\n\n代码抄自[这里](https://blog.bxzdyg.cn/p/使用Hexo和Stellar搭建个人博客网站/#站点统计)，我为了调整样式加了一行代码 ![blobcat:blobcatpeekaboo](Hexo-Stellar主题装修二/blobcatpeekaboo-1749438579838-1032.png)。在 `_config.stellar.yml` 里添加如下代码，其中 `<span class='runtime'>` 中的类名 `runtime` 可自行设置。\n\n```\nfooter:\n\n  ...\n\n  content: | # 支持 Markdown 格式\n\n      <span id=\"runtime_span\"></span>\n\n      <script type=\"text/javascript\">\n\n      function show_runtime() {\n\n          window.setTimeout(\"show_runtime()\", 1000);\n\n          X = new Date(\"2024/01/01 17:00:00\"); // 网站开始运行的日期和时间\n\n          Y = new Date(); // 当前日期和时间\n\n          T = (Y.getTime() - X.getTime()); // 网站运行的总毫秒数\n\n          M = 24 * 60 * 60 * 1000; // 一天的毫秒数\n\n          a = T / M; // 总天数\n\n          A = Math.floor(a); // 总天数的整数部分\n\n          b = (a - A) * 24; // 总小时数\n\n          B = Math.floor(b); // 总小时数的整数部分\n\n          c = (b - B) * 60; // 总分钟数\n\n          C = Math.floor((b - B) * 60); // 总分钟数的整数部分\n\n          D = Math.floor((c - C) * 60); // 总秒数\n\n          runtime_span.innerHTML = \"⏱️勉强运行 <span class='runtime'>\" + A + \"天\" + B + \"小时\" + C + \"分\" + D + \"秒</span>\";\n\n      }\n\n      show_runtime();\n\n      </script>\n```\n\n再在自定义的 css 文件里添加以下代码，其中 color 可设置为主题色 `var(--theme-link)` 或自行设置：\n\n```\n.runtime\n\n{\n\n    font-weight: bold;\n\n    color: #7F84A7;\n\n}\n```\n\n## 页脚增加猫猫图片[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#页脚增加猫猫图片)\n\n显示效果：\n\n![img](Hexo-Stellar主题装修二/CleanShot 2024-04-17 at 19.09.44@2x-1749438579838-1034.webp)\n\n首先，如果是使用本地图片，将图片上传到主题的资源文件夹，比如 `source/asset/posts/keyboard.png`\n\n然后在主题配置文件的 `_config.stellar.yml` 中添加：\n\n```\nfooter:\n\n  ...\n\n  content: | # 支持 Markdown 格式\n\n  <img src=\"/你的/图片/路径.png\" alt=\"描述文字\" style=\"float: right; width: 60px; margin-left: 20px;\">\n```\n\n其中 `float: right` 限定图片右对齐，`width:60px` 限制图片大小，可自行调整。\n\n## 外部链接后面显示图标[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#外部链接后面显示图标)\n\n显示效果：\n\n\n\n![外部链接图标](Hexo-Stellar主题装修二/CleanShot 2024-04-16 at 22.09.38@2x-1749438579838-1038.webp)外部链接图标\n\n\n\n方法一：\n\n\n\nWARNING\n\n老方法依赖 cheerio 模块，可行，但似乎会带来一些网站加载过慢的问题，我现在已经开心地转用新方法了，把老方法摆在这里全当（水）记（字）录（数）。\n\n新建 `themes/stellar/scripts/filters/link-icon.js` 文件，增加以下代码：\n\n```\n//使用 cheerio 模块在文章中的外部链接后添加一个小图标：npm i cheerio --savehexo.extend.filter.register('after_render:html', function(html, data) {    const cheerio = require('cheerio');    const $ = cheerio.load(html, {decodeEntities: false});\n    // 只选择<article class=\"md-text content\">元素内的<a>标签    $('article.md-text.content a, footer.page-footer.footnote a').each(function() {      const link = $(this);      const href = link.attr('href');    //排除一些特殊的链接    if (!link.parents('div.tag-plugin.users-wrap').length && !link.parents('div.tag-plugin.sites-wrap').length && !link.parent('div.tag-plugin.ghcard').length && !link.parents('div.tag-plugin.link.dis-select').length && !link.parents('div.tag-plugin.colorful.note').length && !link.parents('div.social-wrap.dis-select').length) {\n      // 确保链接的 href 属性存在，并检查其是否以 'http' 或 '/' 开头      if (href && (href.startsWith('http') || href.startsWith('/'))) {        link.html(link.html() + ` <span style=\"white-space: nowrap;\"><svg width=\".7em\" height=\".7em\" viewBox=\"0 0 21 21\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z\" fill=\"currentColor\" /><path d=\"M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z\" fill=\"currentColor\"></svg></span>`);        //link.attr('target', '_blank'); // 可选：确保链接在新标签页打开      }    }    });\n    return $.html();  });\n```\n\n方法二：\n\n\n\nTIP\n\n用老方法配置完我总觉得使用 Cheerio 模块后会导致网站加载过慢，就又优化了一下。询问 ChatGPT 得知可以考虑不使用 Node.js 的服务器端处理，而是使用纯前端的方法来达到同样的效果，通过在客户端 JavaScript 中添加代码来实现类似的功能，而不是在 Hexo 的后端渲染过程中处理。（好了，可以卸载 cheerio 了）\n\n下面的这段代码可以在页面加载完成后运行，它会查找指定元素中的链接，并在这些链接后添加一个图标。这种方法的好处是，它不需要服务端的处理，所有操作都在用户的浏览器内完成，可以减少服务器负担，并且避免可能因服务器端渲染引起的加载问题。此外，这种方法也提供了更好的用户体验，因为它不会延迟页面内容的显示。\n\n新建`source/js/link-icon.js` 文件，填入以下内容：\n\n```\ndocument.addEventListener('DOMContentLoaded', function () {    console.log('Document is ready.');\n    const links = document.querySelectorAll('article.md-text.content a, footer.page-footer.footnote a');    console.log('Links found:', links.length);\n    links.forEach(function(link) {        console.log('Processing link:', link.href);\n        const parentClasses = ['tag-plugin.users-wrap', 'tag-plugin.sites-wrap', 'tag-plugin.ghcard', 'tag-plugin.link.dis-select', 'tag-plugin.colorful.note', 'social-wrap.dis-select'];        let skip = false;\n        parentClasses.forEach(pc => {            if (link.closest(`div.${pc}`)) {                skip = true;                console.log('Skipping link due to parent class:', pc);            }        });\n        if (!skip) {            const href = link.getAttribute('href');            console.log('Link href:', href);\n            if (href && (href.startsWith('http') || href.startsWith('/'))) {                link.innerHTML += ` <span style=\"white-space: nowrap;\"><svg width=\".7em\" height=\".7em\" viewBox=\"0 0 21 21\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z\" fill=\"currentColor\" /><path d=\"M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z\" fill=\"currentColor\"></svg></span>`;                console.log('Icon added to link:', link.innerHTML);            }        }    });});\n```\n\n这里做了两个筛选：\n\n1. `const parentClasses = ['tag-plugin.users-wrap', 'tag-plugin.sites-wrap', 'tag-plugin.ghcard', 'tag-plugin.link.dis-select', 'tag-plugin.colorful.note', 'social-wrap.dis-select'];` 是被排除的类，可自行增减；\n2. `if (href && (href.startsWith('http') || href.startsWith('/')))` 判断链接是否以 `http` 或 `/` 开头，如果不想给站内链接添加图标的话可以把后面的筛选条件去掉。\n\n然后在主题文件 `_config.stellar.yml` 中引入：\n\n```\ninject:\n\n  head:\n\n  ...\n\n    - <script src=\"/js/link-icon.js\"></script> # 链接图标\n```\n\n## 增加参与讨论按钮[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#增加参与讨论按钮)\n\n代码抄自[星日语](https://weekdaycare.cn/)，最新主题已自带此功能。\n\n## 适配 Obsidian Callouts 标注块语法[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#适配-obsidian-callouts-标注块语法)\n\n显示效果：\n\n![img](Hexo-Stellar主题装修二/CleanShot 2024-04-16 at 22.23.51@2x-1749438579838-1036.webp)\n\n暗黑模式下的显示效果：\n\n![img](Hexo-Stellar主题装修二/CleanShot 2024-04-16 at 22.24.19@2x-1749438579839-1040.webp)\n\n参考了 [Hexo 博客适配 Obsidian 新语法](https://uuanqin.top/p/d4bc55f2/index.html)，基础的设置请参考此链接。我暂时用不上其他功能，就把 callout 的样式搬来并做了一些修改。我个人还挺喜欢这个 callout 样式，比 quote 要好看而且添加也很方便，主要是可以和 Obsidian 打通，嘿嘿。\n\n### 样式修改[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#样式修改)\n\n原版的 callouts 标注块样式间距太大，我在此基础上改了 callout_blocks_common.css（不是很懂，写得很烂……但是能用）：\n\n```\n:root{--callout-note:68,138,255;--callout-abstract:0,176,255;--callout-info:0,184,212;--callout-tip:0,191,165;--callout-success:8,185,78;--callout-question:224,172,0;--callout-warning:255,145,0;--callout-failure:255,82,82;--callout-danger:255,23,68;--callout-bug:245,0,87;--callout-example:124,77,255;--callout-quote:158,158,158;--callout-radius:6px;--callout-border-opacity:0.5;--callout-title-bg-opacity:0.08}.callout-fold:before{align-self:center;content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"gray\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"chevron-down\"><path d=\"m6 9 6 6 6-6\"/></svg>')}.callout-fold{display:flex;transform:rotate(-90deg);transition:.5s cubic-bezier(.075,.82,.165,1)}.custom-callout[open]>summary>.callout-fold{transform:rotate(0deg)}.custom-callout>summary{border-top-left-radius:var(--callout-radius);border-top-right-radius:var(--callout-radius);cursor:pointer;margin:0;padding:0.5rem 1rem}.custom-callout>summary::marker{content:\"\"}.custom-callout>summary:before{margin-right:.5rem}.custom-callout>summary::-webkit-details-marker{display:none}.callout-title{--fsp: calc(17px - 1px);font-size: var(--fsp);display:flex;justify-content:space-between;font-weight:bold;}.custom-callout>.callout-body{background:transparent!important;border-left:none;margin:0!important;padding:.3rem 1rem;position:relative}\n.custom-callout>.callout-body>p{--fsp: calc(17px - 1px);font-size: var(--fsp);margin:8px 0}.custom-callout>.callout-body>pre{margin:1.25rem -1rem}.custom-callout>.callout-body>pre:first-child{margin-top:-.75rem}.custom-callout>.callout-body>pre:last-child{margin-bottom:-.75rem}\n.custom-callout.note,.custom-callout.seealso{border-color:rgba(var(--callout-note),var(--callout-border-opacity))}.custom-callout.note>summary,.custom-callout.seealso>summary{    background-color:rgba(var(--callout-note),var(--callout-title-bg-opacity));    color:rgba(var(var(--callout-note)))}\n.custom-callout.abstract,.custom-callout.summary,.custom-callout.tldr{border-color:rgba(var(--callout-abstract),var(--callout-border-opacity))}.custom-callout.abstract>summary,.custom-callout.summary>summary,.custom-callout.tldr>summary{    background-color:rgba(var(--callout-abstract),var(--callout-title-bg-opacity));    color:rgba(var(--callout-abstract))}\n.custom-callout.info,.custom-callout.todo{border-color:rgba(var(--callout-info),var(--callout-border-opacity))}.custom-callout.info>summary,.custom-callout.todo>summary{    background-color:rgba(var(--callout-info),var(--callout-title-bg-opacity));    color:rgba(var(--callout-info))}\n\n.custom-callout.hint,.custom-callout.important,.custom-callout.tip{border-color:rgba(var(--callout-tip),var(--callout-border-opacity))}.custom-callout.hint>summary,.custom-callout.important>summary,.custom-callout.tip>summary{    background-color:rgba(var(--callout-tip),var(--callout-title-bg-opacity));    color:rgba(var(--callout-tip))}\n.custom-callout.check,.custom-callout.done,.custom-callout.success{border-color:rgba(var(--callout-success),var(--callout-border-opacity))}.custom-callout.check>summary,.custom-callout.done>summary,.custom-callout.success>summary{    background-color:rgba(var(--callout-success),var(--callout-title-bg-opacity));    color:rgba(var(--callout-success))}\n.custom-callout.faq,.custom-callout.help,.custom-callout.question{border-color:rgba(var(--callout-question),var(--callout-border-opacity))}.custom-callout.faq>summary,.custom-callout.help>summary,.custom-callout.question>summary{    background-color:rgba(var(--callout-question),var(--callout-title-bg-opacity));    color:rgba(var(--callout-question))}\n.custom-callout.attention,.custom-callout.caution,.custom-callout.warning{border-color:rgba(var(--callout-warning),var(--callout-border-opacity))}.custom-callout.attention>summary,.custom-callout.caution>summary,.custom-callout.warning>summary{    background-color:rgba(var(--callout-warning),var(--callout-title-bg-opacity));    color:rgba(var(--callout-warning))}\n.custom-callout.fail,.custom-callout.failure,.custom-callout.missing{border-color:rgba(var(--callout-failure),var(--callout-border-opacity))}.custom-callout.fail>summary,.custom-callout.failure>summary,.custom-callout.missing>summary{    background-color:rgba(var(--callout-failure),var(--callout-title-bg-opacity));    color:rgba(var(--callout-failure))}\n.custom-callout.danger,.custom-callout.error{border-color:rgba(var(--callout-danger),var(--callout-border-opacity))}.custom-callout.danger>summary,.custom-callout.error>summary{    background-color:rgba(var(--callout-danger),var(--callout-title-bg-opacity));    color:rgba(var(--callout-danger))}\n.custom-callout.bug{border-color:rgba(var(--callout-bug),var(--callout-border-opacity))}.custom-callout.bug>summary{    background-color:rgba(var(--callout-bug),var(--callout-title-bg-opacity));    color:rgba(var(--callout-bug))}\n.custom-callout.example{border-color:rgba(var(--callout-example),var(--callout-border-opacity))}.custom-callout.example>summary{    background-color:rgba(var(--callout-example),var(--callout-title-bg-opacity));    color:rgba(var(--callout-example))}\n.custom-callout.cite,.custom-callout.quote{border-color:rgba(var(--callout-quote),var(--callout-border-opacity))}.custom-callout.cite>summary,.custom-callout.quote>summary{    background-color:rgba(var(--callout-quote),var(--callout-title-bg-opacity));    color:rgba(var(--callout-quote))}\n.callout-title>.callout-icon+div{-webkit-box-flex:1;-ms-flex:1 1 0%;-webkit-flex:1 1 0%;flex:1 1 0%;margin-left:.25rem}.callout-icon{align-items:center;color:#000;display:flex}.callout-icon:before{height:20px;width:20px}.custom-callout.attention>.callout-title>.callout-icon:before,.custom-callout.caution>.callout-title>.callout-icon:before,.custom-callout.warning>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23FF9100\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-alert-triangle\"><path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3ZM12 9v4M12 17h.01\"/></svg>')}.custom-callout.note>.callout-title>.callout-icon:before,.custom-callout.seealso>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23448AFF\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-pencil\"><path d=\"m18 2 4 4M7.5 20.5 19 9l-4-4L3.5 16.5 2 22z\"/></svg>')}.custom-callout.abstract>.callout-title>.callout-icon:before,.custom-callout.summary>.callout-title>.callout-icon:before,.custom-callout.tldr>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%2300B0FF\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-clipboard-list\"><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"/><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2M12 11h4M12 16h4M8 11h.01M8 16h.01\"/></svg>')}.custom-callout.info>.callout-title>.callout-icon:before,.custom-callout.todo>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%2300B8D4\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-check-circle-2\"><path d=\"M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z\"/><path d=\"m9 12 2 2 4-4\"/></svg>')}.custom-callout.hint>.callout-title>.callout-icon:before,.custom-callout.important>.callout-title>.callout-icon:before,.custom-callout.tip>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%2300BFA5\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>')}.custom-callout.check>.callout-title>.callout-icon:before,.custom-callout.done>.callout-title>.callout-icon:before,.custom-callout.success>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%2300C853\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-check\"><path d=\"M20 6 9 17l-5-5\"/></svg>')}.custom-callout.faq>.callout-title>.callout-icon:before,.custom-callout.help>.callout-title>.callout-icon:before,.custom-callout.question>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23E0AC00\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-help-circle\"><circle cx=\"12\" cy=\"12\" r=\"10\"/><path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3M12 17h.01\"/></svg>')}.custom-callout.fail>.callout-title>.callout-icon:before,.custom-callout.failure>.callout-title>.callout-icon:before,.custom-callout.missing>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23FF5252\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-x\"><path d=\"M18 6 6 18M6 6l12 12\"/></svg>')}.custom-callout.danger>.callout-title>.callout-icon:before,.custom-callout.error>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23FF1744\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-zap\"><path d=\"M13 2 3 14h9l-1 8 10-12h-9l1-8z\"/></svg>')}.custom-callout.bug>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23F50057\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-bug\"><rect x=\"8\" y=\"6\" width=\"8\" height=\"14\" rx=\"4\"/><path d=\"m19 7-3 2M5 7l3 2M19 19l-3-2M5 19l3-2M20 13h-4M4 13h4M10 4l1 2M14 4l-1 2\"/></svg>')}.custom-callout.example>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%237C4DFF\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-list\"><path d=\"M8 6h13M8 12h13M8 18h13M3 6h.01M3 12h.01M3 18h.01\"/></svg>')}.custom-callout.cite>.callout-title>.callout-icon:before,.custom-callout.quote>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%239E9E9E\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-quote\"><path d=\"M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1zM15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z\"/></svg>')}\n\n.custom-callout.note > .callout-body {    /* 移除了 background:transparent!important; 改为根据类型变化的背景色 */    background-color: rgba(var(--callout-note), var(--callout-title-bg-opacity));  }\n  /* 根据不同的类型设置背景色和文字/图标颜色 */.custom-callout.note, .custom-callout.note > summary {    background-color: rgba(var(--callout-note), var(--callout-title-bg-opacity));  }\n.custom-callout.abstract > .callout-body {    background-color: rgba(var(--callout-abstract), var(--callout-title-bg-opacity));  }\n.custom-callout.abstract, .custom-callout.abstract > summary {    background-color: rgba(var(--callout-abstract), var(--callout-title-bg-opacity));  }\n.custom-callout.info > .callout-body {    background-color: rgba(var(--callout-info), var(--callout-title-bg-opacity));  }\n.custom-callout.info, .custom-callout.info > summary {    background-color: rgba(var(--callout-info), var(--callout-title-bg-opacity));  }\n.custom-callout.tip > .callout-body {    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  }\n.custom-callout.tip, .custom-callout.tip > summary {    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  }\n.custom-callout.success > .callout-body {    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  }\n.custom-callout.success, .custom-callout.success > summary {    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  }\n.custom-callout.question > .callout-body {    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  }\n.custom-callout.question, .custom-callout.question > summary {    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  }\n.custom-callout.warning > .callout-body {    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  }\n.custom-callout.warning, .custom-callout.warning > summary {    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  }\n.custom-callout.failure > .callout-body {    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  }\n.custom-callout.failure, .custom-callout.failure > summary {    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  }\n.custom-callout.danger > .callout-body {    background-color: rgba(var(--callout-danger), var(--callout-title-bg-opacity));  }\n.custom-callout.danger, .custom-callout.danger > summary {    background-color: rgba(var(--callout-danger), var(--callout-title-bg-opacity));  }\n.custom-callout.bug > .callout-body {    background-color: rgba(var(--callout-bug), var(--callout-title-bg-opacity));  }\n.custom-callout.bug, .custom-callout.bug > summary {    background-color: rgba(var(--callout-bug), var(--callout-title-bg-opacity));  }\n.custom-callout.example > .callout-body {    background-color: rgba(var(--callout-example), var(--callout-title-bg-opacity));  }\n.custom-callout.example, .custom-callout.example > summary {    background-color: rgba(var(--callout-example), var(--callout-title-bg-opacity));  }\n.custom-callout.quote > .callout-body {    background-color: rgba(var(--callout-quote), var(--callout-title-bg-opacity));  }\n.custom-callout.quote, .custom-callout.quote > summary {    background-color: rgba(var(--callout-quote), var(--callout-title-bg-opacity));  }\n.custom-callout.cite > .callout-body {    background-color: rgba(var(--callout-quote), var(--callout-title-bg-opacity));  }\n.custom-callout.cite, .custom-callout.cite > summary {    background-color: rgba(var(--callout-quote), var(--callout-title-bg-opacity));  }\n.custom-callout.todo > .callout-body {    background-color: rgba(var(--callout-info), var(--callout-title-bg-opacity));  }\n.custom-callout.todo, .custom-callout.todo > summary {    background-color: rgba(var(--callout-info), var(--callout-title-bg-opacity));  }\n.custom-callout.seealso > .callout-body {    background-color: rgba(var(--callout-note), var(--callout-title-bg-opacity));  }\n.custom-callout.seealso, .custom-callout.seealso > summary {    background-color: rgba(var(--callout-note), var(--callout-title-bg-opacity));  }\n.custom-callout.hint > .callout-body {    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  }\n.custom-callout.hint, .custom-callout.hint > summary {    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  }\n.custom-callout.important > .callout-body {    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  }\n.custom-callout.important, .custom-callout.important > summary {    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  }\n.custom-callout.attention > .callout-body {    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  }\n.custom-callout.attention, .custom-callout.attention > summary {    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  }\n.custom-callout.caution > .callout-body {    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  }\n.custom-callout.caution, .custom-callout.caution > summary {    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  }\n.custom-callout.done > .callout-body {    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  }\n.custom-callout.done, .custom-callout.done > summary {    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  }\n.custom-callout.check > .callout-body {    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  }\n.custom-callout.check, .custom-callout.check > summary {    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  }\n.custom-callout.faq > .callout-body {    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  }\n.custom-callout.faq, .custom-callout.faq > summary {    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  }\n.custom-callout.help > .callout-body {    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  }\n.custom-callout.help, .custom-callout.help > summary {    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  }\n.custom-callout.fail > .callout-body {    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  }\n.custom-callout.fail, .custom-callout.fail > summary {    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  }\n.custom-callout.missing > .callout-body {    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  }\n.custom-callout.missing, .custom-callout.missing > summary {    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  }\n.custom-callout.error > .callout-body {    background-color: rgba(var(--callout-danger), var(--callout-title-bg-opacity));  }\n.custom-callout.error, .custom-callout.error > summary {    background-color: rgba(var(--callout-danger), var(--callout-title-bg-opacity));  }\n.custom-callout.tldr > .callout-body {    background-color: rgba(var(--callout-abstract), var(--callout-title-bg-opacity));  }\n.custom-callout.tldr, .custom-callout.tldr > summary {    background-color: rgba(var(--callout-abstract), var(--callout-title-bg-opacity));  }\n```\n\n## 集成 Telegram Channel 说说[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#集成-telegram-channel-说说)\n\n显示效果：\n\n篇幅限制，只展示2条，请耐心等待加载。（可能要挂代理）\n\n代码抄自[把Tg Channel接入到Stellar时间线](https://blog.hzchu.top/2024/把Tg-Channel接入到Stellar时间线/)。因为我懒得做标签筛选所以直接把这个去掉啦，在此还要感谢佬的耐心解答 ![blobcat:ablobcatheart](Hexo-Stellar主题装修二/ablobcatheart-1749438579839-1042.png)\n\n## GitHub Action 自动部署并修复更新时间[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#github-action-自动部署并修复更新时间)\n\n在自动部署这里遇到了几个坑，总结下来大概有下：\n\n- 网上流行的很多 yml workflow 文件都有些过时\n- 公钥私钥啥的不太懂，配置了半天\n- 因为我的博客有数学公式显示，所以要在 workflow 里加入安装 pandoc 的部分，才能够成功运行\n- 自动部署后网站的文章更新时间全部变成 push 时间，但在本地是正常的。一番搜索后找到了解决方法，在 yml 文件里加入了以下代码，分别修复 posts、wiki、notes 的更新时间：\n\n```\n  - name: Restore file modification time 🕒      run: find source/_posts -name '*.md' | while read file; do touch -d \"$(git log -1 --format=\"@%ct\" \"$file\")\" \"$file\"; done\n    - name: Restore file modification time of wiki🕒      run: find source/wiki -name '*.md' | while read file; do touch -d \"$(git log -1 --format=\"@%ct\" \"$file\")\" \"$file\"; done\n    - name: Restore file modification time of notes🕒      run: find source/notes -name '*.md' | while read file; do touch -d \"$(git log -1 --format=\"@%ct\" \"$file\")\" \"$file\"; done\n```\n\n最后附上完整代码，拿去用的话要自己配置一下 GitHub 部分的设置：\n\n```\nname: auto deploy\non:  workflow_dispatch:  push:\njobs:  build:    runs-on: ubuntu-latest # 运行环境为最新版 Ubuntu    name: auto deploy    steps:    # 1. 获取源码    - name: Checkout      uses: actions/checkout@v4 # 使用 actions/checkout@v3      with: # 条件        submodules: true # Checkout private submodules(themes or something else). 当有子模块时切换分支？        fetch-depth: 0\n    - name: Restore file modification time 🕒      run: find source/_posts -name '*.md' | while read file; do touch -d \"$(git log -1 --format=\"@%ct\" \"$file\")\" \"$file\"; done\n    - name: Restore file modification time of wiki🕒      run: find source/wiki -name '*.md' | while read file; do touch -d \"$(git log -1 --format=\"@%ct\" \"$file\")\" \"$file\"; done\n    - name: Restore file modification time of notes🕒      run: find source/notes -name '*.md' | while read file; do touch -d \"$(git log -1 --format=\"@%ct\" \"$file\")\" \"$file\"; done\n    # 2. 配置环境    - name: Setup Node.js 18.19.x      uses: actions/setup-node@master      with:        node-version: \"18.19.x\"\n    - name: Install pandoc      run: |        cd /tmp        wget -c https://github.com/jgm/pandoc/releases/download/2.14.0.3/pandoc-2.14.0.3-1-amd64.deb        sudo dpkg -i pandoc-2.14.0.3-1-amd64.deb\n    # 3. 生成静态文件    - name: Generate Public Files      run: |        npm i        npm install hexo-cli -g        hexo clean && hexo generate    # 4a. 部署到 GitHub 仓库（可选）    - name: Deploy to GitHub Pages      uses: peaceiris/actions-gh-pages@v3      with:        deploy_key: ${{ secrets.HEXO_DEPLOY_PRI }} # 配置密钥        external_repository: # 填入你的GitHub pages部署仓库        publish_branch: gt-pages # 填入部署分支        publish_dir: ./public        commit_message: ${{ github.event.head_commit.message }}        user_name: 'github-actions[bot]'        user_email: 'github-actions[bot]@users.noreply.github.com'\n```\n\n## 给博客添加地理定位并制作个性欢迎[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#给博客添加地理定位并制作个性欢迎)\n\n显示效果：\n\n![个性欢迎卡片](Hexo-Stellar主题装修二/CleanShot 2024-04-17 at 01.09.07@2x-1749438579839-1044.webp)个性欢迎卡片\n\n\n\n代码来自[给博客添加腾讯地图定位并制作个性欢迎](https://ichika.cc/Article/beautiful_IPLocation/)。我稍微做了一点调整：\n\n新建 `source/js/services/txmap.js`，并添加以下代码： {% folding 点击展开代码 %}\n\n```\n//get请求$.ajax({    type: 'get',    url: 'https://apis.map.qq.com/ws/location/v1/ip',    data: {        key: '你的key',        output: 'jsonp',    },    dataType: 'jsonp',    success: function (res) {        ipLoacation = res;    }})function getDistance(e1, n1, e2, n2) {    const R = 6371    const { sin, cos, asin, PI, hypot } = Math    let getPoint = (e, n) => {        e *= PI / 180        n *= PI / 180        return { x: cos(n) * cos(e), y: cos(n) * sin(e), z: sin(n) }    }\n    let a = getPoint(e1, n1)    let b = getPoint(e2, n2)    let c = hypot(a.x - b.x, a.y - b.y, a.z - b.z)    let r = asin(c / 2) * 2 * R    return Math.round(r);}\nfunction showWelcome() {\n    let dist = getDistance(113.34499552, 23.15537143, ipLoacation.result.location.lng, ipLoacation.result.location.lat); //这里换成自己的经纬度    let pos = ipLoacation.result.ad_info.nation;    let ip;    let posdesc;    //根据国家、省份、城市信息自定义欢迎语    switch (ipLoacation.result.ad_info.nation) {        case \"日本\":            posdesc = \"よろしく，一起去看樱花吗\";            break;        case \"美国\":            posdesc = \"Let us live in peace!\";            break;        case \"英国\":            posdesc = \"想同你一起夜乘伦敦眼\";            break;        case \"俄罗斯\":            posdesc = \"干了这瓶伏特加！\";            break;        case \"法国\":            posdesc = \"C'est La Vie\";            break;        case \"德国\":            posdesc = \"Die Zeit verging im Fluge.\";            break;        case \"澳大利亚\":            posdesc = \"一起去大堡礁吧！\";            break;        case \"加拿大\":            posdesc = \"拾起一片枫叶赠予你\";            break;        case \"中国\":            pos = ipLoacation.result.ad_info.province + \" \" + ipLoacation.result.ad_info.city + \" \" + ipLoacation.result.ad_info.district;            ip = ipLoacation.result.ip;            switch (ipLoacation.result.ad_info.province) {                case \"北京市\":                    posdesc = \"北——京——欢迎你~~~\";                    break;                case \"天津市\":                    posdesc = \"讲段相声吧。\";                    break;                case \"河北省\":                    posdesc = \"山势巍巍成壁垒，天下雄关。铁马金戈由此向，无限江山。\";                    break;                case \"山西省\":                    posdesc = \"展开坐具长三尺，已占山河五百余。\";                    break;                case \"内蒙古自治区\":                    posdesc = \"天苍苍，野茫茫，风吹草低见牛羊。\";                    break;                case \"辽宁省\":                    posdesc = \"我想吃烤鸡架！\";                    break;                case \"吉林省\":                    posdesc = \"状元阁就是东北烧烤之王。\";                    break;                case \"黑龙江省\":                    posdesc = \"很喜欢哈尔滨大剧院。\";                    break;                case \"上海市\":                    posdesc = \"众所周知，中国只有两个城市。\";                    break;                case \"江苏省\":                    switch (ipLoacation.result.ad_info.city) {                        case \"南京市\":                            posdesc = \"这是我挺想去的城市啦。\";                            break;                        case \"苏州市\":                            posdesc = \"上有天堂，下有苏杭。\";                            break;                        default:                            posdesc = \"散装是必须要散装的。\";                            break;                    }                    break;                case \"浙江省\":                    posdesc = \"东风渐绿西湖柳，雁已还人未南归。\";                    break;                case \"河南省\":                    switch (ipLoacation.result.ad_info.city) {                        case \"郑州市\":                            posdesc = \"豫州之域，天地之中。\";                            break;                        case \"南阳市\":                            posdesc = \"臣本布衣，躬耕于南阳。此南阳非彼南阳！\";                            break;                        case \"驻马店市\":                            posdesc = \"峰峰有奇石，石石挟仙气。嵖岈山的花很美哦！\";                            break;                        case \"开封市\":                            posdesc = \"刚正不阿包青天。\";                            break;                        case \"洛阳市\":                            posdesc = \"洛阳牡丹甲天下。\";                            break;                        default:                            posdesc = \"可否带我品尝河南烩面啦？\";                            break;                    }                    break;                case \"安徽省\":                    posdesc = \"蚌埠住了，芜湖起飞。\";                    break;                case \"福建省\":                    posdesc = \"井邑白云间，岩城远带山。\";                    break;                case \"江西省\":                    posdesc = \"落霞与孤鹜齐飞，秋水共长天一色。\";                    break;                case \"山东省\":                    posdesc = \"遥望齐州九点烟，一泓海水杯中泻。\";                    break;                case \"湖北省\":                    posdesc = \"来碗热干面！\";                    break;                case \"湖南省\":                    posdesc = \"74751，长沙斯塔克。\";                    break;                case \"广东省\":                    posdesc = \"老板来两斤福建人。\";                    break;                case \"广西壮族自治区\":                    posdesc = \"桂林山水甲天下。\";                    break;                case \"海南省\":                    posdesc = \"朝观日出逐白浪，夕看云起收霞光。\";                    break;                case \"四川省\":                    posdesc = \"康康川妹子。\";                    break;                case \"贵州省\":                    posdesc = \"茅台，学生，再塞200。\";                    break;                case \"云南省\":                    posdesc = \"玉龙飞舞云缠绕，万仞冰川直耸天。\";                    break;                case \"西藏自治区\":                    posdesc = \"躺在茫茫草原上，仰望蓝天。\";                    break;                case \"陕西省\":                    posdesc = \"来份臊子面加馍。\";                    break;                case \"甘肃省\":                    posdesc = \"羌笛何须怨杨柳，春风不度玉门关。\";                    break;                case \"青海省\":                    posdesc = \"牛肉干和老酸奶都好好吃。\";                    break;                case \"宁夏回族自治区\":                    posdesc = \"大漠孤烟直，长河落日圆。\";                    break;                case \"新疆维吾尔自治区\":                    posdesc = \"驼铃古道丝绸路，胡马犹闻唐汉风。\";                    break;                case \"台湾省\":                    posdesc = \"我在这头，大陆在那头。\";                    break;                case \"香港特别行政区\":                    posdesc = \"永定贼有残留地鬼嚎，迎击光非岁玉。\";                    break;                case \"澳门特别行政区\":                    posdesc = \"性感荷官，在线发牌。\";                    break;                default:                    posdesc = \"带我去你的城市逛逛吧！\";                    break;            }            break;        default:            posdesc = \"带我去你的国家逛逛吧。\";            break;    }\n    //根据本地时间切换欢迎语    let timeChange;    let date = new Date();    if (date.getHours() >= 5 && date.getHours() < 11) timeChange = \"<span>上午好</span>，一日之计在于晨！\";    else if (date.getHours() >= 11 && date.getHours() < 13) timeChange = \"<span>中午好</span>，该摸鱼吃午饭了。\";    else if (date.getHours() >= 13 && date.getHours() < 15) timeChange = \"<span>下午好</span>，懒懒地睡个午觉吧！\";    else if (date.getHours() >= 15 && date.getHours() < 16) timeChange = \"<span>三点几啦</span>，一起饮茶呀！\";    else if (date.getHours() >= 16 && date.getHours() < 19) timeChange = \"<span>夕阳无限好！</span>\";    else if (date.getHours() >= 19 && date.getHours() < 24) timeChange = \"<span>晚上好</span>，夜生活嗨起来！\";    else timeChange = \"夜深了，早点休息，少熬夜。\";\n    try {        //自定义文本和需要放的位置        document.getElementById(\"welcome-info\").innerHTML =            `<b><center>🎉 欢迎信息 🎉</center>&emsp;&emsp;欢迎来自 <span style=\"color:var(--theme-color)\">${pos}</span> 的小伙伴，${timeChange}您现在距离站长约 <span style=\"color:var(--theme-color)\">${dist}</span> 公里，当前的IP地址为： <span style=\"color:var(--theme-color)\">${ip}</span>， ${posdesc}</b>`;    } catch (err) {        // console.log(\"Pjax无法获取#welcome-info元素🙄🙄🙄\")    }}window.onload = showWelcome;// 如果使用了pjax在加上下面这行代码document.addEventListener('pjax:complete', showWelcome);\n```\n\n{% endfolding %}\n\n### 在主题文件中配置[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#在主题文件中配置)\n\n在主题配置文件 `_config.stellar.yml` 中引入jQuery依赖和刚刚的js文件：\n\n```\ninject:\n\n    - <script src=\"https://cdn.staticfile.org/jquery/3.6.3/jquery.min.js\"></script> # jQuery\n\n  - <script async data-pjax src=\"/js/services/txmap.js\"></script> # 腾讯位置API\n```\n\n在 `source/_data/widgets.yml` 中添加小组件，我在里面嵌套了一个随机文章跳转，不要的话可以删掉，**其中，`<span id=\"welcome-info\" ></span>` 是必须的不可以删：**\n\n```\nwelcomeloc:\n\n  layout: markdown\n\n  title: '🎉 抓到你啦'\n\n  linklist:\n\n    columns: 1\n\n    items:\n\n      - icon: '<img src=\"https://api.iconify.design/ion:dice-outline.svg\"/>'\n\n        title: 随机文章\n\n        url: 'javascript:toRandomPost()'\n\n  content: |\n\n    <span id=\"welcome-info\" style=\"font-family: LXGW WenKai Screen;\"></span>\n```\n\n然后就跟正常的小组件一样在想要的地方引用即可。\n\n## 添加更改字体按钮[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#添加更改字体按钮)\n\n显示效果：\n\n**第一种：** 在任意位置增加一个 button 按钮![img](Hexo-Stellar主题装修二/CleanShot 2024-04-17 at 01.21.07@2x-1749438579839-1046.webp)\n\n鼠标放到上面会显示提示： ![img](Hexo-Stellar主题装修二/CleanShot 2024-04-17 at 01.22.42@2x-1749438579839-1048.webp)\n\n**第二种：** 在文章页面目录下方显示\n\n![img](Hexo-Stellar主题装修二/CleanShot 2024-04-17 at 01.24.07@2x-1749438579839-1050.webp)\n\n之前一直纠结要不要把自定义字体效果去掉，在选择和留下之间来回切换 ![blobcat:ablobcatknitsweats](Hexo-Stellar主题装修二/ablobcatknitsweats-1749438579839-1052.png) 最终才出现了这里的方案：默认不加载任何字体，喜欢 LXGW 字体的话可点击图标转换，同时再点击一下就恢复。代码不长但完美地解决了我的强迫症～\n\n### 第一步：准备字体文件[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#第一步准备字体文件)\n\n可以是在线文件也可以是本地文件，我是在主题 config 文件下通过 inject 引入了 LXGW 字体。\n\n### 第二步：修改 css[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#第二步修改-css)\n\n首先确保 LXGW WenKai Screen 字体已经通过 CSS 正确引入。你可以在 CSS 文件中添加一个特定的类，用于当用户选择使用这种字体时切换到它：\n\n```\n/* 设置字体 */\n\n.LXGWMode {\n\n    font-family: 'LXGW WenKai Screen', system-ui, 'Helvetica Neue', sans-serif;  // 使用 LXGW WenKai 字体，并指定后备字体\n\n  }\n```\n\n### 第三步：添加 javascript[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#第三步添加-javascript)\n\n新建 `source/js/changefont.js` 文件，添加以下代码：\n\n```\ndocument.addEventListener('DOMContentLoaded', function () {    applyFontSetting();    updateButtonText(); // Ensure the button text is correct on page load});\ndocument.addEventListener('pjax:success', function () {    applyFontSetting();    updateButtonText(); // Update the button text after PJAX updates});\nfunction applyFontSetting() {    if (localStorage.getItem(\"LXGWFontEnabled\") === \"true\") {        document.body.classList.add(\"LXGWMode\");    } else {        document.body.classList.remove(\"LXGWMode\");    }}\nfunction toggleLXGWFont() {    var button = document.querySelector('.custom-button'); // Find the button    if (localStorage.getItem(\"LXGWFontEnabled\") === \"true\") {        localStorage.setItem(\"LXGWFontEnabled\", \"false\");        document.body.classList.remove(\"LXGWMode\");        button.innerHTML = '<img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png\" alt=\"Emoji\" style=\"vertical-align: middle; width: 20px; height: 20px;\"> 危险，请勿点击';    } else {        localStorage.setItem(\"LXGWFontEnabled\", \"true\");        document.body.classList.add(\"LXGWMode\");        button.innerHTML = '<img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png\" alt=\"Emoji\" style=\"vertical-align: middle; width: 20px; height: 20px;\"> 不要说我没有警告过你';    }}\nfunction updateButtonText() {    var button = document.querySelector('.custom-button'); // Find the button    if (localStorage.getItem(\"LXGWFontEnabled\") === \"true\") {        button.innerHTML = '<img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png\" alt=\"Emoji\" style=\"vertical-align: middle; width: 20px; height: 20px;\"> 不要点这里啦！';    } else {        button.innerHTML = '<img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png\" alt=\"Emoji\" style=\"vertical-align: middle; width: 20px; height: 20px;\"> 危险，请勿点击';    }}\n```\n\n### 第四步：添加切换按钮[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#第四步添加切换按钮)\n\n然后在想要的地方引用即可，可以自行添加各种 emoji，比如：\n\n```\n<button class=\"custom-button tooltip\" onclick=\"toggleLXGWFont()\" data-msg=\"警告，真的很危险\"><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png\" alt=\"Emoji\" style=\"vertical-align: middle; width: 20px; height: 20px;\"> 危险，请勿点击</button>\n```\n\n### 给按钮加入 css 提示框[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#给按钮加入-css-提示框)\n\n在自定义 css 文件中添加：\n\n```\n.custom-button {    display: inline-block;    padding: 2px 10px;    /*margin: 10px;    background-color: #f2f2f2; /* Light grey background, change as needed */    font-family: inherit; /* Inherits the font-family from parent container */    color: #835EEC;    background-color: #F2EEFD;    @media (prefers-color-scheme: dark) {      color: #A28BF2;      background-color: #282433;    }    text-align: center;    cursor: pointer;    /*border: 2px solid #ccc; /* Grey border */    border-radius: 16px; /* Rounded corners */    transition: all 0.3s ease;  }\n.custom-button:hover {    background-color: #e9e9e9; /* Slightly darker on hover */    @media (prefers-color-scheme: dark) {      background-color: #333; /* Darker background on hover */    }    border-color: #999; /* Darker border on hover */  }\n/* toggle-font 提示框的样式 */\n.tooltip {    position: relative;    cursor: pointer; /* 可选，让用户知道这是一个可以互动的元素 */}\n.tooltip:hover::before {    white-space: nowrap;    line-height: 18px;    content: attr(data-msg);    position: absolute;    padding: 0 8px;    display: block;    color: #ffffff;    background: #656565;    border-radius: 6px;    font-size: 12px;    top: -25px;    left: 50%;    transform: translateX(-50%);    Z-index: 1000; /* 确保提示框在其他元素之上 */}\n.tooltip:hover:: after {    Content: \"\";    Position: absolute;    Top: -8 px;    Left: 50%;    Transform: translateX (-50%);    Border: 6 px solid transparent;    border-top-color: #656565 ; /* 简化写法 */}\n/* toggle-font 按钮的样式 */\n.widget-wrapper. Toggle-font {    Background: none; // Example: making background transparent    /* Add other styles specific to the toggle-font widget here */}\n```\n\n### 第二种样式[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#第二种样式)\n\n\n\nWARNING\n\n第二种样式需要对主题文件进行一丢丢修改，但貌似不太影响更新……只要无冲突的话可以一直 update fork\n\n在 `languages/zh-CN.yml` 中添加一行 `font: 更改字体`，并在 icons.yml 里添加：\n\n```\ndefault:font: <svg class=\"theme-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\"><path d=\"m12.677 17.781l-2.626-6.256l-2.694 6.256Zm6.723 6.511h-7.069v-1.365l.458-.023a1.847 1.847 0 0 0 .972-.2a.313.313 0 0 0 .145-.263a4.158 4.158 0 0 0-.419-1.4l-.812-1.931H7.322L6.4 21.259a3.319 3.319 0 0 0-.349 1.157c0 .036 0 .119.154.241a2.481 2.481 0 0 0 1.191.247l.448.033v1.354H2v-1.31l.4-.07a2.188 2.188 0 0 0 1-.318a6.318 6.318 0 0 0 1.18-2.066l5.575-13.036H11.2l5.512 13.174a5.255 5.255 0 0 0 1.049 1.835a1.959 1.959 0 0 0 1.19.4l.454.027Zm6.441-2.732v-3.985a22.542 22.542 0 0 0-2.226.97a3.845 3.845 0 0 0-1.29 1.05a2.03 2.03 0 0 0-.388 1.2a1.951 1.951 0 0 0 .491 1.362a1.49 1.49 0 0 0 1.13.544a4.142 4.142 0 0 0 2.283-1.141m-3.333 2.949a2.833 2.833 0 0 1-2.139-.893a3.206 3.206 0 0 1-.833-2.285a2.959 2.959 0 0 1 .415-1.577a5 5 0 0 1 1.791-1.625a23.876 23.876 0 0 1 3.617-1.588v-.074a2.905 2.905 0 0 0-.383-1.833a1.325 1.325 0 0 0-1.075-.412a1.155 1.155 0 0 0-.816.26a.687.687 0 0 0-.277.536l.023.646a1.62 1.62 0 0 1-.4 1.158a1.481 1.481 0 0 1-2.1-.019a1.634 1.634 0 0 1-.391-1.134a2.8 2.8 0 0 1 1.182-2.177a4.813 4.813 0 0 1 3.125-.932a5.381 5.381 0 0 1 2.508.524a2.628 2.628 0 0 1 1.213 1.346a6.391 6.391 0 0 1 .244 2.2v3.55a14.665 14.665 0 0 0 .051 1.749a.661.661 0 0 0 .054.2c.085-.078.284-.225.864-.806l.819-.828v1.967l-.1.128c-.958 1.283-1.883 1.907-2.83 1.907a1.6 1.6 0 0 1-1.257-.557a1.788 1.788 0 0 1-.358-.74a9.688 9.688 0 0 1-1.433.977a3.579 3.579 0 0 1-1.514.332\"/></svg>\n```\n\n在 `layout/_partial/widgets/toc.ejs` 中，在想要的位置，如 `el += editBtn` 后，添加以下代码：\n\n```\n el += `<a class=\"toggle-font\" onclick=\"toggleLXGWFont()\">`\n\n  el += icon('default:font')\n\n  el += `<span>${__('btn.font')}</span>`\n\n  el += `</a>`\n```\n\n为了使这个图标随主题明暗自动变化，在自定义 css 文件中加入：\n\n```\n/* 设置图标颜色 *//* 白天模式，默认填充色为黑色 */.theme-icon {  fill: black;}\n/* 暗黑模式，填充色为白色 */@media (prefers-color-scheme: dark) {  .theme-icon {      fill: white;  }}\n```\n\n## 随机文章跳转[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#随机文章跳转)\n\n\n\nNOTE\n\n要在主题文件夹里新增文件，不影响主题后续更新![blobcat:ablobcatattentionreverse](Hexo-Stellar主题装修二/ablobcatattentionreverse-1749438579839-1054.png)\n\n终于来到了我最爱的生活哲学！代码参考了[这个链接](https://blog.zhheo.com/p/c116857c.html)。创建 `themes/stellar/scripts/helpers/random.js` ，增加以下代码：\n\n```\nhexo.extend.filter.register('after_render:html', function (data) {\n\n  const posts = []\n\n  hexo.locals.get('posts').map(function (post) {\n\n    if (post.random !== false) posts.push(post.path)\n\n  })\n\n  data += `<script>var posts=${JSON.stringify(posts)};function toRandomPost(){ window.pjax ? pjax.loadUrl('/'+posts[Math.floor(Math.random()*posts.length)]) : window.open('/'+posts[Math.floor(Math.random()*posts.length)], \"_self\"); };</script>`\n\n  return data\n\n})\n```\n\n在主题配置文件引入 `_config.stellar.yml`，inject的 head里添加\n\n```\n- <script src=\"/js/random.js\"></script> # 随机文章\n```\n\n然后在需要调用的位置执行 `toRandomPost()` 函数即可。比如任意 dom 添加 `onclick=\"toRandomPost()\"`\n\n\n\n好吧，我知道你肯定没听懂\n\n反正我当时看完是一脸懵圈 不过没关系，我最后还是琢磨明白啦，下面就有填写示例，接着看就好![blobcat:ablobcatattentionreverse](Hexo-Stellar主题装修二/ablobcatattentionreverse-1749438579839-1054.png)\n\n添加一个按钮:\n\n随机阅读一篇文章\n\n\n\n代码：`<button onclick=\"toRandomPost()\">随机阅读一篇文章</button>`\n\n或者添加一个链接: [随机阅读一篇文章](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#)\n\n代码：`<a href=\"#\" onclick=\"toRandomPost(); return false;\">随机阅读一篇文章</a>`\n\n在下一节还有应用示例，请往下看——\n\n## 超链接样式调整[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#超链接样式调整)\n\n文章内链接：加粗并下移下划线。显示效果：\n\n\n\n![超链接样式](Hexo-Stellar主题装修二/CleanShot 2024-04-17 at 22.18.12@2x-1749438579839-1056.webp)超链接样式\n\n\n\n在自定义 css 文件里加入：\n\n```\n/* 文章内链接 */\n\nli:not([class]) a:not([class]),\n\np:not([class]) a:not([class]),\n\ntable a:not([class]) {\n\n  /*color: var(--theme-link);*/\n\n  padding-bottom: 3px; /* 增加底部padding */\n\n  padding-right: 1px;\n\n  margin-right: 2px;\n\n  background: linear-gradient(0, var(--theme-link), var(--theme-link)) no-repeat center bottom / 100% 2px;\n\n}\n```\n\n测试链接：[关于](https://www.flyalready.com/about/)\n\n新样式！为链接使用荧光笔下划线效果，这个和上面的样式二选一就好。显示效果：\n\n![img](Hexo-Stellar主题装修二/CleanShot 2024-04-20 at 19.32.04@2x-1749438579839-1058.webp)\n\n```\n/* 文章内链接：为链接使用荧光笔下划线效果 */\n\nli:not([class]) a:not([class]),\n\np:not([class]) a:not([class]),\n\ntable a:not([class]) {\n\n  padding-bottom: 0.1rem;\n\n  background: linear-gradient(0, var(--theme-link-opa), var(--theme-link-opa)) no-repeat center bottom / 100% 40%;\n\n}\n```\n\n## 选中文本：使用超链接高亮的背景色[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#选中文本使用超链接高亮的背景色)\n\n在自定义 css 文件里加入：\n\n```\n/* 选中文本：使用超链接高亮的背景色 */\n\n::selection {\n\n  background: var(--theme-link-opa);\n\n}\n```\n\n## Twikoo 评论样式优化[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#twikoo-评论样式优化)\n\n\n\nTitle\n\n样式优化需要改主题文件，但下面的**给评论输入框加入提示**是纯 css 实现的不需要改\n\n显示效果：\n\n![img](Hexo-Stellar主题装修二/CleanShot 2024-04-17 at 02.13.48@2x-1749438579839-1060.webp)\n\n只截了部分，整体效果可在评论区查看。代码全部抄自星日语大佬的[这条 commit](https://github.com/xaoxuu/hexo-theme-stellar/commit/3666dbd50a0ddf46a87635f51c9a08829ba41f9b#diff-b3cf1ac0cff1eefdab68933ee5005affaeb5b0781c8d63116a2ddecaf5ab00a1)。评论区表情显示优化可参考[这条 commit](https://github.com/xaoxuu/hexo-theme-stellar/commit/4567ceb8b883e142c3c4e7d84699b80676679e0c)。\n\n### 给评论输入框加入提示[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#给评论输入框加入提示)\n\n显示效果：\n\n![img](Hexo-Stellar主题装修二/CleanShot 2024-04-17 at 02.17.46@2x-1749438579839-1062.webp)\n\n原始代码忘记在哪里抄的了，我就修改了最后 3 行……在自定义 css 文件中加入以下内容：\n\n```\n/* 设置文字内容 :nth-child(1)的作用是选择第几个 */.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(1):before {    content: '输入QQ号会自动获取昵称和头像🐧';}\n.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(2):before {    content: '收到回复将会发送到您的邮箱📧';}\n.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(3):before {    content: '填写后可以点击昵称访问您的网站🔗';}\n/* 当用户点击输入框时显示 */.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::before,.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::after {    display: block;}\n/* 主内容区 */.el-input.el-input--small.el-input-group.el-input-group--prepend::before {    /* 先隐藏起来 */    display: none;    /* 绝对定位 */    position: absolute;    /* 向上移动60像素 */    top: -60px;    /* 文字强制不换行，防止left:50%导致的文字换行 */    white-space: nowrap;    /* 圆角 */    border-radius: 10px;    /* 距离左边50% */    left: 50%;    /* 然后再向左边挪动自身的一半，即可实现居中 */    transform: translate(-50%);    /* 填充 */    padding: 14px 18px;    background: #444;    color: #fff;}\n/* 小角标 */.el-input.el-input--small.el-input-group.el-input-group--prepend::after {    display: none;    content: '';    position: absolute;    /* 内容大小（宽高）为0且边框大小不为0的情况下，每一条边（4个边）都是一个三角形，组成一个正方形。    我们先将所有边框透明，再给其中的一条边添加颜色就可以实现小三角图标 */    border: 12px solid transparent;    border-top-color: #444;    left: 50%;    transform: translate(-50%, -48px);}\n.el-input.el-input--small.el-input-group.el-input-group--prepend::before, .el-input.el-input--small.el-input-group.el-input-group--prepend::after {    z-index: 9999; /* 提高层级，确保内容显示在最前 */}\n```\n\n## Stellar & Twikoo 表情包补全计划[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#stellar--twikoo-表情包补全计划)\n\n### blobcat[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#blobcat)\n\n这个系列表情真的不要太可爱，一眼爱上\n\n![blobcat:ablobcatattentionreverse](Hexo-Stellar主题装修二/ablobcatattentionreverse-1749438579839-1054.png) ![blobcat:ablobcatwave](Hexo-Stellar主题装修二/ablobcatwave-1749438579839-1064.png) ![blobcat:blobcatpresentred](Hexo-Stellar主题装修二/blobcatpresentred-1749438579839-1066.png)![blobcat:ablobcatknitsweats](Hexo-Stellar主题装修二/ablobcatknitsweats-1749438579839-1052.png)\n\n光在博客正文里用怎么够，当然还要在评论区里也安排上![blobcat:ablobcatrainbow](Hexo-Stellar主题装修二/ablobcatrainbow-1749438579839-1068.png)\n\nblobcat 表情主要来自[星日语](https://weekdaycare.cn/posts/emoji-blob/)佬。本人在学会自定义后收集癖大发，一口气制作了几个系列的表情，往现有的 blobcat里也加了几个比较好看的 ![blobcat:A_BlobCat_Code](Hexo-Stellar主题装修二/A_BlobCat_Code-1749438579839-1070.png)\n\nStellar 引入：`blobcatplus:https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/{name}.png`\n\nTwikoo 使用链接：\n\n```\nhttps://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/blobcatplus.json\n```\n\n| 表情                                                         | 索引                     | 表情                                                         | 索引                | 表情                                                         | 索引               |\n| ------------------------------------------------------------ | ------------------------ | ------------------------------------------------------------ | ------------------- | ------------------------------------------------------------ | ------------------ |\n| ![blobcat:ablobcatheart](Hexo-Stellar主题装修二/ablobcatheart-1749438579839-1042.png) | ablobcatheart            | ![blobcat:ablobcatheartbroken](Hexo-Stellar主题装修二/ablobcatheartbroken-1749438579839-1072.png) | ablobcatheartbroken | ![blobcat:blobcatheart](Hexo-Stellar主题装修二/blobcatheart-1749438579839-1074.png) | blobcatheart       |\n| ![blobcat:blobcatheartpride](Hexo-Stellar主题装修二/blobcatheartpride-1749438579839-1076.png) | blobcatheartpride        | ![blobcat:blobcatlove](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatlove.png) | blobcatlove         | ![blobcat:blobcatkissheart](Hexo-Stellar主题装修二/blobcatkissheart-1749438579839-1080.png) | blobcatkissheart   |\n| ![blobcat:blobcatsnuggle](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatsnuggle.png) | blobcatsnuggle           | ![blobcat:comfyuee](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/comfyuee.png) | comfyuee            | ![blobcat:comfyslep](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/comfyslep.png) | comfyslep          |\n| ![blobcat:blobcatcomfysweat](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatcomfysweat.png) | blobcatcomfysweat        | ![blobcat:blobcatcomftears](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatcomftears.png) | blobcatcomftears    | ![blobcat:blobcatfacepalm](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatfacepalm.png) | blobcatfacepalm    |\n| ![blobcat:blobcat0_0](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcat0_0.png) | blobcat0_0               | ![blobcat:blobcatangry](Hexo-Stellar主题装修二/blobcatangry-1749438579840-1096.png) | blobcatangry        | ![blobcat:blobbanhammerr](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobbanhammerr.png) | blobbanhammerr     |\n| ![blobcat:blobcatt](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatt.png) | blobcatt                 | ![blobcat:blobcatblush](Hexo-Stellar主题装修二/blobcatblush-1749438579840-1102.png) | blobcatblush        | ![blobcat:blobcatcoffee](Hexo-Stellar主题装修二/blobcatcoffee-1749438579840-1104.png) | blobcatcoffee      |\n| ![blobcat:blobcatcry](Hexo-Stellar主题装修二/blobcatcry-1749438579840-1106.png) | blobcatcry               | ![blobcat:blobcatdead](Hexo-Stellar主题装修二/blobcatdead-1749438579840-1108.png) | blobcatdead         | ![blobcat:blobcatdied](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatdied.png) | blobcatdied        |\n| ![blobcat:blobcatdisturbed](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatdisturbed.png) | blobcatdisturbed         | ![blobcat:blobcatfearful](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatfearful.png) | blobcatfearful      | ![blobcat:blobcatfingerguns](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatfingerguns.png) | blobcatfingerguns  |\n| ![blobcat:blobcatflip](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatflip.png) | blobcatflip              | ![blobcat:blobcatflower](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatflower.png) | blobcatflower       | ![blobcat:blobcatgay](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatgay.png) | blobcatgay         |\n| ![blobcat:blobcatgooglycry](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatgooglycry.png) | blobcatgooglycry         | ![blobcat:blobcatneutral](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatneutral.png) | blobcatneutral      | ![blobcat:blobcatopenmouth](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatopenmouth.png) | blobcatopenmouth   |\n| ![blobcat:blobcatsadreach](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatsadreach.png) | blobcatsadreach          | ![blobcat:blobcatscared](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatscared.png) | blobcatscared       | ![blobcat:blobcatnomblobcat](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatnomblobcat.png) | blobcatnomblobcat  |\n| ![blobcat:blobcatpresentred](Hexo-Stellar主题装修二/blobcatpresentred-1749438579839-1066.png) | blobcatpresentred        | ![blobcat:blobcatread](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatread.png) | blobcatread         | ![blobcat:blobcatsipsweat](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatsipsweat.png) | blobcatsipsweat    |\n| ![blobcat:blobcatsnapped](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatsnapped.png) | blobcatsnapped           | ![blobcat:blobcatthink](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatthink.png) | blobcatthink        | ![blobcat:blobcattriumph](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcattriumph.png) | blobcattriumph     |\n| ![blobcat:blobcatumm](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatumm.png) | blobcatumm               | ![blobcat:blobcatverified](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatverified.png) | blobcatverified     | ![blobcat:blobcatbox](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatbox.png) | blobcatbox         |\n| ![blobcat:blobcatcaged](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatcaged.png) | blobcatcaged             | ![blobcat:blobcatgooglytrash](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatgooglytrash.png) | blobcatgooglytrash  | ![blobcat:blobcatheadphones](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatheadphones.png) | blobcatheadphones  |\n| ![blobcat:blobcathighfive](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcathighfive.png) | blobcathighfive          | ![blobcat:blobcatmelt](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatmelt.png) | blobcatmelt         | ![blobcat:blobcatmeltthumb](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatmeltthumb.png) | blobcatmeltthumb   |\n| ![blobcat:blobcatnotlikethis](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatnotlikethis.png) | blobcatnotlikethis       | ![blobcat:blobcatsaitama](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatsaitama.png) | blobcatsaitama      | ![blobcat:blobcatyandere](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatyandere.png) | blobcatyandere     |\n| ![blobcat:blobcatpeek2](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatpeek2.png) | blobcatpeek2             | ![blobcat:blobcatpeekaboo](Hexo-Stellar主题装修二/blobcatpeekaboo-1749438579838-1032.png) | blobcatpeekaboo     | ![blobcat:blobcatphoto](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatphoto.png) | blobcatphoto       |\n| ![blobcat:ablobcatattentionreverse](Hexo-Stellar主题装修二/ablobcatattentionreverse-1749438579839-1054.png) | ablobcatattentionreverse | ![blobcat:ablobcatreachrev](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatreachrev.png) | ablobcatreachrev    | ![blobcat:ablobcatwave](Hexo-Stellar主题装修二/ablobcatwave-1749438579839-1064.png) | ablobcatwave       |\n| ![blobcat:blobcatalt](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatalt.png) | blobcatalt               | ![blobcat:blobcatpolice](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatpolice.png) | blobcatpolice       | ![blobcat:blobcatshocked](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatshocked.png) | blobcatshocked     |\n| ![blobcat:ablobcatrainbow](Hexo-Stellar主题装修二/ablobcatrainbow-1749438579839-1068.png) | ablobcatrainbow          |                                                              |                     |                                                              |                    |\n| ![blobcat:A_BlobCat_REEEE](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/A_BlobCat_REEEE.png) | A_BlobCat_REEEE          | ![blobcat:A_BlobCat_Code](Hexo-Stellar主题装修二/A_BlobCat_Code-1749438579839-1070.png) | A_BlobCat_Code      | ![blobcat:ablobcatknitsweats](Hexo-Stellar主题装修二/ablobcatknitsweats-1749438579839-1052.png) | ablobcatknitsweats |\n| ![blobcat:A_BlobCat_Nervous](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/A_BlobCat_Nervous.png) | A_BlobCat_Nervous        | ![blobcat:blobcat-aww](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcat-aww.png) | blobcat-aww         | ![blobcat:ablobcatcry](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatcry.png) | ablobcatcry        |\n| ![blobcat:ablobcatdead](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatdead.png) | ablobcatdead             |                                                              |                     |                                                              |                    |\n\n### azuki[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#azuki)\n\n![azuki:038](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/038.png)![azuki:039](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/039.png)![azuki:039](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/039.png)![azuki:039](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/039.png)![azuki:039](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/039.png)![azuki:040](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/040.png)\n\nStellar 引入：`azuki: https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/{name}.png`\n\nTwikoo 使用链接：\n\n```\nhttps://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/xiaodouni.json\n```\n\n| 表情                                                         | 索引 | 表情                                                         | 索引 | 表情                                                         | 索引 |\n| ------------------------------------------------------------ | ---- | ------------------------------------------------------------ | ---- | ------------------------------------------------------------ | ---- |\n| ![azuki:001](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/001.png) | 001  | ![azuki:015](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/015.png) | 015  | ![azuki:029](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/029.png) | 029  |\n| ![azuki:002](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/002.png) | 002  | ![azuki:016](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/016.png) | 016  | ![azuki:030](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/030.png) | 030  |\n| ![azuki:003](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/003.png) | 003  | ![azuki:017](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/017.png) | 017  | ![azuki:031](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/031.png) | 031  |\n| ![azuki:004](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/004.png) | 004  | ![azuki:018](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/018.png) | 018  | ![azuki:032](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/032.png) | 032  |\n| ![azuki:005](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/005.png) | 005  | ![azuki:019](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/019.png) | 019  | ![azuki:033](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/033.png) | 033  |\n| ![azuki:006](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/006.png) | 006  | ![azuki:020](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/020.png) | 020  | ![azuki:034](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/034.png) | 034  |\n| ![azuki:007](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/007.png) | 007  | ![azuki:021](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/021.png) | 021  | ![azuki:035](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/035.png) | 035  |\n| ![azuki:008](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/008.png) | 008  | ![azuki:022](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/022.png) | 022  | ![azuki:036](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/036.png) | 036  |\n| ![azuki:009](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/009.png) | 009  | ![azuki:023](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/023.png) | 023  | ![azuki:037](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/037.png) | 037  |\n| ![azuki:010](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/010.png) | 010  | ![azuki:024](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/024.png) | 024  | ![azuki:038](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/038.png) | 038  |\n| ![azuki:011](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/011.png) | 011  | ![azuki:025](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/025.png) | 025  | ![azuki:039](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/039.png) | 039  |\n| ![azuki:012](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/012.png) | 012  | ![azuki:026](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/026.png) | 026  | ![azuki:040](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/040.png) | 040  |\n| ![azuki:013](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/013.png) | 013  | ![azuki:027](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/027.png) | 027  |                                                              |      |\n| ![azuki:014](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/014.png) | 014  | ![azuki:028](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/028.png) | 028  |                                                              |      |\n\n### neko[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#neko)\n\n![neko:038](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/038.png)![neko:039](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/039.png)![neko:040](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/040.png)\n\nStellar 引入：`neko: https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/{name}.png`\n\nTwikoo 使用链接：\n\n```\nhttps://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/neko.json\n```\n\n| 表情                                                         | 索引 | 表情                                                         | 索引 | 表情                                                         | 索引 |\n| ------------------------------------------------------------ | ---- | ------------------------------------------------------------ | ---- | ------------------------------------------------------------ | ---- |\n| ![neko:001](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/001.png) | 001  | ![neko:015](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/015.png) | 015  | ![neko:028](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/028.png) | 028  |\n| ![neko:002](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/002.png) | 002  | ![neko:016](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/016.png) | 016  | ![neko:029](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/029.png) | 029  |\n| ![neko:003](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/003.png) | 003  | ![neko:017](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/017.png) | 017  | ![neko:030](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/030.png) | 030  |\n| ![neko:004](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/004.png) | 004  | ![neko:018](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/018.png) | 018  | ![neko:031](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/031.png) | 031  |\n| ![neko:005](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/005.png) | 005  | ![neko:019](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/019.png) | 019  | ![neko:032](Hexo-Stellar主题装修二/032-1749438579782-1007.png) | 032  |\n| ![neko:006](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/006.png) | 006  | ![neko:020](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/020.png) | 020  | ![neko:033](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/033.png) | 033  |\n| ![neko:007](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/007.png) | 007  | ![neko:021](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/021.png) | 021  | ![neko:034](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/034.png) | 034  |\n| ![neko:008](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/008.png) | 008  | ![neko:022](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/022.png) | 022  | ![neko:035](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/035.png) | 035  |\n| ![neko:009](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/009.png) | 009  | ![neko:023](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/023.png) | 023  | ![neko:036](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/036.png) | 036  |\n| ![neko:010](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/010.png) | 010  | ![neko:024](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/024.png) | 024  | ![neko:037](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/037.png) | 037  |\n| ![neko:011](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/011.png) | 011  | ![neko:025](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/025.png) | 025  | ![neko:038](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/038.png) | 038  |\n| ![neko:012](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/012.png) | 012  | ![neko:026](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/026.png) | 026  | ![neko:039](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/039.png) | 039  |\n| ![neko:013](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/013.png) | 013  | ![neko:027](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/027.png) | 027  |                                                              |      |\n| ![neko:014](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/014.png) | 014  |                                                              |      |                                                              |      |\n\n### dokomo[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#dokomo)\n\nStellar 引入: `dokomo: https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/{name}.png`\n\nTwikoo 使用链接:\n\n```\nhttps://raw.githubusercontent.com/infinitesum/Twikoo-emoji/main/dokomo/dokomo.json\n```\n\n| 表情                                                         | 索引      | 表情                                                         | 索引      | 表情                                                         | 索引      |\n| ------------------------------------------------------------ | --------- | ------------------------------------------------------------ | --------- | ------------------------------------------------------------ | --------- |\n| ![dokomo:dokomo-1](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-1.png) | dokomo-1  | ![dokomo:dokomo-18](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-18.png) | dokomo-18 | ![dokomo:dokomo-35](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-35.png) | dokomo-35 |\n| ![dokomo:dokomo-2](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-2.png) | dokomo-2  | ![dokomo:dokomo-19](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-19.png) | dokomo-19 | ![dokomo:dokomo-36](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-36.png) | dokomo-36 |\n| ![dokomo:dokomo-3](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-3.png) | dokomo-3  | ![dokomo:dokomo-20](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-20.png) | dokomo-20 | ![dokomo:dokomo-37](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-37.png) | dokomo-37 |\n| ![dokomo:dokomo-4](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-4.png) | dokomo-4  | ![dokomo:dokomo-21](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-21.png) | dokomo-21 | ![dokomo:dokomo-38](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-38.png) | dokomo-38 |\n| ![dokomo:dokomo-5](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-5.png) | dokomo-5  | ![dokomo:dokomo-22](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-22.png) | dokomo-22 | ![dokomo:dokomo-39](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-39.png) | dokomo-39 |\n| ![dokomo:dokomo-6](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-6.png) | dokomo-6  | ![dokomo:dokomo-23](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-23.png) | dokomo-23 | ![dokomo:dokomo-40](Hexo-Stellar主题装修二/dokomo-40-1749438579846-1346.png) | dokomo-40 |\n| ![dokomo:dokomo-7](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-7.png) | dokomo-7  | ![dokomo:dokomo-24](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-24.png) | dokomo-24 | ![dokomo:dokomo-41](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-41.png) | dokomo-41 |\n| ![dokomo:dokomo-8](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-8.png) | dokomo-8  | ![dokomo:dokomo-25](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-25.png) | dokomo-25 | ![dokomo:dokomo-42](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-42.png) | dokomo-42 |\n| ![dokomo:dokomo-9](Hexo-Stellar主题装修二/dokomo-9-1749438579846-1360.png) | dokomo-9  | ![dokomo:dokomo-26](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-26.png) | dokomo-26 | ![dokomo:dokomo-43](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-43.png) | dokomo-43 |\n| ![dokomo:dokomo-10](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-10.png) | dokomo-10 | ![dokomo:dokomo-27](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-27.png) | dokomo-27 | ![dokomo:dokomo-44](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-44.png) | dokomo-44 |\n| ![dokomo:dokomo-11](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-11.png) | dokomo-11 | ![dokomo:dokomo-28](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-28.png) | dokomo-28 | ![dokomo:dokomo-45](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-45.png) | dokomo-45 |\n| ![dokomo:dokomo-12](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-12.png) | dokomo-12 | ![dokomo:dokomo-29](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-29.png) | dokomo-29 | ![dokomo:dokomo-46](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-46.png) | dokomo-46 |\n| ![dokomo:dokomo-13](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-13.png) | dokomo-13 | ![dokomo:dokomo-30](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-30.png) | dokomo-30 | ![dokomo:dokomo-47](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-47.png) | dokomo-47 |\n| ![dokomo:dokomo-14](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-14.png) | dokomo-14 | ![dokomo:dokomo-31](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-31.png) | dokomo-31 | ![dokomo:dokomo-48](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-48.png) | dokomo-48 |\n| ![dokomo:dokomo-15](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-15.png) | dokomo-15 | ![dokomo:dokomo-32](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-32.png) | dokomo-32 | ![dokomo:dokomo-49](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-49.png) | dokomo-49 |\n| ![dokomo:dokomo-16](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-16.png) | dokomo-16 | ![dokomo:dokomo-33](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-33.png) | dokomo-33 |                                                              |           |\n| ![dokomo:dokomo-17](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-17.png) | dokomo-17 | ![dokomo:dokomo-34](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-34.png) | dokomo-34 |                                                              |           |\n\n## 总字数统计：“发表了x篇文章，共计x字”[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#总字数统计发表了x篇文章共计x字)\n\n需要修改主题文件 ![azuki:038](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/038.png)\n\n\n```\n// 3.left.top: 面包屑导航\n\n  el += `<div class=\"flex-row\" id=\"breadcrumb\">`\n\n    // 首页\n\n    el += `<a class=\"cap breadcrumb\" href=\"${url_for(config.root)}\">${__(\"btn.home\")}</a>`\n\n    if (theme.wiki.tree[page.wiki]) {\n\n      el += partial('breadcrumb/wiki')\n\n    } else if (page.layout == 'post') {\n\n      el += partial('breadcrumb/blog')\n\n    } else {\n\n      el += partial('breadcrumb/page')\n\n    }\n\n  // end 3.left.top\n\n  el += `</div>`\n```\n\n并在后面添加：\n\n```\n // 在这里添加标签代码\n\n  if (page.layout == \"post\" && page.tags && page.tags.length > 0) {\n\n    el += '<div id=\"tag\">'; // 将标签容器的创建移动到条件内部\n\n    el += ' <span>&nbsp标签：</span>';\n\n    el += list_categories(page.tags, {\n\n      class: \"cap breadcrumb\",\n\n      show_count: false,\n\n      separator: '&nbsp; ',\n\n      style: \"none\"\n\n    });\n\n    el += '&nbsp</div>';\n\n  }\n```\n\n## toc 字体大小调整[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#toc-字体大小调整)\n\n需要修改主题文件 ![azuki:038](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/038.png)\n\n就是把文章目录字体调小了一点点。\n\n在`themes/stellar/source/css/_layout/widgets/toc.styl` 文件中，找到\n\n```\n// 各级缩进样式\n\n.widget-wrapper.toc .toc\n\n  .toc-item\n\n    font-weight: 500\n\n    --fsp: $fsp1\n\n  .toc-item .toc-item\n\n    font-weight: 400\n\n    --fsp: $fsp2\n```\n\n把`--fsp: $fsp1`一行注释掉：\n\n```\n// 各级缩进样式\n\n.widget-wrapper.toc .toc\n\n  .toc-item\n\n    font-weight: 500\n\n    /*--fsp: $fsp1*/\n\n  .toc-item .toc-item\n\n    font-weight: 400\n\n    --fsp: $fsp2\n```\n","source":"_posts/2025/06/theme-design2.md","raw":"---\ntitle: Hexo-Stellar主题装修日记(二)\ncategories: [装修日记]\ntags: [主题装修]\n---\n\n## 给超长代码块增加滚动条[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#给超长代码块增加滚动条)\n\n首先判断代码块是否过长，如果是，则设置最大高度并开启滚动。\n\n新建 `source/js/adjust-codeblock-height.js`，添加以下内容：\n\nadjust-code-block-height.js\n\n```\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n\n    // 选择所有的.md-text元素\n\n    var codeBlocks = document.querySelectorAll('.md-text');\n\n    // 遍历每个.md-text元素\n\n    codeBlocks.forEach(function(block) {\n\n      // 检查是否包含.highlight类的子元素，且父元素高度超过500px\n\n      var highlightBlocks = block.querySelectorAll('.highlight');\n\n      highlightBlocks.forEach(function(highlightBlock) {\n\n        if (highlightBlock.clientHeight > 800) {\n\n          highlightBlock.style.maxHeight = '300px';\n\n          highlightBlock.style.overflow = 'auto';\n\n        }\n\n      });\n\n    });\n\n  });\n```\n\n以上代码代表如果代码框高度超过 800px，则开启折叠，折叠框最大高度为 300px。其中，可自行设置判断阈值 `if (highlightBlock.clientHeight > 800) {` 以及折叠后最大高度 `highlightBlock.style.maxHeight = '300px';`。\n\n## 雪花特效[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#雪花特效)\n\n代码来自[这里](https://mengru.space/?posts/2021/12/嗖得一下11月##博客下雪的小脚本)。我稍微做了一点修改，做成了一个按钮引入到主题中并用 localStorage 记录下雪状态，很简单的代码完美的解决了我的强迫症～\n\n## 博客已运行x天x小时x分钟[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#博客已运行x天x小时x分钟)\n\n在网站页脚部分添加一个“博客已运行 x 天 x 小时 x 分钟”字样，显示效果：\n\n![勉强运行x天x小时x分钟x秒](Hexo-Stellar主题装修二/CleanShot 2024-04-16 at 21.51.07@2x-1749438579838-1030.webp)勉强运行x天x小时x分钟x秒\n\n\n\n代码抄自[这里](https://blog.bxzdyg.cn/p/使用Hexo和Stellar搭建个人博客网站/#站点统计)，我为了调整样式加了一行代码 ![blobcat:blobcatpeekaboo](Hexo-Stellar主题装修二/blobcatpeekaboo-1749438579838-1032.png)。在 `_config.stellar.yml` 里添加如下代码，其中 `<span class='runtime'>` 中的类名 `runtime` 可自行设置。\n\n```\nfooter:\n\n  ...\n\n  content: | # 支持 Markdown 格式\n\n      <span id=\"runtime_span\"></span>\n\n      <script type=\"text/javascript\">\n\n      function show_runtime() {\n\n          window.setTimeout(\"show_runtime()\", 1000);\n\n          X = new Date(\"2024/01/01 17:00:00\"); // 网站开始运行的日期和时间\n\n          Y = new Date(); // 当前日期和时间\n\n          T = (Y.getTime() - X.getTime()); // 网站运行的总毫秒数\n\n          M = 24 * 60 * 60 * 1000; // 一天的毫秒数\n\n          a = T / M; // 总天数\n\n          A = Math.floor(a); // 总天数的整数部分\n\n          b = (a - A) * 24; // 总小时数\n\n          B = Math.floor(b); // 总小时数的整数部分\n\n          c = (b - B) * 60; // 总分钟数\n\n          C = Math.floor((b - B) * 60); // 总分钟数的整数部分\n\n          D = Math.floor((c - C) * 60); // 总秒数\n\n          runtime_span.innerHTML = \"⏱️勉强运行 <span class='runtime'>\" + A + \"天\" + B + \"小时\" + C + \"分\" + D + \"秒</span>\";\n\n      }\n\n      show_runtime();\n\n      </script>\n```\n\n再在自定义的 css 文件里添加以下代码，其中 color 可设置为主题色 `var(--theme-link)` 或自行设置：\n\n```\n.runtime\n\n{\n\n    font-weight: bold;\n\n    color: #7F84A7;\n\n}\n```\n\n## 页脚增加猫猫图片[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#页脚增加猫猫图片)\n\n显示效果：\n\n![img](Hexo-Stellar主题装修二/CleanShot 2024-04-17 at 19.09.44@2x-1749438579838-1034.webp)\n\n首先，如果是使用本地图片，将图片上传到主题的资源文件夹，比如 `source/asset/posts/keyboard.png`\n\n然后在主题配置文件的 `_config.stellar.yml` 中添加：\n\n```\nfooter:\n\n  ...\n\n  content: | # 支持 Markdown 格式\n\n  <img src=\"/你的/图片/路径.png\" alt=\"描述文字\" style=\"float: right; width: 60px; margin-left: 20px;\">\n```\n\n其中 `float: right` 限定图片右对齐，`width:60px` 限制图片大小，可自行调整。\n\n## 外部链接后面显示图标[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#外部链接后面显示图标)\n\n显示效果：\n\n\n\n![外部链接图标](Hexo-Stellar主题装修二/CleanShot 2024-04-16 at 22.09.38@2x-1749438579838-1038.webp)外部链接图标\n\n\n\n方法一：\n\n\n\nWARNING\n\n老方法依赖 cheerio 模块，可行，但似乎会带来一些网站加载过慢的问题，我现在已经开心地转用新方法了，把老方法摆在这里全当（水）记（字）录（数）。\n\n新建 `themes/stellar/scripts/filters/link-icon.js` 文件，增加以下代码：\n\n```\n//使用 cheerio 模块在文章中的外部链接后添加一个小图标：npm i cheerio --savehexo.extend.filter.register('after_render:html', function(html, data) {    const cheerio = require('cheerio');    const $ = cheerio.load(html, {decodeEntities: false});\n    // 只选择<article class=\"md-text content\">元素内的<a>标签    $('article.md-text.content a, footer.page-footer.footnote a').each(function() {      const link = $(this);      const href = link.attr('href');    //排除一些特殊的链接    if (!link.parents('div.tag-plugin.users-wrap').length && !link.parents('div.tag-plugin.sites-wrap').length && !link.parent('div.tag-plugin.ghcard').length && !link.parents('div.tag-plugin.link.dis-select').length && !link.parents('div.tag-plugin.colorful.note').length && !link.parents('div.social-wrap.dis-select').length) {\n      // 确保链接的 href 属性存在，并检查其是否以 'http' 或 '/' 开头      if (href && (href.startsWith('http') || href.startsWith('/'))) {        link.html(link.html() + ` <span style=\"white-space: nowrap;\"><svg width=\".7em\" height=\".7em\" viewBox=\"0 0 21 21\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z\" fill=\"currentColor\" /><path d=\"M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z\" fill=\"currentColor\"></svg></span>`);        //link.attr('target', '_blank'); // 可选：确保链接在新标签页打开      }    }    });\n    return $.html();  });\n```\n\n方法二：\n\n\n\nTIP\n\n用老方法配置完我总觉得使用 Cheerio 模块后会导致网站加载过慢，就又优化了一下。询问 ChatGPT 得知可以考虑不使用 Node.js 的服务器端处理，而是使用纯前端的方法来达到同样的效果，通过在客户端 JavaScript 中添加代码来实现类似的功能，而不是在 Hexo 的后端渲染过程中处理。（好了，可以卸载 cheerio 了）\n\n下面的这段代码可以在页面加载完成后运行，它会查找指定元素中的链接，并在这些链接后添加一个图标。这种方法的好处是，它不需要服务端的处理，所有操作都在用户的浏览器内完成，可以减少服务器负担，并且避免可能因服务器端渲染引起的加载问题。此外，这种方法也提供了更好的用户体验，因为它不会延迟页面内容的显示。\n\n新建`source/js/link-icon.js` 文件，填入以下内容：\n\n```\ndocument.addEventListener('DOMContentLoaded', function () {    console.log('Document is ready.');\n    const links = document.querySelectorAll('article.md-text.content a, footer.page-footer.footnote a');    console.log('Links found:', links.length);\n    links.forEach(function(link) {        console.log('Processing link:', link.href);\n        const parentClasses = ['tag-plugin.users-wrap', 'tag-plugin.sites-wrap', 'tag-plugin.ghcard', 'tag-plugin.link.dis-select', 'tag-plugin.colorful.note', 'social-wrap.dis-select'];        let skip = false;\n        parentClasses.forEach(pc => {            if (link.closest(`div.${pc}`)) {                skip = true;                console.log('Skipping link due to parent class:', pc);            }        });\n        if (!skip) {            const href = link.getAttribute('href');            console.log('Link href:', href);\n            if (href && (href.startsWith('http') || href.startsWith('/'))) {                link.innerHTML += ` <span style=\"white-space: nowrap;\"><svg width=\".7em\" height=\".7em\" viewBox=\"0 0 21 21\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z\" fill=\"currentColor\" /><path d=\"M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z\" fill=\"currentColor\"></svg></span>`;                console.log('Icon added to link:', link.innerHTML);            }        }    });});\n```\n\n这里做了两个筛选：\n\n1. `const parentClasses = ['tag-plugin.users-wrap', 'tag-plugin.sites-wrap', 'tag-plugin.ghcard', 'tag-plugin.link.dis-select', 'tag-plugin.colorful.note', 'social-wrap.dis-select'];` 是被排除的类，可自行增减；\n2. `if (href && (href.startsWith('http') || href.startsWith('/')))` 判断链接是否以 `http` 或 `/` 开头，如果不想给站内链接添加图标的话可以把后面的筛选条件去掉。\n\n然后在主题文件 `_config.stellar.yml` 中引入：\n\n```\ninject:\n\n  head:\n\n  ...\n\n    - <script src=\"/js/link-icon.js\"></script> # 链接图标\n```\n\n## 增加参与讨论按钮[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#增加参与讨论按钮)\n\n代码抄自[星日语](https://weekdaycare.cn/)，最新主题已自带此功能。\n\n## 适配 Obsidian Callouts 标注块语法[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#适配-obsidian-callouts-标注块语法)\n\n显示效果：\n\n![img](Hexo-Stellar主题装修二/CleanShot 2024-04-16 at 22.23.51@2x-1749438579838-1036.webp)\n\n暗黑模式下的显示效果：\n\n![img](Hexo-Stellar主题装修二/CleanShot 2024-04-16 at 22.24.19@2x-1749438579839-1040.webp)\n\n参考了 [Hexo 博客适配 Obsidian 新语法](https://uuanqin.top/p/d4bc55f2/index.html)，基础的设置请参考此链接。我暂时用不上其他功能，就把 callout 的样式搬来并做了一些修改。我个人还挺喜欢这个 callout 样式，比 quote 要好看而且添加也很方便，主要是可以和 Obsidian 打通，嘿嘿。\n\n### 样式修改[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#样式修改)\n\n原版的 callouts 标注块样式间距太大，我在此基础上改了 callout_blocks_common.css（不是很懂，写得很烂……但是能用）：\n\n```\n:root{--callout-note:68,138,255;--callout-abstract:0,176,255;--callout-info:0,184,212;--callout-tip:0,191,165;--callout-success:8,185,78;--callout-question:224,172,0;--callout-warning:255,145,0;--callout-failure:255,82,82;--callout-danger:255,23,68;--callout-bug:245,0,87;--callout-example:124,77,255;--callout-quote:158,158,158;--callout-radius:6px;--callout-border-opacity:0.5;--callout-title-bg-opacity:0.08}.callout-fold:before{align-self:center;content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"gray\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"chevron-down\"><path d=\"m6 9 6 6 6-6\"/></svg>')}.callout-fold{display:flex;transform:rotate(-90deg);transition:.5s cubic-bezier(.075,.82,.165,1)}.custom-callout[open]>summary>.callout-fold{transform:rotate(0deg)}.custom-callout>summary{border-top-left-radius:var(--callout-radius);border-top-right-radius:var(--callout-radius);cursor:pointer;margin:0;padding:0.5rem 1rem}.custom-callout>summary::marker{content:\"\"}.custom-callout>summary:before{margin-right:.5rem}.custom-callout>summary::-webkit-details-marker{display:none}.callout-title{--fsp: calc(17px - 1px);font-size: var(--fsp);display:flex;justify-content:space-between;font-weight:bold;}.custom-callout>.callout-body{background:transparent!important;border-left:none;margin:0!important;padding:.3rem 1rem;position:relative}\n.custom-callout>.callout-body>p{--fsp: calc(17px - 1px);font-size: var(--fsp);margin:8px 0}.custom-callout>.callout-body>pre{margin:1.25rem -1rem}.custom-callout>.callout-body>pre:first-child{margin-top:-.75rem}.custom-callout>.callout-body>pre:last-child{margin-bottom:-.75rem}\n.custom-callout.note,.custom-callout.seealso{border-color:rgba(var(--callout-note),var(--callout-border-opacity))}.custom-callout.note>summary,.custom-callout.seealso>summary{    background-color:rgba(var(--callout-note),var(--callout-title-bg-opacity));    color:rgba(var(var(--callout-note)))}\n.custom-callout.abstract,.custom-callout.summary,.custom-callout.tldr{border-color:rgba(var(--callout-abstract),var(--callout-border-opacity))}.custom-callout.abstract>summary,.custom-callout.summary>summary,.custom-callout.tldr>summary{    background-color:rgba(var(--callout-abstract),var(--callout-title-bg-opacity));    color:rgba(var(--callout-abstract))}\n.custom-callout.info,.custom-callout.todo{border-color:rgba(var(--callout-info),var(--callout-border-opacity))}.custom-callout.info>summary,.custom-callout.todo>summary{    background-color:rgba(var(--callout-info),var(--callout-title-bg-opacity));    color:rgba(var(--callout-info))}\n\n.custom-callout.hint,.custom-callout.important,.custom-callout.tip{border-color:rgba(var(--callout-tip),var(--callout-border-opacity))}.custom-callout.hint>summary,.custom-callout.important>summary,.custom-callout.tip>summary{    background-color:rgba(var(--callout-tip),var(--callout-title-bg-opacity));    color:rgba(var(--callout-tip))}\n.custom-callout.check,.custom-callout.done,.custom-callout.success{border-color:rgba(var(--callout-success),var(--callout-border-opacity))}.custom-callout.check>summary,.custom-callout.done>summary,.custom-callout.success>summary{    background-color:rgba(var(--callout-success),var(--callout-title-bg-opacity));    color:rgba(var(--callout-success))}\n.custom-callout.faq,.custom-callout.help,.custom-callout.question{border-color:rgba(var(--callout-question),var(--callout-border-opacity))}.custom-callout.faq>summary,.custom-callout.help>summary,.custom-callout.question>summary{    background-color:rgba(var(--callout-question),var(--callout-title-bg-opacity));    color:rgba(var(--callout-question))}\n.custom-callout.attention,.custom-callout.caution,.custom-callout.warning{border-color:rgba(var(--callout-warning),var(--callout-border-opacity))}.custom-callout.attention>summary,.custom-callout.caution>summary,.custom-callout.warning>summary{    background-color:rgba(var(--callout-warning),var(--callout-title-bg-opacity));    color:rgba(var(--callout-warning))}\n.custom-callout.fail,.custom-callout.failure,.custom-callout.missing{border-color:rgba(var(--callout-failure),var(--callout-border-opacity))}.custom-callout.fail>summary,.custom-callout.failure>summary,.custom-callout.missing>summary{    background-color:rgba(var(--callout-failure),var(--callout-title-bg-opacity));    color:rgba(var(--callout-failure))}\n.custom-callout.danger,.custom-callout.error{border-color:rgba(var(--callout-danger),var(--callout-border-opacity))}.custom-callout.danger>summary,.custom-callout.error>summary{    background-color:rgba(var(--callout-danger),var(--callout-title-bg-opacity));    color:rgba(var(--callout-danger))}\n.custom-callout.bug{border-color:rgba(var(--callout-bug),var(--callout-border-opacity))}.custom-callout.bug>summary{    background-color:rgba(var(--callout-bug),var(--callout-title-bg-opacity));    color:rgba(var(--callout-bug))}\n.custom-callout.example{border-color:rgba(var(--callout-example),var(--callout-border-opacity))}.custom-callout.example>summary{    background-color:rgba(var(--callout-example),var(--callout-title-bg-opacity));    color:rgba(var(--callout-example))}\n.custom-callout.cite,.custom-callout.quote{border-color:rgba(var(--callout-quote),var(--callout-border-opacity))}.custom-callout.cite>summary,.custom-callout.quote>summary{    background-color:rgba(var(--callout-quote),var(--callout-title-bg-opacity));    color:rgba(var(--callout-quote))}\n.callout-title>.callout-icon+div{-webkit-box-flex:1;-ms-flex:1 1 0%;-webkit-flex:1 1 0%;flex:1 1 0%;margin-left:.25rem}.callout-icon{align-items:center;color:#000;display:flex}.callout-icon:before{height:20px;width:20px}.custom-callout.attention>.callout-title>.callout-icon:before,.custom-callout.caution>.callout-title>.callout-icon:before,.custom-callout.warning>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23FF9100\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-alert-triangle\"><path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3ZM12 9v4M12 17h.01\"/></svg>')}.custom-callout.note>.callout-title>.callout-icon:before,.custom-callout.seealso>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23448AFF\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-pencil\"><path d=\"m18 2 4 4M7.5 20.5 19 9l-4-4L3.5 16.5 2 22z\"/></svg>')}.custom-callout.abstract>.callout-title>.callout-icon:before,.custom-callout.summary>.callout-title>.callout-icon:before,.custom-callout.tldr>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%2300B0FF\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-clipboard-list\"><rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"/><path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2M12 11h4M12 16h4M8 11h.01M8 16h.01\"/></svg>')}.custom-callout.info>.callout-title>.callout-icon:before,.custom-callout.todo>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%2300B8D4\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-check-circle-2\"><path d=\"M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z\"/><path d=\"m9 12 2 2 4-4\"/></svg>')}.custom-callout.hint>.callout-title>.callout-icon:before,.custom-callout.important>.callout-title>.callout-icon:before,.custom-callout.tip>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%2300BFA5\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-flame\"><path d=\"M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z\"/></svg>')}.custom-callout.check>.callout-title>.callout-icon:before,.custom-callout.done>.callout-title>.callout-icon:before,.custom-callout.success>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%2300C853\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-check\"><path d=\"M20 6 9 17l-5-5\"/></svg>')}.custom-callout.faq>.callout-title>.callout-icon:before,.custom-callout.help>.callout-title>.callout-icon:before,.custom-callout.question>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23E0AC00\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-help-circle\"><circle cx=\"12\" cy=\"12\" r=\"10\"/><path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3M12 17h.01\"/></svg>')}.custom-callout.fail>.callout-title>.callout-icon:before,.custom-callout.failure>.callout-title>.callout-icon:before,.custom-callout.missing>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23FF5252\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-x\"><path d=\"M18 6 6 18M6 6l12 12\"/></svg>')}.custom-callout.danger>.callout-title>.callout-icon:before,.custom-callout.error>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23FF1744\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-zap\"><path d=\"M13 2 3 14h9l-1 8 10-12h-9l1-8z\"/></svg>')}.custom-callout.bug>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%23F50057\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-bug\"><rect x=\"8\" y=\"6\" width=\"8\" height=\"14\" rx=\"4\"/><path d=\"m19 7-3 2M5 7l3 2M19 19l-3-2M5 19l3-2M20 13h-4M4 13h4M10 4l1 2M14 4l-1 2\"/></svg>')}.custom-callout.example>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%237C4DFF\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-list\"><path d=\"M8 6h13M8 12h13M8 18h13M3 6h.01M3 12h.01M3 18h.01\"/></svg>')}.custom-callout.cite>.callout-title>.callout-icon:before,.custom-callout.quote>.callout-title>.callout-icon:before{content:url('data:image/svg+xml;charset=utf-8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"%239E9E9E\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"svg-icon lucide-quote\"><path d=\"M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1zM15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z\"/></svg>')}\n\n.custom-callout.note > .callout-body {    /* 移除了 background:transparent!important; 改为根据类型变化的背景色 */    background-color: rgba(var(--callout-note), var(--callout-title-bg-opacity));  }\n  /* 根据不同的类型设置背景色和文字/图标颜色 */.custom-callout.note, .custom-callout.note > summary {    background-color: rgba(var(--callout-note), var(--callout-title-bg-opacity));  }\n.custom-callout.abstract > .callout-body {    background-color: rgba(var(--callout-abstract), var(--callout-title-bg-opacity));  }\n.custom-callout.abstract, .custom-callout.abstract > summary {    background-color: rgba(var(--callout-abstract), var(--callout-title-bg-opacity));  }\n.custom-callout.info > .callout-body {    background-color: rgba(var(--callout-info), var(--callout-title-bg-opacity));  }\n.custom-callout.info, .custom-callout.info > summary {    background-color: rgba(var(--callout-info), var(--callout-title-bg-opacity));  }\n.custom-callout.tip > .callout-body {    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  }\n.custom-callout.tip, .custom-callout.tip > summary {    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  }\n.custom-callout.success > .callout-body {    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  }\n.custom-callout.success, .custom-callout.success > summary {    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  }\n.custom-callout.question > .callout-body {    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  }\n.custom-callout.question, .custom-callout.question > summary {    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  }\n.custom-callout.warning > .callout-body {    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  }\n.custom-callout.warning, .custom-callout.warning > summary {    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  }\n.custom-callout.failure > .callout-body {    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  }\n.custom-callout.failure, .custom-callout.failure > summary {    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  }\n.custom-callout.danger > .callout-body {    background-color: rgba(var(--callout-danger), var(--callout-title-bg-opacity));  }\n.custom-callout.danger, .custom-callout.danger > summary {    background-color: rgba(var(--callout-danger), var(--callout-title-bg-opacity));  }\n.custom-callout.bug > .callout-body {    background-color: rgba(var(--callout-bug), var(--callout-title-bg-opacity));  }\n.custom-callout.bug, .custom-callout.bug > summary {    background-color: rgba(var(--callout-bug), var(--callout-title-bg-opacity));  }\n.custom-callout.example > .callout-body {    background-color: rgba(var(--callout-example), var(--callout-title-bg-opacity));  }\n.custom-callout.example, .custom-callout.example > summary {    background-color: rgba(var(--callout-example), var(--callout-title-bg-opacity));  }\n.custom-callout.quote > .callout-body {    background-color: rgba(var(--callout-quote), var(--callout-title-bg-opacity));  }\n.custom-callout.quote, .custom-callout.quote > summary {    background-color: rgba(var(--callout-quote), var(--callout-title-bg-opacity));  }\n.custom-callout.cite > .callout-body {    background-color: rgba(var(--callout-quote), var(--callout-title-bg-opacity));  }\n.custom-callout.cite, .custom-callout.cite > summary {    background-color: rgba(var(--callout-quote), var(--callout-title-bg-opacity));  }\n.custom-callout.todo > .callout-body {    background-color: rgba(var(--callout-info), var(--callout-title-bg-opacity));  }\n.custom-callout.todo, .custom-callout.todo > summary {    background-color: rgba(var(--callout-info), var(--callout-title-bg-opacity));  }\n.custom-callout.seealso > .callout-body {    background-color: rgba(var(--callout-note), var(--callout-title-bg-opacity));  }\n.custom-callout.seealso, .custom-callout.seealso > summary {    background-color: rgba(var(--callout-note), var(--callout-title-bg-opacity));  }\n.custom-callout.hint > .callout-body {    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  }\n.custom-callout.hint, .custom-callout.hint > summary {    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  }\n.custom-callout.important > .callout-body {    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  }\n.custom-callout.important, .custom-callout.important > summary {    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  }\n.custom-callout.attention > .callout-body {    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  }\n.custom-callout.attention, .custom-callout.attention > summary {    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  }\n.custom-callout.caution > .callout-body {    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  }\n.custom-callout.caution, .custom-callout.caution > summary {    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  }\n.custom-callout.done > .callout-body {    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  }\n.custom-callout.done, .custom-callout.done > summary {    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  }\n.custom-callout.check > .callout-body {    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  }\n.custom-callout.check, .custom-callout.check > summary {    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  }\n.custom-callout.faq > .callout-body {    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  }\n.custom-callout.faq, .custom-callout.faq > summary {    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  }\n.custom-callout.help > .callout-body {    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  }\n.custom-callout.help, .custom-callout.help > summary {    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  }\n.custom-callout.fail > .callout-body {    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  }\n.custom-callout.fail, .custom-callout.fail > summary {    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  }\n.custom-callout.missing > .callout-body {    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  }\n.custom-callout.missing, .custom-callout.missing > summary {    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  }\n.custom-callout.error > .callout-body {    background-color: rgba(var(--callout-danger), var(--callout-title-bg-opacity));  }\n.custom-callout.error, .custom-callout.error > summary {    background-color: rgba(var(--callout-danger), var(--callout-title-bg-opacity));  }\n.custom-callout.tldr > .callout-body {    background-color: rgba(var(--callout-abstract), var(--callout-title-bg-opacity));  }\n.custom-callout.tldr, .custom-callout.tldr > summary {    background-color: rgba(var(--callout-abstract), var(--callout-title-bg-opacity));  }\n```\n\n## 集成 Telegram Channel 说说[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#集成-telegram-channel-说说)\n\n显示效果：\n\n篇幅限制，只展示2条，请耐心等待加载。（可能要挂代理）\n\n代码抄自[把Tg Channel接入到Stellar时间线](https://blog.hzchu.top/2024/把Tg-Channel接入到Stellar时间线/)。因为我懒得做标签筛选所以直接把这个去掉啦，在此还要感谢佬的耐心解答 ![blobcat:ablobcatheart](Hexo-Stellar主题装修二/ablobcatheart-1749438579839-1042.png)\n\n## GitHub Action 自动部署并修复更新时间[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#github-action-自动部署并修复更新时间)\n\n在自动部署这里遇到了几个坑，总结下来大概有下：\n\n- 网上流行的很多 yml workflow 文件都有些过时\n- 公钥私钥啥的不太懂，配置了半天\n- 因为我的博客有数学公式显示，所以要在 workflow 里加入安装 pandoc 的部分，才能够成功运行\n- 自动部署后网站的文章更新时间全部变成 push 时间，但在本地是正常的。一番搜索后找到了解决方法，在 yml 文件里加入了以下代码，分别修复 posts、wiki、notes 的更新时间：\n\n```\n  - name: Restore file modification time 🕒      run: find source/_posts -name '*.md' | while read file; do touch -d \"$(git log -1 --format=\"@%ct\" \"$file\")\" \"$file\"; done\n    - name: Restore file modification time of wiki🕒      run: find source/wiki -name '*.md' | while read file; do touch -d \"$(git log -1 --format=\"@%ct\" \"$file\")\" \"$file\"; done\n    - name: Restore file modification time of notes🕒      run: find source/notes -name '*.md' | while read file; do touch -d \"$(git log -1 --format=\"@%ct\" \"$file\")\" \"$file\"; done\n```\n\n最后附上完整代码，拿去用的话要自己配置一下 GitHub 部分的设置：\n\n```\nname: auto deploy\non:  workflow_dispatch:  push:\njobs:  build:    runs-on: ubuntu-latest # 运行环境为最新版 Ubuntu    name: auto deploy    steps:    # 1. 获取源码    - name: Checkout      uses: actions/checkout@v4 # 使用 actions/checkout@v3      with: # 条件        submodules: true # Checkout private submodules(themes or something else). 当有子模块时切换分支？        fetch-depth: 0\n    - name: Restore file modification time 🕒      run: find source/_posts -name '*.md' | while read file; do touch -d \"$(git log -1 --format=\"@%ct\" \"$file\")\" \"$file\"; done\n    - name: Restore file modification time of wiki🕒      run: find source/wiki -name '*.md' | while read file; do touch -d \"$(git log -1 --format=\"@%ct\" \"$file\")\" \"$file\"; done\n    - name: Restore file modification time of notes🕒      run: find source/notes -name '*.md' | while read file; do touch -d \"$(git log -1 --format=\"@%ct\" \"$file\")\" \"$file\"; done\n    # 2. 配置环境    - name: Setup Node.js 18.19.x      uses: actions/setup-node@master      with:        node-version: \"18.19.x\"\n    - name: Install pandoc      run: |        cd /tmp        wget -c https://github.com/jgm/pandoc/releases/download/2.14.0.3/pandoc-2.14.0.3-1-amd64.deb        sudo dpkg -i pandoc-2.14.0.3-1-amd64.deb\n    # 3. 生成静态文件    - name: Generate Public Files      run: |        npm i        npm install hexo-cli -g        hexo clean && hexo generate    # 4a. 部署到 GitHub 仓库（可选）    - name: Deploy to GitHub Pages      uses: peaceiris/actions-gh-pages@v3      with:        deploy_key: ${{ secrets.HEXO_DEPLOY_PRI }} # 配置密钥        external_repository: # 填入你的GitHub pages部署仓库        publish_branch: gt-pages # 填入部署分支        publish_dir: ./public        commit_message: ${{ github.event.head_commit.message }}        user_name: 'github-actions[bot]'        user_email: 'github-actions[bot]@users.noreply.github.com'\n```\n\n## 给博客添加地理定位并制作个性欢迎[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#给博客添加地理定位并制作个性欢迎)\n\n显示效果：\n\n![个性欢迎卡片](Hexo-Stellar主题装修二/CleanShot 2024-04-17 at 01.09.07@2x-1749438579839-1044.webp)个性欢迎卡片\n\n\n\n代码来自[给博客添加腾讯地图定位并制作个性欢迎](https://ichika.cc/Article/beautiful_IPLocation/)。我稍微做了一点调整：\n\n新建 `source/js/services/txmap.js`，并添加以下代码： {% folding 点击展开代码 %}\n\n```\n//get请求$.ajax({    type: 'get',    url: 'https://apis.map.qq.com/ws/location/v1/ip',    data: {        key: '你的key',        output: 'jsonp',    },    dataType: 'jsonp',    success: function (res) {        ipLoacation = res;    }})function getDistance(e1, n1, e2, n2) {    const R = 6371    const { sin, cos, asin, PI, hypot } = Math    let getPoint = (e, n) => {        e *= PI / 180        n *= PI / 180        return { x: cos(n) * cos(e), y: cos(n) * sin(e), z: sin(n) }    }\n    let a = getPoint(e1, n1)    let b = getPoint(e2, n2)    let c = hypot(a.x - b.x, a.y - b.y, a.z - b.z)    let r = asin(c / 2) * 2 * R    return Math.round(r);}\nfunction showWelcome() {\n    let dist = getDistance(113.34499552, 23.15537143, ipLoacation.result.location.lng, ipLoacation.result.location.lat); //这里换成自己的经纬度    let pos = ipLoacation.result.ad_info.nation;    let ip;    let posdesc;    //根据国家、省份、城市信息自定义欢迎语    switch (ipLoacation.result.ad_info.nation) {        case \"日本\":            posdesc = \"よろしく，一起去看樱花吗\";            break;        case \"美国\":            posdesc = \"Let us live in peace!\";            break;        case \"英国\":            posdesc = \"想同你一起夜乘伦敦眼\";            break;        case \"俄罗斯\":            posdesc = \"干了这瓶伏特加！\";            break;        case \"法国\":            posdesc = \"C'est La Vie\";            break;        case \"德国\":            posdesc = \"Die Zeit verging im Fluge.\";            break;        case \"澳大利亚\":            posdesc = \"一起去大堡礁吧！\";            break;        case \"加拿大\":            posdesc = \"拾起一片枫叶赠予你\";            break;        case \"中国\":            pos = ipLoacation.result.ad_info.province + \" \" + ipLoacation.result.ad_info.city + \" \" + ipLoacation.result.ad_info.district;            ip = ipLoacation.result.ip;            switch (ipLoacation.result.ad_info.province) {                case \"北京市\":                    posdesc = \"北——京——欢迎你~~~\";                    break;                case \"天津市\":                    posdesc = \"讲段相声吧。\";                    break;                case \"河北省\":                    posdesc = \"山势巍巍成壁垒，天下雄关。铁马金戈由此向，无限江山。\";                    break;                case \"山西省\":                    posdesc = \"展开坐具长三尺，已占山河五百余。\";                    break;                case \"内蒙古自治区\":                    posdesc = \"天苍苍，野茫茫，风吹草低见牛羊。\";                    break;                case \"辽宁省\":                    posdesc = \"我想吃烤鸡架！\";                    break;                case \"吉林省\":                    posdesc = \"状元阁就是东北烧烤之王。\";                    break;                case \"黑龙江省\":                    posdesc = \"很喜欢哈尔滨大剧院。\";                    break;                case \"上海市\":                    posdesc = \"众所周知，中国只有两个城市。\";                    break;                case \"江苏省\":                    switch (ipLoacation.result.ad_info.city) {                        case \"南京市\":                            posdesc = \"这是我挺想去的城市啦。\";                            break;                        case \"苏州市\":                            posdesc = \"上有天堂，下有苏杭。\";                            break;                        default:                            posdesc = \"散装是必须要散装的。\";                            break;                    }                    break;                case \"浙江省\":                    posdesc = \"东风渐绿西湖柳，雁已还人未南归。\";                    break;                case \"河南省\":                    switch (ipLoacation.result.ad_info.city) {                        case \"郑州市\":                            posdesc = \"豫州之域，天地之中。\";                            break;                        case \"南阳市\":                            posdesc = \"臣本布衣，躬耕于南阳。此南阳非彼南阳！\";                            break;                        case \"驻马店市\":                            posdesc = \"峰峰有奇石，石石挟仙气。嵖岈山的花很美哦！\";                            break;                        case \"开封市\":                            posdesc = \"刚正不阿包青天。\";                            break;                        case \"洛阳市\":                            posdesc = \"洛阳牡丹甲天下。\";                            break;                        default:                            posdesc = \"可否带我品尝河南烩面啦？\";                            break;                    }                    break;                case \"安徽省\":                    posdesc = \"蚌埠住了，芜湖起飞。\";                    break;                case \"福建省\":                    posdesc = \"井邑白云间，岩城远带山。\";                    break;                case \"江西省\":                    posdesc = \"落霞与孤鹜齐飞，秋水共长天一色。\";                    break;                case \"山东省\":                    posdesc = \"遥望齐州九点烟，一泓海水杯中泻。\";                    break;                case \"湖北省\":                    posdesc = \"来碗热干面！\";                    break;                case \"湖南省\":                    posdesc = \"74751，长沙斯塔克。\";                    break;                case \"广东省\":                    posdesc = \"老板来两斤福建人。\";                    break;                case \"广西壮族自治区\":                    posdesc = \"桂林山水甲天下。\";                    break;                case \"海南省\":                    posdesc = \"朝观日出逐白浪，夕看云起收霞光。\";                    break;                case \"四川省\":                    posdesc = \"康康川妹子。\";                    break;                case \"贵州省\":                    posdesc = \"茅台，学生，再塞200。\";                    break;                case \"云南省\":                    posdesc = \"玉龙飞舞云缠绕，万仞冰川直耸天。\";                    break;                case \"西藏自治区\":                    posdesc = \"躺在茫茫草原上，仰望蓝天。\";                    break;                case \"陕西省\":                    posdesc = \"来份臊子面加馍。\";                    break;                case \"甘肃省\":                    posdesc = \"羌笛何须怨杨柳，春风不度玉门关。\";                    break;                case \"青海省\":                    posdesc = \"牛肉干和老酸奶都好好吃。\";                    break;                case \"宁夏回族自治区\":                    posdesc = \"大漠孤烟直，长河落日圆。\";                    break;                case \"新疆维吾尔自治区\":                    posdesc = \"驼铃古道丝绸路，胡马犹闻唐汉风。\";                    break;                case \"台湾省\":                    posdesc = \"我在这头，大陆在那头。\";                    break;                case \"香港特别行政区\":                    posdesc = \"永定贼有残留地鬼嚎，迎击光非岁玉。\";                    break;                case \"澳门特别行政区\":                    posdesc = \"性感荷官，在线发牌。\";                    break;                default:                    posdesc = \"带我去你的城市逛逛吧！\";                    break;            }            break;        default:            posdesc = \"带我去你的国家逛逛吧。\";            break;    }\n    //根据本地时间切换欢迎语    let timeChange;    let date = new Date();    if (date.getHours() >= 5 && date.getHours() < 11) timeChange = \"<span>上午好</span>，一日之计在于晨！\";    else if (date.getHours() >= 11 && date.getHours() < 13) timeChange = \"<span>中午好</span>，该摸鱼吃午饭了。\";    else if (date.getHours() >= 13 && date.getHours() < 15) timeChange = \"<span>下午好</span>，懒懒地睡个午觉吧！\";    else if (date.getHours() >= 15 && date.getHours() < 16) timeChange = \"<span>三点几啦</span>，一起饮茶呀！\";    else if (date.getHours() >= 16 && date.getHours() < 19) timeChange = \"<span>夕阳无限好！</span>\";    else if (date.getHours() >= 19 && date.getHours() < 24) timeChange = \"<span>晚上好</span>，夜生活嗨起来！\";    else timeChange = \"夜深了，早点休息，少熬夜。\";\n    try {        //自定义文本和需要放的位置        document.getElementById(\"welcome-info\").innerHTML =            `<b><center>🎉 欢迎信息 🎉</center>&emsp;&emsp;欢迎来自 <span style=\"color:var(--theme-color)\">${pos}</span> 的小伙伴，${timeChange}您现在距离站长约 <span style=\"color:var(--theme-color)\">${dist}</span> 公里，当前的IP地址为： <span style=\"color:var(--theme-color)\">${ip}</span>， ${posdesc}</b>`;    } catch (err) {        // console.log(\"Pjax无法获取#welcome-info元素🙄🙄🙄\")    }}window.onload = showWelcome;// 如果使用了pjax在加上下面这行代码document.addEventListener('pjax:complete', showWelcome);\n```\n\n{% endfolding %}\n\n### 在主题文件中配置[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#在主题文件中配置)\n\n在主题配置文件 `_config.stellar.yml` 中引入jQuery依赖和刚刚的js文件：\n\n```\ninject:\n\n    - <script src=\"https://cdn.staticfile.org/jquery/3.6.3/jquery.min.js\"></script> # jQuery\n\n  - <script async data-pjax src=\"/js/services/txmap.js\"></script> # 腾讯位置API\n```\n\n在 `source/_data/widgets.yml` 中添加小组件，我在里面嵌套了一个随机文章跳转，不要的话可以删掉，**其中，`<span id=\"welcome-info\" ></span>` 是必须的不可以删：**\n\n```\nwelcomeloc:\n\n  layout: markdown\n\n  title: '🎉 抓到你啦'\n\n  linklist:\n\n    columns: 1\n\n    items:\n\n      - icon: '<img src=\"https://api.iconify.design/ion:dice-outline.svg\"/>'\n\n        title: 随机文章\n\n        url: 'javascript:toRandomPost()'\n\n  content: |\n\n    <span id=\"welcome-info\" style=\"font-family: LXGW WenKai Screen;\"></span>\n```\n\n然后就跟正常的小组件一样在想要的地方引用即可。\n\n## 添加更改字体按钮[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#添加更改字体按钮)\n\n显示效果：\n\n**第一种：** 在任意位置增加一个 button 按钮![img](Hexo-Stellar主题装修二/CleanShot 2024-04-17 at 01.21.07@2x-1749438579839-1046.webp)\n\n鼠标放到上面会显示提示： ![img](Hexo-Stellar主题装修二/CleanShot 2024-04-17 at 01.22.42@2x-1749438579839-1048.webp)\n\n**第二种：** 在文章页面目录下方显示\n\n![img](Hexo-Stellar主题装修二/CleanShot 2024-04-17 at 01.24.07@2x-1749438579839-1050.webp)\n\n之前一直纠结要不要把自定义字体效果去掉，在选择和留下之间来回切换 ![blobcat:ablobcatknitsweats](Hexo-Stellar主题装修二/ablobcatknitsweats-1749438579839-1052.png) 最终才出现了这里的方案：默认不加载任何字体，喜欢 LXGW 字体的话可点击图标转换，同时再点击一下就恢复。代码不长但完美地解决了我的强迫症～\n\n### 第一步：准备字体文件[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#第一步准备字体文件)\n\n可以是在线文件也可以是本地文件，我是在主题 config 文件下通过 inject 引入了 LXGW 字体。\n\n### 第二步：修改 css[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#第二步修改-css)\n\n首先确保 LXGW WenKai Screen 字体已经通过 CSS 正确引入。你可以在 CSS 文件中添加一个特定的类，用于当用户选择使用这种字体时切换到它：\n\n```\n/* 设置字体 */\n\n.LXGWMode {\n\n    font-family: 'LXGW WenKai Screen', system-ui, 'Helvetica Neue', sans-serif;  // 使用 LXGW WenKai 字体，并指定后备字体\n\n  }\n```\n\n### 第三步：添加 javascript[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#第三步添加-javascript)\n\n新建 `source/js/changefont.js` 文件，添加以下代码：\n\n```\ndocument.addEventListener('DOMContentLoaded', function () {    applyFontSetting();    updateButtonText(); // Ensure the button text is correct on page load});\ndocument.addEventListener('pjax:success', function () {    applyFontSetting();    updateButtonText(); // Update the button text after PJAX updates});\nfunction applyFontSetting() {    if (localStorage.getItem(\"LXGWFontEnabled\") === \"true\") {        document.body.classList.add(\"LXGWMode\");    } else {        document.body.classList.remove(\"LXGWMode\");    }}\nfunction toggleLXGWFont() {    var button = document.querySelector('.custom-button'); // Find the button    if (localStorage.getItem(\"LXGWFontEnabled\") === \"true\") {        localStorage.setItem(\"LXGWFontEnabled\", \"false\");        document.body.classList.remove(\"LXGWMode\");        button.innerHTML = '<img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png\" alt=\"Emoji\" style=\"vertical-align: middle; width: 20px; height: 20px;\"> 危险，请勿点击';    } else {        localStorage.setItem(\"LXGWFontEnabled\", \"true\");        document.body.classList.add(\"LXGWMode\");        button.innerHTML = '<img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png\" alt=\"Emoji\" style=\"vertical-align: middle; width: 20px; height: 20px;\"> 不要说我没有警告过你';    }}\nfunction updateButtonText() {    var button = document.querySelector('.custom-button'); // Find the button    if (localStorage.getItem(\"LXGWFontEnabled\") === \"true\") {        button.innerHTML = '<img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png\" alt=\"Emoji\" style=\"vertical-align: middle; width: 20px; height: 20px;\"> 不要点这里啦！';    } else {        button.innerHTML = '<img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png\" alt=\"Emoji\" style=\"vertical-align: middle; width: 20px; height: 20px;\"> 危险，请勿点击';    }}\n```\n\n### 第四步：添加切换按钮[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#第四步添加切换按钮)\n\n然后在想要的地方引用即可，可以自行添加各种 emoji，比如：\n\n```\n<button class=\"custom-button tooltip\" onclick=\"toggleLXGWFont()\" data-msg=\"警告，真的很危险\"><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png\" alt=\"Emoji\" style=\"vertical-align: middle; width: 20px; height: 20px;\"> 危险，请勿点击</button>\n```\n\n### 给按钮加入 css 提示框[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#给按钮加入-css-提示框)\n\n在自定义 css 文件中添加：\n\n```\n.custom-button {    display: inline-block;    padding: 2px 10px;    /*margin: 10px;    background-color: #f2f2f2; /* Light grey background, change as needed */    font-family: inherit; /* Inherits the font-family from parent container */    color: #835EEC;    background-color: #F2EEFD;    @media (prefers-color-scheme: dark) {      color: #A28BF2;      background-color: #282433;    }    text-align: center;    cursor: pointer;    /*border: 2px solid #ccc; /* Grey border */    border-radius: 16px; /* Rounded corners */    transition: all 0.3s ease;  }\n.custom-button:hover {    background-color: #e9e9e9; /* Slightly darker on hover */    @media (prefers-color-scheme: dark) {      background-color: #333; /* Darker background on hover */    }    border-color: #999; /* Darker border on hover */  }\n/* toggle-font 提示框的样式 */\n.tooltip {    position: relative;    cursor: pointer; /* 可选，让用户知道这是一个可以互动的元素 */}\n.tooltip:hover::before {    white-space: nowrap;    line-height: 18px;    content: attr(data-msg);    position: absolute;    padding: 0 8px;    display: block;    color: #ffffff;    background: #656565;    border-radius: 6px;    font-size: 12px;    top: -25px;    left: 50%;    transform: translateX(-50%);    Z-index: 1000; /* 确保提示框在其他元素之上 */}\n.tooltip:hover:: after {    Content: \"\";    Position: absolute;    Top: -8 px;    Left: 50%;    Transform: translateX (-50%);    Border: 6 px solid transparent;    border-top-color: #656565 ; /* 简化写法 */}\n/* toggle-font 按钮的样式 */\n.widget-wrapper. Toggle-font {    Background: none; // Example: making background transparent    /* Add other styles specific to the toggle-font widget here */}\n```\n\n### 第二种样式[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#第二种样式)\n\n\n\nWARNING\n\n第二种样式需要对主题文件进行一丢丢修改，但貌似不太影响更新……只要无冲突的话可以一直 update fork\n\n在 `languages/zh-CN.yml` 中添加一行 `font: 更改字体`，并在 icons.yml 里添加：\n\n```\ndefault:font: <svg class=\"theme-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\"><path d=\"m12.677 17.781l-2.626-6.256l-2.694 6.256Zm6.723 6.511h-7.069v-1.365l.458-.023a1.847 1.847 0 0 0 .972-.2a.313.313 0 0 0 .145-.263a4.158 4.158 0 0 0-.419-1.4l-.812-1.931H7.322L6.4 21.259a3.319 3.319 0 0 0-.349 1.157c0 .036 0 .119.154.241a2.481 2.481 0 0 0 1.191.247l.448.033v1.354H2v-1.31l.4-.07a2.188 2.188 0 0 0 1-.318a6.318 6.318 0 0 0 1.18-2.066l5.575-13.036H11.2l5.512 13.174a5.255 5.255 0 0 0 1.049 1.835a1.959 1.959 0 0 0 1.19.4l.454.027Zm6.441-2.732v-3.985a22.542 22.542 0 0 0-2.226.97a3.845 3.845 0 0 0-1.29 1.05a2.03 2.03 0 0 0-.388 1.2a1.951 1.951 0 0 0 .491 1.362a1.49 1.49 0 0 0 1.13.544a4.142 4.142 0 0 0 2.283-1.141m-3.333 2.949a2.833 2.833 0 0 1-2.139-.893a3.206 3.206 0 0 1-.833-2.285a2.959 2.959 0 0 1 .415-1.577a5 5 0 0 1 1.791-1.625a23.876 23.876 0 0 1 3.617-1.588v-.074a2.905 2.905 0 0 0-.383-1.833a1.325 1.325 0 0 0-1.075-.412a1.155 1.155 0 0 0-.816.26a.687.687 0 0 0-.277.536l.023.646a1.62 1.62 0 0 1-.4 1.158a1.481 1.481 0 0 1-2.1-.019a1.634 1.634 0 0 1-.391-1.134a2.8 2.8 0 0 1 1.182-2.177a4.813 4.813 0 0 1 3.125-.932a5.381 5.381 0 0 1 2.508.524a2.628 2.628 0 0 1 1.213 1.346a6.391 6.391 0 0 1 .244 2.2v3.55a14.665 14.665 0 0 0 .051 1.749a.661.661 0 0 0 .054.2c.085-.078.284-.225.864-.806l.819-.828v1.967l-.1.128c-.958 1.283-1.883 1.907-2.83 1.907a1.6 1.6 0 0 1-1.257-.557a1.788 1.788 0 0 1-.358-.74a9.688 9.688 0 0 1-1.433.977a3.579 3.579 0 0 1-1.514.332\"/></svg>\n```\n\n在 `layout/_partial/widgets/toc.ejs` 中，在想要的位置，如 `el += editBtn` 后，添加以下代码：\n\n```\n el += `<a class=\"toggle-font\" onclick=\"toggleLXGWFont()\">`\n\n  el += icon('default:font')\n\n  el += `<span>${__('btn.font')}</span>`\n\n  el += `</a>`\n```\n\n为了使这个图标随主题明暗自动变化，在自定义 css 文件中加入：\n\n```\n/* 设置图标颜色 *//* 白天模式，默认填充色为黑色 */.theme-icon {  fill: black;}\n/* 暗黑模式，填充色为白色 */@media (prefers-color-scheme: dark) {  .theme-icon {      fill: white;  }}\n```\n\n## 随机文章跳转[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#随机文章跳转)\n\n\n\nNOTE\n\n要在主题文件夹里新增文件，不影响主题后续更新![blobcat:ablobcatattentionreverse](Hexo-Stellar主题装修二/ablobcatattentionreverse-1749438579839-1054.png)\n\n终于来到了我最爱的生活哲学！代码参考了[这个链接](https://blog.zhheo.com/p/c116857c.html)。创建 `themes/stellar/scripts/helpers/random.js` ，增加以下代码：\n\n```\nhexo.extend.filter.register('after_render:html', function (data) {\n\n  const posts = []\n\n  hexo.locals.get('posts').map(function (post) {\n\n    if (post.random !== false) posts.push(post.path)\n\n  })\n\n  data += `<script>var posts=${JSON.stringify(posts)};function toRandomPost(){ window.pjax ? pjax.loadUrl('/'+posts[Math.floor(Math.random()*posts.length)]) : window.open('/'+posts[Math.floor(Math.random()*posts.length)], \"_self\"); };</script>`\n\n  return data\n\n})\n```\n\n在主题配置文件引入 `_config.stellar.yml`，inject的 head里添加\n\n```\n- <script src=\"/js/random.js\"></script> # 随机文章\n```\n\n然后在需要调用的位置执行 `toRandomPost()` 函数即可。比如任意 dom 添加 `onclick=\"toRandomPost()\"`\n\n\n\n好吧，我知道你肯定没听懂\n\n反正我当时看完是一脸懵圈 不过没关系，我最后还是琢磨明白啦，下面就有填写示例，接着看就好![blobcat:ablobcatattentionreverse](Hexo-Stellar主题装修二/ablobcatattentionreverse-1749438579839-1054.png)\n\n添加一个按钮:\n\n随机阅读一篇文章\n\n\n\n代码：`<button onclick=\"toRandomPost()\">随机阅读一篇文章</button>`\n\n或者添加一个链接: [随机阅读一篇文章](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#)\n\n代码：`<a href=\"#\" onclick=\"toRandomPost(); return false;\">随机阅读一篇文章</a>`\n\n在下一节还有应用示例，请往下看——\n\n## 超链接样式调整[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#超链接样式调整)\n\n文章内链接：加粗并下移下划线。显示效果：\n\n\n\n![超链接样式](Hexo-Stellar主题装修二/CleanShot 2024-04-17 at 22.18.12@2x-1749438579839-1056.webp)超链接样式\n\n\n\n在自定义 css 文件里加入：\n\n```\n/* 文章内链接 */\n\nli:not([class]) a:not([class]),\n\np:not([class]) a:not([class]),\n\ntable a:not([class]) {\n\n  /*color: var(--theme-link);*/\n\n  padding-bottom: 3px; /* 增加底部padding */\n\n  padding-right: 1px;\n\n  margin-right: 2px;\n\n  background: linear-gradient(0, var(--theme-link), var(--theme-link)) no-repeat center bottom / 100% 2px;\n\n}\n```\n\n测试链接：[关于](https://www.flyalready.com/about/)\n\n新样式！为链接使用荧光笔下划线效果，这个和上面的样式二选一就好。显示效果：\n\n![img](Hexo-Stellar主题装修二/CleanShot 2024-04-20 at 19.32.04@2x-1749438579839-1058.webp)\n\n```\n/* 文章内链接：为链接使用荧光笔下划线效果 */\n\nli:not([class]) a:not([class]),\n\np:not([class]) a:not([class]),\n\ntable a:not([class]) {\n\n  padding-bottom: 0.1rem;\n\n  background: linear-gradient(0, var(--theme-link-opa), var(--theme-link-opa)) no-repeat center bottom / 100% 40%;\n\n}\n```\n\n## 选中文本：使用超链接高亮的背景色[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#选中文本使用超链接高亮的背景色)\n\n在自定义 css 文件里加入：\n\n```\n/* 选中文本：使用超链接高亮的背景色 */\n\n::selection {\n\n  background: var(--theme-link-opa);\n\n}\n```\n\n## Twikoo 评论样式优化[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#twikoo-评论样式优化)\n\n\n\nTitle\n\n样式优化需要改主题文件，但下面的**给评论输入框加入提示**是纯 css 实现的不需要改\n\n显示效果：\n\n![img](Hexo-Stellar主题装修二/CleanShot 2024-04-17 at 02.13.48@2x-1749438579839-1060.webp)\n\n只截了部分，整体效果可在评论区查看。代码全部抄自星日语大佬的[这条 commit](https://github.com/xaoxuu/hexo-theme-stellar/commit/3666dbd50a0ddf46a87635f51c9a08829ba41f9b#diff-b3cf1ac0cff1eefdab68933ee5005affaeb5b0781c8d63116a2ddecaf5ab00a1)。评论区表情显示优化可参考[这条 commit](https://github.com/xaoxuu/hexo-theme-stellar/commit/4567ceb8b883e142c3c4e7d84699b80676679e0c)。\n\n### 给评论输入框加入提示[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#给评论输入框加入提示)\n\n显示效果：\n\n![img](Hexo-Stellar主题装修二/CleanShot 2024-04-17 at 02.17.46@2x-1749438579839-1062.webp)\n\n原始代码忘记在哪里抄的了，我就修改了最后 3 行……在自定义 css 文件中加入以下内容：\n\n```\n/* 设置文字内容 :nth-child(1)的作用是选择第几个 */.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(1):before {    content: '输入QQ号会自动获取昵称和头像🐧';}\n.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(2):before {    content: '收到回复将会发送到您的邮箱📧';}\n.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(3):before {    content: '填写后可以点击昵称访问您的网站🔗';}\n/* 当用户点击输入框时显示 */.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::before,.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::after {    display: block;}\n/* 主内容区 */.el-input.el-input--small.el-input-group.el-input-group--prepend::before {    /* 先隐藏起来 */    display: none;    /* 绝对定位 */    position: absolute;    /* 向上移动60像素 */    top: -60px;    /* 文字强制不换行，防止left:50%导致的文字换行 */    white-space: nowrap;    /* 圆角 */    border-radius: 10px;    /* 距离左边50% */    left: 50%;    /* 然后再向左边挪动自身的一半，即可实现居中 */    transform: translate(-50%);    /* 填充 */    padding: 14px 18px;    background: #444;    color: #fff;}\n/* 小角标 */.el-input.el-input--small.el-input-group.el-input-group--prepend::after {    display: none;    content: '';    position: absolute;    /* 内容大小（宽高）为0且边框大小不为0的情况下，每一条边（4个边）都是一个三角形，组成一个正方形。    我们先将所有边框透明，再给其中的一条边添加颜色就可以实现小三角图标 */    border: 12px solid transparent;    border-top-color: #444;    left: 50%;    transform: translate(-50%, -48px);}\n.el-input.el-input--small.el-input-group.el-input-group--prepend::before, .el-input.el-input--small.el-input-group.el-input-group--prepend::after {    z-index: 9999; /* 提高层级，确保内容显示在最前 */}\n```\n\n## Stellar & Twikoo 表情包补全计划[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#stellar--twikoo-表情包补全计划)\n\n### blobcat[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#blobcat)\n\n这个系列表情真的不要太可爱，一眼爱上\n\n![blobcat:ablobcatattentionreverse](Hexo-Stellar主题装修二/ablobcatattentionreverse-1749438579839-1054.png) ![blobcat:ablobcatwave](Hexo-Stellar主题装修二/ablobcatwave-1749438579839-1064.png) ![blobcat:blobcatpresentred](Hexo-Stellar主题装修二/blobcatpresentred-1749438579839-1066.png)![blobcat:ablobcatknitsweats](Hexo-Stellar主题装修二/ablobcatknitsweats-1749438579839-1052.png)\n\n光在博客正文里用怎么够，当然还要在评论区里也安排上![blobcat:ablobcatrainbow](Hexo-Stellar主题装修二/ablobcatrainbow-1749438579839-1068.png)\n\nblobcat 表情主要来自[星日语](https://weekdaycare.cn/posts/emoji-blob/)佬。本人在学会自定义后收集癖大发，一口气制作了几个系列的表情，往现有的 blobcat里也加了几个比较好看的 ![blobcat:A_BlobCat_Code](Hexo-Stellar主题装修二/A_BlobCat_Code-1749438579839-1070.png)\n\nStellar 引入：`blobcatplus:https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/{name}.png`\n\nTwikoo 使用链接：\n\n```\nhttps://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/blobcatplus.json\n```\n\n| 表情                                                         | 索引                     | 表情                                                         | 索引                | 表情                                                         | 索引               |\n| ------------------------------------------------------------ | ------------------------ | ------------------------------------------------------------ | ------------------- | ------------------------------------------------------------ | ------------------ |\n| ![blobcat:ablobcatheart](Hexo-Stellar主题装修二/ablobcatheart-1749438579839-1042.png) | ablobcatheart            | ![blobcat:ablobcatheartbroken](Hexo-Stellar主题装修二/ablobcatheartbroken-1749438579839-1072.png) | ablobcatheartbroken | ![blobcat:blobcatheart](Hexo-Stellar主题装修二/blobcatheart-1749438579839-1074.png) | blobcatheart       |\n| ![blobcat:blobcatheartpride](Hexo-Stellar主题装修二/blobcatheartpride-1749438579839-1076.png) | blobcatheartpride        | ![blobcat:blobcatlove](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatlove.png) | blobcatlove         | ![blobcat:blobcatkissheart](Hexo-Stellar主题装修二/blobcatkissheart-1749438579839-1080.png) | blobcatkissheart   |\n| ![blobcat:blobcatsnuggle](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatsnuggle.png) | blobcatsnuggle           | ![blobcat:comfyuee](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/comfyuee.png) | comfyuee            | ![blobcat:comfyslep](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/comfyslep.png) | comfyslep          |\n| ![blobcat:blobcatcomfysweat](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatcomfysweat.png) | blobcatcomfysweat        | ![blobcat:blobcatcomftears](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatcomftears.png) | blobcatcomftears    | ![blobcat:blobcatfacepalm](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatfacepalm.png) | blobcatfacepalm    |\n| ![blobcat:blobcat0_0](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcat0_0.png) | blobcat0_0               | ![blobcat:blobcatangry](Hexo-Stellar主题装修二/blobcatangry-1749438579840-1096.png) | blobcatangry        | ![blobcat:blobbanhammerr](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobbanhammerr.png) | blobbanhammerr     |\n| ![blobcat:blobcatt](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatt.png) | blobcatt                 | ![blobcat:blobcatblush](Hexo-Stellar主题装修二/blobcatblush-1749438579840-1102.png) | blobcatblush        | ![blobcat:blobcatcoffee](Hexo-Stellar主题装修二/blobcatcoffee-1749438579840-1104.png) | blobcatcoffee      |\n| ![blobcat:blobcatcry](Hexo-Stellar主题装修二/blobcatcry-1749438579840-1106.png) | blobcatcry               | ![blobcat:blobcatdead](Hexo-Stellar主题装修二/blobcatdead-1749438579840-1108.png) | blobcatdead         | ![blobcat:blobcatdied](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatdied.png) | blobcatdied        |\n| ![blobcat:blobcatdisturbed](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatdisturbed.png) | blobcatdisturbed         | ![blobcat:blobcatfearful](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatfearful.png) | blobcatfearful      | ![blobcat:blobcatfingerguns](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatfingerguns.png) | blobcatfingerguns  |\n| ![blobcat:blobcatflip](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatflip.png) | blobcatflip              | ![blobcat:blobcatflower](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatflower.png) | blobcatflower       | ![blobcat:blobcatgay](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatgay.png) | blobcatgay         |\n| ![blobcat:blobcatgooglycry](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatgooglycry.png) | blobcatgooglycry         | ![blobcat:blobcatneutral](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatneutral.png) | blobcatneutral      | ![blobcat:blobcatopenmouth](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatopenmouth.png) | blobcatopenmouth   |\n| ![blobcat:blobcatsadreach](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatsadreach.png) | blobcatsadreach          | ![blobcat:blobcatscared](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatscared.png) | blobcatscared       | ![blobcat:blobcatnomblobcat](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatnomblobcat.png) | blobcatnomblobcat  |\n| ![blobcat:blobcatpresentred](Hexo-Stellar主题装修二/blobcatpresentred-1749438579839-1066.png) | blobcatpresentred        | ![blobcat:blobcatread](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatread.png) | blobcatread         | ![blobcat:blobcatsipsweat](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatsipsweat.png) | blobcatsipsweat    |\n| ![blobcat:blobcatsnapped](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatsnapped.png) | blobcatsnapped           | ![blobcat:blobcatthink](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatthink.png) | blobcatthink        | ![blobcat:blobcattriumph](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcattriumph.png) | blobcattriumph     |\n| ![blobcat:blobcatumm](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatumm.png) | blobcatumm               | ![blobcat:blobcatverified](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatverified.png) | blobcatverified     | ![blobcat:blobcatbox](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatbox.png) | blobcatbox         |\n| ![blobcat:blobcatcaged](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatcaged.png) | blobcatcaged             | ![blobcat:blobcatgooglytrash](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatgooglytrash.png) | blobcatgooglytrash  | ![blobcat:blobcatheadphones](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatheadphones.png) | blobcatheadphones  |\n| ![blobcat:blobcathighfive](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcathighfive.png) | blobcathighfive          | ![blobcat:blobcatmelt](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatmelt.png) | blobcatmelt         | ![blobcat:blobcatmeltthumb](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatmeltthumb.png) | blobcatmeltthumb   |\n| ![blobcat:blobcatnotlikethis](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatnotlikethis.png) | blobcatnotlikethis       | ![blobcat:blobcatsaitama](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatsaitama.png) | blobcatsaitama      | ![blobcat:blobcatyandere](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatyandere.png) | blobcatyandere     |\n| ![blobcat:blobcatpeek2](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatpeek2.png) | blobcatpeek2             | ![blobcat:blobcatpeekaboo](Hexo-Stellar主题装修二/blobcatpeekaboo-1749438579838-1032.png) | blobcatpeekaboo     | ![blobcat:blobcatphoto](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatphoto.png) | blobcatphoto       |\n| ![blobcat:ablobcatattentionreverse](Hexo-Stellar主题装修二/ablobcatattentionreverse-1749438579839-1054.png) | ablobcatattentionreverse | ![blobcat:ablobcatreachrev](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatreachrev.png) | ablobcatreachrev    | ![blobcat:ablobcatwave](Hexo-Stellar主题装修二/ablobcatwave-1749438579839-1064.png) | ablobcatwave       |\n| ![blobcat:blobcatalt](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatalt.png) | blobcatalt               | ![blobcat:blobcatpolice](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatpolice.png) | blobcatpolice       | ![blobcat:blobcatshocked](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatshocked.png) | blobcatshocked     |\n| ![blobcat:ablobcatrainbow](Hexo-Stellar主题装修二/ablobcatrainbow-1749438579839-1068.png) | ablobcatrainbow          |                                                              |                     |                                                              |                    |\n| ![blobcat:A_BlobCat_REEEE](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/A_BlobCat_REEEE.png) | A_BlobCat_REEEE          | ![blobcat:A_BlobCat_Code](Hexo-Stellar主题装修二/A_BlobCat_Code-1749438579839-1070.png) | A_BlobCat_Code      | ![blobcat:ablobcatknitsweats](Hexo-Stellar主题装修二/ablobcatknitsweats-1749438579839-1052.png) | ablobcatknitsweats |\n| ![blobcat:A_BlobCat_Nervous](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/A_BlobCat_Nervous.png) | A_BlobCat_Nervous        | ![blobcat:blobcat-aww](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcat-aww.png) | blobcat-aww         | ![blobcat:ablobcatcry](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatcry.png) | ablobcatcry        |\n| ![blobcat:ablobcatdead](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatdead.png) | ablobcatdead             |                                                              |                     |                                                              |                    |\n\n### azuki[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#azuki)\n\n![azuki:038](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/038.png)![azuki:039](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/039.png)![azuki:039](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/039.png)![azuki:039](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/039.png)![azuki:039](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/039.png)![azuki:040](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/040.png)\n\nStellar 引入：`azuki: https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/{name}.png`\n\nTwikoo 使用链接：\n\n```\nhttps://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/xiaodouni.json\n```\n\n| 表情                                                         | 索引 | 表情                                                         | 索引 | 表情                                                         | 索引 |\n| ------------------------------------------------------------ | ---- | ------------------------------------------------------------ | ---- | ------------------------------------------------------------ | ---- |\n| ![azuki:001](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/001.png) | 001  | ![azuki:015](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/015.png) | 015  | ![azuki:029](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/029.png) | 029  |\n| ![azuki:002](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/002.png) | 002  | ![azuki:016](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/016.png) | 016  | ![azuki:030](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/030.png) | 030  |\n| ![azuki:003](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/003.png) | 003  | ![azuki:017](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/017.png) | 017  | ![azuki:031](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/031.png) | 031  |\n| ![azuki:004](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/004.png) | 004  | ![azuki:018](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/018.png) | 018  | ![azuki:032](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/032.png) | 032  |\n| ![azuki:005](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/005.png) | 005  | ![azuki:019](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/019.png) | 019  | ![azuki:033](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/033.png) | 033  |\n| ![azuki:006](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/006.png) | 006  | ![azuki:020](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/020.png) | 020  | ![azuki:034](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/034.png) | 034  |\n| ![azuki:007](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/007.png) | 007  | ![azuki:021](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/021.png) | 021  | ![azuki:035](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/035.png) | 035  |\n| ![azuki:008](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/008.png) | 008  | ![azuki:022](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/022.png) | 022  | ![azuki:036](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/036.png) | 036  |\n| ![azuki:009](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/009.png) | 009  | ![azuki:023](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/023.png) | 023  | ![azuki:037](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/037.png) | 037  |\n| ![azuki:010](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/010.png) | 010  | ![azuki:024](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/024.png) | 024  | ![azuki:038](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/038.png) | 038  |\n| ![azuki:011](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/011.png) | 011  | ![azuki:025](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/025.png) | 025  | ![azuki:039](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/039.png) | 039  |\n| ![azuki:012](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/012.png) | 012  | ![azuki:026](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/026.png) | 026  | ![azuki:040](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/040.png) | 040  |\n| ![azuki:013](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/013.png) | 013  | ![azuki:027](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/027.png) | 027  |                                                              |      |\n| ![azuki:014](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/014.png) | 014  | ![azuki:028](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/028.png) | 028  |                                                              |      |\n\n### neko[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#neko)\n\n![neko:038](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/038.png)![neko:039](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/039.png)![neko:040](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/040.png)\n\nStellar 引入：`neko: https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/{name}.png`\n\nTwikoo 使用链接：\n\n```\nhttps://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/neko.json\n```\n\n| 表情                                                         | 索引 | 表情                                                         | 索引 | 表情                                                         | 索引 |\n| ------------------------------------------------------------ | ---- | ------------------------------------------------------------ | ---- | ------------------------------------------------------------ | ---- |\n| ![neko:001](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/001.png) | 001  | ![neko:015](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/015.png) | 015  | ![neko:028](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/028.png) | 028  |\n| ![neko:002](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/002.png) | 002  | ![neko:016](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/016.png) | 016  | ![neko:029](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/029.png) | 029  |\n| ![neko:003](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/003.png) | 003  | ![neko:017](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/017.png) | 017  | ![neko:030](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/030.png) | 030  |\n| ![neko:004](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/004.png) | 004  | ![neko:018](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/018.png) | 018  | ![neko:031](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/031.png) | 031  |\n| ![neko:005](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/005.png) | 005  | ![neko:019](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/019.png) | 019  | ![neko:032](Hexo-Stellar主题装修二/032-1749438579782-1007.png) | 032  |\n| ![neko:006](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/006.png) | 006  | ![neko:020](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/020.png) | 020  | ![neko:033](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/033.png) | 033  |\n| ![neko:007](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/007.png) | 007  | ![neko:021](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/021.png) | 021  | ![neko:034](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/034.png) | 034  |\n| ![neko:008](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/008.png) | 008  | ![neko:022](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/022.png) | 022  | ![neko:035](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/035.png) | 035  |\n| ![neko:009](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/009.png) | 009  | ![neko:023](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/023.png) | 023  | ![neko:036](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/036.png) | 036  |\n| ![neko:010](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/010.png) | 010  | ![neko:024](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/024.png) | 024  | ![neko:037](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/037.png) | 037  |\n| ![neko:011](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/011.png) | 011  | ![neko:025](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/025.png) | 025  | ![neko:038](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/038.png) | 038  |\n| ![neko:012](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/012.png) | 012  | ![neko:026](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/026.png) | 026  | ![neko:039](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/039.png) | 039  |\n| ![neko:013](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/013.png) | 013  | ![neko:027](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/027.png) | 027  |                                                              |      |\n| ![neko:014](https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/014.png) | 014  |                                                              |      |                                                              |      |\n\n### dokomo[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#dokomo)\n\nStellar 引入: `dokomo: https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/{name}.png`\n\nTwikoo 使用链接:\n\n```\nhttps://raw.githubusercontent.com/infinitesum/Twikoo-emoji/main/dokomo/dokomo.json\n```\n\n| 表情                                                         | 索引      | 表情                                                         | 索引      | 表情                                                         | 索引      |\n| ------------------------------------------------------------ | --------- | ------------------------------------------------------------ | --------- | ------------------------------------------------------------ | --------- |\n| ![dokomo:dokomo-1](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-1.png) | dokomo-1  | ![dokomo:dokomo-18](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-18.png) | dokomo-18 | ![dokomo:dokomo-35](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-35.png) | dokomo-35 |\n| ![dokomo:dokomo-2](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-2.png) | dokomo-2  | ![dokomo:dokomo-19](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-19.png) | dokomo-19 | ![dokomo:dokomo-36](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-36.png) | dokomo-36 |\n| ![dokomo:dokomo-3](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-3.png) | dokomo-3  | ![dokomo:dokomo-20](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-20.png) | dokomo-20 | ![dokomo:dokomo-37](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-37.png) | dokomo-37 |\n| ![dokomo:dokomo-4](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-4.png) | dokomo-4  | ![dokomo:dokomo-21](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-21.png) | dokomo-21 | ![dokomo:dokomo-38](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-38.png) | dokomo-38 |\n| ![dokomo:dokomo-5](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-5.png) | dokomo-5  | ![dokomo:dokomo-22](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-22.png) | dokomo-22 | ![dokomo:dokomo-39](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-39.png) | dokomo-39 |\n| ![dokomo:dokomo-6](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-6.png) | dokomo-6  | ![dokomo:dokomo-23](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-23.png) | dokomo-23 | ![dokomo:dokomo-40](Hexo-Stellar主题装修二/dokomo-40-1749438579846-1346.png) | dokomo-40 |\n| ![dokomo:dokomo-7](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-7.png) | dokomo-7  | ![dokomo:dokomo-24](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-24.png) | dokomo-24 | ![dokomo:dokomo-41](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-41.png) | dokomo-41 |\n| ![dokomo:dokomo-8](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-8.png) | dokomo-8  | ![dokomo:dokomo-25](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-25.png) | dokomo-25 | ![dokomo:dokomo-42](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-42.png) | dokomo-42 |\n| ![dokomo:dokomo-9](Hexo-Stellar主题装修二/dokomo-9-1749438579846-1360.png) | dokomo-9  | ![dokomo:dokomo-26](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-26.png) | dokomo-26 | ![dokomo:dokomo-43](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-43.png) | dokomo-43 |\n| ![dokomo:dokomo-10](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-10.png) | dokomo-10 | ![dokomo:dokomo-27](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-27.png) | dokomo-27 | ![dokomo:dokomo-44](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-44.png) | dokomo-44 |\n| ![dokomo:dokomo-11](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-11.png) | dokomo-11 | ![dokomo:dokomo-28](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-28.png) | dokomo-28 | ![dokomo:dokomo-45](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-45.png) | dokomo-45 |\n| ![dokomo:dokomo-12](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-12.png) | dokomo-12 | ![dokomo:dokomo-29](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-29.png) | dokomo-29 | ![dokomo:dokomo-46](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-46.png) | dokomo-46 |\n| ![dokomo:dokomo-13](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-13.png) | dokomo-13 | ![dokomo:dokomo-30](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-30.png) | dokomo-30 | ![dokomo:dokomo-47](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-47.png) | dokomo-47 |\n| ![dokomo:dokomo-14](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-14.png) | dokomo-14 | ![dokomo:dokomo-31](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-31.png) | dokomo-31 | ![dokomo:dokomo-48](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-48.png) | dokomo-48 |\n| ![dokomo:dokomo-15](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-15.png) | dokomo-15 | ![dokomo:dokomo-32](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-32.png) | dokomo-32 | ![dokomo:dokomo-49](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-49.png) | dokomo-49 |\n| ![dokomo:dokomo-16](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-16.png) | dokomo-16 | ![dokomo:dokomo-33](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-33.png) | dokomo-33 |                                                              |           |\n| ![dokomo:dokomo-17](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-17.png) | dokomo-17 | ![dokomo:dokomo-34](https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-34.png) | dokomo-34 |                                                              |           |\n\n## 总字数统计：“发表了x篇文章，共计x字”[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#总字数统计发表了x篇文章共计x字)\n\n需要修改主题文件 ![azuki:038](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/038.png)\n\n\n```\n// 3.left.top: 面包屑导航\n\n  el += `<div class=\"flex-row\" id=\"breadcrumb\">`\n\n    // 首页\n\n    el += `<a class=\"cap breadcrumb\" href=\"${url_for(config.root)}\">${__(\"btn.home\")}</a>`\n\n    if (theme.wiki.tree[page.wiki]) {\n\n      el += partial('breadcrumb/wiki')\n\n    } else if (page.layout == 'post') {\n\n      el += partial('breadcrumb/blog')\n\n    } else {\n\n      el += partial('breadcrumb/page')\n\n    }\n\n  // end 3.left.top\n\n  el += `</div>`\n```\n\n并在后面添加：\n\n```\n // 在这里添加标签代码\n\n  if (page.layout == \"post\" && page.tags && page.tags.length > 0) {\n\n    el += '<div id=\"tag\">'; // 将标签容器的创建移动到条件内部\n\n    el += ' <span>&nbsp标签：</span>';\n\n    el += list_categories(page.tags, {\n\n      class: \"cap breadcrumb\",\n\n      show_count: false,\n\n      separator: '&nbsp; ',\n\n      style: \"none\"\n\n    });\n\n    el += '&nbsp</div>';\n\n  }\n```\n\n## toc 字体大小调整[#](https://www.flyalready.com/site/hexo-stellar-主题装修笔记/#toc-字体大小调整)\n\n需要修改主题文件 ![azuki:038](https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/038.png)\n\n就是把文章目录字体调小了一点点。\n\n在`themes/stellar/source/css/_layout/widgets/toc.styl` 文件中，找到\n\n```\n// 各级缩进样式\n\n.widget-wrapper.toc .toc\n\n  .toc-item\n\n    font-weight: 500\n\n    --fsp: $fsp1\n\n  .toc-item .toc-item\n\n    font-weight: 400\n\n    --fsp: $fsp2\n```\n\n把`--fsp: $fsp1`一行注释掉：\n\n```\n// 各级缩进样式\n\n.widget-wrapper.toc .toc\n\n  .toc-item\n\n    font-weight: 500\n\n    /*--fsp: $fsp1*/\n\n  .toc-item .toc-item\n\n    font-weight: 400\n\n    --fsp: $fsp2\n```\n","slug":"2025/06/theme-design2","published":1,"date":"2025-06-09T05:09:43.384Z","updated":"2025-06-09T05:09:43.388Z","comments":1,"layout":"post","photos":[],"_id":"cmbpzhac10009s2x0hzcg24nm","content":"<h2 id=\"给超长代码块增加滚动条\"><a href=\"#给超长代码块增加滚动条\" class=\"headerlink\" title=\"给超长代码块增加滚动条#\"></a>给超长代码块增加滚动条<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E7%BB%99%E8%B6%85%E9%95%BF%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A2%9E%E5%8A%A0%E6%BB%9A%E5%8A%A8%E6%9D%A1\">#</a></h2><p>首先判断代码块是否过长，如果是，则设置最大高度并开启滚动。</p>\n<p>新建 <code>source/js/adjust-codeblock-height.js</code>，添加以下内容：</p>\n<p>adjust-code-block-height.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.addEventListener(&quot;DOMContentLoaded&quot;, function() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 选择所有的.md-text元素</span><br><span class=\"line\"></span><br><span class=\"line\">    var codeBlocks = document.querySelectorAll(&#x27;.md-text&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 遍历每个.md-text元素</span><br><span class=\"line\"></span><br><span class=\"line\">    codeBlocks.forEach(function(block) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      // 检查是否包含.highlight类的子元素，且父元素高度超过500px</span><br><span class=\"line\"></span><br><span class=\"line\">      var highlightBlocks = block.querySelectorAll(&#x27;.highlight&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">      highlightBlocks.forEach(function(highlightBlock) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (highlightBlock.clientHeight &gt; 800) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          highlightBlock.style.maxHeight = &#x27;300px&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">          highlightBlock.style.overflow = &#x27;auto&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>以上代码代表如果代码框高度超过 800px，则开启折叠，折叠框最大高度为 300px。其中，可自行设置判断阈值 <code>if (highlightBlock.clientHeight &gt; 800) &#123;</code> 以及折叠后最大高度 <code>highlightBlock.style.maxHeight = &#39;300px&#39;;</code>。</p>\n<h2 id=\"雪花特效\"><a href=\"#雪花特效\" class=\"headerlink\" title=\"雪花特效#\"></a>雪花特效<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E9%9B%AA%E8%8A%B1%E7%89%B9%E6%95%88\">#</a></h2><p>代码来自<a href=\"https://mengru.space/?posts/2021/12/%E5%97%96%E5%BE%97%E4%B8%80%E4%B8%8B11%E6%9C%88##%E5%8D%9A%E5%AE%A2%E4%B8%8B%E9%9B%AA%E7%9A%84%E5%B0%8F%E8%84%9A%E6%9C%AC\">这里</a>。我稍微做了一点修改，做成了一个按钮引入到主题中并用 localStorage 记录下雪状态，很简单的代码完美的解决了我的强迫症～</p>\n<h2 id=\"博客已运行x天x小时x分钟\"><a href=\"#博客已运行x天x小时x分钟\" class=\"headerlink\" title=\"博客已运行x天x小时x分钟#\"></a>博客已运行x天x小时x分钟<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E5%8D%9A%E5%AE%A2%E5%B7%B2%E8%BF%90%E8%A1%8Cx%E5%A4%A9x%E5%B0%8F%E6%97%B6x%E5%88%86%E9%92%9F\">#</a></h2><p>在网站页脚部分添加一个“博客已运行 x 天 x 小时 x 分钟”字样，显示效果：</p>\n<p>![勉强运行x天x小时x分钟x秒](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-16 at <a href=\"mailto:&#x32;&#49;&#x2e;&#53;&#49;&#x2e;&#x30;&#55;&#64;&#50;&#120;&#x2d;&#x31;&#55;&#52;&#57;&#52;&#51;&#x38;&#53;&#55;&#x39;&#56;&#x33;&#x38;&#x2d;&#49;&#48;&#x33;&#48;&#46;&#119;&#101;&#x62;&#112;\">21.51.07@2x-1749438579838-1030.webp</a>)勉强运行x天x小时x分钟x秒</p>\n<p>代码抄自<a href=\"https://blog.bxzdyg.cn/p/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CStellar%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/#%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1\">这里</a>，我为了调整样式加了一行代码 <img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatpeekaboo-1749438579838-1032.png\" alt=\"blobcat:blobcatpeekaboo\">。在 <code>_config.stellar.yml</code> 里添加如下代码，其中 <code>&lt;span class=&#39;runtime&#39;&gt;</code> 中的类名 <code>runtime</code> 可自行设置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">footer:</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  content: | # 支持 Markdown 格式</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;span id=&quot;runtime_span&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      function show_runtime() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          window.setTimeout(&quot;show_runtime()&quot;, 1000);</span><br><span class=\"line\"></span><br><span class=\"line\">          X = new Date(&quot;2024/01/01 17:00:00&quot;); // 网站开始运行的日期和时间</span><br><span class=\"line\"></span><br><span class=\"line\">          Y = new Date(); // 当前日期和时间</span><br><span class=\"line\"></span><br><span class=\"line\">          T = (Y.getTime() - X.getTime()); // 网站运行的总毫秒数</span><br><span class=\"line\"></span><br><span class=\"line\">          M = 24 * 60 * 60 * 1000; // 一天的毫秒数</span><br><span class=\"line\"></span><br><span class=\"line\">          a = T / M; // 总天数</span><br><span class=\"line\"></span><br><span class=\"line\">          A = Math.floor(a); // 总天数的整数部分</span><br><span class=\"line\"></span><br><span class=\"line\">          b = (a - A) * 24; // 总小时数</span><br><span class=\"line\"></span><br><span class=\"line\">          B = Math.floor(b); // 总小时数的整数部分</span><br><span class=\"line\"></span><br><span class=\"line\">          c = (b - B) * 60; // 总分钟数</span><br><span class=\"line\"></span><br><span class=\"line\">          C = Math.floor((b - B) * 60); // 总分钟数的整数部分</span><br><span class=\"line\"></span><br><span class=\"line\">          D = Math.floor((c - C) * 60); // 总秒数</span><br><span class=\"line\"></span><br><span class=\"line\">          runtime_span.innerHTML = &quot;⏱️勉强运行 &lt;span class=&#x27;runtime&#x27;&gt;&quot; + A + &quot;天&quot; + B + &quot;小时&quot; + C + &quot;分&quot; + D + &quot;秒&lt;/span&gt;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      show_runtime();</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>再在自定义的 css 文件里添加以下代码，其中 color 可设置为主题色 <code>var(--theme-link)</code> 或自行设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.runtime</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    font-weight: bold;</span><br><span class=\"line\"></span><br><span class=\"line\">    color: #7F84A7;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"页脚增加猫猫图片\"><a href=\"#页脚增加猫猫图片\" class=\"headerlink\" title=\"页脚增加猫猫图片#\"></a>页脚增加猫猫图片<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E9%A1%B5%E8%84%9A%E5%A2%9E%E5%8A%A0%E7%8C%AB%E7%8C%AB%E5%9B%BE%E7%89%87\">#</a></h2><p>显示效果：</p>\n<p>![img](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-17 at <a href=\"mailto:&#x31;&#x39;&#46;&#x30;&#x39;&#46;&#52;&#52;&#64;&#50;&#120;&#45;&#x31;&#55;&#x34;&#x39;&#52;&#x33;&#x38;&#x35;&#x37;&#57;&#x38;&#51;&#x38;&#45;&#x31;&#x30;&#51;&#52;&#x2e;&#x77;&#101;&#x62;&#112;\">19.09.44@2x-1749438579838-1034.webp</a>)</p>\n<p>首先，如果是使用本地图片，将图片上传到主题的资源文件夹，比如 <code>source/asset/posts/keyboard.png</code></p>\n<p>然后在主题配置文件的 <code>_config.stellar.yml</code> 中添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">footer:</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  content: | # 支持 Markdown 格式</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;img src=&quot;/你的/图片/路径.png&quot; alt=&quot;描述文字&quot; style=&quot;float: right; width: 60px; margin-left: 20px;&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>float: right</code> 限定图片右对齐，<code>width:60px</code> 限制图片大小，可自行调整。</p>\n<h2 id=\"外部链接后面显示图标\"><a href=\"#外部链接后面显示图标\" class=\"headerlink\" title=\"外部链接后面显示图标#\"></a>外部链接后面显示图标<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E5%A4%96%E9%83%A8%E9%93%BE%E6%8E%A5%E5%90%8E%E9%9D%A2%E6%98%BE%E7%A4%BA%E5%9B%BE%E6%A0%87\">#</a></h2><p>显示效果：</p>\n<p>![外部链接图标](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-16 at <a href=\"mailto:&#50;&#x32;&#46;&#x30;&#57;&#46;&#51;&#x38;&#64;&#x32;&#x78;&#45;&#x31;&#x37;&#52;&#57;&#x34;&#x33;&#56;&#x35;&#x37;&#57;&#x38;&#x33;&#x38;&#45;&#49;&#x30;&#51;&#x38;&#46;&#119;&#x65;&#x62;&#x70;\">22.09.38@2x-1749438579838-1038.webp</a>)外部链接图标</p>\n<p>方法一：</p>\n<p>WARNING</p>\n<p>老方法依赖 cheerio 模块，可行，但似乎会带来一些网站加载过慢的问题，我现在已经开心地转用新方法了，把老方法摆在这里全当（水）记（字）录（数）。</p>\n<p>新建 <code>themes/stellar/scripts/filters/link-icon.js</code> 文件，增加以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用 cheerio 模块在文章中的外部链接后添加一个小图标：npm i cheerio --savehexo.extend.filter.register(&#x27;after_render:html&#x27;, function(html, data) &#123;    const cheerio = require(&#x27;cheerio&#x27;);    const $ = cheerio.load(html, &#123;decodeEntities: false&#125;);</span><br><span class=\"line\">    // 只选择&lt;article class=&quot;md-text content&quot;&gt;元素内的&lt;a&gt;标签    $(&#x27;article.md-text.content a, footer.page-footer.footnote a&#x27;).each(function() &#123;      const link = $(this);      const href = link.attr(&#x27;href&#x27;);    //排除一些特殊的链接    if (!link.parents(&#x27;div.tag-plugin.users-wrap&#x27;).length &amp;&amp; !link.parents(&#x27;div.tag-plugin.sites-wrap&#x27;).length &amp;&amp; !link.parent(&#x27;div.tag-plugin.ghcard&#x27;).length &amp;&amp; !link.parents(&#x27;div.tag-plugin.link.dis-select&#x27;).length &amp;&amp; !link.parents(&#x27;div.tag-plugin.colorful.note&#x27;).length &amp;&amp; !link.parents(&#x27;div.social-wrap.dis-select&#x27;).length) &#123;</span><br><span class=\"line\">      // 确保链接的 href 属性存在，并检查其是否以 &#x27;http&#x27; 或 &#x27;/&#x27; 开头      if (href &amp;&amp; (href.startsWith(&#x27;http&#x27;) || href.startsWith(&#x27;/&#x27;))) &#123;        link.html(link.html() + ` &lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;svg width=&quot;.7em&quot; height=&quot;.7em&quot; viewBox=&quot;0 0 21 21&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z&quot; fill=&quot;currentColor&quot; /&gt;&lt;path d=&quot;M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z&quot; fill=&quot;currentColor&quot;&gt;&lt;/svg&gt;&lt;/span&gt;`);        //link.attr(&#x27;target&#x27;, &#x27;_blank&#x27;); // 可选：确保链接在新标签页打开      &#125;    &#125;    &#125;);</span><br><span class=\"line\">    return $.html();  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>方法二：</p>\n<p>TIP</p>\n<p>用老方法配置完我总觉得使用 Cheerio 模块后会导致网站加载过慢，就又优化了一下。询问 ChatGPT 得知可以考虑不使用 Node.js 的服务器端处理，而是使用纯前端的方法来达到同样的效果，通过在客户端 JavaScript 中添加代码来实现类似的功能，而不是在 Hexo 的后端渲染过程中处理。（好了，可以卸载 cheerio 了）</p>\n<p>下面的这段代码可以在页面加载完成后运行，它会查找指定元素中的链接，并在这些链接后添加一个图标。这种方法的好处是，它不需要服务端的处理，所有操作都在用户的浏览器内完成，可以减少服务器负担，并且避免可能因服务器端渲染引起的加载问题。此外，这种方法也提供了更好的用户体验，因为它不会延迟页面内容的显示。</p>\n<p>新建<code>source/js/link-icon.js</code> 文件，填入以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.addEventListener(&#x27;DOMContentLoaded&#x27;, function () &#123;    console.log(&#x27;Document is ready.&#x27;);</span><br><span class=\"line\">    const links = document.querySelectorAll(&#x27;article.md-text.content a, footer.page-footer.footnote a&#x27;);    console.log(&#x27;Links found:&#x27;, links.length);</span><br><span class=\"line\">    links.forEach(function(link) &#123;        console.log(&#x27;Processing link:&#x27;, link.href);</span><br><span class=\"line\">        const parentClasses = [&#x27;tag-plugin.users-wrap&#x27;, &#x27;tag-plugin.sites-wrap&#x27;, &#x27;tag-plugin.ghcard&#x27;, &#x27;tag-plugin.link.dis-select&#x27;, &#x27;tag-plugin.colorful.note&#x27;, &#x27;social-wrap.dis-select&#x27;];        let skip = false;</span><br><span class=\"line\">        parentClasses.forEach(pc =&gt; &#123;            if (link.closest(`div.$&#123;pc&#125;`)) &#123;                skip = true;                console.log(&#x27;Skipping link due to parent class:&#x27;, pc);            &#125;        &#125;);</span><br><span class=\"line\">        if (!skip) &#123;            const href = link.getAttribute(&#x27;href&#x27;);            console.log(&#x27;Link href:&#x27;, href);</span><br><span class=\"line\">            if (href &amp;&amp; (href.startsWith(&#x27;http&#x27;) || href.startsWith(&#x27;/&#x27;))) &#123;                link.innerHTML += ` &lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;svg width=&quot;.7em&quot; height=&quot;.7em&quot; viewBox=&quot;0 0 21 21&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z&quot; fill=&quot;currentColor&quot; /&gt;&lt;path d=&quot;M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z&quot; fill=&quot;currentColor&quot;&gt;&lt;/svg&gt;&lt;/span&gt;`;                console.log(&#x27;Icon added to link:&#x27;, link.innerHTML);            &#125;        &#125;    &#125;);&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这里做了两个筛选：</p>\n<ol>\n<li><code>const parentClasses = [&#39;tag-plugin.users-wrap&#39;, &#39;tag-plugin.sites-wrap&#39;, &#39;tag-plugin.ghcard&#39;, &#39;tag-plugin.link.dis-select&#39;, &#39;tag-plugin.colorful.note&#39;, &#39;social-wrap.dis-select&#39;];</code> 是被排除的类，可自行增减；</li>\n<li><code>if (href &amp;&amp; (href.startsWith(&#39;http&#39;) || href.startsWith(&#39;/&#39;)))</code> 判断链接是否以 <code>http</code> 或 <code>/</code> 开头，如果不想给站内链接添加图标的话可以把后面的筛选条件去掉。</li>\n</ol>\n<p>然后在主题文件 <code>_config.stellar.yml</code> 中引入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inject:</span><br><span class=\"line\"></span><br><span class=\"line\">  head:</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">    - &lt;script src=&quot;/js/link-icon.js&quot;&gt;&lt;/script&gt; # 链接图标</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"增加参与讨论按钮\"><a href=\"#增加参与讨论按钮\" class=\"headerlink\" title=\"增加参与讨论按钮#\"></a>增加参与讨论按钮<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E5%A2%9E%E5%8A%A0%E5%8F%82%E4%B8%8E%E8%AE%A8%E8%AE%BA%E6%8C%89%E9%92%AE\">#</a></h2><p>代码抄自<a href=\"https://weekdaycare.cn/\">星日语</a>，最新主题已自带此功能。</p>\n<h2 id=\"适配-Obsidian-Callouts-标注块语法\"><a href=\"#适配-Obsidian-Callouts-标注块语法\" class=\"headerlink\" title=\"适配 Obsidian Callouts 标注块语法#\"></a>适配 Obsidian Callouts 标注块语法<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E9%80%82%E9%85%8D-obsidian-callouts-%E6%A0%87%E6%B3%A8%E5%9D%97%E8%AF%AD%E6%B3%95\">#</a></h2><p>显示效果：</p>\n<p>![img](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-16 at <a href=\"mailto:&#50;&#50;&#46;&#50;&#x33;&#x2e;&#53;&#49;&#x40;&#x32;&#x78;&#x2d;&#49;&#55;&#52;&#57;&#52;&#51;&#56;&#53;&#x37;&#57;&#56;&#x33;&#x38;&#45;&#49;&#x30;&#x33;&#54;&#x2e;&#119;&#101;&#98;&#x70;\">22.23.51@2x-1749438579838-1036.webp</a>)</p>\n<p>暗黑模式下的显示效果：</p>\n<p>![img](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-16 at <a href=\"mailto:&#x32;&#50;&#x2e;&#50;&#52;&#x2e;&#x31;&#x39;&#64;&#50;&#120;&#45;&#x31;&#55;&#52;&#57;&#52;&#x33;&#56;&#x35;&#55;&#x39;&#x38;&#x33;&#57;&#x2d;&#49;&#x30;&#x34;&#48;&#46;&#x77;&#x65;&#98;&#112;\">22.24.19@2x-1749438579839-1040.webp</a>)</p>\n<p>参考了 <a href=\"https://uuanqin.top/p/d4bc55f2/index.html\">Hexo 博客适配 Obsidian 新语法</a>，基础的设置请参考此链接。我暂时用不上其他功能，就把 callout 的样式搬来并做了一些修改。我个人还挺喜欢这个 callout 样式，比 quote 要好看而且添加也很方便，主要是可以和 Obsidian 打通，嘿嘿。</p>\n<h3 id=\"样式修改\"><a href=\"#样式修改\" class=\"headerlink\" title=\"样式修改#\"></a>样式修改<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9\">#</a></h3><p>原版的 callouts 标注块样式间距太大，我在此基础上改了 callout_blocks_common.css（不是很懂，写得很烂……但是能用）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:root&#123;--callout-note:68,138,255;--callout-abstract:0,176,255;--callout-info:0,184,212;--callout-tip:0,191,165;--callout-success:8,185,78;--callout-question:224,172,0;--callout-warning:255,145,0;--callout-failure:255,82,82;--callout-danger:255,23,68;--callout-bug:245,0,87;--callout-example:124,77,255;--callout-quote:158,158,158;--callout-radius:6px;--callout-border-opacity:0.5;--callout-title-bg-opacity:0.08&#125;.callout-fold:before&#123;align-self:center;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;16&quot; height=&quot;16&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;chevron-down&quot;&gt;&lt;path d=&quot;m6 9 6 6 6-6&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.callout-fold&#123;display:flex;transform:rotate(-90deg);transition:.5s cubic-bezier(.075,.82,.165,1)&#125;.custom-callout[open]&gt;summary&gt;.callout-fold&#123;transform:rotate(0deg)&#125;.custom-callout&gt;summary&#123;border-top-left-radius:var(--callout-radius);border-top-right-radius:var(--callout-radius);cursor:pointer;margin:0;padding:0.5rem 1rem&#125;.custom-callout&gt;summary::marker&#123;content:&quot;&quot;&#125;.custom-callout&gt;summary:before&#123;margin-right:.5rem&#125;.custom-callout&gt;summary::-webkit-details-marker&#123;display:none&#125;.callout-title&#123;--fsp: calc(17px - 1px);font-size: var(--fsp);display:flex;justify-content:space-between;font-weight:bold;&#125;.custom-callout&gt;.callout-body&#123;background:transparent!important;border-left:none;margin:0!important;padding:.3rem 1rem;position:relative&#125;</span><br><span class=\"line\">.custom-callout&gt;.callout-body&gt;p&#123;--fsp: calc(17px - 1px);font-size: var(--fsp);margin:8px 0&#125;.custom-callout&gt;.callout-body&gt;pre&#123;margin:1.25rem -1rem&#125;.custom-callout&gt;.callout-body&gt;pre:first-child&#123;margin-top:-.75rem&#125;.custom-callout&gt;.callout-body&gt;pre:last-child&#123;margin-bottom:-.75rem&#125;</span><br><span class=\"line\">.custom-callout.note,.custom-callout.seealso&#123;border-color:rgba(var(--callout-note),var(--callout-border-opacity))&#125;.custom-callout.note&gt;summary,.custom-callout.seealso&gt;summary&#123;    background-color:rgba(var(--callout-note),var(--callout-title-bg-opacity));    color:rgba(var(var(--callout-note)))&#125;</span><br><span class=\"line\">.custom-callout.abstract,.custom-callout.summary,.custom-callout.tldr&#123;border-color:rgba(var(--callout-abstract),var(--callout-border-opacity))&#125;.custom-callout.abstract&gt;summary,.custom-callout.summary&gt;summary,.custom-callout.tldr&gt;summary&#123;    background-color:rgba(var(--callout-abstract),var(--callout-title-bg-opacity));    color:rgba(var(--callout-abstract))&#125;</span><br><span class=\"line\">.custom-callout.info,.custom-callout.todo&#123;border-color:rgba(var(--callout-info),var(--callout-border-opacity))&#125;.custom-callout.info&gt;summary,.custom-callout.todo&gt;summary&#123;    background-color:rgba(var(--callout-info),var(--callout-title-bg-opacity));    color:rgba(var(--callout-info))&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.custom-callout.hint,.custom-callout.important,.custom-callout.tip&#123;border-color:rgba(var(--callout-tip),var(--callout-border-opacity))&#125;.custom-callout.hint&gt;summary,.custom-callout.important&gt;summary,.custom-callout.tip&gt;summary&#123;    background-color:rgba(var(--callout-tip),var(--callout-title-bg-opacity));    color:rgba(var(--callout-tip))&#125;</span><br><span class=\"line\">.custom-callout.check,.custom-callout.done,.custom-callout.success&#123;border-color:rgba(var(--callout-success),var(--callout-border-opacity))&#125;.custom-callout.check&gt;summary,.custom-callout.done&gt;summary,.custom-callout.success&gt;summary&#123;    background-color:rgba(var(--callout-success),var(--callout-title-bg-opacity));    color:rgba(var(--callout-success))&#125;</span><br><span class=\"line\">.custom-callout.faq,.custom-callout.help,.custom-callout.question&#123;border-color:rgba(var(--callout-question),var(--callout-border-opacity))&#125;.custom-callout.faq&gt;summary,.custom-callout.help&gt;summary,.custom-callout.question&gt;summary&#123;    background-color:rgba(var(--callout-question),var(--callout-title-bg-opacity));    color:rgba(var(--callout-question))&#125;</span><br><span class=\"line\">.custom-callout.attention,.custom-callout.caution,.custom-callout.warning&#123;border-color:rgba(var(--callout-warning),var(--callout-border-opacity))&#125;.custom-callout.attention&gt;summary,.custom-callout.caution&gt;summary,.custom-callout.warning&gt;summary&#123;    background-color:rgba(var(--callout-warning),var(--callout-title-bg-opacity));    color:rgba(var(--callout-warning))&#125;</span><br><span class=\"line\">.custom-callout.fail,.custom-callout.failure,.custom-callout.missing&#123;border-color:rgba(var(--callout-failure),var(--callout-border-opacity))&#125;.custom-callout.fail&gt;summary,.custom-callout.failure&gt;summary,.custom-callout.missing&gt;summary&#123;    background-color:rgba(var(--callout-failure),var(--callout-title-bg-opacity));    color:rgba(var(--callout-failure))&#125;</span><br><span class=\"line\">.custom-callout.danger,.custom-callout.error&#123;border-color:rgba(var(--callout-danger),var(--callout-border-opacity))&#125;.custom-callout.danger&gt;summary,.custom-callout.error&gt;summary&#123;    background-color:rgba(var(--callout-danger),var(--callout-title-bg-opacity));    color:rgba(var(--callout-danger))&#125;</span><br><span class=\"line\">.custom-callout.bug&#123;border-color:rgba(var(--callout-bug),var(--callout-border-opacity))&#125;.custom-callout.bug&gt;summary&#123;    background-color:rgba(var(--callout-bug),var(--callout-title-bg-opacity));    color:rgba(var(--callout-bug))&#125;</span><br><span class=\"line\">.custom-callout.example&#123;border-color:rgba(var(--callout-example),var(--callout-border-opacity))&#125;.custom-callout.example&gt;summary&#123;    background-color:rgba(var(--callout-example),var(--callout-title-bg-opacity));    color:rgba(var(--callout-example))&#125;</span><br><span class=\"line\">.custom-callout.cite,.custom-callout.quote&#123;border-color:rgba(var(--callout-quote),var(--callout-border-opacity))&#125;.custom-callout.cite&gt;summary,.custom-callout.quote&gt;summary&#123;    background-color:rgba(var(--callout-quote),var(--callout-title-bg-opacity));    color:rgba(var(--callout-quote))&#125;</span><br><span class=\"line\">.callout-title&gt;.callout-icon+div&#123;-webkit-box-flex:1;-ms-flex:1 1 0%;-webkit-flex:1 1 0%;flex:1 1 0%;margin-left:.25rem&#125;.callout-icon&#123;align-items:center;color:#000;display:flex&#125;.callout-icon:before&#123;height:20px;width:20px&#125;.custom-callout.attention&gt;.callout-title&gt;.callout-icon:before,.custom-callout.caution&gt;.callout-title&gt;.callout-icon:before,.custom-callout.warning&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%23FF9100&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-alert-triangle&quot;&gt;&lt;path d=&quot;m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3ZM12 9v4M12 17h.01&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.note&gt;.callout-title&gt;.callout-icon:before,.custom-callout.seealso&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%23448AFF&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-pencil&quot;&gt;&lt;path d=&quot;m18 2 4 4M7.5 20.5 19 9l-4-4L3.5 16.5 2 22z&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.abstract&gt;.callout-title&gt;.callout-icon:before,.custom-callout.summary&gt;.callout-title&gt;.callout-icon:before,.custom-callout.tldr&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%2300B0FF&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-clipboard-list&quot;&gt;&lt;rect x=&quot;8&quot; y=&quot;2&quot; width=&quot;8&quot; height=&quot;4&quot; rx=&quot;1&quot; ry=&quot;1&quot;/&gt;&lt;path d=&quot;M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2M12 11h4M12 16h4M8 11h.01M8 16h.01&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.info&gt;.callout-title&gt;.callout-icon:before,.custom-callout.todo&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%2300B8D4&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-check-circle-2&quot;&gt;&lt;path d=&quot;M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z&quot;/&gt;&lt;path d=&quot;m9 12 2 2 4-4&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.hint&gt;.callout-title&gt;.callout-icon:before,.custom-callout.important&gt;.callout-title&gt;.callout-icon:before,.custom-callout.tip&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%2300BFA5&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-flame&quot;&gt;&lt;path d=&quot;M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.check&gt;.callout-title&gt;.callout-icon:before,.custom-callout.done&gt;.callout-title&gt;.callout-icon:before,.custom-callout.success&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%2300C853&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-check&quot;&gt;&lt;path d=&quot;M20 6 9 17l-5-5&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.faq&gt;.callout-title&gt;.callout-icon:before,.custom-callout.help&gt;.callout-title&gt;.callout-icon:before,.custom-callout.question&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%23E0AC00&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-help-circle&quot;&gt;&lt;circle cx=&quot;12&quot; cy=&quot;12&quot; r=&quot;10&quot;/&gt;&lt;path d=&quot;M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3M12 17h.01&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.fail&gt;.callout-title&gt;.callout-icon:before,.custom-callout.failure&gt;.callout-title&gt;.callout-icon:before,.custom-callout.missing&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%23FF5252&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-x&quot;&gt;&lt;path d=&quot;M18 6 6 18M6 6l12 12&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.danger&gt;.callout-title&gt;.callout-icon:before,.custom-callout.error&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%23FF1744&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-zap&quot;&gt;&lt;path d=&quot;M13 2 3 14h9l-1 8 10-12h-9l1-8z&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.bug&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%23F50057&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-bug&quot;&gt;&lt;rect x=&quot;8&quot; y=&quot;6&quot; width=&quot;8&quot; height=&quot;14&quot; rx=&quot;4&quot;/&gt;&lt;path d=&quot;m19 7-3 2M5 7l3 2M19 19l-3-2M5 19l3-2M20 13h-4M4 13h4M10 4l1 2M14 4l-1 2&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.example&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%237C4DFF&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-list&quot;&gt;&lt;path d=&quot;M8 6h13M8 12h13M8 18h13M3 6h.01M3 12h.01M3 18h.01&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.cite&gt;.callout-title&gt;.callout-icon:before,.custom-callout.quote&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%239E9E9E&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-quote&quot;&gt;&lt;path d=&quot;M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1zM15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.custom-callout.note &gt; .callout-body &#123;    /* 移除了 background:transparent!important; 改为根据类型变化的背景色 */    background-color: rgba(var(--callout-note), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">  /* 根据不同的类型设置背景色和文字/图标颜色 */.custom-callout.note, .custom-callout.note &gt; summary &#123;    background-color: rgba(var(--callout-note), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.abstract &gt; .callout-body &#123;    background-color: rgba(var(--callout-abstract), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.abstract, .custom-callout.abstract &gt; summary &#123;    background-color: rgba(var(--callout-abstract), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.info &gt; .callout-body &#123;    background-color: rgba(var(--callout-info), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.info, .custom-callout.info &gt; summary &#123;    background-color: rgba(var(--callout-info), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.tip &gt; .callout-body &#123;    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.tip, .custom-callout.tip &gt; summary &#123;    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.success &gt; .callout-body &#123;    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.success, .custom-callout.success &gt; summary &#123;    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.question &gt; .callout-body &#123;    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.question, .custom-callout.question &gt; summary &#123;    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.warning &gt; .callout-body &#123;    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.warning, .custom-callout.warning &gt; summary &#123;    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.failure &gt; .callout-body &#123;    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.failure, .custom-callout.failure &gt; summary &#123;    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.danger &gt; .callout-body &#123;    background-color: rgba(var(--callout-danger), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.danger, .custom-callout.danger &gt; summary &#123;    background-color: rgba(var(--callout-danger), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.bug &gt; .callout-body &#123;    background-color: rgba(var(--callout-bug), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.bug, .custom-callout.bug &gt; summary &#123;    background-color: rgba(var(--callout-bug), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.example &gt; .callout-body &#123;    background-color: rgba(var(--callout-example), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.example, .custom-callout.example &gt; summary &#123;    background-color: rgba(var(--callout-example), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.quote &gt; .callout-body &#123;    background-color: rgba(var(--callout-quote), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.quote, .custom-callout.quote &gt; summary &#123;    background-color: rgba(var(--callout-quote), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.cite &gt; .callout-body &#123;    background-color: rgba(var(--callout-quote), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.cite, .custom-callout.cite &gt; summary &#123;    background-color: rgba(var(--callout-quote), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.todo &gt; .callout-body &#123;    background-color: rgba(var(--callout-info), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.todo, .custom-callout.todo &gt; summary &#123;    background-color: rgba(var(--callout-info), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.seealso &gt; .callout-body &#123;    background-color: rgba(var(--callout-note), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.seealso, .custom-callout.seealso &gt; summary &#123;    background-color: rgba(var(--callout-note), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.hint &gt; .callout-body &#123;    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.hint, .custom-callout.hint &gt; summary &#123;    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.important &gt; .callout-body &#123;    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.important, .custom-callout.important &gt; summary &#123;    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.attention &gt; .callout-body &#123;    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.attention, .custom-callout.attention &gt; summary &#123;    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.caution &gt; .callout-body &#123;    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.caution, .custom-callout.caution &gt; summary &#123;    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.done &gt; .callout-body &#123;    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.done, .custom-callout.done &gt; summary &#123;    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.check &gt; .callout-body &#123;    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.check, .custom-callout.check &gt; summary &#123;    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.faq &gt; .callout-body &#123;    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.faq, .custom-callout.faq &gt; summary &#123;    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.help &gt; .callout-body &#123;    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.help, .custom-callout.help &gt; summary &#123;    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.fail &gt; .callout-body &#123;    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.fail, .custom-callout.fail &gt; summary &#123;    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.missing &gt; .callout-body &#123;    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.missing, .custom-callout.missing &gt; summary &#123;    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.error &gt; .callout-body &#123;    background-color: rgba(var(--callout-danger), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.error, .custom-callout.error &gt; summary &#123;    background-color: rgba(var(--callout-danger), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.tldr &gt; .callout-body &#123;    background-color: rgba(var(--callout-abstract), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.tldr, .custom-callout.tldr &gt; summary &#123;    background-color: rgba(var(--callout-abstract), var(--callout-title-bg-opacity));  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"集成-Telegram-Channel-说说\"><a href=\"#集成-Telegram-Channel-说说\" class=\"headerlink\" title=\"集成 Telegram Channel 说说#\"></a>集成 Telegram Channel 说说<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E9%9B%86%E6%88%90-telegram-channel-%E8%AF%B4%E8%AF%B4\">#</a></h2><p>显示效果：</p>\n<p>篇幅限制，只展示2条，请耐心等待加载。（可能要挂代理）</p>\n<p>代码抄自<a href=\"https://blog.hzchu.top/2024/%E6%8A%8ATg-Channel%E6%8E%A5%E5%85%A5%E5%88%B0Stellar%E6%97%B6%E9%97%B4%E7%BA%BF/\">把Tg Channel接入到Stellar时间线</a>。因为我懒得做标签筛选所以直接把这个去掉啦，在此还要感谢佬的耐心解答 <img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatheart-1749438579839-1042.png\" alt=\"blobcat:ablobcatheart\"></p>\n<h2 id=\"GitHub-Action-自动部署并修复更新时间\"><a href=\"#GitHub-Action-自动部署并修复更新时间\" class=\"headerlink\" title=\"GitHub Action 自动部署并修复更新时间#\"></a>GitHub Action 自动部署并修复更新时间<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#github-action-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%B9%B6%E4%BF%AE%E5%A4%8D%E6%9B%B4%E6%96%B0%E6%97%B6%E9%97%B4\">#</a></h2><p>在自动部署这里遇到了几个坑，总结下来大概有下：</p>\n<ul>\n<li>网上流行的很多 yml workflow 文件都有些过时</li>\n<li>公钥私钥啥的不太懂，配置了半天</li>\n<li>因为我的博客有数学公式显示，所以要在 workflow 里加入安装 pandoc 的部分，才能够成功运行</li>\n<li>自动部署后网站的文章更新时间全部变成 push 时间，但在本地是正常的。一番搜索后找到了解决方法，在 yml 文件里加入了以下代码，分别修复 posts、wiki、notes 的更新时间：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- name: Restore file modification time 🕒      run: find source/_posts -name &#x27;*.md&#x27; | while read file; do touch -d &quot;$(git log -1 --format=&quot;@%ct&quot; &quot;$file&quot;)&quot; &quot;$file&quot;; done</span><br><span class=\"line\">  - name: Restore file modification time of wiki🕒      run: find source/wiki -name &#x27;*.md&#x27; | while read file; do touch -d &quot;$(git log -1 --format=&quot;@%ct&quot; &quot;$file&quot;)&quot; &quot;$file&quot;; done</span><br><span class=\"line\">  - name: Restore file modification time of notes🕒      run: find source/notes -name &#x27;*.md&#x27; | while read file; do touch -d &quot;$(git log -1 --format=&quot;@%ct&quot; &quot;$file&quot;)&quot; &quot;$file&quot;; done</span><br></pre></td></tr></table></figure>\n\n<p>最后附上完整代码，拿去用的话要自己配置一下 GitHub 部分的设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: auto deploy</span><br><span class=\"line\">on:  workflow_dispatch:  push:</span><br><span class=\"line\">jobs:  build:    runs-on: ubuntu-latest # 运行环境为最新版 Ubuntu    name: auto deploy    steps:    # 1. 获取源码    - name: Checkout      uses: actions/checkout@v4 # 使用 actions/checkout@v3      with: # 条件        submodules: true # Checkout private submodules(themes or something else). 当有子模块时切换分支？        fetch-depth: 0</span><br><span class=\"line\">    - name: Restore file modification time 🕒      run: find source/_posts -name &#x27;*.md&#x27; | while read file; do touch -d &quot;$(git log -1 --format=&quot;@%ct&quot; &quot;$file&quot;)&quot; &quot;$file&quot;; done</span><br><span class=\"line\">    - name: Restore file modification time of wiki🕒      run: find source/wiki -name &#x27;*.md&#x27; | while read file; do touch -d &quot;$(git log -1 --format=&quot;@%ct&quot; &quot;$file&quot;)&quot; &quot;$file&quot;; done</span><br><span class=\"line\">    - name: Restore file modification time of notes🕒      run: find source/notes -name &#x27;*.md&#x27; | while read file; do touch -d &quot;$(git log -1 --format=&quot;@%ct&quot; &quot;$file&quot;)&quot; &quot;$file&quot;; done</span><br><span class=\"line\">    # 2. 配置环境    - name: Setup Node.js 18.19.x      uses: actions/setup-node@master      with:        node-version: &quot;18.19.x&quot;</span><br><span class=\"line\">    - name: Install pandoc      run: |        cd /tmp        wget -c https://github.com/jgm/pandoc/releases/download/2.14.0.3/pandoc-2.14.0.3-1-amd64.deb        sudo dpkg -i pandoc-2.14.0.3-1-amd64.deb</span><br><span class=\"line\">    # 3. 生成静态文件    - name: Generate Public Files      run: |        npm i        npm install hexo-cli -g        hexo clean &amp;&amp; hexo generate    # 4a. 部署到 GitHub 仓库（可选）    - name: Deploy to GitHub Pages      uses: peaceiris/actions-gh-pages@v3      with:        deploy_key: $&#123;&#123; secrets.HEXO_DEPLOY_PRI &#125;&#125; # 配置密钥        external_repository: # 填入你的GitHub pages部署仓库        publish_branch: gt-pages # 填入部署分支        publish_dir: ./public        commit_message: $&#123;&#123; github.event.head_commit.message &#125;&#125;        user_name: &#x27;github-actions[bot]&#x27;        user_email: &#x27;github-actions[bot]@users.noreply.github.com&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"给博客添加地理定位并制作个性欢迎\"><a href=\"#给博客添加地理定位并制作个性欢迎\" class=\"headerlink\" title=\"给博客添加地理定位并制作个性欢迎#\"></a>给博客添加地理定位并制作个性欢迎<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%9C%B0%E7%90%86%E5%AE%9A%E4%BD%8D%E5%B9%B6%E5%88%B6%E4%BD%9C%E4%B8%AA%E6%80%A7%E6%AC%A2%E8%BF%8E\">#</a></h2><p>显示效果：</p>\n<p>![个性欢迎卡片](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-17 at <a href=\"mailto:&#48;&#x31;&#46;&#48;&#57;&#x2e;&#x30;&#x37;&#x40;&#x32;&#120;&#x2d;&#49;&#55;&#52;&#57;&#52;&#x33;&#x38;&#53;&#x37;&#57;&#56;&#x33;&#57;&#45;&#49;&#48;&#x34;&#x34;&#46;&#119;&#x65;&#98;&#112;\">01.09.07@2x-1749438579839-1044.webp</a>)个性欢迎卡片</p>\n<p>代码来自<a href=\"https://ichika.cc/Article/beautiful_IPLocation/\">给博客添加腾讯地图定位并制作个性欢迎</a>。我稍微做了一点调整：</p>\n<p>新建 <code>source/js/services/txmap.js</code>，并添加以下代码： <details class=\"tag-plugin colorful folding\" ><summary><p>点击展开代码</p>\n</summary><div class=\"body\"><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//get请求$.ajax(&#123;    type: &#x27;get&#x27;,    url: &#x27;https://apis.map.qq.com/ws/location/v1/ip&#x27;,    data: &#123;        key: &#x27;你的key&#x27;,        output: &#x27;jsonp&#x27;,    &#125;,    dataType: &#x27;jsonp&#x27;,    success: function (res) &#123;        ipLoacation = res;    &#125;&#125;)function getDistance(e1, n1, e2, n2) &#123;    const R = 6371    const &#123; sin, cos, asin, PI, hypot &#125; = Math    let getPoint = (e, n) =&gt; &#123;        e *= PI / 180        n *= PI / 180        return &#123; x: cos(n) * cos(e), y: cos(n) * sin(e), z: sin(n) &#125;    &#125;</span><br><span class=\"line\">    let a = getPoint(e1, n1)    let b = getPoint(e2, n2)    let c = hypot(a.x - b.x, a.y - b.y, a.z - b.z)    let r = asin(c / 2) * 2 * R    return Math.round(r);&#125;</span><br><span class=\"line\">function showWelcome() &#123;</span><br><span class=\"line\">    let dist = getDistance(113.34499552, 23.15537143, ipLoacation.result.location.lng, ipLoacation.result.location.lat); //这里换成自己的经纬度    let pos = ipLoacation.result.ad_info.nation;    let ip;    let posdesc;    //根据国家、省份、城市信息自定义欢迎语    switch (ipLoacation.result.ad_info.nation) &#123;        case &quot;日本&quot;:            posdesc = &quot;よろしく，一起去看樱花吗&quot;;            break;        case &quot;美国&quot;:            posdesc = &quot;Let us live in peace!&quot;;            break;        case &quot;英国&quot;:            posdesc = &quot;想同你一起夜乘伦敦眼&quot;;            break;        case &quot;俄罗斯&quot;:            posdesc = &quot;干了这瓶伏特加！&quot;;            break;        case &quot;法国&quot;:            posdesc = &quot;C&#x27;est La Vie&quot;;            break;        case &quot;德国&quot;:            posdesc = &quot;Die Zeit verging im Fluge.&quot;;            break;        case &quot;澳大利亚&quot;:            posdesc = &quot;一起去大堡礁吧！&quot;;            break;        case &quot;加拿大&quot;:            posdesc = &quot;拾起一片枫叶赠予你&quot;;            break;        case &quot;中国&quot;:            pos = ipLoacation.result.ad_info.province + &quot; &quot; + ipLoacation.result.ad_info.city + &quot; &quot; + ipLoacation.result.ad_info.district;            ip = ipLoacation.result.ip;            switch (ipLoacation.result.ad_info.province) &#123;                case &quot;北京市&quot;:                    posdesc = &quot;北——京——欢迎你~~~&quot;;                    break;                case &quot;天津市&quot;:                    posdesc = &quot;讲段相声吧。&quot;;                    break;                case &quot;河北省&quot;:                    posdesc = &quot;山势巍巍成壁垒，天下雄关。铁马金戈由此向，无限江山。&quot;;                    break;                case &quot;山西省&quot;:                    posdesc = &quot;展开坐具长三尺，已占山河五百余。&quot;;                    break;                case &quot;内蒙古自治区&quot;:                    posdesc = &quot;天苍苍，野茫茫，风吹草低见牛羊。&quot;;                    break;                case &quot;辽宁省&quot;:                    posdesc = &quot;我想吃烤鸡架！&quot;;                    break;                case &quot;吉林省&quot;:                    posdesc = &quot;状元阁就是东北烧烤之王。&quot;;                    break;                case &quot;黑龙江省&quot;:                    posdesc = &quot;很喜欢哈尔滨大剧院。&quot;;                    break;                case &quot;上海市&quot;:                    posdesc = &quot;众所周知，中国只有两个城市。&quot;;                    break;                case &quot;江苏省&quot;:                    switch (ipLoacation.result.ad_info.city) &#123;                        case &quot;南京市&quot;:                            posdesc = &quot;这是我挺想去的城市啦。&quot;;                            break;                        case &quot;苏州市&quot;:                            posdesc = &quot;上有天堂，下有苏杭。&quot;;                            break;                        default:                            posdesc = &quot;散装是必须要散装的。&quot;;                            break;                    &#125;                    break;                case &quot;浙江省&quot;:                    posdesc = &quot;东风渐绿西湖柳，雁已还人未南归。&quot;;                    break;                case &quot;河南省&quot;:                    switch (ipLoacation.result.ad_info.city) &#123;                        case &quot;郑州市&quot;:                            posdesc = &quot;豫州之域，天地之中。&quot;;                            break;                        case &quot;南阳市&quot;:                            posdesc = &quot;臣本布衣，躬耕于南阳。此南阳非彼南阳！&quot;;                            break;                        case &quot;驻马店市&quot;:                            posdesc = &quot;峰峰有奇石，石石挟仙气。嵖岈山的花很美哦！&quot;;                            break;                        case &quot;开封市&quot;:                            posdesc = &quot;刚正不阿包青天。&quot;;                            break;                        case &quot;洛阳市&quot;:                            posdesc = &quot;洛阳牡丹甲天下。&quot;;                            break;                        default:                            posdesc = &quot;可否带我品尝河南烩面啦？&quot;;                            break;                    &#125;                    break;                case &quot;安徽省&quot;:                    posdesc = &quot;蚌埠住了，芜湖起飞。&quot;;                    break;                case &quot;福建省&quot;:                    posdesc = &quot;井邑白云间，岩城远带山。&quot;;                    break;                case &quot;江西省&quot;:                    posdesc = &quot;落霞与孤鹜齐飞，秋水共长天一色。&quot;;                    break;                case &quot;山东省&quot;:                    posdesc = &quot;遥望齐州九点烟，一泓海水杯中泻。&quot;;                    break;                case &quot;湖北省&quot;:                    posdesc = &quot;来碗热干面！&quot;;                    break;                case &quot;湖南省&quot;:                    posdesc = &quot;74751，长沙斯塔克。&quot;;                    break;                case &quot;广东省&quot;:                    posdesc = &quot;老板来两斤福建人。&quot;;                    break;                case &quot;广西壮族自治区&quot;:                    posdesc = &quot;桂林山水甲天下。&quot;;                    break;                case &quot;海南省&quot;:                    posdesc = &quot;朝观日出逐白浪，夕看云起收霞光。&quot;;                    break;                case &quot;四川省&quot;:                    posdesc = &quot;康康川妹子。&quot;;                    break;                case &quot;贵州省&quot;:                    posdesc = &quot;茅台，学生，再塞200。&quot;;                    break;                case &quot;云南省&quot;:                    posdesc = &quot;玉龙飞舞云缠绕，万仞冰川直耸天。&quot;;                    break;                case &quot;西藏自治区&quot;:                    posdesc = &quot;躺在茫茫草原上，仰望蓝天。&quot;;                    break;                case &quot;陕西省&quot;:                    posdesc = &quot;来份臊子面加馍。&quot;;                    break;                case &quot;甘肃省&quot;:                    posdesc = &quot;羌笛何须怨杨柳，春风不度玉门关。&quot;;                    break;                case &quot;青海省&quot;:                    posdesc = &quot;牛肉干和老酸奶都好好吃。&quot;;                    break;                case &quot;宁夏回族自治区&quot;:                    posdesc = &quot;大漠孤烟直，长河落日圆。&quot;;                    break;                case &quot;新疆维吾尔自治区&quot;:                    posdesc = &quot;驼铃古道丝绸路，胡马犹闻唐汉风。&quot;;                    break;                case &quot;台湾省&quot;:                    posdesc = &quot;我在这头，大陆在那头。&quot;;                    break;                case &quot;香港特别行政区&quot;:                    posdesc = &quot;永定贼有残留地鬼嚎，迎击光非岁玉。&quot;;                    break;                case &quot;澳门特别行政区&quot;:                    posdesc = &quot;性感荷官，在线发牌。&quot;;                    break;                default:                    posdesc = &quot;带我去你的城市逛逛吧！&quot;;                    break;            &#125;            break;        default:            posdesc = &quot;带我去你的国家逛逛吧。&quot;;            break;    &#125;</span><br><span class=\"line\">    //根据本地时间切换欢迎语    let timeChange;    let date = new Date();    if (date.getHours() &gt;= 5 &amp;&amp; date.getHours() &lt; 11) timeChange = &quot;&lt;span&gt;上午好&lt;/span&gt;，一日之计在于晨！&quot;;    else if (date.getHours() &gt;= 11 &amp;&amp; date.getHours() &lt; 13) timeChange = &quot;&lt;span&gt;中午好&lt;/span&gt;，该摸鱼吃午饭了。&quot;;    else if (date.getHours() &gt;= 13 &amp;&amp; date.getHours() &lt; 15) timeChange = &quot;&lt;span&gt;下午好&lt;/span&gt;，懒懒地睡个午觉吧！&quot;;    else if (date.getHours() &gt;= 15 &amp;&amp; date.getHours() &lt; 16) timeChange = &quot;&lt;span&gt;三点几啦&lt;/span&gt;，一起饮茶呀！&quot;;    else if (date.getHours() &gt;= 16 &amp;&amp; date.getHours() &lt; 19) timeChange = &quot;&lt;span&gt;夕阳无限好！&lt;/span&gt;&quot;;    else if (date.getHours() &gt;= 19 &amp;&amp; date.getHours() &lt; 24) timeChange = &quot;&lt;span&gt;晚上好&lt;/span&gt;，夜生活嗨起来！&quot;;    else timeChange = &quot;夜深了，早点休息，少熬夜。&quot;;</span><br><span class=\"line\">    try &#123;        //自定义文本和需要放的位置        document.getElementById(&quot;welcome-info&quot;).innerHTML =            `&lt;b&gt;&lt;center&gt;🎉 欢迎信息 🎉&lt;/center&gt;&amp;emsp;&amp;emsp;欢迎来自 &lt;span style=&quot;color:var(--theme-color)&quot;&gt;$&#123;pos&#125;&lt;/span&gt; 的小伙伴，$&#123;timeChange&#125;您现在距离站长约 &lt;span style=&quot;color:var(--theme-color)&quot;&gt;$&#123;dist&#125;&lt;/span&gt; 公里，当前的IP地址为： &lt;span style=&quot;color:var(--theme-color)&quot;&gt;$&#123;ip&#125;&lt;/span&gt;， $&#123;posdesc&#125;&lt;/b&gt;`;    &#125; catch (err) &#123;        // console.log(&quot;Pjax无法获取#welcome-info元素🙄🙄🙄&quot;)    &#125;&#125;window.onload = showWelcome;// 如果使用了pjax在加上下面这行代码document.addEventListener(&#x27;pjax:complete&#x27;, showWelcome);</span><br></pre></td></tr></table></figure> </div></details></p>\n<h3 id=\"在主题文件中配置\"><a href=\"#在主题文件中配置\" class=\"headerlink\" title=\"在主题文件中配置#\"></a>在主题文件中配置<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E5%9C%A8%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E4%B8%AD%E9%85%8D%E7%BD%AE\">#</a></h3><p>在主题配置文件 <code>_config.stellar.yml</code> 中引入jQuery依赖和刚刚的js文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inject:</span><br><span class=\"line\"></span><br><span class=\"line\">    - &lt;script src=&quot;https://cdn.staticfile.org/jquery/3.6.3/jquery.min.js&quot;&gt;&lt;/script&gt; # jQuery</span><br><span class=\"line\"></span><br><span class=\"line\">  - &lt;script async data-pjax src=&quot;/js/services/txmap.js&quot;&gt;&lt;/script&gt; # 腾讯位置API</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>source/_data/widgets.yml</code> 中添加小组件，我在里面嵌套了一个随机文章跳转，不要的话可以删掉，<strong>其中，<code>&lt;span id=&quot;welcome-info&quot; &gt;&lt;/span&gt;</code> 是必须的不可以删：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">welcomeloc:</span><br><span class=\"line\"></span><br><span class=\"line\">  layout: markdown</span><br><span class=\"line\"></span><br><span class=\"line\">  title: &#x27;🎉 抓到你啦&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  linklist:</span><br><span class=\"line\"></span><br><span class=\"line\">    columns: 1</span><br><span class=\"line\"></span><br><span class=\"line\">    items:</span><br><span class=\"line\"></span><br><span class=\"line\">      - icon: &#x27;&lt;img src=&quot;https://api.iconify.design/ion:dice-outline.svg&quot;/&gt;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">        title: 随机文章</span><br><span class=\"line\"></span><br><span class=\"line\">        url: &#x27;javascript:toRandomPost()&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  content: |</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;span id=&quot;welcome-info&quot; style=&quot;font-family: LXGW WenKai Screen;&quot;&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然后就跟正常的小组件一样在想要的地方引用即可。</p>\n<h2 id=\"添加更改字体按钮\"><a href=\"#添加更改字体按钮\" class=\"headerlink\" title=\"添加更改字体按钮#\"></a>添加更改字体按钮<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E6%B7%BB%E5%8A%A0%E6%9B%B4%E6%94%B9%E5%AD%97%E4%BD%93%E6%8C%89%E9%92%AE\">#</a></h2><p>显示效果：</p>\n<p><strong>第一种：</strong> 在任意位置增加一个 button 按钮![img](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-17 at <a href=\"mailto:&#x30;&#49;&#x2e;&#x32;&#x31;&#46;&#48;&#x37;&#x40;&#x32;&#120;&#x2d;&#49;&#55;&#52;&#57;&#52;&#51;&#56;&#x35;&#55;&#x39;&#x38;&#51;&#57;&#45;&#x31;&#x30;&#x34;&#54;&#x2e;&#119;&#101;&#98;&#112;\">01.21.07@2x-1749438579839-1046.webp</a>)</p>\n<p>鼠标放到上面会显示提示： ![img](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-17 at <a href=\"mailto:&#48;&#x31;&#x2e;&#x32;&#50;&#x2e;&#52;&#50;&#x40;&#50;&#x78;&#x2d;&#x31;&#55;&#52;&#57;&#x34;&#51;&#56;&#x35;&#55;&#57;&#x38;&#51;&#x39;&#x2d;&#49;&#48;&#x34;&#56;&#x2e;&#x77;&#101;&#x62;&#x70;\">01.22.42@2x-1749438579839-1048.webp</a>)</p>\n<p><strong>第二种：</strong> 在文章页面目录下方显示</p>\n<p>![img](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-17 at <a href=\"mailto:&#x30;&#49;&#46;&#50;&#x34;&#46;&#x30;&#x37;&#x40;&#x32;&#120;&#45;&#x31;&#55;&#x34;&#57;&#52;&#x33;&#56;&#x35;&#55;&#57;&#56;&#x33;&#x39;&#45;&#x31;&#x30;&#x35;&#x30;&#x2e;&#x77;&#x65;&#x62;&#112;\">01.24.07@2x-1749438579839-1050.webp</a>)</p>\n<p>之前一直纠结要不要把自定义字体效果去掉，在选择和留下之间来回切换 <img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatknitsweats-1749438579839-1052.png\" alt=\"blobcat:ablobcatknitsweats\"> 最终才出现了这里的方案：默认不加载任何字体，喜欢 LXGW 字体的话可点击图标转换，同时再点击一下就恢复。代码不长但完美地解决了我的强迫症～</p>\n<h3 id=\"第一步：准备字体文件\"><a href=\"#第一步：准备字体文件\" class=\"headerlink\" title=\"第一步：准备字体文件#\"></a>第一步：准备字体文件<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E7%AC%AC%E4%B8%80%E6%AD%A5%E5%87%86%E5%A4%87%E5%AD%97%E4%BD%93%E6%96%87%E4%BB%B6\">#</a></h3><p>可以是在线文件也可以是本地文件，我是在主题 config 文件下通过 inject 引入了 LXGW 字体。</p>\n<h3 id=\"第二步：修改-css\"><a href=\"#第二步：修改-css\" class=\"headerlink\" title=\"第二步：修改 css#\"></a>第二步：修改 css<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E4%BF%AE%E6%94%B9-css\">#</a></h3><p>首先确保 LXGW WenKai Screen 字体已经通过 CSS 正确引入。你可以在 CSS 文件中添加一个特定的类，用于当用户选择使用这种字体时切换到它：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 设置字体 */</span><br><span class=\"line\"></span><br><span class=\"line\">.LXGWMode &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    font-family: &#x27;LXGW WenKai Screen&#x27;, system-ui, &#x27;Helvetica Neue&#x27;, sans-serif;  // 使用 LXGW WenKai 字体，并指定后备字体</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第三步：添加-javascript\"><a href=\"#第三步：添加-javascript\" class=\"headerlink\" title=\"第三步：添加 javascript#\"></a>第三步：添加 javascript<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E7%AC%AC%E4%B8%89%E6%AD%A5%E6%B7%BB%E5%8A%A0-javascript\">#</a></h3><p>新建 <code>source/js/changefont.js</code> 文件，添加以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.addEventListener(&#x27;DOMContentLoaded&#x27;, function () &#123;    applyFontSetting();    updateButtonText(); // Ensure the button text is correct on page load&#125;);</span><br><span class=\"line\">document.addEventListener(&#x27;pjax:success&#x27;, function () &#123;    applyFontSetting();    updateButtonText(); // Update the button text after PJAX updates&#125;);</span><br><span class=\"line\">function applyFontSetting() &#123;    if (localStorage.getItem(&quot;LXGWFontEnabled&quot;) === &quot;true&quot;) &#123;        document.body.classList.add(&quot;LXGWMode&quot;);    &#125; else &#123;        document.body.classList.remove(&quot;LXGWMode&quot;);    &#125;&#125;</span><br><span class=\"line\">function toggleLXGWFont() &#123;    var button = document.querySelector(&#x27;.custom-button&#x27;); // Find the button    if (localStorage.getItem(&quot;LXGWFontEnabled&quot;) === &quot;true&quot;) &#123;        localStorage.setItem(&quot;LXGWFontEnabled&quot;, &quot;false&quot;);        document.body.classList.remove(&quot;LXGWMode&quot;);        button.innerHTML = &#x27;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png&quot; alt=&quot;Emoji&quot; style=&quot;vertical-align: middle; width: 20px; height: 20px;&quot;&gt; 危险，请勿点击&#x27;;    &#125; else &#123;        localStorage.setItem(&quot;LXGWFontEnabled&quot;, &quot;true&quot;);        document.body.classList.add(&quot;LXGWMode&quot;);        button.innerHTML = &#x27;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png&quot; alt=&quot;Emoji&quot; style=&quot;vertical-align: middle; width: 20px; height: 20px;&quot;&gt; 不要说我没有警告过你&#x27;;    &#125;&#125;</span><br><span class=\"line\">function updateButtonText() &#123;    var button = document.querySelector(&#x27;.custom-button&#x27;); // Find the button    if (localStorage.getItem(&quot;LXGWFontEnabled&quot;) === &quot;true&quot;) &#123;        button.innerHTML = &#x27;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png&quot; alt=&quot;Emoji&quot; style=&quot;vertical-align: middle; width: 20px; height: 20px;&quot;&gt; 不要点这里啦！&#x27;;    &#125; else &#123;        button.innerHTML = &#x27;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png&quot; alt=&quot;Emoji&quot; style=&quot;vertical-align: middle; width: 20px; height: 20px;&quot;&gt; 危险，请勿点击&#x27;;    &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第四步：添加切换按钮\"><a href=\"#第四步：添加切换按钮\" class=\"headerlink\" title=\"第四步：添加切换按钮#\"></a>第四步：添加切换按钮<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E7%AC%AC%E5%9B%9B%E6%AD%A5%E6%B7%BB%E5%8A%A0%E5%88%87%E6%8D%A2%E6%8C%89%E9%92%AE\">#</a></h3><p>然后在想要的地方引用即可，可以自行添加各种 emoji，比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button class=&quot;custom-button tooltip&quot; onclick=&quot;toggleLXGWFont()&quot; data-msg=&quot;警告，真的很危险&quot;&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png&quot; alt=&quot;Emoji&quot; style=&quot;vertical-align: middle; width: 20px; height: 20px;&quot;&gt; 危险，请勿点击&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给按钮加入-css-提示框\"><a href=\"#给按钮加入-css-提示框\" class=\"headerlink\" title=\"给按钮加入 css 提示框#\"></a>给按钮加入 css 提示框<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E7%BB%99%E6%8C%89%E9%92%AE%E5%8A%A0%E5%85%A5-css-%E6%8F%90%E7%A4%BA%E6%A1%86\">#</a></h3><p>在自定义 css 文件中添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.custom-button &#123;    display: inline-block;    padding: 2px 10px;    /*margin: 10px;    background-color: #f2f2f2; /* Light grey background, change as needed */    font-family: inherit; /* Inherits the font-family from parent container */    color: #835EEC;    background-color: #F2EEFD;    @media (prefers-color-scheme: dark) &#123;      color: #A28BF2;      background-color: #282433;    &#125;    text-align: center;    cursor: pointer;    /*border: 2px solid #ccc; /* Grey border */    border-radius: 16px; /* Rounded corners */    transition: all 0.3s ease;  &#125;</span><br><span class=\"line\">.custom-button:hover &#123;    background-color: #e9e9e9; /* Slightly darker on hover */    @media (prefers-color-scheme: dark) &#123;      background-color: #333; /* Darker background on hover */    &#125;    border-color: #999; /* Darker border on hover */  &#125;</span><br><span class=\"line\">/* toggle-font 提示框的样式 */</span><br><span class=\"line\">.tooltip &#123;    position: relative;    cursor: pointer; /* 可选，让用户知道这是一个可以互动的元素 */&#125;</span><br><span class=\"line\">.tooltip:hover::before &#123;    white-space: nowrap;    line-height: 18px;    content: attr(data-msg);    position: absolute;    padding: 0 8px;    display: block;    color: #ffffff;    background: #656565;    border-radius: 6px;    font-size: 12px;    top: -25px;    left: 50%;    transform: translateX(-50%);    Z-index: 1000; /* 确保提示框在其他元素之上 */&#125;</span><br><span class=\"line\">.tooltip:hover:: after &#123;    Content: &quot;&quot;;    Position: absolute;    Top: -8 px;    Left: 50%;    Transform: translateX (-50%);    Border: 6 px solid transparent;    border-top-color: #656565 ; /* 简化写法 */&#125;</span><br><span class=\"line\">/* toggle-font 按钮的样式 */</span><br><span class=\"line\">.widget-wrapper. Toggle-font &#123;    Background: none; // Example: making background transparent    /* Add other styles specific to the toggle-font widget here */&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二种样式\"><a href=\"#第二种样式\" class=\"headerlink\" title=\"第二种样式#\"></a>第二种样式<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E7%AC%AC%E4%BA%8C%E7%A7%8D%E6%A0%B7%E5%BC%8F\">#</a></h3><p>WARNING</p>\n<p>第二种样式需要对主题文件进行一丢丢修改，但貌似不太影响更新……只要无冲突的话可以一直 update fork</p>\n<p>在 <code>languages/zh-CN.yml</code> 中添加一行 <code>font: 更改字体</code>，并在 icons.yml 里添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default:font: &lt;svg class=&quot;theme-icon&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;32&quot; height=&quot;32&quot; viewBox=&quot;0 0 32 32&quot;&gt;&lt;path d=&quot;m12.677 17.781l-2.626-6.256l-2.694 6.256Zm6.723 6.511h-7.069v-1.365l.458-.023a1.847 1.847 0 0 0 .972-.2a.313.313 0 0 0 .145-.263a4.158 4.158 0 0 0-.419-1.4l-.812-1.931H7.322L6.4 21.259a3.319 3.319 0 0 0-.349 1.157c0 .036 0 .119.154.241a2.481 2.481 0 0 0 1.191.247l.448.033v1.354H2v-1.31l.4-.07a2.188 2.188 0 0 0 1-.318a6.318 6.318 0 0 0 1.18-2.066l5.575-13.036H11.2l5.512 13.174a5.255 5.255 0 0 0 1.049 1.835a1.959 1.959 0 0 0 1.19.4l.454.027Zm6.441-2.732v-3.985a22.542 22.542 0 0 0-2.226.97a3.845 3.845 0 0 0-1.29 1.05a2.03 2.03 0 0 0-.388 1.2a1.951 1.951 0 0 0 .491 1.362a1.49 1.49 0 0 0 1.13.544a4.142 4.142 0 0 0 2.283-1.141m-3.333 2.949a2.833 2.833 0 0 1-2.139-.893a3.206 3.206 0 0 1-.833-2.285a2.959 2.959 0 0 1 .415-1.577a5 5 0 0 1 1.791-1.625a23.876 23.876 0 0 1 3.617-1.588v-.074a2.905 2.905 0 0 0-.383-1.833a1.325 1.325 0 0 0-1.075-.412a1.155 1.155 0 0 0-.816.26a.687.687 0 0 0-.277.536l.023.646a1.62 1.62 0 0 1-.4 1.158a1.481 1.481 0 0 1-2.1-.019a1.634 1.634 0 0 1-.391-1.134a2.8 2.8 0 0 1 1.182-2.177a4.813 4.813 0 0 1 3.125-.932a5.381 5.381 0 0 1 2.508.524a2.628 2.628 0 0 1 1.213 1.346a6.391 6.391 0 0 1 .244 2.2v3.55a14.665 14.665 0 0 0 .051 1.749a.661.661 0 0 0 .054.2c.085-.078.284-.225.864-.806l.819-.828v1.967l-.1.128c-.958 1.283-1.883 1.907-2.83 1.907a1.6 1.6 0 0 1-1.257-.557a1.788 1.788 0 0 1-.358-.74a9.688 9.688 0 0 1-1.433.977a3.579 3.579 0 0 1-1.514.332&quot;/&gt;&lt;/svg&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>layout/_partial/widgets/toc.ejs</code> 中，在想要的位置，如 <code>el += editBtn</code> 后，添加以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">el += `&lt;a class=&quot;toggle-font&quot; onclick=&quot;toggleLXGWFont()&quot;&gt;`</span><br><span class=\"line\"></span><br><span class=\"line\"> el += icon(&#x27;default:font&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"> el += `&lt;span&gt;$&#123;__(&#x27;btn.font&#x27;)&#125;&lt;/span&gt;`</span><br><span class=\"line\"></span><br><span class=\"line\"> el += `&lt;/a&gt;`</span><br></pre></td></tr></table></figure>\n\n<p>为了使这个图标随主题明暗自动变化，在自定义 css 文件中加入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 设置图标颜色 *//* 白天模式，默认填充色为黑色 */.theme-icon &#123;  fill: black;&#125;</span><br><span class=\"line\">/* 暗黑模式，填充色为白色 */@media (prefers-color-scheme: dark) &#123;  .theme-icon &#123;      fill: white;  &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"随机文章跳转\"><a href=\"#随机文章跳转\" class=\"headerlink\" title=\"随机文章跳转#\"></a>随机文章跳转<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E9%9A%8F%E6%9C%BA%E6%96%87%E7%AB%A0%E8%B7%B3%E8%BD%AC\">#</a></h2><p>NOTE</p>\n<p>要在主题文件夹里新增文件，不影响主题后续更新<img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatattentionreverse-1749438579839-1054.png\" alt=\"blobcat:ablobcatattentionreverse\"></p>\n<p>终于来到了我最爱的生活哲学！代码参考了<a href=\"https://blog.zhheo.com/p/c116857c.html\">这个链接</a>。创建 <code>themes/stellar/scripts/helpers/random.js</code> ，增加以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo.extend.filter.register(&#x27;after_render:html&#x27;, function (data) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  const posts = []</span><br><span class=\"line\"></span><br><span class=\"line\">  hexo.locals.get(&#x27;posts&#x27;).map(function (post) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (post.random !== false) posts.push(post.path)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  data += `&lt;script&gt;var posts=$&#123;JSON.stringify(posts)&#125;;function toRandomPost()&#123; window.pjax ? pjax.loadUrl(&#x27;/&#x27;+posts[Math.floor(Math.random()*posts.length)]) : window.open(&#x27;/&#x27;+posts[Math.floor(Math.random()*posts.length)], &quot;_self&quot;); &#125;;&lt;/script&gt;`</span><br><span class=\"line\"></span><br><span class=\"line\">  return data</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在主题配置文件引入 <code>_config.stellar.yml</code>，inject的 head里添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- &lt;script src=&quot;/js/random.js&quot;&gt;&lt;/script&gt; # 随机文章</span><br></pre></td></tr></table></figure>\n\n<p>然后在需要调用的位置执行 <code>toRandomPost()</code> 函数即可。比如任意 dom 添加 <code>onclick=&quot;toRandomPost()&quot;</code></p>\n<p>好吧，我知道你肯定没听懂</p>\n<p>反正我当时看完是一脸懵圈 不过没关系，我最后还是琢磨明白啦，下面就有填写示例，接着看就好<img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatattentionreverse-1749438579839-1054.png\" alt=\"blobcat:ablobcatattentionreverse\"></p>\n<p>添加一个按钮:</p>\n<p>随机阅读一篇文章</p>\n<p>代码：<code>&lt;button onclick=&quot;toRandomPost()&quot;&gt;随机阅读一篇文章&lt;/button&gt;</code></p>\n<p>或者添加一个链接: <a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#\">随机阅读一篇文章</a></p>\n<p>代码：<code>&lt;a href=&quot;#&quot; onclick=&quot;toRandomPost(); return false;&quot;&gt;随机阅读一篇文章&lt;/a&gt;</code></p>\n<p>在下一节还有应用示例，请往下看——</p>\n<h2 id=\"超链接样式调整\"><a href=\"#超链接样式调整\" class=\"headerlink\" title=\"超链接样式调整#\"></a>超链接样式调整<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E8%B6%85%E9%93%BE%E6%8E%A5%E6%A0%B7%E5%BC%8F%E8%B0%83%E6%95%B4\">#</a></h2><p>文章内链接：加粗并下移下划线。显示效果：</p>\n<p>![超链接样式](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-17 at <a href=\"mailto:&#x32;&#50;&#x2e;&#49;&#x38;&#46;&#49;&#50;&#64;&#50;&#120;&#x2d;&#49;&#55;&#52;&#57;&#52;&#x33;&#x38;&#x35;&#55;&#57;&#x38;&#x33;&#x39;&#x2d;&#49;&#x30;&#x35;&#54;&#x2e;&#x77;&#x65;&#98;&#x70;\">22.18.12@2x-1749438579839-1056.webp</a>)超链接样式</p>\n<p>在自定义 css 文件里加入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 文章内链接 */</span><br><span class=\"line\"></span><br><span class=\"line\">li:not([class]) a:not([class]),</span><br><span class=\"line\"></span><br><span class=\"line\">p:not([class]) a:not([class]),</span><br><span class=\"line\"></span><br><span class=\"line\">table a:not([class]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  /*color: var(--theme-link);*/</span><br><span class=\"line\"></span><br><span class=\"line\">  padding-bottom: 3px; /* 增加底部padding */</span><br><span class=\"line\"></span><br><span class=\"line\">  padding-right: 1px;</span><br><span class=\"line\"></span><br><span class=\"line\">  margin-right: 2px;</span><br><span class=\"line\"></span><br><span class=\"line\">  background: linear-gradient(0, var(--theme-link), var(--theme-link)) no-repeat center bottom / 100% 2px;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试链接：<a href=\"https://www.flyalready.com/about/\">关于</a></p>\n<p>新样式！为链接使用荧光笔下划线效果，这个和上面的样式二选一就好。显示效果：</p>\n<p>![img](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-20 at <a href=\"mailto:&#x31;&#57;&#46;&#51;&#x32;&#x2e;&#x30;&#52;&#x40;&#x32;&#x78;&#45;&#x31;&#55;&#52;&#57;&#52;&#x33;&#56;&#x35;&#55;&#x39;&#56;&#51;&#x39;&#45;&#49;&#48;&#53;&#56;&#x2e;&#x77;&#x65;&#x62;&#x70;\">19.32.04@2x-1749438579839-1058.webp</a>)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 文章内链接：为链接使用荧光笔下划线效果 */</span><br><span class=\"line\"></span><br><span class=\"line\">li:not([class]) a:not([class]),</span><br><span class=\"line\"></span><br><span class=\"line\">p:not([class]) a:not([class]),</span><br><span class=\"line\"></span><br><span class=\"line\">table a:not([class]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  padding-bottom: 0.1rem;</span><br><span class=\"line\"></span><br><span class=\"line\">  background: linear-gradient(0, var(--theme-link-opa), var(--theme-link-opa)) no-repeat center bottom / 100% 40%;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"选中文本：使用超链接高亮的背景色\"><a href=\"#选中文本：使用超链接高亮的背景色\" class=\"headerlink\" title=\"选中文本：使用超链接高亮的背景色#\"></a>选中文本：使用超链接高亮的背景色<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E9%80%89%E4%B8%AD%E6%96%87%E6%9C%AC%E4%BD%BF%E7%94%A8%E8%B6%85%E9%93%BE%E6%8E%A5%E9%AB%98%E4%BA%AE%E7%9A%84%E8%83%8C%E6%99%AF%E8%89%B2\">#</a></h2><p>在自定义 css 文件里加入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 选中文本：使用超链接高亮的背景色 */</span><br><span class=\"line\"></span><br><span class=\"line\">::selection &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  background: var(--theme-link-opa);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Twikoo-评论样式优化\"><a href=\"#Twikoo-评论样式优化\" class=\"headerlink\" title=\"Twikoo 评论样式优化#\"></a>Twikoo 评论样式优化<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#twikoo-%E8%AF%84%E8%AE%BA%E6%A0%B7%E5%BC%8F%E4%BC%98%E5%8C%96\">#</a></h2><p>Title</p>\n<p>样式优化需要改主题文件，但下面的<strong>给评论输入框加入提示</strong>是纯 css 实现的不需要改</p>\n<p>显示效果：</p>\n<p>![img](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-17 at <a href=\"mailto:&#x30;&#50;&#46;&#49;&#51;&#46;&#x34;&#x38;&#64;&#50;&#120;&#45;&#x31;&#x37;&#52;&#x39;&#52;&#x33;&#56;&#53;&#x37;&#57;&#56;&#51;&#57;&#45;&#x31;&#x30;&#x36;&#48;&#x2e;&#119;&#x65;&#x62;&#x70;\">02.13.48@2x-1749438579839-1060.webp</a>)</p>\n<p>只截了部分，整体效果可在评论区查看。代码全部抄自星日语大佬的<a href=\"https://github.com/xaoxuu/hexo-theme-stellar/commit/3666dbd50a0ddf46a87635f51c9a08829ba41f9b#diff-b3cf1ac0cff1eefdab68933ee5005affaeb5b0781c8d63116a2ddecaf5ab00a1\">这条 commit</a>。评论区表情显示优化可参考<a href=\"https://github.com/xaoxuu/hexo-theme-stellar/commit/4567ceb8b883e142c3c4e7d84699b80676679e0c\">这条 commit</a>。</p>\n<h3 id=\"给评论输入框加入提示\"><a href=\"#给评论输入框加入提示\" class=\"headerlink\" title=\"给评论输入框加入提示#\"></a>给评论输入框加入提示<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E7%BB%99%E8%AF%84%E8%AE%BA%E8%BE%93%E5%85%A5%E6%A1%86%E5%8A%A0%E5%85%A5%E6%8F%90%E7%A4%BA\">#</a></h3><p>显示效果：</p>\n<p>![img](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-17 at <a href=\"mailto:&#x30;&#x32;&#x2e;&#x31;&#x37;&#x2e;&#52;&#x36;&#x40;&#50;&#120;&#x2d;&#49;&#55;&#x34;&#x39;&#52;&#51;&#56;&#53;&#55;&#x39;&#x38;&#51;&#57;&#x2d;&#x31;&#48;&#x36;&#x32;&#x2e;&#x77;&#x65;&#x62;&#112;\">02.17.46@2x-1749438579839-1062.webp</a>)</p>\n<p>原始代码忘记在哪里抄的了，我就修改了最后 3 行……在自定义 css 文件中加入以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 设置文字内容 :nth-child(1)的作用是选择第几个 */.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(1):before &#123;    content: &#x27;输入QQ号会自动获取昵称和头像🐧&#x27;;&#125;</span><br><span class=\"line\">.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(2):before &#123;    content: &#x27;收到回复将会发送到您的邮箱📧&#x27;;&#125;</span><br><span class=\"line\">.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(3):before &#123;    content: &#x27;填写后可以点击昵称访问您的网站🔗&#x27;;&#125;</span><br><span class=\"line\">/* 当用户点击输入框时显示 */.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::before,.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::after &#123;    display: block;&#125;</span><br><span class=\"line\">/* 主内容区 */.el-input.el-input--small.el-input-group.el-input-group--prepend::before &#123;    /* 先隐藏起来 */    display: none;    /* 绝对定位 */    position: absolute;    /* 向上移动60像素 */    top: -60px;    /* 文字强制不换行，防止left:50%导致的文字换行 */    white-space: nowrap;    /* 圆角 */    border-radius: 10px;    /* 距离左边50% */    left: 50%;    /* 然后再向左边挪动自身的一半，即可实现居中 */    transform: translate(-50%);    /* 填充 */    padding: 14px 18px;    background: #444;    color: #fff;&#125;</span><br><span class=\"line\">/* 小角标 */.el-input.el-input--small.el-input-group.el-input-group--prepend::after &#123;    display: none;    content: &#x27;&#x27;;    position: absolute;    /* 内容大小（宽高）为0且边框大小不为0的情况下，每一条边（4个边）都是一个三角形，组成一个正方形。    我们先将所有边框透明，再给其中的一条边添加颜色就可以实现小三角图标 */    border: 12px solid transparent;    border-top-color: #444;    left: 50%;    transform: translate(-50%, -48px);&#125;</span><br><span class=\"line\">.el-input.el-input--small.el-input-group.el-input-group--prepend::before, .el-input.el-input--small.el-input-group.el-input-group--prepend::after &#123;    z-index: 9999; /* 提高层级，确保内容显示在最前 */&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Stellar-Twikoo-表情包补全计划\"><a href=\"#Stellar-Twikoo-表情包补全计划\" class=\"headerlink\" title=\"Stellar &amp; Twikoo 表情包补全计划#\"></a>Stellar &amp; Twikoo 表情包补全计划<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#stellar--twikoo-%E8%A1%A8%E6%83%85%E5%8C%85%E8%A1%A5%E5%85%A8%E8%AE%A1%E5%88%92\">#</a></h2><h3 id=\"blobcat\"><a href=\"#blobcat\" class=\"headerlink\" title=\"blobcat#\"></a>blobcat<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#blobcat\">#</a></h3><p>这个系列表情真的不要太可爱，一眼爱上</p>\n<p><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatattentionreverse-1749438579839-1054.png\" alt=\"blobcat:ablobcatattentionreverse\"> <img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatwave-1749438579839-1064.png\" alt=\"blobcat:ablobcatwave\"> <img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatpresentred-1749438579839-1066.png\" alt=\"blobcat:blobcatpresentred\"><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatknitsweats-1749438579839-1052.png\" alt=\"blobcat:ablobcatknitsweats\"></p>\n<p>光在博客正文里用怎么够，当然还要在评论区里也安排上<img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatrainbow-1749438579839-1068.png\" alt=\"blobcat:ablobcatrainbow\"></p>\n<p>blobcat 表情主要来自<a href=\"https://weekdaycare.cn/posts/emoji-blob/\">星日语</a>佬。本人在学会自定义后收集癖大发，一口气制作了几个系列的表情，往现有的 blobcat里也加了几个比较好看的 <img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/A_BlobCat_Code-1749438579839-1070.png\" alt=\"blobcat:A_BlobCat_Code\"></p>\n<p>Stellar 引入：<code>blobcatplus:https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/&#123;name&#125;.png</code></p>\n<p>Twikoo 使用链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/blobcatplus.json</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>表情</th>\n<th>索引</th>\n<th>表情</th>\n<th>索引</th>\n<th>表情</th>\n<th>索引</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatheart-1749438579839-1042.png\" alt=\"blobcat:ablobcatheart\"></td>\n<td>ablobcatheart</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatheartbroken-1749438579839-1072.png\" alt=\"blobcat:ablobcatheartbroken\"></td>\n<td>ablobcatheartbroken</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatheart-1749438579839-1074.png\" alt=\"blobcat:blobcatheart\"></td>\n<td>blobcatheart</td>\n</tr>\n<tr>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatheartpride-1749438579839-1076.png\" alt=\"blobcat:blobcatheartpride\"></td>\n<td>blobcatheartpride</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatlove.png\" alt=\"blobcat:blobcatlove\"></td>\n<td>blobcatlove</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatkissheart-1749438579839-1080.png\" alt=\"blobcat:blobcatkissheart\"></td>\n<td>blobcatkissheart</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatsnuggle.png\" alt=\"blobcat:blobcatsnuggle\"></td>\n<td>blobcatsnuggle</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/comfyuee.png\" alt=\"blobcat:comfyuee\"></td>\n<td>comfyuee</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/comfyslep.png\" alt=\"blobcat:comfyslep\"></td>\n<td>comfyslep</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatcomfysweat.png\" alt=\"blobcat:blobcatcomfysweat\"></td>\n<td>blobcatcomfysweat</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatcomftears.png\" alt=\"blobcat:blobcatcomftears\"></td>\n<td>blobcatcomftears</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatfacepalm.png\" alt=\"blobcat:blobcatfacepalm\"></td>\n<td>blobcatfacepalm</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcat0_0.png\" alt=\"blobcat:blobcat0_0\"></td>\n<td>blobcat0_0</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatangry-1749438579840-1096.png\" alt=\"blobcat:blobcatangry\"></td>\n<td>blobcatangry</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobbanhammerr.png\" alt=\"blobcat:blobbanhammerr\"></td>\n<td>blobbanhammerr</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatt.png\" alt=\"blobcat:blobcatt\"></td>\n<td>blobcatt</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatblush-1749438579840-1102.png\" alt=\"blobcat:blobcatblush\"></td>\n<td>blobcatblush</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatcoffee-1749438579840-1104.png\" alt=\"blobcat:blobcatcoffee\"></td>\n<td>blobcatcoffee</td>\n</tr>\n<tr>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatcry-1749438579840-1106.png\" alt=\"blobcat:blobcatcry\"></td>\n<td>blobcatcry</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatdead-1749438579840-1108.png\" alt=\"blobcat:blobcatdead\"></td>\n<td>blobcatdead</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatdied.png\" alt=\"blobcat:blobcatdied\"></td>\n<td>blobcatdied</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatdisturbed.png\" alt=\"blobcat:blobcatdisturbed\"></td>\n<td>blobcatdisturbed</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatfearful.png\" alt=\"blobcat:blobcatfearful\"></td>\n<td>blobcatfearful</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatfingerguns.png\" alt=\"blobcat:blobcatfingerguns\"></td>\n<td>blobcatfingerguns</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatflip.png\" alt=\"blobcat:blobcatflip\"></td>\n<td>blobcatflip</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatflower.png\" alt=\"blobcat:blobcatflower\"></td>\n<td>blobcatflower</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatgay.png\" alt=\"blobcat:blobcatgay\"></td>\n<td>blobcatgay</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatgooglycry.png\" alt=\"blobcat:blobcatgooglycry\"></td>\n<td>blobcatgooglycry</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatneutral.png\" alt=\"blobcat:blobcatneutral\"></td>\n<td>blobcatneutral</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatopenmouth.png\" alt=\"blobcat:blobcatopenmouth\"></td>\n<td>blobcatopenmouth</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatsadreach.png\" alt=\"blobcat:blobcatsadreach\"></td>\n<td>blobcatsadreach</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatscared.png\" alt=\"blobcat:blobcatscared\"></td>\n<td>blobcatscared</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatnomblobcat.png\" alt=\"blobcat:blobcatnomblobcat\"></td>\n<td>blobcatnomblobcat</td>\n</tr>\n<tr>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatpresentred-1749438579839-1066.png\" alt=\"blobcat:blobcatpresentred\"></td>\n<td>blobcatpresentred</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatread.png\" alt=\"blobcat:blobcatread\"></td>\n<td>blobcatread</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatsipsweat.png\" alt=\"blobcat:blobcatsipsweat\"></td>\n<td>blobcatsipsweat</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatsnapped.png\" alt=\"blobcat:blobcatsnapped\"></td>\n<td>blobcatsnapped</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatthink.png\" alt=\"blobcat:blobcatthink\"></td>\n<td>blobcatthink</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcattriumph.png\" alt=\"blobcat:blobcattriumph\"></td>\n<td>blobcattriumph</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatumm.png\" alt=\"blobcat:blobcatumm\"></td>\n<td>blobcatumm</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatverified.png\" alt=\"blobcat:blobcatverified\"></td>\n<td>blobcatverified</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatbox.png\" alt=\"blobcat:blobcatbox\"></td>\n<td>blobcatbox</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatcaged.png\" alt=\"blobcat:blobcatcaged\"></td>\n<td>blobcatcaged</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatgooglytrash.png\" alt=\"blobcat:blobcatgooglytrash\"></td>\n<td>blobcatgooglytrash</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatheadphones.png\" alt=\"blobcat:blobcatheadphones\"></td>\n<td>blobcatheadphones</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcathighfive.png\" alt=\"blobcat:blobcathighfive\"></td>\n<td>blobcathighfive</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatmelt.png\" alt=\"blobcat:blobcatmelt\"></td>\n<td>blobcatmelt</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatmeltthumb.png\" alt=\"blobcat:blobcatmeltthumb\"></td>\n<td>blobcatmeltthumb</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatnotlikethis.png\" alt=\"blobcat:blobcatnotlikethis\"></td>\n<td>blobcatnotlikethis</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatsaitama.png\" alt=\"blobcat:blobcatsaitama\"></td>\n<td>blobcatsaitama</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatyandere.png\" alt=\"blobcat:blobcatyandere\"></td>\n<td>blobcatyandere</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatpeek2.png\" alt=\"blobcat:blobcatpeek2\"></td>\n<td>blobcatpeek2</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatpeekaboo-1749438579838-1032.png\" alt=\"blobcat:blobcatpeekaboo\"></td>\n<td>blobcatpeekaboo</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatphoto.png\" alt=\"blobcat:blobcatphoto\"></td>\n<td>blobcatphoto</td>\n</tr>\n<tr>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatattentionreverse-1749438579839-1054.png\" alt=\"blobcat:ablobcatattentionreverse\"></td>\n<td>ablobcatattentionreverse</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatreachrev.png\" alt=\"blobcat:ablobcatreachrev\"></td>\n<td>ablobcatreachrev</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatwave-1749438579839-1064.png\" alt=\"blobcat:ablobcatwave\"></td>\n<td>ablobcatwave</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatalt.png\" alt=\"blobcat:blobcatalt\"></td>\n<td>blobcatalt</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatpolice.png\" alt=\"blobcat:blobcatpolice\"></td>\n<td>blobcatpolice</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatshocked.png\" alt=\"blobcat:blobcatshocked\"></td>\n<td>blobcatshocked</td>\n</tr>\n<tr>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatrainbow-1749438579839-1068.png\" alt=\"blobcat:ablobcatrainbow\"></td>\n<td>ablobcatrainbow</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/A_BlobCat_REEEE.png\" alt=\"blobcat:A_BlobCat_REEEE\"></td>\n<td>A_BlobCat_REEEE</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/A_BlobCat_Code-1749438579839-1070.png\" alt=\"blobcat:A_BlobCat_Code\"></td>\n<td>A_BlobCat_Code</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatknitsweats-1749438579839-1052.png\" alt=\"blobcat:ablobcatknitsweats\"></td>\n<td>ablobcatknitsweats</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/A_BlobCat_Nervous.png\" alt=\"blobcat:A_BlobCat_Nervous\"></td>\n<td>A_BlobCat_Nervous</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcat-aww.png\" alt=\"blobcat:blobcat-aww\"></td>\n<td>blobcat-aww</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatcry.png\" alt=\"blobcat:ablobcatcry\"></td>\n<td>ablobcatcry</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatdead.png\" alt=\"blobcat:ablobcatdead\"></td>\n<td>ablobcatdead</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"azuki\"><a href=\"#azuki\" class=\"headerlink\" title=\"azuki#\"></a>azuki<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#azuki\">#</a></h3><p><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/038.png\" alt=\"azuki:038\"><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/039.png\" alt=\"azuki:039\"><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/039.png\" alt=\"azuki:039\"><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/039.png\" alt=\"azuki:039\"><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/039.png\" alt=\"azuki:039\"><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/040.png\" alt=\"azuki:040\"></p>\n<p>Stellar 引入：<code>azuki: https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/&#123;name&#125;.png</code></p>\n<p>Twikoo 使用链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/xiaodouni.json</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>表情</th>\n<th>索引</th>\n<th>表情</th>\n<th>索引</th>\n<th>表情</th>\n<th>索引</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/001.png\" alt=\"azuki:001\"></td>\n<td>001</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/015.png\" alt=\"azuki:015\"></td>\n<td>015</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/029.png\" alt=\"azuki:029\"></td>\n<td>029</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/002.png\" alt=\"azuki:002\"></td>\n<td>002</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/016.png\" alt=\"azuki:016\"></td>\n<td>016</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/030.png\" alt=\"azuki:030\"></td>\n<td>030</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/003.png\" alt=\"azuki:003\"></td>\n<td>003</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/017.png\" alt=\"azuki:017\"></td>\n<td>017</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/031.png\" alt=\"azuki:031\"></td>\n<td>031</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/004.png\" alt=\"azuki:004\"></td>\n<td>004</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/018.png\" alt=\"azuki:018\"></td>\n<td>018</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/032.png\" alt=\"azuki:032\"></td>\n<td>032</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/005.png\" alt=\"azuki:005\"></td>\n<td>005</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/019.png\" alt=\"azuki:019\"></td>\n<td>019</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/033.png\" alt=\"azuki:033\"></td>\n<td>033</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/006.png\" alt=\"azuki:006\"></td>\n<td>006</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/020.png\" alt=\"azuki:020\"></td>\n<td>020</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/034.png\" alt=\"azuki:034\"></td>\n<td>034</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/007.png\" alt=\"azuki:007\"></td>\n<td>007</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/021.png\" alt=\"azuki:021\"></td>\n<td>021</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/035.png\" alt=\"azuki:035\"></td>\n<td>035</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/008.png\" alt=\"azuki:008\"></td>\n<td>008</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/022.png\" alt=\"azuki:022\"></td>\n<td>022</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/036.png\" alt=\"azuki:036\"></td>\n<td>036</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/009.png\" alt=\"azuki:009\"></td>\n<td>009</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/023.png\" alt=\"azuki:023\"></td>\n<td>023</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/037.png\" alt=\"azuki:037\"></td>\n<td>037</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/010.png\" alt=\"azuki:010\"></td>\n<td>010</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/024.png\" alt=\"azuki:024\"></td>\n<td>024</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/038.png\" alt=\"azuki:038\"></td>\n<td>038</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/011.png\" alt=\"azuki:011\"></td>\n<td>011</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/025.png\" alt=\"azuki:025\"></td>\n<td>025</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/039.png\" alt=\"azuki:039\"></td>\n<td>039</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/012.png\" alt=\"azuki:012\"></td>\n<td>012</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/026.png\" alt=\"azuki:026\"></td>\n<td>026</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/040.png\" alt=\"azuki:040\"></td>\n<td>040</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/013.png\" alt=\"azuki:013\"></td>\n<td>013</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/027.png\" alt=\"azuki:027\"></td>\n<td>027</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/014.png\" alt=\"azuki:014\"></td>\n<td>014</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/028.png\" alt=\"azuki:028\"></td>\n<td>028</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"neko\"><a href=\"#neko\" class=\"headerlink\" title=\"neko#\"></a>neko<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#neko\">#</a></h3><p><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/038.png\" alt=\"neko:038\"><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/039.png\" alt=\"neko:039\"><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/040.png\" alt=\"neko:040\"></p>\n<p>Stellar 引入：<code>neko: https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/&#123;name&#125;.png</code></p>\n<p>Twikoo 使用链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/neko.json</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>表情</th>\n<th>索引</th>\n<th>表情</th>\n<th>索引</th>\n<th>表情</th>\n<th>索引</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/001.png\" alt=\"neko:001\"></td>\n<td>001</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/015.png\" alt=\"neko:015\"></td>\n<td>015</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/028.png\" alt=\"neko:028\"></td>\n<td>028</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/002.png\" alt=\"neko:002\"></td>\n<td>002</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/016.png\" alt=\"neko:016\"></td>\n<td>016</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/029.png\" alt=\"neko:029\"></td>\n<td>029</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/003.png\" alt=\"neko:003\"></td>\n<td>003</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/017.png\" alt=\"neko:017\"></td>\n<td>017</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/030.png\" alt=\"neko:030\"></td>\n<td>030</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/004.png\" alt=\"neko:004\"></td>\n<td>004</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/018.png\" alt=\"neko:018\"></td>\n<td>018</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/031.png\" alt=\"neko:031\"></td>\n<td>031</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/005.png\" alt=\"neko:005\"></td>\n<td>005</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/019.png\" alt=\"neko:019\"></td>\n<td>019</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/032-1749438579782-1007.png\" alt=\"neko:032\"></td>\n<td>032</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/006.png\" alt=\"neko:006\"></td>\n<td>006</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/020.png\" alt=\"neko:020\"></td>\n<td>020</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/033.png\" alt=\"neko:033\"></td>\n<td>033</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/007.png\" alt=\"neko:007\"></td>\n<td>007</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/021.png\" alt=\"neko:021\"></td>\n<td>021</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/034.png\" alt=\"neko:034\"></td>\n<td>034</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/008.png\" alt=\"neko:008\"></td>\n<td>008</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/022.png\" alt=\"neko:022\"></td>\n<td>022</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/035.png\" alt=\"neko:035\"></td>\n<td>035</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/009.png\" alt=\"neko:009\"></td>\n<td>009</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/023.png\" alt=\"neko:023\"></td>\n<td>023</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/036.png\" alt=\"neko:036\"></td>\n<td>036</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/010.png\" alt=\"neko:010\"></td>\n<td>010</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/024.png\" alt=\"neko:024\"></td>\n<td>024</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/037.png\" alt=\"neko:037\"></td>\n<td>037</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/011.png\" alt=\"neko:011\"></td>\n<td>011</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/025.png\" alt=\"neko:025\"></td>\n<td>025</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/038.png\" alt=\"neko:038\"></td>\n<td>038</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/012.png\" alt=\"neko:012\"></td>\n<td>012</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/026.png\" alt=\"neko:026\"></td>\n<td>026</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/039.png\" alt=\"neko:039\"></td>\n<td>039</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/013.png\" alt=\"neko:013\"></td>\n<td>013</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/027.png\" alt=\"neko:027\"></td>\n<td>027</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/014.png\" alt=\"neko:014\"></td>\n<td>014</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"dokomo\"><a href=\"#dokomo\" class=\"headerlink\" title=\"dokomo#\"></a>dokomo<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#dokomo\">#</a></h3><p>Stellar 引入: <code>dokomo: https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/&#123;name&#125;.png</code></p>\n<p>Twikoo 使用链接:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://raw.githubusercontent.com/infinitesum/Twikoo-emoji/main/dokomo/dokomo.json</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>表情</th>\n<th>索引</th>\n<th>表情</th>\n<th>索引</th>\n<th>表情</th>\n<th>索引</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-1.png\" alt=\"dokomo:dokomo-1\"></td>\n<td>dokomo-1</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-18.png\" alt=\"dokomo:dokomo-18\"></td>\n<td>dokomo-18</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-35.png\" alt=\"dokomo:dokomo-35\"></td>\n<td>dokomo-35</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-2.png\" alt=\"dokomo:dokomo-2\"></td>\n<td>dokomo-2</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-19.png\" alt=\"dokomo:dokomo-19\"></td>\n<td>dokomo-19</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-36.png\" alt=\"dokomo:dokomo-36\"></td>\n<td>dokomo-36</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-3.png\" alt=\"dokomo:dokomo-3\"></td>\n<td>dokomo-3</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-20.png\" alt=\"dokomo:dokomo-20\"></td>\n<td>dokomo-20</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-37.png\" alt=\"dokomo:dokomo-37\"></td>\n<td>dokomo-37</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-4.png\" alt=\"dokomo:dokomo-4\"></td>\n<td>dokomo-4</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-21.png\" alt=\"dokomo:dokomo-21\"></td>\n<td>dokomo-21</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-38.png\" alt=\"dokomo:dokomo-38\"></td>\n<td>dokomo-38</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-5.png\" alt=\"dokomo:dokomo-5\"></td>\n<td>dokomo-5</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-22.png\" alt=\"dokomo:dokomo-22\"></td>\n<td>dokomo-22</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-39.png\" alt=\"dokomo:dokomo-39\"></td>\n<td>dokomo-39</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-6.png\" alt=\"dokomo:dokomo-6\"></td>\n<td>dokomo-6</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-23.png\" alt=\"dokomo:dokomo-23\"></td>\n<td>dokomo-23</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/dokomo-40-1749438579846-1346.png\" alt=\"dokomo:dokomo-40\"></td>\n<td>dokomo-40</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-7.png\" alt=\"dokomo:dokomo-7\"></td>\n<td>dokomo-7</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-24.png\" alt=\"dokomo:dokomo-24\"></td>\n<td>dokomo-24</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-41.png\" alt=\"dokomo:dokomo-41\"></td>\n<td>dokomo-41</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-8.png\" alt=\"dokomo:dokomo-8\"></td>\n<td>dokomo-8</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-25.png\" alt=\"dokomo:dokomo-25\"></td>\n<td>dokomo-25</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-42.png\" alt=\"dokomo:dokomo-42\"></td>\n<td>dokomo-42</td>\n</tr>\n<tr>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/dokomo-9-1749438579846-1360.png\" alt=\"dokomo:dokomo-9\"></td>\n<td>dokomo-9</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-26.png\" alt=\"dokomo:dokomo-26\"></td>\n<td>dokomo-26</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-43.png\" alt=\"dokomo:dokomo-43\"></td>\n<td>dokomo-43</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-10.png\" alt=\"dokomo:dokomo-10\"></td>\n<td>dokomo-10</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-27.png\" alt=\"dokomo:dokomo-27\"></td>\n<td>dokomo-27</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-44.png\" alt=\"dokomo:dokomo-44\"></td>\n<td>dokomo-44</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-11.png\" alt=\"dokomo:dokomo-11\"></td>\n<td>dokomo-11</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-28.png\" alt=\"dokomo:dokomo-28\"></td>\n<td>dokomo-28</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-45.png\" alt=\"dokomo:dokomo-45\"></td>\n<td>dokomo-45</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-12.png\" alt=\"dokomo:dokomo-12\"></td>\n<td>dokomo-12</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-29.png\" alt=\"dokomo:dokomo-29\"></td>\n<td>dokomo-29</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-46.png\" alt=\"dokomo:dokomo-46\"></td>\n<td>dokomo-46</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-13.png\" alt=\"dokomo:dokomo-13\"></td>\n<td>dokomo-13</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-30.png\" alt=\"dokomo:dokomo-30\"></td>\n<td>dokomo-30</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-47.png\" alt=\"dokomo:dokomo-47\"></td>\n<td>dokomo-47</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-14.png\" alt=\"dokomo:dokomo-14\"></td>\n<td>dokomo-14</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-31.png\" alt=\"dokomo:dokomo-31\"></td>\n<td>dokomo-31</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-48.png\" alt=\"dokomo:dokomo-48\"></td>\n<td>dokomo-48</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-15.png\" alt=\"dokomo:dokomo-15\"></td>\n<td>dokomo-15</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-32.png\" alt=\"dokomo:dokomo-32\"></td>\n<td>dokomo-32</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-49.png\" alt=\"dokomo:dokomo-49\"></td>\n<td>dokomo-49</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-16.png\" alt=\"dokomo:dokomo-16\"></td>\n<td>dokomo-16</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-33.png\" alt=\"dokomo:dokomo-33\"></td>\n<td>dokomo-33</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-17.png\" alt=\"dokomo:dokomo-17\"></td>\n<td>dokomo-17</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-34.png\" alt=\"dokomo:dokomo-34\"></td>\n<td>dokomo-34</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"总字数统计：“发表了x篇文章，共计x字”\"><a href=\"#总字数统计：“发表了x篇文章，共计x字”\" class=\"headerlink\" title=\"总字数统计：“发表了x篇文章，共计x字”#\"></a>总字数统计：“发表了x篇文章，共计x字”<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E6%80%BB%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%8F%91%E8%A1%A8%E4%BA%86x%E7%AF%87%E6%96%87%E7%AB%A0%E5%85%B1%E8%AE%A1x%E5%AD%97\">#</a></h2><p>需要修改主题文件 <img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/038.png\" alt=\"azuki:038\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 3.left.top: 面包屑导航</span><br><span class=\"line\"></span><br><span class=\"line\">  el += `&lt;div class=&quot;flex-row&quot; id=&quot;breadcrumb&quot;&gt;`</span><br><span class=\"line\"></span><br><span class=\"line\">    // 首页</span><br><span class=\"line\"></span><br><span class=\"line\">    el += `&lt;a class=&quot;cap breadcrumb&quot; href=&quot;$&#123;url_for(config.root)&#125;&quot;&gt;$&#123;__(&quot;btn.home&quot;)&#125;&lt;/a&gt;`</span><br><span class=\"line\"></span><br><span class=\"line\">    if (theme.wiki.tree[page.wiki]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      el += partial(&#x27;breadcrumb/wiki&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else if (page.layout == &#x27;post&#x27;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      el += partial(&#x27;breadcrumb/blog&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      el += partial(&#x27;breadcrumb/page&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // end 3.left.top</span><br><span class=\"line\"></span><br><span class=\"line\">  el += `&lt;/div&gt;`</span><br></pre></td></tr></table></figure>\n\n<p>并在后面添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在这里添加标签代码</span><br><span class=\"line\"></span><br><span class=\"line\"> if (page.layout == &quot;post&quot; &amp;&amp; page.tags &amp;&amp; page.tags.length &gt; 0) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   el += &#x27;&lt;div id=&quot;tag&quot;&gt;&#x27;; // 将标签容器的创建移动到条件内部</span><br><span class=\"line\"></span><br><span class=\"line\">   el += &#x27; &lt;span&gt;&amp;nbsp标签：&lt;/span&gt;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">   el += list_categories(page.tags, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     class: &quot;cap breadcrumb&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">     show_count: false,</span><br><span class=\"line\"></span><br><span class=\"line\">     separator: &#x27;&amp;nbsp; &#x27;,</span><br><span class=\"line\"></span><br><span class=\"line\">     style: &quot;none&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">   el += &#x27;&amp;nbsp&lt;/div&gt;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"toc-字体大小调整\"><a href=\"#toc-字体大小调整\" class=\"headerlink\" title=\"toc 字体大小调整#\"></a>toc 字体大小调整<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#toc-%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F%E8%B0%83%E6%95%B4\">#</a></h2><p>需要修改主题文件 <img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/038.png\" alt=\"azuki:038\"></p>\n<p>就是把文章目录字体调小了一点点。</p>\n<p>在<code>themes/stellar/source/css/_layout/widgets/toc.styl</code> 文件中，找到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 各级缩进样式</span><br><span class=\"line\"></span><br><span class=\"line\">.widget-wrapper.toc .toc</span><br><span class=\"line\"></span><br><span class=\"line\">  .toc-item</span><br><span class=\"line\"></span><br><span class=\"line\">    font-weight: 500</span><br><span class=\"line\"></span><br><span class=\"line\">    --fsp: $fsp1</span><br><span class=\"line\"></span><br><span class=\"line\">  .toc-item .toc-item</span><br><span class=\"line\"></span><br><span class=\"line\">    font-weight: 400</span><br><span class=\"line\"></span><br><span class=\"line\">    --fsp: $fsp2</span><br></pre></td></tr></table></figure>\n\n<p>把<code>--fsp: $fsp1</code>一行注释掉：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 各级缩进样式</span><br><span class=\"line\"></span><br><span class=\"line\">.widget-wrapper.toc .toc</span><br><span class=\"line\"></span><br><span class=\"line\">  .toc-item</span><br><span class=\"line\"></span><br><span class=\"line\">    font-weight: 500</span><br><span class=\"line\"></span><br><span class=\"line\">    /*--fsp: $fsp1*/</span><br><span class=\"line\"></span><br><span class=\"line\">  .toc-item .toc-item</span><br><span class=\"line\"></span><br><span class=\"line\">    font-weight: 400</span><br><span class=\"line\"></span><br><span class=\"line\">    --fsp: $fsp2</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"给超长代码块增加滚动条\"><a href=\"#给超长代码块增加滚动条\" class=\"headerlink\" title=\"给超长代码块增加滚动条#\"></a>给超长代码块增加滚动条<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E7%BB%99%E8%B6%85%E9%95%BF%E4%BB%A3%E7%A0%81%E5%9D%97%E5%A2%9E%E5%8A%A0%E6%BB%9A%E5%8A%A8%E6%9D%A1\">#</a></h2><p>首先判断代码块是否过长，如果是，则设置最大高度并开启滚动。</p>\n<p>新建 <code>source/js/adjust-codeblock-height.js</code>，添加以下内容：</p>\n<p>adjust-code-block-height.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.addEventListener(&quot;DOMContentLoaded&quot;, function() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 选择所有的.md-text元素</span><br><span class=\"line\"></span><br><span class=\"line\">    var codeBlocks = document.querySelectorAll(&#x27;.md-text&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 遍历每个.md-text元素</span><br><span class=\"line\"></span><br><span class=\"line\">    codeBlocks.forEach(function(block) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      // 检查是否包含.highlight类的子元素，且父元素高度超过500px</span><br><span class=\"line\"></span><br><span class=\"line\">      var highlightBlocks = block.querySelectorAll(&#x27;.highlight&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">      highlightBlocks.forEach(function(highlightBlock) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if (highlightBlock.clientHeight &gt; 800) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          highlightBlock.style.maxHeight = &#x27;300px&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">          highlightBlock.style.overflow = &#x27;auto&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>以上代码代表如果代码框高度超过 800px，则开启折叠，折叠框最大高度为 300px。其中，可自行设置判断阈值 <code>if (highlightBlock.clientHeight &gt; 800) &#123;</code> 以及折叠后最大高度 <code>highlightBlock.style.maxHeight = &#39;300px&#39;;</code>。</p>\n<h2 id=\"雪花特效\"><a href=\"#雪花特效\" class=\"headerlink\" title=\"雪花特效#\"></a>雪花特效<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E9%9B%AA%E8%8A%B1%E7%89%B9%E6%95%88\">#</a></h2><p>代码来自<a href=\"https://mengru.space/?posts/2021/12/%E5%97%96%E5%BE%97%E4%B8%80%E4%B8%8B11%E6%9C%88##%E5%8D%9A%E5%AE%A2%E4%B8%8B%E9%9B%AA%E7%9A%84%E5%B0%8F%E8%84%9A%E6%9C%AC\">这里</a>。我稍微做了一点修改，做成了一个按钮引入到主题中并用 localStorage 记录下雪状态，很简单的代码完美的解决了我的强迫症～</p>\n<h2 id=\"博客已运行x天x小时x分钟\"><a href=\"#博客已运行x天x小时x分钟\" class=\"headerlink\" title=\"博客已运行x天x小时x分钟#\"></a>博客已运行x天x小时x分钟<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E5%8D%9A%E5%AE%A2%E5%B7%B2%E8%BF%90%E8%A1%8Cx%E5%A4%A9x%E5%B0%8F%E6%97%B6x%E5%88%86%E9%92%9F\">#</a></h2><p>在网站页脚部分添加一个“博客已运行 x 天 x 小时 x 分钟”字样，显示效果：</p>\n<p>![勉强运行x天x小时x分钟x秒](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-16 at <a href=\"mailto:&#x32;&#49;&#x2e;&#53;&#49;&#x2e;&#x30;&#55;&#64;&#50;&#120;&#x2d;&#x31;&#55;&#52;&#57;&#52;&#51;&#x38;&#53;&#55;&#x39;&#56;&#x33;&#x38;&#x2d;&#49;&#48;&#x33;&#48;&#46;&#119;&#101;&#x62;&#112;\">21.51.07@2x-1749438579838-1030.webp</a>)勉强运行x天x小时x分钟x秒</p>\n<p>代码抄自<a href=\"https://blog.bxzdyg.cn/p/%E4%BD%BF%E7%94%A8Hexo%E5%92%8CStellar%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/#%E7%AB%99%E7%82%B9%E7%BB%9F%E8%AE%A1\">这里</a>，我为了调整样式加了一行代码 <img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatpeekaboo-1749438579838-1032.png\" alt=\"blobcat:blobcatpeekaboo\">。在 <code>_config.stellar.yml</code> 里添加如下代码，其中 <code>&lt;span class=&#39;runtime&#39;&gt;</code> 中的类名 <code>runtime</code> 可自行设置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">footer:</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  content: | # 支持 Markdown 格式</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;span id=&quot;runtime_span&quot;&gt;&lt;/span&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">      function show_runtime() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">          window.setTimeout(&quot;show_runtime()&quot;, 1000);</span><br><span class=\"line\"></span><br><span class=\"line\">          X = new Date(&quot;2024/01/01 17:00:00&quot;); // 网站开始运行的日期和时间</span><br><span class=\"line\"></span><br><span class=\"line\">          Y = new Date(); // 当前日期和时间</span><br><span class=\"line\"></span><br><span class=\"line\">          T = (Y.getTime() - X.getTime()); // 网站运行的总毫秒数</span><br><span class=\"line\"></span><br><span class=\"line\">          M = 24 * 60 * 60 * 1000; // 一天的毫秒数</span><br><span class=\"line\"></span><br><span class=\"line\">          a = T / M; // 总天数</span><br><span class=\"line\"></span><br><span class=\"line\">          A = Math.floor(a); // 总天数的整数部分</span><br><span class=\"line\"></span><br><span class=\"line\">          b = (a - A) * 24; // 总小时数</span><br><span class=\"line\"></span><br><span class=\"line\">          B = Math.floor(b); // 总小时数的整数部分</span><br><span class=\"line\"></span><br><span class=\"line\">          c = (b - B) * 60; // 总分钟数</span><br><span class=\"line\"></span><br><span class=\"line\">          C = Math.floor((b - B) * 60); // 总分钟数的整数部分</span><br><span class=\"line\"></span><br><span class=\"line\">          D = Math.floor((c - C) * 60); // 总秒数</span><br><span class=\"line\"></span><br><span class=\"line\">          runtime_span.innerHTML = &quot;⏱️勉强运行 &lt;span class=&#x27;runtime&#x27;&gt;&quot; + A + &quot;天&quot; + B + &quot;小时&quot; + C + &quot;分&quot; + D + &quot;秒&lt;/span&gt;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      show_runtime();</span><br><span class=\"line\"></span><br><span class=\"line\">      &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>再在自定义的 css 文件里添加以下代码，其中 color 可设置为主题色 <code>var(--theme-link)</code> 或自行设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.runtime</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    font-weight: bold;</span><br><span class=\"line\"></span><br><span class=\"line\">    color: #7F84A7;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"页脚增加猫猫图片\"><a href=\"#页脚增加猫猫图片\" class=\"headerlink\" title=\"页脚增加猫猫图片#\"></a>页脚增加猫猫图片<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E9%A1%B5%E8%84%9A%E5%A2%9E%E5%8A%A0%E7%8C%AB%E7%8C%AB%E5%9B%BE%E7%89%87\">#</a></h2><p>显示效果：</p>\n<p>![img](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-17 at <a href=\"mailto:&#x31;&#x39;&#46;&#x30;&#x39;&#46;&#52;&#52;&#64;&#50;&#120;&#45;&#x31;&#55;&#x34;&#x39;&#52;&#x33;&#x38;&#x35;&#x37;&#57;&#x38;&#51;&#x38;&#45;&#x31;&#x30;&#51;&#52;&#x2e;&#x77;&#101;&#x62;&#112;\">19.09.44@2x-1749438579838-1034.webp</a>)</p>\n<p>首先，如果是使用本地图片，将图片上传到主题的资源文件夹，比如 <code>source/asset/posts/keyboard.png</code></p>\n<p>然后在主题配置文件的 <code>_config.stellar.yml</code> 中添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">footer:</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">  content: | # 支持 Markdown 格式</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;img src=&quot;/你的/图片/路径.png&quot; alt=&quot;描述文字&quot; style=&quot;float: right; width: 60px; margin-left: 20px;&quot;&gt;</span><br></pre></td></tr></table></figure>\n\n<p>其中 <code>float: right</code> 限定图片右对齐，<code>width:60px</code> 限制图片大小，可自行调整。</p>\n<h2 id=\"外部链接后面显示图标\"><a href=\"#外部链接后面显示图标\" class=\"headerlink\" title=\"外部链接后面显示图标#\"></a>外部链接后面显示图标<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E5%A4%96%E9%83%A8%E9%93%BE%E6%8E%A5%E5%90%8E%E9%9D%A2%E6%98%BE%E7%A4%BA%E5%9B%BE%E6%A0%87\">#</a></h2><p>显示效果：</p>\n<p>![外部链接图标](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-16 at <a href=\"mailto:&#50;&#x32;&#46;&#x30;&#57;&#46;&#51;&#x38;&#64;&#x32;&#x78;&#45;&#x31;&#x37;&#52;&#57;&#x34;&#x33;&#56;&#x35;&#x37;&#57;&#x38;&#x33;&#x38;&#45;&#49;&#x30;&#51;&#x38;&#46;&#119;&#x65;&#x62;&#x70;\">22.09.38@2x-1749438579838-1038.webp</a>)外部链接图标</p>\n<p>方法一：</p>\n<p>WARNING</p>\n<p>老方法依赖 cheerio 模块，可行，但似乎会带来一些网站加载过慢的问题，我现在已经开心地转用新方法了，把老方法摆在这里全当（水）记（字）录（数）。</p>\n<p>新建 <code>themes/stellar/scripts/filters/link-icon.js</code> 文件，增加以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用 cheerio 模块在文章中的外部链接后添加一个小图标：npm i cheerio --savehexo.extend.filter.register(&#x27;after_render:html&#x27;, function(html, data) &#123;    const cheerio = require(&#x27;cheerio&#x27;);    const $ = cheerio.load(html, &#123;decodeEntities: false&#125;);</span><br><span class=\"line\">    // 只选择&lt;article class=&quot;md-text content&quot;&gt;元素内的&lt;a&gt;标签    $(&#x27;article.md-text.content a, footer.page-footer.footnote a&#x27;).each(function() &#123;      const link = $(this);      const href = link.attr(&#x27;href&#x27;);    //排除一些特殊的链接    if (!link.parents(&#x27;div.tag-plugin.users-wrap&#x27;).length &amp;&amp; !link.parents(&#x27;div.tag-plugin.sites-wrap&#x27;).length &amp;&amp; !link.parent(&#x27;div.tag-plugin.ghcard&#x27;).length &amp;&amp; !link.parents(&#x27;div.tag-plugin.link.dis-select&#x27;).length &amp;&amp; !link.parents(&#x27;div.tag-plugin.colorful.note&#x27;).length &amp;&amp; !link.parents(&#x27;div.social-wrap.dis-select&#x27;).length) &#123;</span><br><span class=\"line\">      // 确保链接的 href 属性存在，并检查其是否以 &#x27;http&#x27; 或 &#x27;/&#x27; 开头      if (href &amp;&amp; (href.startsWith(&#x27;http&#x27;) || href.startsWith(&#x27;/&#x27;))) &#123;        link.html(link.html() + ` &lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;svg width=&quot;.7em&quot; height=&quot;.7em&quot; viewBox=&quot;0 0 21 21&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z&quot; fill=&quot;currentColor&quot; /&gt;&lt;path d=&quot;M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z&quot; fill=&quot;currentColor&quot;&gt;&lt;/svg&gt;&lt;/span&gt;`);        //link.attr(&#x27;target&#x27;, &#x27;_blank&#x27;); // 可选：确保链接在新标签页打开      &#125;    &#125;    &#125;);</span><br><span class=\"line\">    return $.html();  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>方法二：</p>\n<p>TIP</p>\n<p>用老方法配置完我总觉得使用 Cheerio 模块后会导致网站加载过慢，就又优化了一下。询问 ChatGPT 得知可以考虑不使用 Node.js 的服务器端处理，而是使用纯前端的方法来达到同样的效果，通过在客户端 JavaScript 中添加代码来实现类似的功能，而不是在 Hexo 的后端渲染过程中处理。（好了，可以卸载 cheerio 了）</p>\n<p>下面的这段代码可以在页面加载完成后运行，它会查找指定元素中的链接，并在这些链接后添加一个图标。这种方法的好处是，它不需要服务端的处理，所有操作都在用户的浏览器内完成，可以减少服务器负担，并且避免可能因服务器端渲染引起的加载问题。此外，这种方法也提供了更好的用户体验，因为它不会延迟页面内容的显示。</p>\n<p>新建<code>source/js/link-icon.js</code> 文件，填入以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.addEventListener(&#x27;DOMContentLoaded&#x27;, function () &#123;    console.log(&#x27;Document is ready.&#x27;);</span><br><span class=\"line\">    const links = document.querySelectorAll(&#x27;article.md-text.content a, footer.page-footer.footnote a&#x27;);    console.log(&#x27;Links found:&#x27;, links.length);</span><br><span class=\"line\">    links.forEach(function(link) &#123;        console.log(&#x27;Processing link:&#x27;, link.href);</span><br><span class=\"line\">        const parentClasses = [&#x27;tag-plugin.users-wrap&#x27;, &#x27;tag-plugin.sites-wrap&#x27;, &#x27;tag-plugin.ghcard&#x27;, &#x27;tag-plugin.link.dis-select&#x27;, &#x27;tag-plugin.colorful.note&#x27;, &#x27;social-wrap.dis-select&#x27;];        let skip = false;</span><br><span class=\"line\">        parentClasses.forEach(pc =&gt; &#123;            if (link.closest(`div.$&#123;pc&#125;`)) &#123;                skip = true;                console.log(&#x27;Skipping link due to parent class:&#x27;, pc);            &#125;        &#125;);</span><br><span class=\"line\">        if (!skip) &#123;            const href = link.getAttribute(&#x27;href&#x27;);            console.log(&#x27;Link href:&#x27;, href);</span><br><span class=\"line\">            if (href &amp;&amp; (href.startsWith(&#x27;http&#x27;) || href.startsWith(&#x27;/&#x27;))) &#123;                link.innerHTML += ` &lt;span style=&quot;white-space: nowrap;&quot;&gt;&lt;svg width=&quot;.7em&quot; height=&quot;.7em&quot; viewBox=&quot;0 0 21 21&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;path d=&quot;m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z&quot; fill=&quot;currentColor&quot; /&gt;&lt;path d=&quot;M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z&quot; fill=&quot;currentColor&quot;&gt;&lt;/svg&gt;&lt;/span&gt;`;                console.log(&#x27;Icon added to link:&#x27;, link.innerHTML);            &#125;        &#125;    &#125;);&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这里做了两个筛选：</p>\n<ol>\n<li><code>const parentClasses = [&#39;tag-plugin.users-wrap&#39;, &#39;tag-plugin.sites-wrap&#39;, &#39;tag-plugin.ghcard&#39;, &#39;tag-plugin.link.dis-select&#39;, &#39;tag-plugin.colorful.note&#39;, &#39;social-wrap.dis-select&#39;];</code> 是被排除的类，可自行增减；</li>\n<li><code>if (href &amp;&amp; (href.startsWith(&#39;http&#39;) || href.startsWith(&#39;/&#39;)))</code> 判断链接是否以 <code>http</code> 或 <code>/</code> 开头，如果不想给站内链接添加图标的话可以把后面的筛选条件去掉。</li>\n</ol>\n<p>然后在主题文件 <code>_config.stellar.yml</code> 中引入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inject:</span><br><span class=\"line\"></span><br><span class=\"line\">  head:</span><br><span class=\"line\"></span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">    - &lt;script src=&quot;/js/link-icon.js&quot;&gt;&lt;/script&gt; # 链接图标</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"增加参与讨论按钮\"><a href=\"#增加参与讨论按钮\" class=\"headerlink\" title=\"增加参与讨论按钮#\"></a>增加参与讨论按钮<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E5%A2%9E%E5%8A%A0%E5%8F%82%E4%B8%8E%E8%AE%A8%E8%AE%BA%E6%8C%89%E9%92%AE\">#</a></h2><p>代码抄自<a href=\"https://weekdaycare.cn/\">星日语</a>，最新主题已自带此功能。</p>\n<h2 id=\"适配-Obsidian-Callouts-标注块语法\"><a href=\"#适配-Obsidian-Callouts-标注块语法\" class=\"headerlink\" title=\"适配 Obsidian Callouts 标注块语法#\"></a>适配 Obsidian Callouts 标注块语法<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E9%80%82%E9%85%8D-obsidian-callouts-%E6%A0%87%E6%B3%A8%E5%9D%97%E8%AF%AD%E6%B3%95\">#</a></h2><p>显示效果：</p>\n<p>![img](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-16 at <a href=\"mailto:&#50;&#50;&#46;&#50;&#x33;&#x2e;&#53;&#49;&#x40;&#x32;&#x78;&#x2d;&#49;&#55;&#52;&#57;&#52;&#51;&#56;&#53;&#x37;&#57;&#56;&#x33;&#x38;&#45;&#49;&#x30;&#x33;&#54;&#x2e;&#119;&#101;&#98;&#x70;\">22.23.51@2x-1749438579838-1036.webp</a>)</p>\n<p>暗黑模式下的显示效果：</p>\n<p>![img](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-16 at <a href=\"mailto:&#x32;&#50;&#x2e;&#50;&#52;&#x2e;&#x31;&#x39;&#64;&#50;&#120;&#45;&#x31;&#55;&#52;&#57;&#52;&#x33;&#56;&#x35;&#55;&#x39;&#x38;&#x33;&#57;&#x2d;&#49;&#x30;&#x34;&#48;&#46;&#x77;&#x65;&#98;&#112;\">22.24.19@2x-1749438579839-1040.webp</a>)</p>\n<p>参考了 <a href=\"https://uuanqin.top/p/d4bc55f2/index.html\">Hexo 博客适配 Obsidian 新语法</a>，基础的设置请参考此链接。我暂时用不上其他功能，就把 callout 的样式搬来并做了一些修改。我个人还挺喜欢这个 callout 样式，比 quote 要好看而且添加也很方便，主要是可以和 Obsidian 打通，嘿嘿。</p>\n<h3 id=\"样式修改\"><a href=\"#样式修改\" class=\"headerlink\" title=\"样式修改#\"></a>样式修改<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9\">#</a></h3><p>原版的 callouts 标注块样式间距太大，我在此基础上改了 callout_blocks_common.css（不是很懂，写得很烂……但是能用）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:root&#123;--callout-note:68,138,255;--callout-abstract:0,176,255;--callout-info:0,184,212;--callout-tip:0,191,165;--callout-success:8,185,78;--callout-question:224,172,0;--callout-warning:255,145,0;--callout-failure:255,82,82;--callout-danger:255,23,68;--callout-bug:245,0,87;--callout-example:124,77,255;--callout-quote:158,158,158;--callout-radius:6px;--callout-border-opacity:0.5;--callout-title-bg-opacity:0.08&#125;.callout-fold:before&#123;align-self:center;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;16&quot; height=&quot;16&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;gray&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;chevron-down&quot;&gt;&lt;path d=&quot;m6 9 6 6 6-6&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.callout-fold&#123;display:flex;transform:rotate(-90deg);transition:.5s cubic-bezier(.075,.82,.165,1)&#125;.custom-callout[open]&gt;summary&gt;.callout-fold&#123;transform:rotate(0deg)&#125;.custom-callout&gt;summary&#123;border-top-left-radius:var(--callout-radius);border-top-right-radius:var(--callout-radius);cursor:pointer;margin:0;padding:0.5rem 1rem&#125;.custom-callout&gt;summary::marker&#123;content:&quot;&quot;&#125;.custom-callout&gt;summary:before&#123;margin-right:.5rem&#125;.custom-callout&gt;summary::-webkit-details-marker&#123;display:none&#125;.callout-title&#123;--fsp: calc(17px - 1px);font-size: var(--fsp);display:flex;justify-content:space-between;font-weight:bold;&#125;.custom-callout&gt;.callout-body&#123;background:transparent!important;border-left:none;margin:0!important;padding:.3rem 1rem;position:relative&#125;</span><br><span class=\"line\">.custom-callout&gt;.callout-body&gt;p&#123;--fsp: calc(17px - 1px);font-size: var(--fsp);margin:8px 0&#125;.custom-callout&gt;.callout-body&gt;pre&#123;margin:1.25rem -1rem&#125;.custom-callout&gt;.callout-body&gt;pre:first-child&#123;margin-top:-.75rem&#125;.custom-callout&gt;.callout-body&gt;pre:last-child&#123;margin-bottom:-.75rem&#125;</span><br><span class=\"line\">.custom-callout.note,.custom-callout.seealso&#123;border-color:rgba(var(--callout-note),var(--callout-border-opacity))&#125;.custom-callout.note&gt;summary,.custom-callout.seealso&gt;summary&#123;    background-color:rgba(var(--callout-note),var(--callout-title-bg-opacity));    color:rgba(var(var(--callout-note)))&#125;</span><br><span class=\"line\">.custom-callout.abstract,.custom-callout.summary,.custom-callout.tldr&#123;border-color:rgba(var(--callout-abstract),var(--callout-border-opacity))&#125;.custom-callout.abstract&gt;summary,.custom-callout.summary&gt;summary,.custom-callout.tldr&gt;summary&#123;    background-color:rgba(var(--callout-abstract),var(--callout-title-bg-opacity));    color:rgba(var(--callout-abstract))&#125;</span><br><span class=\"line\">.custom-callout.info,.custom-callout.todo&#123;border-color:rgba(var(--callout-info),var(--callout-border-opacity))&#125;.custom-callout.info&gt;summary,.custom-callout.todo&gt;summary&#123;    background-color:rgba(var(--callout-info),var(--callout-title-bg-opacity));    color:rgba(var(--callout-info))&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.custom-callout.hint,.custom-callout.important,.custom-callout.tip&#123;border-color:rgba(var(--callout-tip),var(--callout-border-opacity))&#125;.custom-callout.hint&gt;summary,.custom-callout.important&gt;summary,.custom-callout.tip&gt;summary&#123;    background-color:rgba(var(--callout-tip),var(--callout-title-bg-opacity));    color:rgba(var(--callout-tip))&#125;</span><br><span class=\"line\">.custom-callout.check,.custom-callout.done,.custom-callout.success&#123;border-color:rgba(var(--callout-success),var(--callout-border-opacity))&#125;.custom-callout.check&gt;summary,.custom-callout.done&gt;summary,.custom-callout.success&gt;summary&#123;    background-color:rgba(var(--callout-success),var(--callout-title-bg-opacity));    color:rgba(var(--callout-success))&#125;</span><br><span class=\"line\">.custom-callout.faq,.custom-callout.help,.custom-callout.question&#123;border-color:rgba(var(--callout-question),var(--callout-border-opacity))&#125;.custom-callout.faq&gt;summary,.custom-callout.help&gt;summary,.custom-callout.question&gt;summary&#123;    background-color:rgba(var(--callout-question),var(--callout-title-bg-opacity));    color:rgba(var(--callout-question))&#125;</span><br><span class=\"line\">.custom-callout.attention,.custom-callout.caution,.custom-callout.warning&#123;border-color:rgba(var(--callout-warning),var(--callout-border-opacity))&#125;.custom-callout.attention&gt;summary,.custom-callout.caution&gt;summary,.custom-callout.warning&gt;summary&#123;    background-color:rgba(var(--callout-warning),var(--callout-title-bg-opacity));    color:rgba(var(--callout-warning))&#125;</span><br><span class=\"line\">.custom-callout.fail,.custom-callout.failure,.custom-callout.missing&#123;border-color:rgba(var(--callout-failure),var(--callout-border-opacity))&#125;.custom-callout.fail&gt;summary,.custom-callout.failure&gt;summary,.custom-callout.missing&gt;summary&#123;    background-color:rgba(var(--callout-failure),var(--callout-title-bg-opacity));    color:rgba(var(--callout-failure))&#125;</span><br><span class=\"line\">.custom-callout.danger,.custom-callout.error&#123;border-color:rgba(var(--callout-danger),var(--callout-border-opacity))&#125;.custom-callout.danger&gt;summary,.custom-callout.error&gt;summary&#123;    background-color:rgba(var(--callout-danger),var(--callout-title-bg-opacity));    color:rgba(var(--callout-danger))&#125;</span><br><span class=\"line\">.custom-callout.bug&#123;border-color:rgba(var(--callout-bug),var(--callout-border-opacity))&#125;.custom-callout.bug&gt;summary&#123;    background-color:rgba(var(--callout-bug),var(--callout-title-bg-opacity));    color:rgba(var(--callout-bug))&#125;</span><br><span class=\"line\">.custom-callout.example&#123;border-color:rgba(var(--callout-example),var(--callout-border-opacity))&#125;.custom-callout.example&gt;summary&#123;    background-color:rgba(var(--callout-example),var(--callout-title-bg-opacity));    color:rgba(var(--callout-example))&#125;</span><br><span class=\"line\">.custom-callout.cite,.custom-callout.quote&#123;border-color:rgba(var(--callout-quote),var(--callout-border-opacity))&#125;.custom-callout.cite&gt;summary,.custom-callout.quote&gt;summary&#123;    background-color:rgba(var(--callout-quote),var(--callout-title-bg-opacity));    color:rgba(var(--callout-quote))&#125;</span><br><span class=\"line\">.callout-title&gt;.callout-icon+div&#123;-webkit-box-flex:1;-ms-flex:1 1 0%;-webkit-flex:1 1 0%;flex:1 1 0%;margin-left:.25rem&#125;.callout-icon&#123;align-items:center;color:#000;display:flex&#125;.callout-icon:before&#123;height:20px;width:20px&#125;.custom-callout.attention&gt;.callout-title&gt;.callout-icon:before,.custom-callout.caution&gt;.callout-title&gt;.callout-icon:before,.custom-callout.warning&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%23FF9100&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-alert-triangle&quot;&gt;&lt;path d=&quot;m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3ZM12 9v4M12 17h.01&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.note&gt;.callout-title&gt;.callout-icon:before,.custom-callout.seealso&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%23448AFF&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-pencil&quot;&gt;&lt;path d=&quot;m18 2 4 4M7.5 20.5 19 9l-4-4L3.5 16.5 2 22z&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.abstract&gt;.callout-title&gt;.callout-icon:before,.custom-callout.summary&gt;.callout-title&gt;.callout-icon:before,.custom-callout.tldr&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%2300B0FF&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-clipboard-list&quot;&gt;&lt;rect x=&quot;8&quot; y=&quot;2&quot; width=&quot;8&quot; height=&quot;4&quot; rx=&quot;1&quot; ry=&quot;1&quot;/&gt;&lt;path d=&quot;M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2M12 11h4M12 16h4M8 11h.01M8 16h.01&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.info&gt;.callout-title&gt;.callout-icon:before,.custom-callout.todo&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%2300B8D4&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-check-circle-2&quot;&gt;&lt;path d=&quot;M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z&quot;/&gt;&lt;path d=&quot;m9 12 2 2 4-4&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.hint&gt;.callout-title&gt;.callout-icon:before,.custom-callout.important&gt;.callout-title&gt;.callout-icon:before,.custom-callout.tip&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%2300BFA5&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-flame&quot;&gt;&lt;path d=&quot;M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.check&gt;.callout-title&gt;.callout-icon:before,.custom-callout.done&gt;.callout-title&gt;.callout-icon:before,.custom-callout.success&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%2300C853&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-check&quot;&gt;&lt;path d=&quot;M20 6 9 17l-5-5&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.faq&gt;.callout-title&gt;.callout-icon:before,.custom-callout.help&gt;.callout-title&gt;.callout-icon:before,.custom-callout.question&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%23E0AC00&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-help-circle&quot;&gt;&lt;circle cx=&quot;12&quot; cy=&quot;12&quot; r=&quot;10&quot;/&gt;&lt;path d=&quot;M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3M12 17h.01&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.fail&gt;.callout-title&gt;.callout-icon:before,.custom-callout.failure&gt;.callout-title&gt;.callout-icon:before,.custom-callout.missing&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%23FF5252&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-x&quot;&gt;&lt;path d=&quot;M18 6 6 18M6 6l12 12&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.danger&gt;.callout-title&gt;.callout-icon:before,.custom-callout.error&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%23FF1744&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-zap&quot;&gt;&lt;path d=&quot;M13 2 3 14h9l-1 8 10-12h-9l1-8z&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.bug&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%23F50057&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-bug&quot;&gt;&lt;rect x=&quot;8&quot; y=&quot;6&quot; width=&quot;8&quot; height=&quot;14&quot; rx=&quot;4&quot;/&gt;&lt;path d=&quot;m19 7-3 2M5 7l3 2M19 19l-3-2M5 19l3-2M20 13h-4M4 13h4M10 4l1 2M14 4l-1 2&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.example&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%237C4DFF&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-list&quot;&gt;&lt;path d=&quot;M8 6h13M8 12h13M8 18h13M3 6h.01M3 12h.01M3 18h.01&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;.custom-callout.cite&gt;.callout-title&gt;.callout-icon:before,.custom-callout.quote&gt;.callout-title&gt;.callout-icon:before&#123;content:url(&#x27;data:image/svg+xml;charset=utf-8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;20&quot; height=&quot;20&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;%239E9E9E&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;svg-icon lucide-quote&quot;&gt;&lt;path d=&quot;M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1zM15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z&quot;/&gt;&lt;/svg&gt;&#x27;)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.custom-callout.note &gt; .callout-body &#123;    /* 移除了 background:transparent!important; 改为根据类型变化的背景色 */    background-color: rgba(var(--callout-note), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">  /* 根据不同的类型设置背景色和文字/图标颜色 */.custom-callout.note, .custom-callout.note &gt; summary &#123;    background-color: rgba(var(--callout-note), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.abstract &gt; .callout-body &#123;    background-color: rgba(var(--callout-abstract), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.abstract, .custom-callout.abstract &gt; summary &#123;    background-color: rgba(var(--callout-abstract), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.info &gt; .callout-body &#123;    background-color: rgba(var(--callout-info), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.info, .custom-callout.info &gt; summary &#123;    background-color: rgba(var(--callout-info), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.tip &gt; .callout-body &#123;    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.tip, .custom-callout.tip &gt; summary &#123;    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.success &gt; .callout-body &#123;    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.success, .custom-callout.success &gt; summary &#123;    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.question &gt; .callout-body &#123;    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.question, .custom-callout.question &gt; summary &#123;    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.warning &gt; .callout-body &#123;    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.warning, .custom-callout.warning &gt; summary &#123;    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.failure &gt; .callout-body &#123;    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.failure, .custom-callout.failure &gt; summary &#123;    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.danger &gt; .callout-body &#123;    background-color: rgba(var(--callout-danger), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.danger, .custom-callout.danger &gt; summary &#123;    background-color: rgba(var(--callout-danger), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.bug &gt; .callout-body &#123;    background-color: rgba(var(--callout-bug), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.bug, .custom-callout.bug &gt; summary &#123;    background-color: rgba(var(--callout-bug), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.example &gt; .callout-body &#123;    background-color: rgba(var(--callout-example), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.example, .custom-callout.example &gt; summary &#123;    background-color: rgba(var(--callout-example), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.quote &gt; .callout-body &#123;    background-color: rgba(var(--callout-quote), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.quote, .custom-callout.quote &gt; summary &#123;    background-color: rgba(var(--callout-quote), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.cite &gt; .callout-body &#123;    background-color: rgba(var(--callout-quote), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.cite, .custom-callout.cite &gt; summary &#123;    background-color: rgba(var(--callout-quote), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.todo &gt; .callout-body &#123;    background-color: rgba(var(--callout-info), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.todo, .custom-callout.todo &gt; summary &#123;    background-color: rgba(var(--callout-info), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.seealso &gt; .callout-body &#123;    background-color: rgba(var(--callout-note), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.seealso, .custom-callout.seealso &gt; summary &#123;    background-color: rgba(var(--callout-note), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.hint &gt; .callout-body &#123;    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.hint, .custom-callout.hint &gt; summary &#123;    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.important &gt; .callout-body &#123;    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.important, .custom-callout.important &gt; summary &#123;    background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.attention &gt; .callout-body &#123;    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.attention, .custom-callout.attention &gt; summary &#123;    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.caution &gt; .callout-body &#123;    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.caution, .custom-callout.caution &gt; summary &#123;    background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.done &gt; .callout-body &#123;    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.done, .custom-callout.done &gt; summary &#123;    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.check &gt; .callout-body &#123;    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.check, .custom-callout.check &gt; summary &#123;    background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.faq &gt; .callout-body &#123;    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.faq, .custom-callout.faq &gt; summary &#123;    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.help &gt; .callout-body &#123;    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.help, .custom-callout.help &gt; summary &#123;    background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.fail &gt; .callout-body &#123;    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.fail, .custom-callout.fail &gt; summary &#123;    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.missing &gt; .callout-body &#123;    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.missing, .custom-callout.missing &gt; summary &#123;    background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.error &gt; .callout-body &#123;    background-color: rgba(var(--callout-danger), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.error, .custom-callout.error &gt; summary &#123;    background-color: rgba(var(--callout-danger), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.tldr &gt; .callout-body &#123;    background-color: rgba(var(--callout-abstract), var(--callout-title-bg-opacity));  &#125;</span><br><span class=\"line\">.custom-callout.tldr, .custom-callout.tldr &gt; summary &#123;    background-color: rgba(var(--callout-abstract), var(--callout-title-bg-opacity));  &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"集成-Telegram-Channel-说说\"><a href=\"#集成-Telegram-Channel-说说\" class=\"headerlink\" title=\"集成 Telegram Channel 说说#\"></a>集成 Telegram Channel 说说<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E9%9B%86%E6%88%90-telegram-channel-%E8%AF%B4%E8%AF%B4\">#</a></h2><p>显示效果：</p>\n<p>篇幅限制，只展示2条，请耐心等待加载。（可能要挂代理）</p>\n<p>代码抄自<a href=\"https://blog.hzchu.top/2024/%E6%8A%8ATg-Channel%E6%8E%A5%E5%85%A5%E5%88%B0Stellar%E6%97%B6%E9%97%B4%E7%BA%BF/\">把Tg Channel接入到Stellar时间线</a>。因为我懒得做标签筛选所以直接把这个去掉啦，在此还要感谢佬的耐心解答 <img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatheart-1749438579839-1042.png\" alt=\"blobcat:ablobcatheart\"></p>\n<h2 id=\"GitHub-Action-自动部署并修复更新时间\"><a href=\"#GitHub-Action-自动部署并修复更新时间\" class=\"headerlink\" title=\"GitHub Action 自动部署并修复更新时间#\"></a>GitHub Action 自动部署并修复更新时间<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#github-action-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%B9%B6%E4%BF%AE%E5%A4%8D%E6%9B%B4%E6%96%B0%E6%97%B6%E9%97%B4\">#</a></h2><p>在自动部署这里遇到了几个坑，总结下来大概有下：</p>\n<ul>\n<li>网上流行的很多 yml workflow 文件都有些过时</li>\n<li>公钥私钥啥的不太懂，配置了半天</li>\n<li>因为我的博客有数学公式显示，所以要在 workflow 里加入安装 pandoc 的部分，才能够成功运行</li>\n<li>自动部署后网站的文章更新时间全部变成 push 时间，但在本地是正常的。一番搜索后找到了解决方法，在 yml 文件里加入了以下代码，分别修复 posts、wiki、notes 的更新时间：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- name: Restore file modification time 🕒      run: find source/_posts -name &#x27;*.md&#x27; | while read file; do touch -d &quot;$(git log -1 --format=&quot;@%ct&quot; &quot;$file&quot;)&quot; &quot;$file&quot;; done</span><br><span class=\"line\">  - name: Restore file modification time of wiki🕒      run: find source/wiki -name &#x27;*.md&#x27; | while read file; do touch -d &quot;$(git log -1 --format=&quot;@%ct&quot; &quot;$file&quot;)&quot; &quot;$file&quot;; done</span><br><span class=\"line\">  - name: Restore file modification time of notes🕒      run: find source/notes -name &#x27;*.md&#x27; | while read file; do touch -d &quot;$(git log -1 --format=&quot;@%ct&quot; &quot;$file&quot;)&quot; &quot;$file&quot;; done</span><br></pre></td></tr></table></figure>\n\n<p>最后附上完整代码，拿去用的话要自己配置一下 GitHub 部分的设置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name: auto deploy</span><br><span class=\"line\">on:  workflow_dispatch:  push:</span><br><span class=\"line\">jobs:  build:    runs-on: ubuntu-latest # 运行环境为最新版 Ubuntu    name: auto deploy    steps:    # 1. 获取源码    - name: Checkout      uses: actions/checkout@v4 # 使用 actions/checkout@v3      with: # 条件        submodules: true # Checkout private submodules(themes or something else). 当有子模块时切换分支？        fetch-depth: 0</span><br><span class=\"line\">    - name: Restore file modification time 🕒      run: find source/_posts -name &#x27;*.md&#x27; | while read file; do touch -d &quot;$(git log -1 --format=&quot;@%ct&quot; &quot;$file&quot;)&quot; &quot;$file&quot;; done</span><br><span class=\"line\">    - name: Restore file modification time of wiki🕒      run: find source/wiki -name &#x27;*.md&#x27; | while read file; do touch -d &quot;$(git log -1 --format=&quot;@%ct&quot; &quot;$file&quot;)&quot; &quot;$file&quot;; done</span><br><span class=\"line\">    - name: Restore file modification time of notes🕒      run: find source/notes -name &#x27;*.md&#x27; | while read file; do touch -d &quot;$(git log -1 --format=&quot;@%ct&quot; &quot;$file&quot;)&quot; &quot;$file&quot;; done</span><br><span class=\"line\">    # 2. 配置环境    - name: Setup Node.js 18.19.x      uses: actions/setup-node@master      with:        node-version: &quot;18.19.x&quot;</span><br><span class=\"line\">    - name: Install pandoc      run: |        cd /tmp        wget -c https://github.com/jgm/pandoc/releases/download/2.14.0.3/pandoc-2.14.0.3-1-amd64.deb        sudo dpkg -i pandoc-2.14.0.3-1-amd64.deb</span><br><span class=\"line\">    # 3. 生成静态文件    - name: Generate Public Files      run: |        npm i        npm install hexo-cli -g        hexo clean &amp;&amp; hexo generate    # 4a. 部署到 GitHub 仓库（可选）    - name: Deploy to GitHub Pages      uses: peaceiris/actions-gh-pages@v3      with:        deploy_key: $&#123;&#123; secrets.HEXO_DEPLOY_PRI &#125;&#125; # 配置密钥        external_repository: # 填入你的GitHub pages部署仓库        publish_branch: gt-pages # 填入部署分支        publish_dir: ./public        commit_message: $&#123;&#123; github.event.head_commit.message &#125;&#125;        user_name: &#x27;github-actions[bot]&#x27;        user_email: &#x27;github-actions[bot]@users.noreply.github.com&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"给博客添加地理定位并制作个性欢迎\"><a href=\"#给博客添加地理定位并制作个性欢迎\" class=\"headerlink\" title=\"给博客添加地理定位并制作个性欢迎#\"></a>给博客添加地理定位并制作个性欢迎<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E7%BB%99%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%9C%B0%E7%90%86%E5%AE%9A%E4%BD%8D%E5%B9%B6%E5%88%B6%E4%BD%9C%E4%B8%AA%E6%80%A7%E6%AC%A2%E8%BF%8E\">#</a></h2><p>显示效果：</p>\n<p>![个性欢迎卡片](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-17 at <a href=\"mailto:&#48;&#x31;&#46;&#48;&#57;&#x2e;&#x30;&#x37;&#x40;&#x32;&#120;&#x2d;&#49;&#55;&#52;&#57;&#52;&#x33;&#x38;&#53;&#x37;&#57;&#56;&#x33;&#57;&#45;&#49;&#48;&#x34;&#x34;&#46;&#119;&#x65;&#98;&#112;\">01.09.07@2x-1749438579839-1044.webp</a>)个性欢迎卡片</p>\n<p>代码来自<a href=\"https://ichika.cc/Article/beautiful_IPLocation/\">给博客添加腾讯地图定位并制作个性欢迎</a>。我稍微做了一点调整：</p>\n<p>新建 <code>source/js/services/txmap.js</code>，并添加以下代码： <details class=\"tag-plugin colorful folding\" ><summary><p>点击展开代码</p>\n</summary><div class=\"body\"><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//get请求$.ajax(&#123;    type: &#x27;get&#x27;,    url: &#x27;https://apis.map.qq.com/ws/location/v1/ip&#x27;,    data: &#123;        key: &#x27;你的key&#x27;,        output: &#x27;jsonp&#x27;,    &#125;,    dataType: &#x27;jsonp&#x27;,    success: function (res) &#123;        ipLoacation = res;    &#125;&#125;)function getDistance(e1, n1, e2, n2) &#123;    const R = 6371    const &#123; sin, cos, asin, PI, hypot &#125; = Math    let getPoint = (e, n) =&gt; &#123;        e *= PI / 180        n *= PI / 180        return &#123; x: cos(n) * cos(e), y: cos(n) * sin(e), z: sin(n) &#125;    &#125;</span><br><span class=\"line\">    let a = getPoint(e1, n1)    let b = getPoint(e2, n2)    let c = hypot(a.x - b.x, a.y - b.y, a.z - b.z)    let r = asin(c / 2) * 2 * R    return Math.round(r);&#125;</span><br><span class=\"line\">function showWelcome() &#123;</span><br><span class=\"line\">    let dist = getDistance(113.34499552, 23.15537143, ipLoacation.result.location.lng, ipLoacation.result.location.lat); //这里换成自己的经纬度    let pos = ipLoacation.result.ad_info.nation;    let ip;    let posdesc;    //根据国家、省份、城市信息自定义欢迎语    switch (ipLoacation.result.ad_info.nation) &#123;        case &quot;日本&quot;:            posdesc = &quot;よろしく，一起去看樱花吗&quot;;            break;        case &quot;美国&quot;:            posdesc = &quot;Let us live in peace!&quot;;            break;        case &quot;英国&quot;:            posdesc = &quot;想同你一起夜乘伦敦眼&quot;;            break;        case &quot;俄罗斯&quot;:            posdesc = &quot;干了这瓶伏特加！&quot;;            break;        case &quot;法国&quot;:            posdesc = &quot;C&#x27;est La Vie&quot;;            break;        case &quot;德国&quot;:            posdesc = &quot;Die Zeit verging im Fluge.&quot;;            break;        case &quot;澳大利亚&quot;:            posdesc = &quot;一起去大堡礁吧！&quot;;            break;        case &quot;加拿大&quot;:            posdesc = &quot;拾起一片枫叶赠予你&quot;;            break;        case &quot;中国&quot;:            pos = ipLoacation.result.ad_info.province + &quot; &quot; + ipLoacation.result.ad_info.city + &quot; &quot; + ipLoacation.result.ad_info.district;            ip = ipLoacation.result.ip;            switch (ipLoacation.result.ad_info.province) &#123;                case &quot;北京市&quot;:                    posdesc = &quot;北——京——欢迎你~~~&quot;;                    break;                case &quot;天津市&quot;:                    posdesc = &quot;讲段相声吧。&quot;;                    break;                case &quot;河北省&quot;:                    posdesc = &quot;山势巍巍成壁垒，天下雄关。铁马金戈由此向，无限江山。&quot;;                    break;                case &quot;山西省&quot;:                    posdesc = &quot;展开坐具长三尺，已占山河五百余。&quot;;                    break;                case &quot;内蒙古自治区&quot;:                    posdesc = &quot;天苍苍，野茫茫，风吹草低见牛羊。&quot;;                    break;                case &quot;辽宁省&quot;:                    posdesc = &quot;我想吃烤鸡架！&quot;;                    break;                case &quot;吉林省&quot;:                    posdesc = &quot;状元阁就是东北烧烤之王。&quot;;                    break;                case &quot;黑龙江省&quot;:                    posdesc = &quot;很喜欢哈尔滨大剧院。&quot;;                    break;                case &quot;上海市&quot;:                    posdesc = &quot;众所周知，中国只有两个城市。&quot;;                    break;                case &quot;江苏省&quot;:                    switch (ipLoacation.result.ad_info.city) &#123;                        case &quot;南京市&quot;:                            posdesc = &quot;这是我挺想去的城市啦。&quot;;                            break;                        case &quot;苏州市&quot;:                            posdesc = &quot;上有天堂，下有苏杭。&quot;;                            break;                        default:                            posdesc = &quot;散装是必须要散装的。&quot;;                            break;                    &#125;                    break;                case &quot;浙江省&quot;:                    posdesc = &quot;东风渐绿西湖柳，雁已还人未南归。&quot;;                    break;                case &quot;河南省&quot;:                    switch (ipLoacation.result.ad_info.city) &#123;                        case &quot;郑州市&quot;:                            posdesc = &quot;豫州之域，天地之中。&quot;;                            break;                        case &quot;南阳市&quot;:                            posdesc = &quot;臣本布衣，躬耕于南阳。此南阳非彼南阳！&quot;;                            break;                        case &quot;驻马店市&quot;:                            posdesc = &quot;峰峰有奇石，石石挟仙气。嵖岈山的花很美哦！&quot;;                            break;                        case &quot;开封市&quot;:                            posdesc = &quot;刚正不阿包青天。&quot;;                            break;                        case &quot;洛阳市&quot;:                            posdesc = &quot;洛阳牡丹甲天下。&quot;;                            break;                        default:                            posdesc = &quot;可否带我品尝河南烩面啦？&quot;;                            break;                    &#125;                    break;                case &quot;安徽省&quot;:                    posdesc = &quot;蚌埠住了，芜湖起飞。&quot;;                    break;                case &quot;福建省&quot;:                    posdesc = &quot;井邑白云间，岩城远带山。&quot;;                    break;                case &quot;江西省&quot;:                    posdesc = &quot;落霞与孤鹜齐飞，秋水共长天一色。&quot;;                    break;                case &quot;山东省&quot;:                    posdesc = &quot;遥望齐州九点烟，一泓海水杯中泻。&quot;;                    break;                case &quot;湖北省&quot;:                    posdesc = &quot;来碗热干面！&quot;;                    break;                case &quot;湖南省&quot;:                    posdesc = &quot;74751，长沙斯塔克。&quot;;                    break;                case &quot;广东省&quot;:                    posdesc = &quot;老板来两斤福建人。&quot;;                    break;                case &quot;广西壮族自治区&quot;:                    posdesc = &quot;桂林山水甲天下。&quot;;                    break;                case &quot;海南省&quot;:                    posdesc = &quot;朝观日出逐白浪，夕看云起收霞光。&quot;;                    break;                case &quot;四川省&quot;:                    posdesc = &quot;康康川妹子。&quot;;                    break;                case &quot;贵州省&quot;:                    posdesc = &quot;茅台，学生，再塞200。&quot;;                    break;                case &quot;云南省&quot;:                    posdesc = &quot;玉龙飞舞云缠绕，万仞冰川直耸天。&quot;;                    break;                case &quot;西藏自治区&quot;:                    posdesc = &quot;躺在茫茫草原上，仰望蓝天。&quot;;                    break;                case &quot;陕西省&quot;:                    posdesc = &quot;来份臊子面加馍。&quot;;                    break;                case &quot;甘肃省&quot;:                    posdesc = &quot;羌笛何须怨杨柳，春风不度玉门关。&quot;;                    break;                case &quot;青海省&quot;:                    posdesc = &quot;牛肉干和老酸奶都好好吃。&quot;;                    break;                case &quot;宁夏回族自治区&quot;:                    posdesc = &quot;大漠孤烟直，长河落日圆。&quot;;                    break;                case &quot;新疆维吾尔自治区&quot;:                    posdesc = &quot;驼铃古道丝绸路，胡马犹闻唐汉风。&quot;;                    break;                case &quot;台湾省&quot;:                    posdesc = &quot;我在这头，大陆在那头。&quot;;                    break;                case &quot;香港特别行政区&quot;:                    posdesc = &quot;永定贼有残留地鬼嚎，迎击光非岁玉。&quot;;                    break;                case &quot;澳门特别行政区&quot;:                    posdesc = &quot;性感荷官，在线发牌。&quot;;                    break;                default:                    posdesc = &quot;带我去你的城市逛逛吧！&quot;;                    break;            &#125;            break;        default:            posdesc = &quot;带我去你的国家逛逛吧。&quot;;            break;    &#125;</span><br><span class=\"line\">    //根据本地时间切换欢迎语    let timeChange;    let date = new Date();    if (date.getHours() &gt;= 5 &amp;&amp; date.getHours() &lt; 11) timeChange = &quot;&lt;span&gt;上午好&lt;/span&gt;，一日之计在于晨！&quot;;    else if (date.getHours() &gt;= 11 &amp;&amp; date.getHours() &lt; 13) timeChange = &quot;&lt;span&gt;中午好&lt;/span&gt;，该摸鱼吃午饭了。&quot;;    else if (date.getHours() &gt;= 13 &amp;&amp; date.getHours() &lt; 15) timeChange = &quot;&lt;span&gt;下午好&lt;/span&gt;，懒懒地睡个午觉吧！&quot;;    else if (date.getHours() &gt;= 15 &amp;&amp; date.getHours() &lt; 16) timeChange = &quot;&lt;span&gt;三点几啦&lt;/span&gt;，一起饮茶呀！&quot;;    else if (date.getHours() &gt;= 16 &amp;&amp; date.getHours() &lt; 19) timeChange = &quot;&lt;span&gt;夕阳无限好！&lt;/span&gt;&quot;;    else if (date.getHours() &gt;= 19 &amp;&amp; date.getHours() &lt; 24) timeChange = &quot;&lt;span&gt;晚上好&lt;/span&gt;，夜生活嗨起来！&quot;;    else timeChange = &quot;夜深了，早点休息，少熬夜。&quot;;</span><br><span class=\"line\">    try &#123;        //自定义文本和需要放的位置        document.getElementById(&quot;welcome-info&quot;).innerHTML =            `&lt;b&gt;&lt;center&gt;🎉 欢迎信息 🎉&lt;/center&gt;&amp;emsp;&amp;emsp;欢迎来自 &lt;span style=&quot;color:var(--theme-color)&quot;&gt;$&#123;pos&#125;&lt;/span&gt; 的小伙伴，$&#123;timeChange&#125;您现在距离站长约 &lt;span style=&quot;color:var(--theme-color)&quot;&gt;$&#123;dist&#125;&lt;/span&gt; 公里，当前的IP地址为： &lt;span style=&quot;color:var(--theme-color)&quot;&gt;$&#123;ip&#125;&lt;/span&gt;， $&#123;posdesc&#125;&lt;/b&gt;`;    &#125; catch (err) &#123;        // console.log(&quot;Pjax无法获取#welcome-info元素🙄🙄🙄&quot;)    &#125;&#125;window.onload = showWelcome;// 如果使用了pjax在加上下面这行代码document.addEventListener(&#x27;pjax:complete&#x27;, showWelcome);</span><br></pre></td></tr></table></figure> </div></details></p>\n<h3 id=\"在主题文件中配置\"><a href=\"#在主题文件中配置\" class=\"headerlink\" title=\"在主题文件中配置#\"></a>在主题文件中配置<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E5%9C%A8%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E4%B8%AD%E9%85%8D%E7%BD%AE\">#</a></h3><p>在主题配置文件 <code>_config.stellar.yml</code> 中引入jQuery依赖和刚刚的js文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inject:</span><br><span class=\"line\"></span><br><span class=\"line\">    - &lt;script src=&quot;https://cdn.staticfile.org/jquery/3.6.3/jquery.min.js&quot;&gt;&lt;/script&gt; # jQuery</span><br><span class=\"line\"></span><br><span class=\"line\">  - &lt;script async data-pjax src=&quot;/js/services/txmap.js&quot;&gt;&lt;/script&gt; # 腾讯位置API</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>source/_data/widgets.yml</code> 中添加小组件，我在里面嵌套了一个随机文章跳转，不要的话可以删掉，<strong>其中，<code>&lt;span id=&quot;welcome-info&quot; &gt;&lt;/span&gt;</code> 是必须的不可以删：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">welcomeloc:</span><br><span class=\"line\"></span><br><span class=\"line\">  layout: markdown</span><br><span class=\"line\"></span><br><span class=\"line\">  title: &#x27;🎉 抓到你啦&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  linklist:</span><br><span class=\"line\"></span><br><span class=\"line\">    columns: 1</span><br><span class=\"line\"></span><br><span class=\"line\">    items:</span><br><span class=\"line\"></span><br><span class=\"line\">      - icon: &#x27;&lt;img src=&quot;https://api.iconify.design/ion:dice-outline.svg&quot;/&gt;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">        title: 随机文章</span><br><span class=\"line\"></span><br><span class=\"line\">        url: &#x27;javascript:toRandomPost()&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  content: |</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;span id=&quot;welcome-info&quot; style=&quot;font-family: LXGW WenKai Screen;&quot;&gt;&lt;/span&gt;</span><br></pre></td></tr></table></figure>\n\n<p>然后就跟正常的小组件一样在想要的地方引用即可。</p>\n<h2 id=\"添加更改字体按钮\"><a href=\"#添加更改字体按钮\" class=\"headerlink\" title=\"添加更改字体按钮#\"></a>添加更改字体按钮<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E6%B7%BB%E5%8A%A0%E6%9B%B4%E6%94%B9%E5%AD%97%E4%BD%93%E6%8C%89%E9%92%AE\">#</a></h2><p>显示效果：</p>\n<p><strong>第一种：</strong> 在任意位置增加一个 button 按钮![img](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-17 at <a href=\"mailto:&#x30;&#49;&#x2e;&#x32;&#x31;&#46;&#48;&#x37;&#x40;&#x32;&#120;&#x2d;&#49;&#55;&#52;&#57;&#52;&#51;&#56;&#x35;&#55;&#x39;&#x38;&#51;&#57;&#45;&#x31;&#x30;&#x34;&#54;&#x2e;&#119;&#101;&#98;&#112;\">01.21.07@2x-1749438579839-1046.webp</a>)</p>\n<p>鼠标放到上面会显示提示： ![img](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-17 at <a href=\"mailto:&#48;&#x31;&#x2e;&#x32;&#50;&#x2e;&#52;&#50;&#x40;&#50;&#x78;&#x2d;&#x31;&#55;&#52;&#57;&#x34;&#51;&#56;&#x35;&#55;&#57;&#x38;&#51;&#x39;&#x2d;&#49;&#48;&#x34;&#56;&#x2e;&#x77;&#101;&#x62;&#x70;\">01.22.42@2x-1749438579839-1048.webp</a>)</p>\n<p><strong>第二种：</strong> 在文章页面目录下方显示</p>\n<p>![img](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-17 at <a href=\"mailto:&#x30;&#49;&#46;&#50;&#x34;&#46;&#x30;&#x37;&#x40;&#x32;&#120;&#45;&#x31;&#55;&#x34;&#57;&#52;&#x33;&#56;&#x35;&#55;&#57;&#56;&#x33;&#x39;&#45;&#x31;&#x30;&#x35;&#x30;&#x2e;&#x77;&#x65;&#x62;&#112;\">01.24.07@2x-1749438579839-1050.webp</a>)</p>\n<p>之前一直纠结要不要把自定义字体效果去掉，在选择和留下之间来回切换 <img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatknitsweats-1749438579839-1052.png\" alt=\"blobcat:ablobcatknitsweats\"> 最终才出现了这里的方案：默认不加载任何字体，喜欢 LXGW 字体的话可点击图标转换，同时再点击一下就恢复。代码不长但完美地解决了我的强迫症～</p>\n<h3 id=\"第一步：准备字体文件\"><a href=\"#第一步：准备字体文件\" class=\"headerlink\" title=\"第一步：准备字体文件#\"></a>第一步：准备字体文件<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E7%AC%AC%E4%B8%80%E6%AD%A5%E5%87%86%E5%A4%87%E5%AD%97%E4%BD%93%E6%96%87%E4%BB%B6\">#</a></h3><p>可以是在线文件也可以是本地文件，我是在主题 config 文件下通过 inject 引入了 LXGW 字体。</p>\n<h3 id=\"第二步：修改-css\"><a href=\"#第二步：修改-css\" class=\"headerlink\" title=\"第二步：修改 css#\"></a>第二步：修改 css<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E7%AC%AC%E4%BA%8C%E6%AD%A5%E4%BF%AE%E6%94%B9-css\">#</a></h3><p>首先确保 LXGW WenKai Screen 字体已经通过 CSS 正确引入。你可以在 CSS 文件中添加一个特定的类，用于当用户选择使用这种字体时切换到它：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 设置字体 */</span><br><span class=\"line\"></span><br><span class=\"line\">.LXGWMode &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    font-family: &#x27;LXGW WenKai Screen&#x27;, system-ui, &#x27;Helvetica Neue&#x27;, sans-serif;  // 使用 LXGW WenKai 字体，并指定后备字体</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第三步：添加-javascript\"><a href=\"#第三步：添加-javascript\" class=\"headerlink\" title=\"第三步：添加 javascript#\"></a>第三步：添加 javascript<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E7%AC%AC%E4%B8%89%E6%AD%A5%E6%B7%BB%E5%8A%A0-javascript\">#</a></h3><p>新建 <code>source/js/changefont.js</code> 文件，添加以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.addEventListener(&#x27;DOMContentLoaded&#x27;, function () &#123;    applyFontSetting();    updateButtonText(); // Ensure the button text is correct on page load&#125;);</span><br><span class=\"line\">document.addEventListener(&#x27;pjax:success&#x27;, function () &#123;    applyFontSetting();    updateButtonText(); // Update the button text after PJAX updates&#125;);</span><br><span class=\"line\">function applyFontSetting() &#123;    if (localStorage.getItem(&quot;LXGWFontEnabled&quot;) === &quot;true&quot;) &#123;        document.body.classList.add(&quot;LXGWMode&quot;);    &#125; else &#123;        document.body.classList.remove(&quot;LXGWMode&quot;);    &#125;&#125;</span><br><span class=\"line\">function toggleLXGWFont() &#123;    var button = document.querySelector(&#x27;.custom-button&#x27;); // Find the button    if (localStorage.getItem(&quot;LXGWFontEnabled&quot;) === &quot;true&quot;) &#123;        localStorage.setItem(&quot;LXGWFontEnabled&quot;, &quot;false&quot;);        document.body.classList.remove(&quot;LXGWMode&quot;);        button.innerHTML = &#x27;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png&quot; alt=&quot;Emoji&quot; style=&quot;vertical-align: middle; width: 20px; height: 20px;&quot;&gt; 危险，请勿点击&#x27;;    &#125; else &#123;        localStorage.setItem(&quot;LXGWFontEnabled&quot;, &quot;true&quot;);        document.body.classList.add(&quot;LXGWMode&quot;);        button.innerHTML = &#x27;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png&quot; alt=&quot;Emoji&quot; style=&quot;vertical-align: middle; width: 20px; height: 20px;&quot;&gt; 不要说我没有警告过你&#x27;;    &#125;&#125;</span><br><span class=\"line\">function updateButtonText() &#123;    var button = document.querySelector(&#x27;.custom-button&#x27;); // Find the button    if (localStorage.getItem(&quot;LXGWFontEnabled&quot;) === &quot;true&quot;) &#123;        button.innerHTML = &#x27;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png&quot; alt=&quot;Emoji&quot; style=&quot;vertical-align: middle; width: 20px; height: 20px;&quot;&gt; 不要点这里啦！&#x27;;    &#125; else &#123;        button.innerHTML = &#x27;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png&quot; alt=&quot;Emoji&quot; style=&quot;vertical-align: middle; width: 20px; height: 20px;&quot;&gt; 危险，请勿点击&#x27;;    &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第四步：添加切换按钮\"><a href=\"#第四步：添加切换按钮\" class=\"headerlink\" title=\"第四步：添加切换按钮#\"></a>第四步：添加切换按钮<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E7%AC%AC%E5%9B%9B%E6%AD%A5%E6%B7%BB%E5%8A%A0%E5%88%87%E6%8D%A2%E6%8C%89%E9%92%AE\">#</a></h3><p>然后在想要的地方引用即可，可以自行添加各种 emoji，比如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button class=&quot;custom-button tooltip&quot; onclick=&quot;toggleLXGWFont()&quot; data-msg=&quot;警告，真的很危险&quot;&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png&quot; alt=&quot;Emoji&quot; style=&quot;vertical-align: middle; width: 20px; height: 20px;&quot;&gt; 危险，请勿点击&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给按钮加入-css-提示框\"><a href=\"#给按钮加入-css-提示框\" class=\"headerlink\" title=\"给按钮加入 css 提示框#\"></a>给按钮加入 css 提示框<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E7%BB%99%E6%8C%89%E9%92%AE%E5%8A%A0%E5%85%A5-css-%E6%8F%90%E7%A4%BA%E6%A1%86\">#</a></h3><p>在自定义 css 文件中添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.custom-button &#123;    display: inline-block;    padding: 2px 10px;    /*margin: 10px;    background-color: #f2f2f2; /* Light grey background, change as needed */    font-family: inherit; /* Inherits the font-family from parent container */    color: #835EEC;    background-color: #F2EEFD;    @media (prefers-color-scheme: dark) &#123;      color: #A28BF2;      background-color: #282433;    &#125;    text-align: center;    cursor: pointer;    /*border: 2px solid #ccc; /* Grey border */    border-radius: 16px; /* Rounded corners */    transition: all 0.3s ease;  &#125;</span><br><span class=\"line\">.custom-button:hover &#123;    background-color: #e9e9e9; /* Slightly darker on hover */    @media (prefers-color-scheme: dark) &#123;      background-color: #333; /* Darker background on hover */    &#125;    border-color: #999; /* Darker border on hover */  &#125;</span><br><span class=\"line\">/* toggle-font 提示框的样式 */</span><br><span class=\"line\">.tooltip &#123;    position: relative;    cursor: pointer; /* 可选，让用户知道这是一个可以互动的元素 */&#125;</span><br><span class=\"line\">.tooltip:hover::before &#123;    white-space: nowrap;    line-height: 18px;    content: attr(data-msg);    position: absolute;    padding: 0 8px;    display: block;    color: #ffffff;    background: #656565;    border-radius: 6px;    font-size: 12px;    top: -25px;    left: 50%;    transform: translateX(-50%);    Z-index: 1000; /* 确保提示框在其他元素之上 */&#125;</span><br><span class=\"line\">.tooltip:hover:: after &#123;    Content: &quot;&quot;;    Position: absolute;    Top: -8 px;    Left: 50%;    Transform: translateX (-50%);    Border: 6 px solid transparent;    border-top-color: #656565 ; /* 简化写法 */&#125;</span><br><span class=\"line\">/* toggle-font 按钮的样式 */</span><br><span class=\"line\">.widget-wrapper. Toggle-font &#123;    Background: none; // Example: making background transparent    /* Add other styles specific to the toggle-font widget here */&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二种样式\"><a href=\"#第二种样式\" class=\"headerlink\" title=\"第二种样式#\"></a>第二种样式<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E7%AC%AC%E4%BA%8C%E7%A7%8D%E6%A0%B7%E5%BC%8F\">#</a></h3><p>WARNING</p>\n<p>第二种样式需要对主题文件进行一丢丢修改，但貌似不太影响更新……只要无冲突的话可以一直 update fork</p>\n<p>在 <code>languages/zh-CN.yml</code> 中添加一行 <code>font: 更改字体</code>，并在 icons.yml 里添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default:font: &lt;svg class=&quot;theme-icon&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;32&quot; height=&quot;32&quot; viewBox=&quot;0 0 32 32&quot;&gt;&lt;path d=&quot;m12.677 17.781l-2.626-6.256l-2.694 6.256Zm6.723 6.511h-7.069v-1.365l.458-.023a1.847 1.847 0 0 0 .972-.2a.313.313 0 0 0 .145-.263a4.158 4.158 0 0 0-.419-1.4l-.812-1.931H7.322L6.4 21.259a3.319 3.319 0 0 0-.349 1.157c0 .036 0 .119.154.241a2.481 2.481 0 0 0 1.191.247l.448.033v1.354H2v-1.31l.4-.07a2.188 2.188 0 0 0 1-.318a6.318 6.318 0 0 0 1.18-2.066l5.575-13.036H11.2l5.512 13.174a5.255 5.255 0 0 0 1.049 1.835a1.959 1.959 0 0 0 1.19.4l.454.027Zm6.441-2.732v-3.985a22.542 22.542 0 0 0-2.226.97a3.845 3.845 0 0 0-1.29 1.05a2.03 2.03 0 0 0-.388 1.2a1.951 1.951 0 0 0 .491 1.362a1.49 1.49 0 0 0 1.13.544a4.142 4.142 0 0 0 2.283-1.141m-3.333 2.949a2.833 2.833 0 0 1-2.139-.893a3.206 3.206 0 0 1-.833-2.285a2.959 2.959 0 0 1 .415-1.577a5 5 0 0 1 1.791-1.625a23.876 23.876 0 0 1 3.617-1.588v-.074a2.905 2.905 0 0 0-.383-1.833a1.325 1.325 0 0 0-1.075-.412a1.155 1.155 0 0 0-.816.26a.687.687 0 0 0-.277.536l.023.646a1.62 1.62 0 0 1-.4 1.158a1.481 1.481 0 0 1-2.1-.019a1.634 1.634 0 0 1-.391-1.134a2.8 2.8 0 0 1 1.182-2.177a4.813 4.813 0 0 1 3.125-.932a5.381 5.381 0 0 1 2.508.524a2.628 2.628 0 0 1 1.213 1.346a6.391 6.391 0 0 1 .244 2.2v3.55a14.665 14.665 0 0 0 .051 1.749a.661.661 0 0 0 .054.2c.085-.078.284-.225.864-.806l.819-.828v1.967l-.1.128c-.958 1.283-1.883 1.907-2.83 1.907a1.6 1.6 0 0 1-1.257-.557a1.788 1.788 0 0 1-.358-.74a9.688 9.688 0 0 1-1.433.977a3.579 3.579 0 0 1-1.514.332&quot;/&gt;&lt;/svg&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>layout/_partial/widgets/toc.ejs</code> 中，在想要的位置，如 <code>el += editBtn</code> 后，添加以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">el += `&lt;a class=&quot;toggle-font&quot; onclick=&quot;toggleLXGWFont()&quot;&gt;`</span><br><span class=\"line\"></span><br><span class=\"line\"> el += icon(&#x27;default:font&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\"> el += `&lt;span&gt;$&#123;__(&#x27;btn.font&#x27;)&#125;&lt;/span&gt;`</span><br><span class=\"line\"></span><br><span class=\"line\"> el += `&lt;/a&gt;`</span><br></pre></td></tr></table></figure>\n\n<p>为了使这个图标随主题明暗自动变化，在自定义 css 文件中加入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 设置图标颜色 *//* 白天模式，默认填充色为黑色 */.theme-icon &#123;  fill: black;&#125;</span><br><span class=\"line\">/* 暗黑模式，填充色为白色 */@media (prefers-color-scheme: dark) &#123;  .theme-icon &#123;      fill: white;  &#125;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"随机文章跳转\"><a href=\"#随机文章跳转\" class=\"headerlink\" title=\"随机文章跳转#\"></a>随机文章跳转<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E9%9A%8F%E6%9C%BA%E6%96%87%E7%AB%A0%E8%B7%B3%E8%BD%AC\">#</a></h2><p>NOTE</p>\n<p>要在主题文件夹里新增文件，不影响主题后续更新<img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatattentionreverse-1749438579839-1054.png\" alt=\"blobcat:ablobcatattentionreverse\"></p>\n<p>终于来到了我最爱的生活哲学！代码参考了<a href=\"https://blog.zhheo.com/p/c116857c.html\">这个链接</a>。创建 <code>themes/stellar/scripts/helpers/random.js</code> ，增加以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo.extend.filter.register(&#x27;after_render:html&#x27;, function (data) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  const posts = []</span><br><span class=\"line\"></span><br><span class=\"line\">  hexo.locals.get(&#x27;posts&#x27;).map(function (post) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (post.random !== false) posts.push(post.path)</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  data += `&lt;script&gt;var posts=$&#123;JSON.stringify(posts)&#125;;function toRandomPost()&#123; window.pjax ? pjax.loadUrl(&#x27;/&#x27;+posts[Math.floor(Math.random()*posts.length)]) : window.open(&#x27;/&#x27;+posts[Math.floor(Math.random()*posts.length)], &quot;_self&quot;); &#125;;&lt;/script&gt;`</span><br><span class=\"line\"></span><br><span class=\"line\">  return data</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在主题配置文件引入 <code>_config.stellar.yml</code>，inject的 head里添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- &lt;script src=&quot;/js/random.js&quot;&gt;&lt;/script&gt; # 随机文章</span><br></pre></td></tr></table></figure>\n\n<p>然后在需要调用的位置执行 <code>toRandomPost()</code> 函数即可。比如任意 dom 添加 <code>onclick=&quot;toRandomPost()&quot;</code></p>\n<p>好吧，我知道你肯定没听懂</p>\n<p>反正我当时看完是一脸懵圈 不过没关系，我最后还是琢磨明白啦，下面就有填写示例，接着看就好<img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatattentionreverse-1749438579839-1054.png\" alt=\"blobcat:ablobcatattentionreverse\"></p>\n<p>添加一个按钮:</p>\n<p>随机阅读一篇文章</p>\n<p>代码：<code>&lt;button onclick=&quot;toRandomPost()&quot;&gt;随机阅读一篇文章&lt;/button&gt;</code></p>\n<p>或者添加一个链接: <a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#\">随机阅读一篇文章</a></p>\n<p>代码：<code>&lt;a href=&quot;#&quot; onclick=&quot;toRandomPost(); return false;&quot;&gt;随机阅读一篇文章&lt;/a&gt;</code></p>\n<p>在下一节还有应用示例，请往下看——</p>\n<h2 id=\"超链接样式调整\"><a href=\"#超链接样式调整\" class=\"headerlink\" title=\"超链接样式调整#\"></a>超链接样式调整<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E8%B6%85%E9%93%BE%E6%8E%A5%E6%A0%B7%E5%BC%8F%E8%B0%83%E6%95%B4\">#</a></h2><p>文章内链接：加粗并下移下划线。显示效果：</p>\n<p>![超链接样式](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-17 at <a href=\"mailto:&#x32;&#50;&#x2e;&#49;&#x38;&#46;&#49;&#50;&#64;&#50;&#120;&#x2d;&#49;&#55;&#52;&#57;&#52;&#x33;&#x38;&#x35;&#55;&#57;&#x38;&#x33;&#x39;&#x2d;&#49;&#x30;&#x35;&#54;&#x2e;&#x77;&#x65;&#98;&#x70;\">22.18.12@2x-1749438579839-1056.webp</a>)超链接样式</p>\n<p>在自定义 css 文件里加入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 文章内链接 */</span><br><span class=\"line\"></span><br><span class=\"line\">li:not([class]) a:not([class]),</span><br><span class=\"line\"></span><br><span class=\"line\">p:not([class]) a:not([class]),</span><br><span class=\"line\"></span><br><span class=\"line\">table a:not([class]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  /*color: var(--theme-link);*/</span><br><span class=\"line\"></span><br><span class=\"line\">  padding-bottom: 3px; /* 增加底部padding */</span><br><span class=\"line\"></span><br><span class=\"line\">  padding-right: 1px;</span><br><span class=\"line\"></span><br><span class=\"line\">  margin-right: 2px;</span><br><span class=\"line\"></span><br><span class=\"line\">  background: linear-gradient(0, var(--theme-link), var(--theme-link)) no-repeat center bottom / 100% 2px;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试链接：<a href=\"https://www.flyalready.com/about/\">关于</a></p>\n<p>新样式！为链接使用荧光笔下划线效果，这个和上面的样式二选一就好。显示效果：</p>\n<p>![img](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-20 at <a href=\"mailto:&#x31;&#57;&#46;&#51;&#x32;&#x2e;&#x30;&#52;&#x40;&#x32;&#x78;&#45;&#x31;&#55;&#52;&#57;&#52;&#x33;&#56;&#x35;&#55;&#x39;&#56;&#51;&#x39;&#45;&#49;&#48;&#53;&#56;&#x2e;&#x77;&#x65;&#x62;&#x70;\">19.32.04@2x-1749438579839-1058.webp</a>)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 文章内链接：为链接使用荧光笔下划线效果 */</span><br><span class=\"line\"></span><br><span class=\"line\">li:not([class]) a:not([class]),</span><br><span class=\"line\"></span><br><span class=\"line\">p:not([class]) a:not([class]),</span><br><span class=\"line\"></span><br><span class=\"line\">table a:not([class]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  padding-bottom: 0.1rem;</span><br><span class=\"line\"></span><br><span class=\"line\">  background: linear-gradient(0, var(--theme-link-opa), var(--theme-link-opa)) no-repeat center bottom / 100% 40%;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"选中文本：使用超链接高亮的背景色\"><a href=\"#选中文本：使用超链接高亮的背景色\" class=\"headerlink\" title=\"选中文本：使用超链接高亮的背景色#\"></a>选中文本：使用超链接高亮的背景色<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E9%80%89%E4%B8%AD%E6%96%87%E6%9C%AC%E4%BD%BF%E7%94%A8%E8%B6%85%E9%93%BE%E6%8E%A5%E9%AB%98%E4%BA%AE%E7%9A%84%E8%83%8C%E6%99%AF%E8%89%B2\">#</a></h2><p>在自定义 css 文件里加入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 选中文本：使用超链接高亮的背景色 */</span><br><span class=\"line\"></span><br><span class=\"line\">::selection &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  background: var(--theme-link-opa);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Twikoo-评论样式优化\"><a href=\"#Twikoo-评论样式优化\" class=\"headerlink\" title=\"Twikoo 评论样式优化#\"></a>Twikoo 评论样式优化<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#twikoo-%E8%AF%84%E8%AE%BA%E6%A0%B7%E5%BC%8F%E4%BC%98%E5%8C%96\">#</a></h2><p>Title</p>\n<p>样式优化需要改主题文件，但下面的<strong>给评论输入框加入提示</strong>是纯 css 实现的不需要改</p>\n<p>显示效果：</p>\n<p>![img](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-17 at <a href=\"mailto:&#x30;&#50;&#46;&#49;&#51;&#46;&#x34;&#x38;&#64;&#50;&#120;&#45;&#x31;&#x37;&#52;&#x39;&#52;&#x33;&#56;&#53;&#x37;&#57;&#56;&#51;&#57;&#45;&#x31;&#x30;&#x36;&#48;&#x2e;&#119;&#x65;&#x62;&#x70;\">02.13.48@2x-1749438579839-1060.webp</a>)</p>\n<p>只截了部分，整体效果可在评论区查看。代码全部抄自星日语大佬的<a href=\"https://github.com/xaoxuu/hexo-theme-stellar/commit/3666dbd50a0ddf46a87635f51c9a08829ba41f9b#diff-b3cf1ac0cff1eefdab68933ee5005affaeb5b0781c8d63116a2ddecaf5ab00a1\">这条 commit</a>。评论区表情显示优化可参考<a href=\"https://github.com/xaoxuu/hexo-theme-stellar/commit/4567ceb8b883e142c3c4e7d84699b80676679e0c\">这条 commit</a>。</p>\n<h3 id=\"给评论输入框加入提示\"><a href=\"#给评论输入框加入提示\" class=\"headerlink\" title=\"给评论输入框加入提示#\"></a>给评论输入框加入提示<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E7%BB%99%E8%AF%84%E8%AE%BA%E8%BE%93%E5%85%A5%E6%A1%86%E5%8A%A0%E5%85%A5%E6%8F%90%E7%A4%BA\">#</a></h3><p>显示效果：</p>\n<p>![img](Hexo-Stellar主题装修二&#x2F;CleanShot 2024-04-17 at <a href=\"mailto:&#x30;&#x32;&#x2e;&#x31;&#x37;&#x2e;&#52;&#x36;&#x40;&#50;&#120;&#x2d;&#49;&#55;&#x34;&#x39;&#52;&#51;&#56;&#53;&#55;&#x39;&#x38;&#51;&#57;&#x2d;&#x31;&#48;&#x36;&#x32;&#x2e;&#x77;&#x65;&#x62;&#112;\">02.17.46@2x-1749438579839-1062.webp</a>)</p>\n<p>原始代码忘记在哪里抄的了，我就修改了最后 3 行……在自定义 css 文件中加入以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 设置文字内容 :nth-child(1)的作用是选择第几个 */.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(1):before &#123;    content: &#x27;输入QQ号会自动获取昵称和头像🐧&#x27;;&#125;</span><br><span class=\"line\">.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(2):before &#123;    content: &#x27;收到回复将会发送到您的邮箱📧&#x27;;&#125;</span><br><span class=\"line\">.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(3):before &#123;    content: &#x27;填写后可以点击昵称访问您的网站🔗&#x27;;&#125;</span><br><span class=\"line\">/* 当用户点击输入框时显示 */.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::before,.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::after &#123;    display: block;&#125;</span><br><span class=\"line\">/* 主内容区 */.el-input.el-input--small.el-input-group.el-input-group--prepend::before &#123;    /* 先隐藏起来 */    display: none;    /* 绝对定位 */    position: absolute;    /* 向上移动60像素 */    top: -60px;    /* 文字强制不换行，防止left:50%导致的文字换行 */    white-space: nowrap;    /* 圆角 */    border-radius: 10px;    /* 距离左边50% */    left: 50%;    /* 然后再向左边挪动自身的一半，即可实现居中 */    transform: translate(-50%);    /* 填充 */    padding: 14px 18px;    background: #444;    color: #fff;&#125;</span><br><span class=\"line\">/* 小角标 */.el-input.el-input--small.el-input-group.el-input-group--prepend::after &#123;    display: none;    content: &#x27;&#x27;;    position: absolute;    /* 内容大小（宽高）为0且边框大小不为0的情况下，每一条边（4个边）都是一个三角形，组成一个正方形。    我们先将所有边框透明，再给其中的一条边添加颜色就可以实现小三角图标 */    border: 12px solid transparent;    border-top-color: #444;    left: 50%;    transform: translate(-50%, -48px);&#125;</span><br><span class=\"line\">.el-input.el-input--small.el-input-group.el-input-group--prepend::before, .el-input.el-input--small.el-input-group.el-input-group--prepend::after &#123;    z-index: 9999; /* 提高层级，确保内容显示在最前 */&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Stellar-Twikoo-表情包补全计划\"><a href=\"#Stellar-Twikoo-表情包补全计划\" class=\"headerlink\" title=\"Stellar &amp; Twikoo 表情包补全计划#\"></a>Stellar &amp; Twikoo 表情包补全计划<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#stellar--twikoo-%E8%A1%A8%E6%83%85%E5%8C%85%E8%A1%A5%E5%85%A8%E8%AE%A1%E5%88%92\">#</a></h2><h3 id=\"blobcat\"><a href=\"#blobcat\" class=\"headerlink\" title=\"blobcat#\"></a>blobcat<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#blobcat\">#</a></h3><p>这个系列表情真的不要太可爱，一眼爱上</p>\n<p><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatattentionreverse-1749438579839-1054.png\" alt=\"blobcat:ablobcatattentionreverse\"> <img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatwave-1749438579839-1064.png\" alt=\"blobcat:ablobcatwave\"> <img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatpresentred-1749438579839-1066.png\" alt=\"blobcat:blobcatpresentred\"><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatknitsweats-1749438579839-1052.png\" alt=\"blobcat:ablobcatknitsweats\"></p>\n<p>光在博客正文里用怎么够，当然还要在评论区里也安排上<img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatrainbow-1749438579839-1068.png\" alt=\"blobcat:ablobcatrainbow\"></p>\n<p>blobcat 表情主要来自<a href=\"https://weekdaycare.cn/posts/emoji-blob/\">星日语</a>佬。本人在学会自定义后收集癖大发，一口气制作了几个系列的表情，往现有的 blobcat里也加了几个比较好看的 <img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/A_BlobCat_Code-1749438579839-1070.png\" alt=\"blobcat:A_BlobCat_Code\"></p>\n<p>Stellar 引入：<code>blobcatplus:https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/&#123;name&#125;.png</code></p>\n<p>Twikoo 使用链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/blobcatplus.json</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>表情</th>\n<th>索引</th>\n<th>表情</th>\n<th>索引</th>\n<th>表情</th>\n<th>索引</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatheart-1749438579839-1042.png\" alt=\"blobcat:ablobcatheart\"></td>\n<td>ablobcatheart</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatheartbroken-1749438579839-1072.png\" alt=\"blobcat:ablobcatheartbroken\"></td>\n<td>ablobcatheartbroken</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatheart-1749438579839-1074.png\" alt=\"blobcat:blobcatheart\"></td>\n<td>blobcatheart</td>\n</tr>\n<tr>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatheartpride-1749438579839-1076.png\" alt=\"blobcat:blobcatheartpride\"></td>\n<td>blobcatheartpride</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatlove.png\" alt=\"blobcat:blobcatlove\"></td>\n<td>blobcatlove</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatkissheart-1749438579839-1080.png\" alt=\"blobcat:blobcatkissheart\"></td>\n<td>blobcatkissheart</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatsnuggle.png\" alt=\"blobcat:blobcatsnuggle\"></td>\n<td>blobcatsnuggle</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/comfyuee.png\" alt=\"blobcat:comfyuee\"></td>\n<td>comfyuee</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/comfyslep.png\" alt=\"blobcat:comfyslep\"></td>\n<td>comfyslep</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatcomfysweat.png\" alt=\"blobcat:blobcatcomfysweat\"></td>\n<td>blobcatcomfysweat</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatcomftears.png\" alt=\"blobcat:blobcatcomftears\"></td>\n<td>blobcatcomftears</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatfacepalm.png\" alt=\"blobcat:blobcatfacepalm\"></td>\n<td>blobcatfacepalm</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcat0_0.png\" alt=\"blobcat:blobcat0_0\"></td>\n<td>blobcat0_0</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatangry-1749438579840-1096.png\" alt=\"blobcat:blobcatangry\"></td>\n<td>blobcatangry</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobbanhammerr.png\" alt=\"blobcat:blobbanhammerr\"></td>\n<td>blobbanhammerr</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatt.png\" alt=\"blobcat:blobcatt\"></td>\n<td>blobcatt</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatblush-1749438579840-1102.png\" alt=\"blobcat:blobcatblush\"></td>\n<td>blobcatblush</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatcoffee-1749438579840-1104.png\" alt=\"blobcat:blobcatcoffee\"></td>\n<td>blobcatcoffee</td>\n</tr>\n<tr>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatcry-1749438579840-1106.png\" alt=\"blobcat:blobcatcry\"></td>\n<td>blobcatcry</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatdead-1749438579840-1108.png\" alt=\"blobcat:blobcatdead\"></td>\n<td>blobcatdead</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatdied.png\" alt=\"blobcat:blobcatdied\"></td>\n<td>blobcatdied</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatdisturbed.png\" alt=\"blobcat:blobcatdisturbed\"></td>\n<td>blobcatdisturbed</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatfearful.png\" alt=\"blobcat:blobcatfearful\"></td>\n<td>blobcatfearful</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatfingerguns.png\" alt=\"blobcat:blobcatfingerguns\"></td>\n<td>blobcatfingerguns</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatflip.png\" alt=\"blobcat:blobcatflip\"></td>\n<td>blobcatflip</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatflower.png\" alt=\"blobcat:blobcatflower\"></td>\n<td>blobcatflower</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatgay.png\" alt=\"blobcat:blobcatgay\"></td>\n<td>blobcatgay</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatgooglycry.png\" alt=\"blobcat:blobcatgooglycry\"></td>\n<td>blobcatgooglycry</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatneutral.png\" alt=\"blobcat:blobcatneutral\"></td>\n<td>blobcatneutral</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatopenmouth.png\" alt=\"blobcat:blobcatopenmouth\"></td>\n<td>blobcatopenmouth</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatsadreach.png\" alt=\"blobcat:blobcatsadreach\"></td>\n<td>blobcatsadreach</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatscared.png\" alt=\"blobcat:blobcatscared\"></td>\n<td>blobcatscared</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatnomblobcat.png\" alt=\"blobcat:blobcatnomblobcat\"></td>\n<td>blobcatnomblobcat</td>\n</tr>\n<tr>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatpresentred-1749438579839-1066.png\" alt=\"blobcat:blobcatpresentred\"></td>\n<td>blobcatpresentred</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatread.png\" alt=\"blobcat:blobcatread\"></td>\n<td>blobcatread</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatsipsweat.png\" alt=\"blobcat:blobcatsipsweat\"></td>\n<td>blobcatsipsweat</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatsnapped.png\" alt=\"blobcat:blobcatsnapped\"></td>\n<td>blobcatsnapped</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatthink.png\" alt=\"blobcat:blobcatthink\"></td>\n<td>blobcatthink</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcattriumph.png\" alt=\"blobcat:blobcattriumph\"></td>\n<td>blobcattriumph</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatumm.png\" alt=\"blobcat:blobcatumm\"></td>\n<td>blobcatumm</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatverified.png\" alt=\"blobcat:blobcatverified\"></td>\n<td>blobcatverified</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatbox.png\" alt=\"blobcat:blobcatbox\"></td>\n<td>blobcatbox</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatcaged.png\" alt=\"blobcat:blobcatcaged\"></td>\n<td>blobcatcaged</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatgooglytrash.png\" alt=\"blobcat:blobcatgooglytrash\"></td>\n<td>blobcatgooglytrash</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatheadphones.png\" alt=\"blobcat:blobcatheadphones\"></td>\n<td>blobcatheadphones</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcathighfive.png\" alt=\"blobcat:blobcathighfive\"></td>\n<td>blobcathighfive</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatmelt.png\" alt=\"blobcat:blobcatmelt\"></td>\n<td>blobcatmelt</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatmeltthumb.png\" alt=\"blobcat:blobcatmeltthumb\"></td>\n<td>blobcatmeltthumb</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatnotlikethis.png\" alt=\"blobcat:blobcatnotlikethis\"></td>\n<td>blobcatnotlikethis</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatsaitama.png\" alt=\"blobcat:blobcatsaitama\"></td>\n<td>blobcatsaitama</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatyandere.png\" alt=\"blobcat:blobcatyandere\"></td>\n<td>blobcatyandere</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatpeek2.png\" alt=\"blobcat:blobcatpeek2\"></td>\n<td>blobcatpeek2</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/blobcatpeekaboo-1749438579838-1032.png\" alt=\"blobcat:blobcatpeekaboo\"></td>\n<td>blobcatpeekaboo</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatphoto.png\" alt=\"blobcat:blobcatphoto\"></td>\n<td>blobcatphoto</td>\n</tr>\n<tr>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatattentionreverse-1749438579839-1054.png\" alt=\"blobcat:ablobcatattentionreverse\"></td>\n<td>ablobcatattentionreverse</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatreachrev.png\" alt=\"blobcat:ablobcatreachrev\"></td>\n<td>ablobcatreachrev</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatwave-1749438579839-1064.png\" alt=\"blobcat:ablobcatwave\"></td>\n<td>ablobcatwave</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatalt.png\" alt=\"blobcat:blobcatalt\"></td>\n<td>blobcatalt</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatpolice.png\" alt=\"blobcat:blobcatpolice\"></td>\n<td>blobcatpolice</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcatshocked.png\" alt=\"blobcat:blobcatshocked\"></td>\n<td>blobcatshocked</td>\n</tr>\n<tr>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatrainbow-1749438579839-1068.png\" alt=\"blobcat:ablobcatrainbow\"></td>\n<td>ablobcatrainbow</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/A_BlobCat_REEEE.png\" alt=\"blobcat:A_BlobCat_REEEE\"></td>\n<td>A_BlobCat_REEEE</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/A_BlobCat_Code-1749438579839-1070.png\" alt=\"blobcat:A_BlobCat_Code\"></td>\n<td>A_BlobCat_Code</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/ablobcatknitsweats-1749438579839-1052.png\" alt=\"blobcat:ablobcatknitsweats\"></td>\n<td>ablobcatknitsweats</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/A_BlobCat_Nervous.png\" alt=\"blobcat:A_BlobCat_Nervous\"></td>\n<td>A_BlobCat_Nervous</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/blobcat-aww.png\" alt=\"blobcat:blobcat-aww\"></td>\n<td>blobcat-aww</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatcry.png\" alt=\"blobcat:ablobcatcry\"></td>\n<td>ablobcatcry</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatdead.png\" alt=\"blobcat:ablobcatdead\"></td>\n<td>ablobcatdead</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"azuki\"><a href=\"#azuki\" class=\"headerlink\" title=\"azuki#\"></a>azuki<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#azuki\">#</a></h3><p><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/038.png\" alt=\"azuki:038\"><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/039.png\" alt=\"azuki:039\"><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/039.png\" alt=\"azuki:039\"><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/039.png\" alt=\"azuki:039\"><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/039.png\" alt=\"azuki:039\"><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/040.png\" alt=\"azuki:040\"></p>\n<p>Stellar 引入：<code>azuki: https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/&#123;name&#125;.png</code></p>\n<p>Twikoo 使用链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/xiaodouni.json</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>表情</th>\n<th>索引</th>\n<th>表情</th>\n<th>索引</th>\n<th>表情</th>\n<th>索引</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/001.png\" alt=\"azuki:001\"></td>\n<td>001</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/015.png\" alt=\"azuki:015\"></td>\n<td>015</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/029.png\" alt=\"azuki:029\"></td>\n<td>029</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/002.png\" alt=\"azuki:002\"></td>\n<td>002</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/016.png\" alt=\"azuki:016\"></td>\n<td>016</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/030.png\" alt=\"azuki:030\"></td>\n<td>030</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/003.png\" alt=\"azuki:003\"></td>\n<td>003</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/017.png\" alt=\"azuki:017\"></td>\n<td>017</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/031.png\" alt=\"azuki:031\"></td>\n<td>031</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/004.png\" alt=\"azuki:004\"></td>\n<td>004</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/018.png\" alt=\"azuki:018\"></td>\n<td>018</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/032.png\" alt=\"azuki:032\"></td>\n<td>032</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/005.png\" alt=\"azuki:005\"></td>\n<td>005</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/019.png\" alt=\"azuki:019\"></td>\n<td>019</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/033.png\" alt=\"azuki:033\"></td>\n<td>033</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/006.png\" alt=\"azuki:006\"></td>\n<td>006</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/020.png\" alt=\"azuki:020\"></td>\n<td>020</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/034.png\" alt=\"azuki:034\"></td>\n<td>034</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/007.png\" alt=\"azuki:007\"></td>\n<td>007</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/021.png\" alt=\"azuki:021\"></td>\n<td>021</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/035.png\" alt=\"azuki:035\"></td>\n<td>035</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/008.png\" alt=\"azuki:008\"></td>\n<td>008</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/022.png\" alt=\"azuki:022\"></td>\n<td>022</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/036.png\" alt=\"azuki:036\"></td>\n<td>036</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/009.png\" alt=\"azuki:009\"></td>\n<td>009</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/023.png\" alt=\"azuki:023\"></td>\n<td>023</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/037.png\" alt=\"azuki:037\"></td>\n<td>037</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/010.png\" alt=\"azuki:010\"></td>\n<td>010</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/024.png\" alt=\"azuki:024\"></td>\n<td>024</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/038.png\" alt=\"azuki:038\"></td>\n<td>038</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/011.png\" alt=\"azuki:011\"></td>\n<td>011</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/025.png\" alt=\"azuki:025\"></td>\n<td>025</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/039.png\" alt=\"azuki:039\"></td>\n<td>039</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/012.png\" alt=\"azuki:012\"></td>\n<td>012</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/026.png\" alt=\"azuki:026\"></td>\n<td>026</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/040.png\" alt=\"azuki:040\"></td>\n<td>040</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/013.png\" alt=\"azuki:013\"></td>\n<td>013</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/027.png\" alt=\"azuki:027\"></td>\n<td>027</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/014.png\" alt=\"azuki:014\"></td>\n<td>014</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/028.png\" alt=\"azuki:028\"></td>\n<td>028</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"neko\"><a href=\"#neko\" class=\"headerlink\" title=\"neko#\"></a>neko<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#neko\">#</a></h3><p><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/038.png\" alt=\"neko:038\"><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/039.png\" alt=\"neko:039\"><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/040.png\" alt=\"neko:040\"></p>\n<p>Stellar 引入：<code>neko: https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/&#123;name&#125;.png</code></p>\n<p>Twikoo 使用链接：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/neko.json</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>表情</th>\n<th>索引</th>\n<th>表情</th>\n<th>索引</th>\n<th>表情</th>\n<th>索引</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/001.png\" alt=\"neko:001\"></td>\n<td>001</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/015.png\" alt=\"neko:015\"></td>\n<td>015</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/028.png\" alt=\"neko:028\"></td>\n<td>028</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/002.png\" alt=\"neko:002\"></td>\n<td>002</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/016.png\" alt=\"neko:016\"></td>\n<td>016</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/029.png\" alt=\"neko:029\"></td>\n<td>029</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/003.png\" alt=\"neko:003\"></td>\n<td>003</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/017.png\" alt=\"neko:017\"></td>\n<td>017</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/030.png\" alt=\"neko:030\"></td>\n<td>030</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/004.png\" alt=\"neko:004\"></td>\n<td>004</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/018.png\" alt=\"neko:018\"></td>\n<td>018</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/031.png\" alt=\"neko:031\"></td>\n<td>031</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/005.png\" alt=\"neko:005\"></td>\n<td>005</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/019.png\" alt=\"neko:019\"></td>\n<td>019</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/032-1749438579782-1007.png\" alt=\"neko:032\"></td>\n<td>032</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/006.png\" alt=\"neko:006\"></td>\n<td>006</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/020.png\" alt=\"neko:020\"></td>\n<td>020</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/033.png\" alt=\"neko:033\"></td>\n<td>033</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/007.png\" alt=\"neko:007\"></td>\n<td>007</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/021.png\" alt=\"neko:021\"></td>\n<td>021</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/034.png\" alt=\"neko:034\"></td>\n<td>034</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/008.png\" alt=\"neko:008\"></td>\n<td>008</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/022.png\" alt=\"neko:022\"></td>\n<td>022</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/035.png\" alt=\"neko:035\"></td>\n<td>035</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/009.png\" alt=\"neko:009\"></td>\n<td>009</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/023.png\" alt=\"neko:023\"></td>\n<td>023</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/036.png\" alt=\"neko:036\"></td>\n<td>036</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/010.png\" alt=\"neko:010\"></td>\n<td>010</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/024.png\" alt=\"neko:024\"></td>\n<td>024</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/037.png\" alt=\"neko:037\"></td>\n<td>037</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/011.png\" alt=\"neko:011\"></td>\n<td>011</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/025.png\" alt=\"neko:025\"></td>\n<td>025</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/038.png\" alt=\"neko:038\"></td>\n<td>038</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/012.png\" alt=\"neko:012\"></td>\n<td>012</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/026.png\" alt=\"neko:026\"></td>\n<td>026</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/039.png\" alt=\"neko:039\"></td>\n<td>039</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/013.png\" alt=\"neko:013\"></td>\n<td>013</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/027.png\" alt=\"neko:027\"></td>\n<td>027</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/014.png\" alt=\"neko:014\"></td>\n<td>014</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"dokomo\"><a href=\"#dokomo\" class=\"headerlink\" title=\"dokomo#\"></a>dokomo<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#dokomo\">#</a></h3><p>Stellar 引入: <code>dokomo: https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/&#123;name&#125;.png</code></p>\n<p>Twikoo 使用链接:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://raw.githubusercontent.com/infinitesum/Twikoo-emoji/main/dokomo/dokomo.json</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>表情</th>\n<th>索引</th>\n<th>表情</th>\n<th>索引</th>\n<th>表情</th>\n<th>索引</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-1.png\" alt=\"dokomo:dokomo-1\"></td>\n<td>dokomo-1</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-18.png\" alt=\"dokomo:dokomo-18\"></td>\n<td>dokomo-18</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-35.png\" alt=\"dokomo:dokomo-35\"></td>\n<td>dokomo-35</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-2.png\" alt=\"dokomo:dokomo-2\"></td>\n<td>dokomo-2</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-19.png\" alt=\"dokomo:dokomo-19\"></td>\n<td>dokomo-19</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-36.png\" alt=\"dokomo:dokomo-36\"></td>\n<td>dokomo-36</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-3.png\" alt=\"dokomo:dokomo-3\"></td>\n<td>dokomo-3</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-20.png\" alt=\"dokomo:dokomo-20\"></td>\n<td>dokomo-20</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-37.png\" alt=\"dokomo:dokomo-37\"></td>\n<td>dokomo-37</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-4.png\" alt=\"dokomo:dokomo-4\"></td>\n<td>dokomo-4</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-21.png\" alt=\"dokomo:dokomo-21\"></td>\n<td>dokomo-21</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-38.png\" alt=\"dokomo:dokomo-38\"></td>\n<td>dokomo-38</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-5.png\" alt=\"dokomo:dokomo-5\"></td>\n<td>dokomo-5</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-22.png\" alt=\"dokomo:dokomo-22\"></td>\n<td>dokomo-22</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-39.png\" alt=\"dokomo:dokomo-39\"></td>\n<td>dokomo-39</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-6.png\" alt=\"dokomo:dokomo-6\"></td>\n<td>dokomo-6</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-23.png\" alt=\"dokomo:dokomo-23\"></td>\n<td>dokomo-23</td>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/dokomo-40-1749438579846-1346.png\" alt=\"dokomo:dokomo-40\"></td>\n<td>dokomo-40</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-7.png\" alt=\"dokomo:dokomo-7\"></td>\n<td>dokomo-7</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-24.png\" alt=\"dokomo:dokomo-24\"></td>\n<td>dokomo-24</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-41.png\" alt=\"dokomo:dokomo-41\"></td>\n<td>dokomo-41</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-8.png\" alt=\"dokomo:dokomo-8\"></td>\n<td>dokomo-8</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-25.png\" alt=\"dokomo:dokomo-25\"></td>\n<td>dokomo-25</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-42.png\" alt=\"dokomo:dokomo-42\"></td>\n<td>dokomo-42</td>\n</tr>\n<tr>\n<td><img src=\"/Hexo-Stellar%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E4%BA%8C/dokomo-9-1749438579846-1360.png\" alt=\"dokomo:dokomo-9\"></td>\n<td>dokomo-9</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-26.png\" alt=\"dokomo:dokomo-26\"></td>\n<td>dokomo-26</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-43.png\" alt=\"dokomo:dokomo-43\"></td>\n<td>dokomo-43</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-10.png\" alt=\"dokomo:dokomo-10\"></td>\n<td>dokomo-10</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-27.png\" alt=\"dokomo:dokomo-27\"></td>\n<td>dokomo-27</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-44.png\" alt=\"dokomo:dokomo-44\"></td>\n<td>dokomo-44</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-11.png\" alt=\"dokomo:dokomo-11\"></td>\n<td>dokomo-11</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-28.png\" alt=\"dokomo:dokomo-28\"></td>\n<td>dokomo-28</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-45.png\" alt=\"dokomo:dokomo-45\"></td>\n<td>dokomo-45</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-12.png\" alt=\"dokomo:dokomo-12\"></td>\n<td>dokomo-12</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-29.png\" alt=\"dokomo:dokomo-29\"></td>\n<td>dokomo-29</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-46.png\" alt=\"dokomo:dokomo-46\"></td>\n<td>dokomo-46</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-13.png\" alt=\"dokomo:dokomo-13\"></td>\n<td>dokomo-13</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-30.png\" alt=\"dokomo:dokomo-30\"></td>\n<td>dokomo-30</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-47.png\" alt=\"dokomo:dokomo-47\"></td>\n<td>dokomo-47</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-14.png\" alt=\"dokomo:dokomo-14\"></td>\n<td>dokomo-14</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-31.png\" alt=\"dokomo:dokomo-31\"></td>\n<td>dokomo-31</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-48.png\" alt=\"dokomo:dokomo-48\"></td>\n<td>dokomo-48</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-15.png\" alt=\"dokomo:dokomo-15\"></td>\n<td>dokomo-15</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-32.png\" alt=\"dokomo:dokomo-32\"></td>\n<td>dokomo-32</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-49.png\" alt=\"dokomo:dokomo-49\"></td>\n<td>dokomo-49</td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-16.png\" alt=\"dokomo:dokomo-16\"></td>\n<td>dokomo-16</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-33.png\" alt=\"dokomo:dokomo-33\"></td>\n<td>dokomo-33</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-17.png\" alt=\"dokomo:dokomo-17\"></td>\n<td>dokomo-17</td>\n<td><img src=\"https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/dokomo-34.png\" alt=\"dokomo:dokomo-34\"></td>\n<td>dokomo-34</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"总字数统计：“发表了x篇文章，共计x字”\"><a href=\"#总字数统计：“发表了x篇文章，共计x字”\" class=\"headerlink\" title=\"总字数统计：“发表了x篇文章，共计x字”#\"></a>总字数统计：“发表了x篇文章，共计x字”<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#%E6%80%BB%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%8F%91%E8%A1%A8%E4%BA%86x%E7%AF%87%E6%96%87%E7%AB%A0%E5%85%B1%E8%AE%A1x%E5%AD%97\">#</a></h2><p>需要修改主题文件 <img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/038.png\" alt=\"azuki:038\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 3.left.top: 面包屑导航</span><br><span class=\"line\"></span><br><span class=\"line\">  el += `&lt;div class=&quot;flex-row&quot; id=&quot;breadcrumb&quot;&gt;`</span><br><span class=\"line\"></span><br><span class=\"line\">    // 首页</span><br><span class=\"line\"></span><br><span class=\"line\">    el += `&lt;a class=&quot;cap breadcrumb&quot; href=&quot;$&#123;url_for(config.root)&#125;&quot;&gt;$&#123;__(&quot;btn.home&quot;)&#125;&lt;/a&gt;`</span><br><span class=\"line\"></span><br><span class=\"line\">    if (theme.wiki.tree[page.wiki]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      el += partial(&#x27;breadcrumb/wiki&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else if (page.layout == &#x27;post&#x27;) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      el += partial(&#x27;breadcrumb/blog&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      el += partial(&#x27;breadcrumb/page&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  // end 3.left.top</span><br><span class=\"line\"></span><br><span class=\"line\">  el += `&lt;/div&gt;`</span><br></pre></td></tr></table></figure>\n\n<p>并在后面添加：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 在这里添加标签代码</span><br><span class=\"line\"></span><br><span class=\"line\"> if (page.layout == &quot;post&quot; &amp;&amp; page.tags &amp;&amp; page.tags.length &gt; 0) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   el += &#x27;&lt;div id=&quot;tag&quot;&gt;&#x27;; // 将标签容器的创建移动到条件内部</span><br><span class=\"line\"></span><br><span class=\"line\">   el += &#x27; &lt;span&gt;&amp;nbsp标签：&lt;/span&gt;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">   el += list_categories(page.tags, &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     class: &quot;cap breadcrumb&quot;,</span><br><span class=\"line\"></span><br><span class=\"line\">     show_count: false,</span><br><span class=\"line\"></span><br><span class=\"line\">     separator: &#x27;&amp;nbsp; &#x27;,</span><br><span class=\"line\"></span><br><span class=\"line\">     style: &quot;none&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">   el += &#x27;&amp;nbsp&lt;/div&gt;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"toc-字体大小调整\"><a href=\"#toc-字体大小调整\" class=\"headerlink\" title=\"toc 字体大小调整#\"></a>toc 字体大小调整<a href=\"https://www.flyalready.com/site/hexo-stellar-%E4%B8%BB%E9%A2%98%E8%A3%85%E4%BF%AE%E7%AC%94%E8%AE%B0/#toc-%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F%E8%B0%83%E6%95%B4\">#</a></h2><p>需要修改主题文件 <img src=\"https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/038.png\" alt=\"azuki:038\"></p>\n<p>就是把文章目录字体调小了一点点。</p>\n<p>在<code>themes/stellar/source/css/_layout/widgets/toc.styl</code> 文件中，找到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 各级缩进样式</span><br><span class=\"line\"></span><br><span class=\"line\">.widget-wrapper.toc .toc</span><br><span class=\"line\"></span><br><span class=\"line\">  .toc-item</span><br><span class=\"line\"></span><br><span class=\"line\">    font-weight: 500</span><br><span class=\"line\"></span><br><span class=\"line\">    --fsp: $fsp1</span><br><span class=\"line\"></span><br><span class=\"line\">  .toc-item .toc-item</span><br><span class=\"line\"></span><br><span class=\"line\">    font-weight: 400</span><br><span class=\"line\"></span><br><span class=\"line\">    --fsp: $fsp2</span><br></pre></td></tr></table></figure>\n\n<p>把<code>--fsp: $fsp1</code>一行注释掉：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 各级缩进样式</span><br><span class=\"line\"></span><br><span class=\"line\">.widget-wrapper.toc .toc</span><br><span class=\"line\"></span><br><span class=\"line\">  .toc-item</span><br><span class=\"line\"></span><br><span class=\"line\">    font-weight: 500</span><br><span class=\"line\"></span><br><span class=\"line\">    /*--fsp: $fsp1*/</span><br><span class=\"line\"></span><br><span class=\"line\">  .toc-item .toc-item</span><br><span class=\"line\"></span><br><span class=\"line\">    font-weight: 400</span><br><span class=\"line\"></span><br><span class=\"line\">    --fsp: $fsp2</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cmbpzhabd0001s2x0gst11mll","category_id":"cmbpzhabs0004s2x08sjqcts3","_id":"cmbpzhac7000ds2x04a2td8hb"},{"post_id":"cmbpzhabn0003s2x0eoy7fha4","category_id":"cmbpzhac4000as2x05xrw1u2p","_id":"cmbpzhacb000is2x02pmlcjqp"},{"post_id":"cmbpzhaby0007s2x05dxifzct","category_id":"cmbpzhac4000as2x05xrw1u2p","_id":"cmbpzhacd000ls2x06oby3z2y"},{"post_id":"cmbpzhac10009s2x0hzcg24nm","category_id":"cmbpzhac4000as2x05xrw1u2p","_id":"cmbpzhace000ns2x0hzz9901i"}],"PostTag":[{"post_id":"cmbpzhabd0001s2x0gst11mll","tag_id":"cmbpzhabw0005s2x06kvg3vti","_id":"cmbpzhac6000cs2x0aui4acf5"},{"post_id":"cmbpzhabn0003s2x0eoy7fha4","tag_id":"cmbpzhac5000bs2x07ilj5z24","_id":"cmbpzhaca000gs2x0920r1w2k"},{"post_id":"cmbpzhaby0007s2x05dxifzct","tag_id":"cmbpzhac5000bs2x07ilj5z24","_id":"cmbpzhacd000ks2x0cu3s3geu"},{"post_id":"cmbpzhac10009s2x0hzcg24nm","tag_id":"cmbpzhac5000bs2x07ilj5z24","_id":"cmbpzhacd000ms2x0etqh7uho"}],"Tag":[{"name":"标签云","_id":"cmbpzhabw0005s2x06kvg3vti"},{"name":"主题装修","_id":"cmbpzhac5000bs2x07ilj5z24"}]}}