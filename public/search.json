[{"title":"Typora+Github+PicGo搭建个人免费图床","path":"/2025/06/09/2025/06/Typora-Github-PicGo/","content":"一、配置GitHub1、新建公开仓库1.1、New repository 1.2、定义仓库名称，设置公开属性 2、创建私人令牌（token）2.1、个人头像 – Settings 2.2、左侧列底部点击 Developer settings 2.3、选择 Generate new token (classic) 依此点击 Personal access tokens – Tokens(classic) – Generate new token – Generate new token(classic) 2.4、密码验证 2.5、创建令牌 Note：标记作用，任意写 Token 过期时间：为了安全性，不建议选择永久 访问权限：选择repo，对私有库享有完全控制 2.6、记事本记下token 二、配置PicGo1、PicGo下载地址MolunerfinnPicGo 依据自身的操作系统下载安装软件包 2、图床设置 图床设置 – GitHub 3、具体图床参数配置 3.1、图床配置名当前图床的名称，自定义 3.2、设定仓库名 格式：用户名仓库名 可以通过GitHub上创建仓库页的域名快速得到 bash # 例如我这边的仓库名就是misakivv/Cloud-Image-Hosting 3.3、设定分支名 默认情况下均为 main 分支 3.4、设定Token上面 一、2.6、保存的Token 3.5、设定存储路径存放至 Github 指定仓库的哪个文件夹下 如果直接放到仓库的根目录下就不需要填写这一栏 如果需要放到某个目录下，格式： 当填写的目录不存在时，Github会自动创建对应目录 3.6、设定自定义域名 这里使用免费的CDN：jsDelivr 官网链接：jsDelivr - A free, fast, and reliable CDN for JS and open source bash # https://cdn.jsdelivr.net/gh/：固定的前缀，相当于替换掉了Github地址中的https://github.com/# user：Github上的用户名# repo：仓库名# @version：版本号（这里我们可以不管）# file：文件名（这里我们也不需要加上，因为上传完图片后，它会自动将上传的图片的名字作为存储的文件名）# 例如我这里的填写https://cdn.jsdelivr.net/gh/misakivv/Cloud-Image-Hosting 这里值得注意的是，如果需要指定上传到哪个分支，此时需要在自定义域名后面使用@ + 分支名，如果是仓库默认的分支，可以省略指定分支这一步。 eg：我需要上传到 k8s 分支上，此时自定义域名就变成了：https://cdn.jsdelivr.net/gh/misakivv/Cloud-Image-Hosting@k8s 三、测试上述配置完成后即可上传本地图片生成对应云端平台链接使用 1、本地上传图片 上传区 – 选择GitHub图床 – 点击上传 2、相册查看 3、时间戳重命名 添加时间戳命名选项可以避免上传相同图片被覆盖的情况 四、Typora插入图片实现自动上传至PicGo（可选） 需要将PicGo图床的链接格式换成Markdonw格式才能实现功能 1、打开 Typora 偏好设置 ctrl + , 快捷键 2、插入图片选项选择上传图片 3、上传服务设定 上传服务选择 PicGo（app） PicGo 路径为安装 PicGo 目录","tags":["主题装修"],"categories":["装修日记"]},{"title":"Hello World","path":"/2025/06/09/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new My New Post More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","tags":["标签云"],"categories":["测试"]},{"title":"Hexo-Stellar主题装修日记(一)","path":"/2025/06/09/2025/06/theme-design1/","content":"前言记录一下自己从默认主题样式到现在本网站的样子中间都修改了哪些地方，也作为完善博客期间的备份。 博客引用资源本地资源文件夹将头像、图标、css、js等文件放在source下 静态资源本地化有两次发现通过jsdelivr引入的静态资源会失效，为了网站的稳定性，决定将所有通过jsdelivr引入的静态资源保存到本地，防止失效后网站无法访问。 引用落霞孤鹜字体tale/_config.ymlinject: head: - link rel=stylesheet href=https://npm.elemecdn.com/lxgw-wenkai-screen-webfont/style.css media=print onload=this.media=all #字体Copytale/_config.stellar.ymlstyle: font-family: body: LXGW WenKai Screen, sans-serifCopy 引用鸿蒙字体tale/_config.ymlinject: head: - link rel=preconnect href=https://s1.hdslb.com/ / - link rel=stylesheet href=//s1.hdslb.com/bfs/static/jinkela/long/font/regular.css media=all onload=this.media=all / #鸿蒙正常字体 - link rel=stylesheet href=//s1.hdslb.com/bfs/static/jinkela/long/font/medium.css media=all onload=this.media=all / #鸿蒙加粗字体Copytale/_config.stellar.ymlstyle: font-family: body: HarmonyOS_Regular # 鸿蒙正常字体 #body: HarmonyOS_Regular # 鸿蒙加粗字体Copy 博客基本配置基本信息tale/_config.yml# Sitetitle: SFZhang #网站名称avatar: /customize/images/sfzhang.jpg #博客头像favicon: /customize/images/sfzhang.jpg #网站图标subtitle: SFZhangs blog | blog.sfzhang.cn #鼠标移入翻转效果description: 一个积极生活的人keywords:author: SFZhang #博客作者language: zh-CN #博客语言：en、zh-CNtimezone: Copy 显示导航tale/_config.stellar.ymlsidebar: menu: post: [btn.blog](/) wiki: [btn.wiki](/) friends: [友链](/) about: [关于](/)Copy 图片放大（fancybox）其中selector设置为需要放大图片的HTML选择器： tale/_config.ymltag_plugins: # % image % image: fancybox: true # true, false parse_markdown: true # 把 markdown 格式的图片解析成图片标签######## JS Plugins ########plugins: # https://fancyapps.com/docs/ui/fancybox/ # available for % image xxx % fancybox: enable: true #js: /customize/js/fancybox.umd.js css: /customize/css/fancybox.css js: https://fastly.jsdelivr.net/npm/@fancyapps/ui@4.0/dist/fancybox.umd.js #css: https://fastly.jsdelivr.net/npm/@fancyapps/ui@4.0/dist/fancybox.css # 可以处理评论区的图片（不支持 iframe 类评论系统）例如： # 使用twikoo评论可以写: .tk-content img:not([class*=emo]) # 使用waline评论可以写: #waline_container .vcontent img selector: .swiper-slide img, .md-text.content pimg, .md-text.content li img , .wl-content img, .image-bg img # 多个选择器用英文逗号隔开 #selector: .swiper-slide img # 多个选择器用英文逗号隔开Copy 侧边栏侧边栏底部按钮tale/_config.stellar.ymlfooter: social: QQ: icon: img src=/customize/svg/contact.svg/ url: https://wpa.qq.com/msgrd?v=3uin=1119716380site=qqmenu=yesjumpflag=1 github: icon: img src=/customize/svg/github.svg/ url: https://github.com/z23654262 #iconfont: # icon: img src=/customize/svg/iconfont.svg/ # url: https://www.iconfont.cn/ unsplash: icon: img src=/customize/svg/unsplash.svg/ url: https://unsplash.com/@z23654262 train: icon: img src=/customize/svg/train.svg/ url: https://unsplash.com/@z23654262 Moon: icon: img id=ThemeM src=/customize/svg/moon.svg/ url: javaScript:void(永夜); Sun: icon: img id=ThemeL src=/customize/svg/sun.svg/ url: javaScript:void(永昼); #AI: # icon: img id=ThemeAI src=/customize/svg/auto.svg/ # url: javaScript:void(跟随系统);Copy 小组件tale/source/_data/widget,ymlwelcome: layout: markdown title: 欢迎来到SFZhang的知识库 content: | 不以物喜，不以己悲 script src=https://v1.hitokoto.cn/?c=iencode=jsselect=%23hitokoto defer=/script p一诗：span id=hitokoto/span/pyiyan: layout: markdown title: 一诗 content: | script src=https://v1.hitokoto.cn/?c=iencode=jsselect=%23hitokoto defer=/script pspan id=hitokoto/span/ptimeline: layout: timeline title: 生活碎片 api: https://api.github.com/repos/z23654262/blog-life/issues?per_page=10 # 若你想限制数量，在api链接后面加上?per_page=1指限制为1条 user: # 是否过滤只显示某个人发布的内容，如果要筛选多人，用英文逗号隔开 hide: # title,footer # 隐藏标题或底部 # 此功能需要 Stellar v1.13.0ghuser: layout: ghuser username: z23654262 # your github login username avatar: true # show avatar or not menu: true # show menu or not#搜索search_blog: layout: search filter: /blog/ # or /posts/ ... placeholder: 文章搜索search_all_docs: layout: search filter: /wiki/ placeholder: 文档系统搜索search_docs: layout: search filter: auto placeholder: 文档内搜索Copy 生活碎片添加页面添加首页按钮tale/_config.stellar.ymlpost-index: # 近期发布 分类 标签 归档 and ... 生活碎片: /lifeCopy 导航高亮问题tale/node_modules/hexo-theme-stellar/layout/_partial/main/navbar/list_post.ejsif (full_url_for(page.path) == full_url_for(obj[key]))Copy 修改为 tale/node_modules/hexo-theme-stellar/layout/_partial/main/navbar/list_post.ejsif (full_url_for(page.path) == full_url_for(obj[key]) + /index.html)Copy 新建github仓库并添加一条issue 编辑生活碎片页面tale/source/life/index.md---title: menu_id: post #侧边栏首页高亮breadcrumb: false # 隐藏面包屑导航post_list: true # 显示首页导航date: 2023-10-10 10:34:34---% note color:orange 分享自己的生活碎片！ %% timeline api:https://api.github.com/repos/z23654262/blog-life/issues?direction=ascper_page=30 %% endtimeline %Copy 预览生活碎片页面 添加评论系统giscus新增github仓库新增blog-comments仓库并开启Discussions功能并勾选blog-commentsSettingsFeaturesDiscussions即可。 修改配置tale/_config.stellar.ymlcomments: service: giscus # giscus # https://giscus.app/zh-CN giscus: data-repo: xxx/xxx # [在此输入仓库] data-repo-id: # [在此输入仓库 ID] data-category: # [在此输入分类名] data-category-id: data-mapping: pathname data-strict: 0 data-reactions-enabled: 1 data-emit-metadata: 0 data-input-position: top # top, bottom data-theme: preferred_color_scheme data-lang: zh-CN data-loading: lazy crossorigin: anonymousCopy 测试giscus评论系统博客内评论： github仓库中Discussions： 添加waline评论系统waline官方教程 waline程序托管于vercel，数据存储使用learncloud国际版，域名使用waline.sfzhang.top二级域名 learncloud国际版设置 登录 或 注册 LeanCloud 国际版 并进入 控制台 点击左上角创建应用并起一个你喜欢的名字 (请选择免费的开发版) 进入应用，选择左下角的 设置 应用 Key。你可以看到你的 APP ID,APP Key 和 Master Key。请记录它们，以便后续使用。 vercel设置 点击Vercel，跳转至 Vercel 进行 Server 端部署。（如果登录无法访问github，则使用邮箱登录） 跳转后会自动机遇waline仓库进行初始化，只需要填写Vercel仓库名称即可。 点击顶部的 Settings - Environment Variables 进入环境变量配置页，并配置三个环境变量 LEAN_ID, LEAN_KEY 和 LEAN_MASTER_KEY 。它们的值分别对应上一步在 LeanCloud 中获得的 APP ID, APP KEY, Master Key。 环境变量配置完成之后点击顶部的 Deployments 点击顶部最新的一次部署右侧的 Redeploy 按钮进行重新部署。该步骤是为了让刚才设置的环境变量生效。 此时会跳转到 Overview 界面开始部署，等待片刻后 STATUS 会变成 Ready。此时请点击 Visit ，即可跳转到部署好的网站地址，此地址即为你的服务端地址。 Vercel绑定域名 点击顶部的 Settings - Domains 进入域名配置页，并输入需要绑定的域名 在阿里云处配置域名解析 博客配置文件tale/_config.staller.yml######## Comments ########comments: service: waline # beaudar, utterances, giscus, twikoo, waline, artalk # Waline # https://waline.js.org/ waline: js: https://unpkg.com/@waline/client@2.14.1/dist/waline.js css: https://unpkg.com/@waline/client@2.14.1/dist/waline.css # Waline server address url, you should set this to your own link serverURL: https://domain # If false, comment count will only be displayed in post page, not in home page commentCount: true # Pageviews count, Note: You should not enable both `waline.pageview` and `leancloud_visitors`. pageview: false # Custom emoji # emoji: # - https://unpkg.com/@waline/emojis@1.1.0/weibo # - https://unpkg.com/@waline/emojis@1.1.0/alus # - https://unpkg.com/@waline/emojis@1.1.0/bilibili # - https://unpkg.com/@waline/emojis@1.1.0/qq # - https://unpkg.com/@waline/emojis@1.1.0/tieba # - https://unpkg.com/@waline/emojis@1.1.0/tw-emoji # - https://unpkg.com/@waline/emojis@1.1.0/bmoji # 设置自己的图床服务，替换默认的 Base 64 编码嵌入（有体积大小限制），在评论中上传图片更加方便 # imageUploader: # 适配了兰空图床V1、V2版本 # 以兰空图床V1为例，下列填写内容为： # fileName: file # tokenName: Authorization # api: https://xxxxxx/api/v1/upload # token: Bearer xxxxxxxxxxxxxx # resp: data.links.url # 以兰空图床V2为例，下列填写内容为： # fileName: image # tokenName: token # api: https://xxxxxx/api/upload # token: xxxxxxxxxxxxxx # resp: data.url # fileName: # 根据版本二选一 # tokenName: # 根据版本二选一 # api: # 图床 api 地址 # token: # 图床验证 # resp: # 图片地址返回值的字段","tags":["主题装修"],"categories":["装修日记"]},{"title":"Hexo-Stellar主题装修日记(二)","path":"/2025/06/09/2025/06/theme-design2/","content":"给超长代码块增加滚动条#首先判断代码块是否过长，如果是，则设置最大高度并开启滚动。 新建 source/js/adjust-codeblock-height.js，添加以下内容： adjust-code-block-height.js document.addEventListener(DOMContentLoaded, function() // 选择所有的.md-text元素 var codeBlocks = document.querySelectorAll(.md-text); // 遍历每个.md-text元素 codeBlocks.forEach(function(block) // 检查是否包含.highlight类的子元素，且父元素高度超过500px var highlightBlocks = block.querySelectorAll(.highlight); highlightBlocks.forEach(function(highlightBlock) if (highlightBlock.clientHeight 800) highlightBlock.style.maxHeight = 300px; highlightBlock.style.overflow = auto; ); ); ); 以上代码代表如果代码框高度超过 800px，则开启折叠，折叠框最大高度为 300px。其中，可自行设置判断阈值 if (highlightBlock.clientHeight 800) 以及折叠后最大高度 highlightBlock.style.maxHeight = 300px;。 雪花特效#代码来自这里。我稍微做了一点修改，做成了一个按钮引入到主题中并用 localStorage 记录下雪状态，很简单的代码完美的解决了我的强迫症～ 博客已运行x天x小时x分钟#在网站页脚部分添加一个“博客已运行 x 天 x 小时 x 分钟”字样，显示效果： ![勉强运行x天x小时x分钟x秒](Hexo-Stellar主题装修二CleanShot 2024-04-16 at 21.51.07@2x-1749438579838-1030.webp)勉强运行x天x小时x分钟x秒 代码抄自这里，我为了调整样式加了一行代码 。在 _config.stellar.yml 里添加如下代码，其中 span class=runtime 中的类名 runtime 可自行设置。 footer: ... content: | # 支持 Markdown 格式 span id=runtime_span/span script type=text/javascript function show_runtime() window.setTimeout(show_runtime(), 1000); X = new Date(2024/01/01 17:00:00); // 网站开始运行的日期和时间 Y = new Date(); // 当前日期和时间 T = (Y.getTime() - X.getTime()); // 网站运行的总毫秒数 M = 24 * 60 * 60 * 1000; // 一天的毫秒数 a = T / M; // 总天数 A = Math.floor(a); // 总天数的整数部分 b = (a - A) * 24; // 总小时数 B = Math.floor(b); // 总小时数的整数部分 c = (b - B) * 60; // 总分钟数 C = Math.floor((b - B) * 60); // 总分钟数的整数部分 D = Math.floor((c - C) * 60); // 总秒数 runtime_span.innerHTML = ⏱️勉强运行 span class=runtime + A + 天 + B + 小时 + C + 分 + D + 秒/span; show_runtime(); /script 再在自定义的 css 文件里添加以下代码，其中 color 可设置为主题色 var(--theme-link) 或自行设置： .runtime font-weight: bold; color: #7F84A7; 页脚增加猫猫图片#显示效果： ![img](Hexo-Stellar主题装修二CleanShot 2024-04-17 at 19.09.44@2x-1749438579838-1034.webp) 首先，如果是使用本地图片，将图片上传到主题的资源文件夹，比如 source/asset/posts/keyboard.png 然后在主题配置文件的 _config.stellar.yml 中添加： footer: ... content: | # 支持 Markdown 格式 img src=/你的/图片/路径.png alt=描述文字 style=float: right; width: 60px; margin-left: 20px; 其中 float: right 限定图片右对齐，width:60px 限制图片大小，可自行调整。 外部链接后面显示图标#显示效果： ![外部链接图标](Hexo-Stellar主题装修二CleanShot 2024-04-16 at 22.09.38@2x-1749438579838-1038.webp)外部链接图标 方法一： WARNING 老方法依赖 cheerio 模块，可行，但似乎会带来一些网站加载过慢的问题，我现在已经开心地转用新方法了，把老方法摆在这里全当（水）记（字）录（数）。 新建 themes/stellar/scripts/filters/link-icon.js 文件，增加以下代码： //使用 cheerio 模块在文章中的外部链接后添加一个小图标：npm i cheerio --savehexo.extend.filter.register(after_render:html, function(html, data) const cheerio = require(cheerio); const $ = cheerio.load(html, decodeEntities: false); // 只选择article class=md-text content元素内的a标签 $(article.md-text.content a, footer.page-footer.footnote a).each(function() const link = $(this); const href = link.attr(href); //排除一些特殊的链接 if (!link.parents(div.tag-plugin.users-wrap).length !link.parents(div.tag-plugin.sites-wrap).length !link.parent(div.tag-plugin.ghcard).length !link.parents(div.tag-plugin.link.dis-select).length !link.parents(div.tag-plugin.colorful.note).length !link.parents(div.social-wrap.dis-select).length) // 确保链接的 href 属性存在，并检查其是否以 http 或 / 开头 if (href (href.startsWith(http) || href.startsWith(/))) link.html(link.html() + ` span style=white-space: nowrap;svg width=.7em height=.7em viewBox=0 0 21 21 xmlns=http://www.w3.org/2000/svgpath d=m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z fill=currentColor /path d=M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z fill=currentColor/svg/span`); //link.attr(target, _blank); // 可选：确保链接在新标签页打开 ); return $.html(); ); 方法二： TIP 用老方法配置完我总觉得使用 Cheerio 模块后会导致网站加载过慢，就又优化了一下。询问 ChatGPT 得知可以考虑不使用 Node.js 的服务器端处理，而是使用纯前端的方法来达到同样的效果，通过在客户端 JavaScript 中添加代码来实现类似的功能，而不是在 Hexo 的后端渲染过程中处理。（好了，可以卸载 cheerio 了） 下面的这段代码可以在页面加载完成后运行，它会查找指定元素中的链接，并在这些链接后添加一个图标。这种方法的好处是，它不需要服务端的处理，所有操作都在用户的浏览器内完成，可以减少服务器负担，并且避免可能因服务器端渲染引起的加载问题。此外，这种方法也提供了更好的用户体验，因为它不会延迟页面内容的显示。 新建source/js/link-icon.js 文件，填入以下内容： document.addEventListener(DOMContentLoaded, function () console.log(Document is ready.); const links = document.querySelectorAll(article.md-text.content a, footer.page-footer.footnote a); console.log(Links found:, links.length); links.forEach(function(link) console.log(Processing link:, link.href); const parentClasses = [tag-plugin.users-wrap, tag-plugin.sites-wrap, tag-plugin.ghcard, tag-plugin.link.dis-select, tag-plugin.colorful.note, social-wrap.dis-select]; let skip = false; parentClasses.forEach(pc = if (link.closest(`div.$pc`)) skip = true; console.log(Skipping link due to parent class:, pc); ); if (!skip) const href = link.getAttribute(href); console.log(Link href:, href); if (href (href.startsWith(http) || href.startsWith(/))) link.innerHTML += ` span style=white-space: nowrap;svg width=.7em height=.7em viewBox=0 0 21 21 xmlns=http://www.w3.org/2000/svgpath d=m13 3l3.293 3.293l-7 7l1.414 1.414l7-7L21 11V3z fill=currentColor /path d=M19 19H5V5h7l-2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2h14c1.103 0 2-.897 2-2v-5l-2-2v7z fill=currentColor/svg/span`; console.log(Icon added to link:, link.innerHTML); );); 这里做了两个筛选： const parentClasses = [tag-plugin.users-wrap, tag-plugin.sites-wrap, tag-plugin.ghcard, tag-plugin.link.dis-select, tag-plugin.colorful.note, social-wrap.dis-select]; 是被排除的类，可自行增减； if (href (href.startsWith(http) || href.startsWith(/))) 判断链接是否以 http 或 / 开头，如果不想给站内链接添加图标的话可以把后面的筛选条件去掉。 然后在主题文件 _config.stellar.yml 中引入： inject: head: ... - script src=/js/link-icon.js/script # 链接图标 增加参与讨论按钮#代码抄自星日语，最新主题已自带此功能。 适配 Obsidian Callouts 标注块语法#显示效果： ![img](Hexo-Stellar主题装修二CleanShot 2024-04-16 at 22.23.51@2x-1749438579838-1036.webp) 暗黑模式下的显示效果： ![img](Hexo-Stellar主题装修二CleanShot 2024-04-16 at 22.24.19@2x-1749438579839-1040.webp) 参考了 Hexo 博客适配 Obsidian 新语法，基础的设置请参考此链接。我暂时用不上其他功能，就把 callout 的样式搬来并做了一些修改。我个人还挺喜欢这个 callout 样式，比 quote 要好看而且添加也很方便，主要是可以和 Obsidian 打通，嘿嘿。 样式修改#原版的 callouts 标注块样式间距太大，我在此基础上改了 callout_blocks_common.css（不是很懂，写得很烂……但是能用）： :root--callout-note:68,138,255;--callout-abstract:0,176,255;--callout-info:0,184,212;--callout-tip:0,191,165;--callout-success:8,185,78;--callout-question:224,172,0;--callout-warning:255,145,0;--callout-failure:255,82,82;--callout-danger:255,23,68;--callout-bug:245,0,87;--callout-example:124,77,255;--callout-quote:158,158,158;--callout-radius:6px;--callout-border-opacity:0.5;--callout-title-bg-opacity:0.08.callout-fold:beforealign-self:center;content:url(data:image/svg+xml;charset=utf-8,svg xmlns=http://www.w3.org/2000/svg width=16 height=16 viewBox=0 0 24 24 fill=none stroke=gray stroke-width=2 stroke-linecap=round stroke-linejoin=round class=chevron-downpath d=m6 9 6 6 6-6//svg).callout-folddisplay:flex;transform:rotate(-90deg);transition:.5s cubic-bezier(.075,.82,.165,1).custom-callout[open]summary.callout-foldtransform:rotate(0deg).custom-calloutsummaryborder-top-left-radius:var(--callout-radius);border-top-right-radius:var(--callout-radius);cursor:pointer;margin:0;padding:0.5rem 1rem.custom-calloutsummary::markercontent:.custom-calloutsummary:beforemargin-right:.5rem.custom-calloutsummary::-webkit-details-markerdisplay:none.callout-title--fsp: calc(17px - 1px);font-size: var(--fsp);display:flex;justify-content:space-between;font-weight:bold;.custom-callout.callout-bodybackground:transparent!important;border-left:none;margin:0!important;padding:.3rem 1rem;position:relative.custom-callout.callout-bodyp--fsp: calc(17px - 1px);font-size: var(--fsp);margin:8px 0.custom-callout.callout-bodypremargin:1.25rem -1rem.custom-callout.callout-bodypre:first-childmargin-top:-.75rem.custom-callout.callout-bodypre:last-childmargin-bottom:-.75rem.custom-callout.note,.custom-callout.seealsoborder-color:rgba(var(--callout-note),var(--callout-border-opacity)).custom-callout.notesummary,.custom-callout.seealsosummary background-color:rgba(var(--callout-note),var(--callout-title-bg-opacity)); color:rgba(var(var(--callout-note))).custom-callout.abstract,.custom-callout.summary,.custom-callout.tldrborder-color:rgba(var(--callout-abstract),var(--callout-border-opacity)).custom-callout.abstractsummary,.custom-callout.summarysummary,.custom-callout.tldrsummary background-color:rgba(var(--callout-abstract),var(--callout-title-bg-opacity)); color:rgba(var(--callout-abstract)).custom-callout.info,.custom-callout.todoborder-color:rgba(var(--callout-info),var(--callout-border-opacity)).custom-callout.infosummary,.custom-callout.todosummary background-color:rgba(var(--callout-info),var(--callout-title-bg-opacity)); color:rgba(var(--callout-info)).custom-callout.hint,.custom-callout.important,.custom-callout.tipborder-color:rgba(var(--callout-tip),var(--callout-border-opacity)).custom-callout.hintsummary,.custom-callout.importantsummary,.custom-callout.tipsummary background-color:rgba(var(--callout-tip),var(--callout-title-bg-opacity)); color:rgba(var(--callout-tip)).custom-callout.check,.custom-callout.done,.custom-callout.successborder-color:rgba(var(--callout-success),var(--callout-border-opacity)).custom-callout.checksummary,.custom-callout.donesummary,.custom-callout.successsummary background-color:rgba(var(--callout-success),var(--callout-title-bg-opacity)); color:rgba(var(--callout-success)).custom-callout.faq,.custom-callout.help,.custom-callout.questionborder-color:rgba(var(--callout-question),var(--callout-border-opacity)).custom-callout.faqsummary,.custom-callout.helpsummary,.custom-callout.questionsummary background-color:rgba(var(--callout-question),var(--callout-title-bg-opacity)); color:rgba(var(--callout-question)).custom-callout.attention,.custom-callout.caution,.custom-callout.warningborder-color:rgba(var(--callout-warning),var(--callout-border-opacity)).custom-callout.attentionsummary,.custom-callout.cautionsummary,.custom-callout.warningsummary background-color:rgba(var(--callout-warning),var(--callout-title-bg-opacity)); color:rgba(var(--callout-warning)).custom-callout.fail,.custom-callout.failure,.custom-callout.missingborder-color:rgba(var(--callout-failure),var(--callout-border-opacity)).custom-callout.failsummary,.custom-callout.failuresummary,.custom-callout.missingsummary background-color:rgba(var(--callout-failure),var(--callout-title-bg-opacity)); color:rgba(var(--callout-failure)).custom-callout.danger,.custom-callout.errorborder-color:rgba(var(--callout-danger),var(--callout-border-opacity)).custom-callout.dangersummary,.custom-callout.errorsummary background-color:rgba(var(--callout-danger),var(--callout-title-bg-opacity)); color:rgba(var(--callout-danger)).custom-callout.bugborder-color:rgba(var(--callout-bug),var(--callout-border-opacity)).custom-callout.bugsummary background-color:rgba(var(--callout-bug),var(--callout-title-bg-opacity)); color:rgba(var(--callout-bug)).custom-callout.exampleborder-color:rgba(var(--callout-example),var(--callout-border-opacity)).custom-callout.examplesummary background-color:rgba(var(--callout-example),var(--callout-title-bg-opacity)); color:rgba(var(--callout-example)).custom-callout.cite,.custom-callout.quoteborder-color:rgba(var(--callout-quote),var(--callout-border-opacity)).custom-callout.citesummary,.custom-callout.quotesummary background-color:rgba(var(--callout-quote),var(--callout-title-bg-opacity)); color:rgba(var(--callout-quote)).callout-title.callout-icon+div-webkit-box-flex:1;-ms-flex:1 1 0%;-webkit-flex:1 1 0%;flex:1 1 0%;margin-left:.25rem.callout-iconalign-items:center;color:#000;display:flex.callout-icon:beforeheight:20px;width:20px.custom-callout.attention.callout-title.callout-icon:before,.custom-callout.caution.callout-title.callout-icon:before,.custom-callout.warning.callout-title.callout-icon:beforecontent:url(data:image/svg+xml;charset=utf-8,svg xmlns=http://www.w3.org/2000/svg width=20 height=20 viewBox=0 0 24 24 fill=none stroke=%23FF9100 stroke-width=2 stroke-linecap=round stroke-linejoin=round class=svg-icon lucide-alert-trianglepath d=m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3ZM12 9v4M12 17h.01//svg).custom-callout.note.callout-title.callout-icon:before,.custom-callout.seealso.callout-title.callout-icon:beforecontent:url(data:image/svg+xml;charset=utf-8,svg xmlns=http://www.w3.org/2000/svg width=20 height=20 viewBox=0 0 24 24 fill=none stroke=%23448AFF stroke-width=2 stroke-linecap=round stroke-linejoin=round class=svg-icon lucide-pencilpath d=m18 2 4 4M7.5 20.5 19 9l-4-4L3.5 16.5 2 22z//svg).custom-callout.abstract.callout-title.callout-icon:before,.custom-callout.summary.callout-title.callout-icon:before,.custom-callout.tldr.callout-title.callout-icon:beforecontent:url(data:image/svg+xml;charset=utf-8,svg xmlns=http://www.w3.org/2000/svg width=20 height=20 viewBox=0 0 24 24 fill=none stroke=%2300B0FF stroke-width=2 stroke-linecap=round stroke-linejoin=round class=svg-icon lucide-clipboard-listrect x=8 y=2 width=8 height=4 rx=1 ry=1/path d=M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2M12 11h4M12 16h4M8 11h.01M8 16h.01//svg).custom-callout.info.callout-title.callout-icon:before,.custom-callout.todo.callout-title.callout-icon:beforecontent:url(data:image/svg+xml;charset=utf-8,svg xmlns=http://www.w3.org/2000/svg width=20 height=20 viewBox=0 0 24 24 fill=none stroke=%2300B8D4 stroke-width=2 stroke-linecap=round stroke-linejoin=round class=svg-icon lucide-check-circle-2path d=M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z/path d=m9 12 2 2 4-4//svg).custom-callout.hint.callout-title.callout-icon:before,.custom-callout.important.callout-title.callout-icon:before,.custom-callout.tip.callout-title.callout-icon:beforecontent:url(data:image/svg+xml;charset=utf-8,svg xmlns=http://www.w3.org/2000/svg width=20 height=20 viewBox=0 0 24 24 fill=none stroke=%2300BFA5 stroke-width=2 stroke-linecap=round stroke-linejoin=round class=svg-icon lucide-flamepath d=M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z//svg).custom-callout.check.callout-title.callout-icon:before,.custom-callout.done.callout-title.callout-icon:before,.custom-callout.success.callout-title.callout-icon:beforecontent:url(data:image/svg+xml;charset=utf-8,svg xmlns=http://www.w3.org/2000/svg width=20 height=20 viewBox=0 0 24 24 fill=none stroke=%2300C853 stroke-width=2 stroke-linecap=round stroke-linejoin=round class=svg-icon lucide-checkpath d=M20 6 9 17l-5-5//svg).custom-callout.faq.callout-title.callout-icon:before,.custom-callout.help.callout-title.callout-icon:before,.custom-callout.question.callout-title.callout-icon:beforecontent:url(data:image/svg+xml;charset=utf-8,svg xmlns=http://www.w3.org/2000/svg width=20 height=20 viewBox=0 0 24 24 fill=none stroke=%23E0AC00 stroke-width=2 stroke-linecap=round stroke-linejoin=round class=svg-icon lucide-help-circlecircle cx=12 cy=12 r=10/path d=M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3M12 17h.01//svg).custom-callout.fail.callout-title.callout-icon:before,.custom-callout.failure.callout-title.callout-icon:before,.custom-callout.missing.callout-title.callout-icon:beforecontent:url(data:image/svg+xml;charset=utf-8,svg xmlns=http://www.w3.org/2000/svg width=20 height=20 viewBox=0 0 24 24 fill=none stroke=%23FF5252 stroke-width=2 stroke-linecap=round stroke-linejoin=round class=svg-icon lucide-xpath d=M18 6 6 18M6 6l12 12//svg).custom-callout.danger.callout-title.callout-icon:before,.custom-callout.error.callout-title.callout-icon:beforecontent:url(data:image/svg+xml;charset=utf-8,svg xmlns=http://www.w3.org/2000/svg width=20 height=20 viewBox=0 0 24 24 fill=none stroke=%23FF1744 stroke-width=2 stroke-linecap=round stroke-linejoin=round class=svg-icon lucide-zappath d=M13 2 3 14h9l-1 8 10-12h-9l1-8z//svg).custom-callout.bug.callout-title.callout-icon:beforecontent:url(data:image/svg+xml;charset=utf-8,svg xmlns=http://www.w3.org/2000/svg width=20 height=20 viewBox=0 0 24 24 fill=none stroke=%23F50057 stroke-width=2 stroke-linecap=round stroke-linejoin=round class=svg-icon lucide-bugrect x=8 y=6 width=8 height=14 rx=4/path d=m19 7-3 2M5 7l3 2M19 19l-3-2M5 19l3-2M20 13h-4M4 13h4M10 4l1 2M14 4l-1 2//svg).custom-callout.example.callout-title.callout-icon:beforecontent:url(data:image/svg+xml;charset=utf-8,svg xmlns=http://www.w3.org/2000/svg width=20 height=20 viewBox=0 0 24 24 fill=none stroke=%237C4DFF stroke-width=2 stroke-linecap=round stroke-linejoin=round class=svg-icon lucide-listpath d=M8 6h13M8 12h13M8 18h13M3 6h.01M3 12h.01M3 18h.01//svg).custom-callout.cite.callout-title.callout-icon:before,.custom-callout.quote.callout-title.callout-icon:beforecontent:url(data:image/svg+xml;charset=utf-8,svg xmlns=http://www.w3.org/2000/svg width=20 height=20 viewBox=0 0 24 24 fill=none stroke=%239E9E9E stroke-width=2 stroke-linecap=round stroke-linejoin=round class=svg-icon lucide-quotepath d=M3 21c3 0 7-1 7-8V5c0-1.25-.756-2.017-2-2H4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2 1 0 1 0 1 1v1c0 1-1 2-2 2s-1 .008-1 1.031V20c0 1 0 1 1 1zM15 21c3 0 7-1 7-8V5c0-1.25-.757-2.017-2-2h-4c-1.25 0-2 .75-2 1.972V11c0 1.25.75 2 2 2h.75c0 2.25.25 4-2.75 4v3c0 1 0 1 1 1z//svg).custom-callout.note .callout-body /* 移除了 background:transparent!important; 改为根据类型变化的背景色 */ background-color: rgba(var(--callout-note), var(--callout-title-bg-opacity)); /* 根据不同的类型设置背景色和文字/图标颜色 */.custom-callout.note, .custom-callout.note summary background-color: rgba(var(--callout-note), var(--callout-title-bg-opacity)); .custom-callout.abstract .callout-body background-color: rgba(var(--callout-abstract), var(--callout-title-bg-opacity)); .custom-callout.abstract, .custom-callout.abstract summary background-color: rgba(var(--callout-abstract), var(--callout-title-bg-opacity)); .custom-callout.info .callout-body background-color: rgba(var(--callout-info), var(--callout-title-bg-opacity)); .custom-callout.info, .custom-callout.info summary background-color: rgba(var(--callout-info), var(--callout-title-bg-opacity)); .custom-callout.tip .callout-body background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity)); .custom-callout.tip, .custom-callout.tip summary background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity)); .custom-callout.success .callout-body background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity)); .custom-callout.success, .custom-callout.success summary background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity)); .custom-callout.question .callout-body background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity)); .custom-callout.question, .custom-callout.question summary background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity)); .custom-callout.warning .callout-body background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity)); .custom-callout.warning, .custom-callout.warning summary background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity)); .custom-callout.failure .callout-body background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity)); .custom-callout.failure, .custom-callout.failure summary background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity)); .custom-callout.danger .callout-body background-color: rgba(var(--callout-danger), var(--callout-title-bg-opacity)); .custom-callout.danger, .custom-callout.danger summary background-color: rgba(var(--callout-danger), var(--callout-title-bg-opacity)); .custom-callout.bug .callout-body background-color: rgba(var(--callout-bug), var(--callout-title-bg-opacity)); .custom-callout.bug, .custom-callout.bug summary background-color: rgba(var(--callout-bug), var(--callout-title-bg-opacity)); .custom-callout.example .callout-body background-color: rgba(var(--callout-example), var(--callout-title-bg-opacity)); .custom-callout.example, .custom-callout.example summary background-color: rgba(var(--callout-example), var(--callout-title-bg-opacity)); .custom-callout.quote .callout-body background-color: rgba(var(--callout-quote), var(--callout-title-bg-opacity)); .custom-callout.quote, .custom-callout.quote summary background-color: rgba(var(--callout-quote), var(--callout-title-bg-opacity)); .custom-callout.cite .callout-body background-color: rgba(var(--callout-quote), var(--callout-title-bg-opacity)); .custom-callout.cite, .custom-callout.cite summary background-color: rgba(var(--callout-quote), var(--callout-title-bg-opacity)); .custom-callout.todo .callout-body background-color: rgba(var(--callout-info), var(--callout-title-bg-opacity)); .custom-callout.todo, .custom-callout.todo summary background-color: rgba(var(--callout-info), var(--callout-title-bg-opacity)); .custom-callout.seealso .callout-body background-color: rgba(var(--callout-note), var(--callout-title-bg-opacity)); .custom-callout.seealso, .custom-callout.seealso summary background-color: rgba(var(--callout-note), var(--callout-title-bg-opacity)); .custom-callout.hint .callout-body background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity)); .custom-callout.hint, .custom-callout.hint summary background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity)); .custom-callout.important .callout-body background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity)); .custom-callout.important, .custom-callout.important summary background-color: rgba(var(--callout-tip), var(--callout-title-bg-opacity)); .custom-callout.attention .callout-body background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity)); .custom-callout.attention, .custom-callout.attention summary background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity)); .custom-callout.caution .callout-body background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity)); .custom-callout.caution, .custom-callout.caution summary background-color: rgba(var(--callout-warning), var(--callout-title-bg-opacity)); .custom-callout.done .callout-body background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity)); .custom-callout.done, .custom-callout.done summary background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity)); .custom-callout.check .callout-body background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity)); .custom-callout.check, .custom-callout.check summary background-color: rgba(var(--callout-success), var(--callout-title-bg-opacity)); .custom-callout.faq .callout-body background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity)); .custom-callout.faq, .custom-callout.faq summary background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity)); .custom-callout.help .callout-body background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity)); .custom-callout.help, .custom-callout.help summary background-color: rgba(var(--callout-question), var(--callout-title-bg-opacity)); .custom-callout.fail .callout-body background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity)); .custom-callout.fail, .custom-callout.fail summary background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity)); .custom-callout.missing .callout-body background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity)); .custom-callout.missing, .custom-callout.missing summary background-color: rgba(var(--callout-failure), var(--callout-title-bg-opacity)); .custom-callout.error .callout-body background-color: rgba(var(--callout-danger), var(--callout-title-bg-opacity)); .custom-callout.error, .custom-callout.error summary background-color: rgba(var(--callout-danger), var(--callout-title-bg-opacity)); .custom-callout.tldr .callout-body background-color: rgba(var(--callout-abstract), var(--callout-title-bg-opacity)); .custom-callout.tldr, .custom-callout.tldr summary background-color: rgba(var(--callout-abstract), var(--callout-title-bg-opacity)); 集成 Telegram Channel 说说#显示效果： 篇幅限制，只展示2条，请耐心等待加载。（可能要挂代理） 代码抄自把Tg Channel接入到Stellar时间线。因为我懒得做标签筛选所以直接把这个去掉啦，在此还要感谢佬的耐心解答 GitHub Action 自动部署并修复更新时间#在自动部署这里遇到了几个坑，总结下来大概有下： 网上流行的很多 yml workflow 文件都有些过时 公钥私钥啥的不太懂，配置了半天 因为我的博客有数学公式显示，所以要在 workflow 里加入安装 pandoc 的部分，才能够成功运行 自动部署后网站的文章更新时间全部变成 push 时间，但在本地是正常的。一番搜索后找到了解决方法，在 yml 文件里加入了以下代码，分别修复 posts、wiki、notes 的更新时间： - name: Restore file modification time 🕒 run: find source/_posts -name *.md | while read file; do touch -d $(git log -1 --format=@%ct $file) $file; done - name: Restore file modification time of wiki🕒 run: find source/wiki -name *.md | while read file; do touch -d $(git log -1 --format=@%ct $file) $file; done - name: Restore file modification time of notes🕒 run: find source/notes -name *.md | while read file; do touch -d $(git log -1 --format=@%ct $file) $file; done 最后附上完整代码，拿去用的话要自己配置一下 GitHub 部分的设置： name: auto deployon: workflow_dispatch: push:jobs: build: runs-on: ubuntu-latest # 运行环境为最新版 Ubuntu name: auto deploy steps: # 1. 获取源码 - name: Checkout uses: actions/checkout@v4 # 使用 actions/checkout@v3 with: # 条件 submodules: true # Checkout private submodules(themes or something else). 当有子模块时切换分支？ fetch-depth: 0 - name: Restore file modification time 🕒 run: find source/_posts -name *.md | while read file; do touch -d $(git log -1 --format=@%ct $file) $file; done - name: Restore file modification time of wiki🕒 run: find source/wiki -name *.md | while read file; do touch -d $(git log -1 --format=@%ct $file) $file; done - name: Restore file modification time of notes🕒 run: find source/notes -name *.md | while read file; do touch -d $(git log -1 --format=@%ct $file) $file; done # 2. 配置环境 - name: Setup Node.js 18.19.x uses: actions/setup-node@master with: node-version: 18.19.x - name: Install pandoc run: | cd /tmp wget -c https://github.com/jgm/pandoc/releases/download/2.14.0.3/pandoc-2.14.0.3-1-amd64.deb sudo dpkg -i pandoc-2.14.0.3-1-amd64.deb # 3. 生成静态文件 - name: Generate Public Files run: | npm i npm install hexo-cli -g hexo clean hexo generate # 4a. 部署到 GitHub 仓库（可选） - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: deploy_key: $ secrets.HEXO_DEPLOY_PRI # 配置密钥 external_repository: # 填入你的GitHub pages部署仓库 publish_branch: gt-pages # 填入部署分支 publish_dir: ./public commit_message: $ github.event.head_commit.message user_name: github-actions[bot] user_email: github-actions[bot]@users.noreply.github.com 给博客添加地理定位并制作个性欢迎#显示效果： ![个性欢迎卡片](Hexo-Stellar主题装修二CleanShot 2024-04-17 at 01.09.07@2x-1749438579839-1044.webp)个性欢迎卡片 代码来自给博客添加腾讯地图定位并制作个性欢迎。我稍微做了一点调整： 新建 source/js/services/txmap.js，并添加以下代码： 点击展开代码 //get请求$.ajax( type: get, url: https://apis.map.qq.com/ws/location/v1/ip, data: key: 你的key, output: jsonp, , dataType: jsonp, success: function (res) ipLoacation = res; )function getDistance(e1, n1, e2, n2) const R = 6371 const sin, cos, asin, PI, hypot = Math let getPoint = (e, n) = e *= PI / 180 n *= PI / 180 return x: cos(n) * cos(e), y: cos(n) * sin(e), z: sin(n) let a = getPoint(e1, n1) let b = getPoint(e2, n2) let c = hypot(a.x - b.x, a.y - b.y, a.z - b.z) let r = asin(c / 2) * 2 * R return Math.round(r);function showWelcome() let dist = getDistance(113.34499552, 23.15537143, ipLoacation.result.location.lng, ipLoacation.result.location.lat); //这里换成自己的经纬度 let pos = ipLoacation.result.ad_info.nation; let ip; let posdesc; //根据国家、省份、城市信息自定义欢迎语 switch (ipLoacation.result.ad_info.nation) case 日本: posdesc = よろしく，一起去看樱花吗; break; case 美国: posdesc = Let us live in peace!; break; case 英国: posdesc = 想同你一起夜乘伦敦眼; break; case 俄罗斯: posdesc = 干了这瓶伏特加！; break; case 法国: posdesc = Cest La Vie; break; case 德国: posdesc = Die Zeit verging im Fluge.; break; case 澳大利亚: posdesc = 一起去大堡礁吧！; break; case 加拿大: posdesc = 拾起一片枫叶赠予你; break; case 中国: pos = ipLoacation.result.ad_info.province + + ipLoacation.result.ad_info.city + + ipLoacation.result.ad_info.district; ip = ipLoacation.result.ip; switch (ipLoacation.result.ad_info.province) case 北京市: posdesc = 北——京——欢迎你~~~; break; case 天津市: posdesc = 讲段相声吧。; break; case 河北省: posdesc = 山势巍巍成壁垒，天下雄关。铁马金戈由此向，无限江山。; break; case 山西省: posdesc = 展开坐具长三尺，已占山河五百余。; break; case 内蒙古自治区: posdesc = 天苍苍，野茫茫，风吹草低见牛羊。; break; case 辽宁省: posdesc = 我想吃烤鸡架！; break; case 吉林省: posdesc = 状元阁就是东北烧烤之王。; break; case 黑龙江省: posdesc = 很喜欢哈尔滨大剧院。; break; case 上海市: posdesc = 众所周知，中国只有两个城市。; break; case 江苏省: switch (ipLoacation.result.ad_info.city) case 南京市: posdesc = 这是我挺想去的城市啦。; break; case 苏州市: posdesc = 上有天堂，下有苏杭。; break; default: posdesc = 散装是必须要散装的。; break; break; case 浙江省: posdesc = 东风渐绿西湖柳，雁已还人未南归。; break; case 河南省: switch (ipLoacation.result.ad_info.city) case 郑州市: posdesc = 豫州之域，天地之中。; break; case 南阳市: posdesc = 臣本布衣，躬耕于南阳。此南阳非彼南阳！; break; case 驻马店市: posdesc = 峰峰有奇石，石石挟仙气。嵖岈山的花很美哦！; break; case 开封市: posdesc = 刚正不阿包青天。; break; case 洛阳市: posdesc = 洛阳牡丹甲天下。; break; default: posdesc = 可否带我品尝河南烩面啦？; break; break; case 安徽省: posdesc = 蚌埠住了，芜湖起飞。; break; case 福建省: posdesc = 井邑白云间，岩城远带山。; break; case 江西省: posdesc = 落霞与孤鹜齐飞，秋水共长天一色。; break; case 山东省: posdesc = 遥望齐州九点烟，一泓海水杯中泻。; break; case 湖北省: posdesc = 来碗热干面！; break; case 湖南省: posdesc = 74751，长沙斯塔克。; break; case 广东省: posdesc = 老板来两斤福建人。; break; case 广西壮族自治区: posdesc = 桂林山水甲天下。; break; case 海南省: posdesc = 朝观日出逐白浪，夕看云起收霞光。; break; case 四川省: posdesc = 康康川妹子。; break; case 贵州省: posdesc = 茅台，学生，再塞200。; break; case 云南省: posdesc = 玉龙飞舞云缠绕，万仞冰川直耸天。; break; case 西藏自治区: posdesc = 躺在茫茫草原上，仰望蓝天。; break; case 陕西省: posdesc = 来份臊子面加馍。; break; case 甘肃省: posdesc = 羌笛何须怨杨柳，春风不度玉门关。; break; case 青海省: posdesc = 牛肉干和老酸奶都好好吃。; break; case 宁夏回族自治区: posdesc = 大漠孤烟直，长河落日圆。; break; case 新疆维吾尔自治区: posdesc = 驼铃古道丝绸路，胡马犹闻唐汉风。; break; case 台湾省: posdesc = 我在这头，大陆在那头。; break; case 香港特别行政区: posdesc = 永定贼有残留地鬼嚎，迎击光非岁玉。; break; case 澳门特别行政区: posdesc = 性感荷官，在线发牌。; break; default: posdesc = 带我去你的城市逛逛吧！; break; break; default: posdesc = 带我去你的国家逛逛吧。; break; //根据本地时间切换欢迎语 let timeChange; let date = new Date(); if (date.getHours() = 5 date.getHours() 11) timeChange = span上午好/span，一日之计在于晨！; else if (date.getHours() = 11 date.getHours() 13) timeChange = span中午好/span，该摸鱼吃午饭了。; else if (date.getHours() = 13 date.getHours() 15) timeChange = span下午好/span，懒懒地睡个午觉吧！; else if (date.getHours() = 15 date.getHours() 16) timeChange = span三点几啦/span，一起饮茶呀！; else if (date.getHours() = 16 date.getHours() 19) timeChange = span夕阳无限好！/span; else if (date.getHours() = 19 date.getHours() 24) timeChange = span晚上好/span，夜生活嗨起来！; else timeChange = 夜深了，早点休息，少熬夜。; try //自定义文本和需要放的位置 document.getElementById(welcome-info).innerHTML = `bcenter🎉 欢迎信息 🎉/centeremsp;emsp;欢迎来自 span style=color:var(--theme-color)$pos/span 的小伙伴，$timeChange您现在距离站长约 span style=color:var(--theme-color)$dist/span 公里，当前的IP地址为： span style=color:var(--theme-color)$ip/span， $posdesc/b`; catch (err) // console.log(Pjax无法获取#welcome-info元素🙄🙄🙄) window.onload = showWelcome;// 如果使用了pjax在加上下面这行代码document.addEventListener(pjax:complete, showWelcome); 在主题文件中配置#在主题配置文件 _config.stellar.yml 中引入jQuery依赖和刚刚的js文件： inject: - script src=https://cdn.staticfile.org/jquery/3.6.3/jquery.min.js/script # jQuery - script async data-pjax src=/js/services/txmap.js/script # 腾讯位置API 在 source/_data/widgets.yml 中添加小组件，我在里面嵌套了一个随机文章跳转，不要的话可以删掉，其中，span id=welcome-info /span 是必须的不可以删： welcomeloc: layout: markdown title: 🎉 抓到你啦 linklist: columns: 1 items: - icon: img src=https://api.iconify.design/ion:dice-outline.svg/ title: 随机文章 url: javascript:toRandomPost() content: | span id=welcome-info style=font-family: LXGW WenKai Screen;/span 然后就跟正常的小组件一样在想要的地方引用即可。 添加更改字体按钮#显示效果： 第一种： 在任意位置增加一个 button 按钮![img](Hexo-Stellar主题装修二CleanShot 2024-04-17 at 01.21.07@2x-1749438579839-1046.webp) 鼠标放到上面会显示提示： ![img](Hexo-Stellar主题装修二CleanShot 2024-04-17 at 01.22.42@2x-1749438579839-1048.webp) 第二种： 在文章页面目录下方显示 ![img](Hexo-Stellar主题装修二CleanShot 2024-04-17 at 01.24.07@2x-1749438579839-1050.webp) 之前一直纠结要不要把自定义字体效果去掉，在选择和留下之间来回切换 最终才出现了这里的方案：默认不加载任何字体，喜欢 LXGW 字体的话可点击图标转换，同时再点击一下就恢复。代码不长但完美地解决了我的强迫症～ 第一步：准备字体文件#可以是在线文件也可以是本地文件，我是在主题 config 文件下通过 inject 引入了 LXGW 字体。 第二步：修改 css#首先确保 LXGW WenKai Screen 字体已经通过 CSS 正确引入。你可以在 CSS 文件中添加一个特定的类，用于当用户选择使用这种字体时切换到它： /* 设置字体 */.LXGWMode font-family: LXGW WenKai Screen, system-ui, Helvetica Neue, sans-serif; // 使用 LXGW WenKai 字体，并指定后备字体 第三步：添加 javascript#新建 source/js/changefont.js 文件，添加以下代码： document.addEventListener(DOMContentLoaded, function () applyFontSetting(); updateButtonText(); // Ensure the button text is correct on page load);document.addEventListener(pjax:success, function () applyFontSetting(); updateButtonText(); // Update the button text after PJAX updates);function applyFontSetting() if (localStorage.getItem(LXGWFontEnabled) === true) document.body.classList.add(LXGWMode); else document.body.classList.remove(LXGWMode); function toggleLXGWFont() var button = document.querySelector(.custom-button); // Find the button if (localStorage.getItem(LXGWFontEnabled) === true) localStorage.setItem(LXGWFontEnabled, false); document.body.classList.remove(LXGWMode); button.innerHTML = img src=https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png alt=Emoji style=vertical-align: middle; width: 20px; height: 20px; 危险，请勿点击; else localStorage.setItem(LXGWFontEnabled, true); document.body.classList.add(LXGWMode); button.innerHTML = img src=https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png alt=Emoji style=vertical-align: middle; width: 20px; height: 20px; 不要说我没有警告过你; function updateButtonText() var button = document.querySelector(.custom-button); // Find the button if (localStorage.getItem(LXGWFontEnabled) === true) button.innerHTML = img src=https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png alt=Emoji style=vertical-align: middle; width: 20px; height: 20px; 不要点这里啦！; else button.innerHTML = img src=https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png alt=Emoji style=vertical-align: middle; width: 20px; height: 20px; 危险，请勿点击; 第四步：添加切换按钮#然后在想要的地方引用即可，可以自行添加各种 emoji，比如： button class=custom-button tooltip onclick=toggleLXGWFont() data-msg=警告，真的很危险img src=https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/ablobcatrainbow.png alt=Emoji style=vertical-align: middle; width: 20px; height: 20px; 危险，请勿点击/button 给按钮加入 css 提示框#在自定义 css 文件中添加： .custom-button display: inline-block; padding: 2px 10px; /*margin: 10px; background-color: #f2f2f2; /* Light grey background, change as needed */ font-family: inherit; /* Inherits the font-family from parent container */ color: #835EEC; background-color: #F2EEFD; @media (prefers-color-scheme: dark) color: #A28BF2; background-color: #282433; text-align: center; cursor: pointer; /*border: 2px solid #ccc; /* Grey border */ border-radius: 16px; /* Rounded corners */ transition: all 0.3s ease; .custom-button:hover background-color: #e9e9e9; /* Slightly darker on hover */ @media (prefers-color-scheme: dark) background-color: #333; /* Darker background on hover */ border-color: #999; /* Darker border on hover */ /* toggle-font 提示框的样式 */.tooltip position: relative; cursor: pointer; /* 可选，让用户知道这是一个可以互动的元素 */.tooltip:hover::before white-space: nowrap; line-height: 18px; content: attr(data-msg); position: absolute; padding: 0 8px; display: block; color: #ffffff; background: #656565; border-radius: 6px; font-size: 12px; top: -25px; left: 50%; transform: translateX(-50%); Z-index: 1000; /* 确保提示框在其他元素之上 */.tooltip:hover:: after Content: ; Position: absolute; Top: -8 px; Left: 50%; Transform: translateX (-50%); Border: 6 px solid transparent; border-top-color: #656565 ; /* 简化写法 *//* toggle-font 按钮的样式 */.widget-wrapper. Toggle-font Background: none; // Example: making background transparent /* Add other styles specific to the toggle-font widget here */ 第二种样式#WARNING 第二种样式需要对主题文件进行一丢丢修改，但貌似不太影响更新……只要无冲突的话可以一直 update fork 在 languages/zh-CN.yml 中添加一行 font: 更改字体，并在 icons.yml 里添加： default:font: svg class=theme-icon xmlns=http://www.w3.org/2000/svg width=32 height=32 viewBox=0 0 32 32path d=m12.677 17.781l-2.626-6.256l-2.694 6.256Zm6.723 6.511h-7.069v-1.365l.458-.023a1.847 1.847 0 0 0 .972-.2a.313.313 0 0 0 .145-.263a4.158 4.158 0 0 0-.419-1.4l-.812-1.931H7.322L6.4 21.259a3.319 3.319 0 0 0-.349 1.157c0 .036 0 .119.154.241a2.481 2.481 0 0 0 1.191.247l.448.033v1.354H2v-1.31l.4-.07a2.188 2.188 0 0 0 1-.318a6.318 6.318 0 0 0 1.18-2.066l5.575-13.036H11.2l5.512 13.174a5.255 5.255 0 0 0 1.049 1.835a1.959 1.959 0 0 0 1.19.4l.454.027Zm6.441-2.732v-3.985a22.542 22.542 0 0 0-2.226.97a3.845 3.845 0 0 0-1.29 1.05a2.03 2.03 0 0 0-.388 1.2a1.951 1.951 0 0 0 .491 1.362a1.49 1.49 0 0 0 1.13.544a4.142 4.142 0 0 0 2.283-1.141m-3.333 2.949a2.833 2.833 0 0 1-2.139-.893a3.206 3.206 0 0 1-.833-2.285a2.959 2.959 0 0 1 .415-1.577a5 5 0 0 1 1.791-1.625a23.876 23.876 0 0 1 3.617-1.588v-.074a2.905 2.905 0 0 0-.383-1.833a1.325 1.325 0 0 0-1.075-.412a1.155 1.155 0 0 0-.816.26a.687.687 0 0 0-.277.536l.023.646a1.62 1.62 0 0 1-.4 1.158a1.481 1.481 0 0 1-2.1-.019a1.634 1.634 0 0 1-.391-1.134a2.8 2.8 0 0 1 1.182-2.177a4.813 4.813 0 0 1 3.125-.932a5.381 5.381 0 0 1 2.508.524a2.628 2.628 0 0 1 1.213 1.346a6.391 6.391 0 0 1 .244 2.2v3.55a14.665 14.665 0 0 0 .051 1.749a.661.661 0 0 0 .054.2c.085-.078.284-.225.864-.806l.819-.828v1.967l-.1.128c-.958 1.283-1.883 1.907-2.83 1.907a1.6 1.6 0 0 1-1.257-.557a1.788 1.788 0 0 1-.358-.74a9.688 9.688 0 0 1-1.433.977a3.579 3.579 0 0 1-1.514.332//svg 在 layout/_partial/widgets/toc.ejs 中，在想要的位置，如 el += editBtn 后，添加以下代码： el += `a class=toggle-font onclick=toggleLXGWFont()` el += icon(default:font) el += `span$__(btn.font)/span` el += `/a` 为了使这个图标随主题明暗自动变化，在自定义 css 文件中加入： /* 设置图标颜色 *//* 白天模式，默认填充色为黑色 */.theme-icon fill: black;/* 暗黑模式，填充色为白色 */@media (prefers-color-scheme: dark) .theme-icon fill: white; 随机文章跳转#NOTE 要在主题文件夹里新增文件，不影响主题后续更新 终于来到了我最爱的生活哲学！代码参考了这个链接。创建 themes/stellar/scripts/helpers/random.js ，增加以下代码： hexo.extend.filter.register(after_render:html, function (data) const posts = [] hexo.locals.get(posts).map(function (post) if (post.random !== false) posts.push(post.path) ) data += `scriptvar posts=$JSON.stringify(posts);function toRandomPost() window.pjax ? pjax.loadUrl(/+posts[Math.floor(Math.random()*posts.length)]) : window.open(/+posts[Math.floor(Math.random()*posts.length)], _self); ;/script` return data) 在主题配置文件引入 _config.stellar.yml，inject的 head里添加 - script src=/js/random.js/script # 随机文章 然后在需要调用的位置执行 toRandomPost() 函数即可。比如任意 dom 添加 onclick=toRandomPost() 好吧，我知道你肯定没听懂 反正我当时看完是一脸懵圈 不过没关系，我最后还是琢磨明白啦，下面就有填写示例，接着看就好 添加一个按钮: 随机阅读一篇文章 代码：button onclick=toRandomPost()随机阅读一篇文章/button 或者添加一个链接: 随机阅读一篇文章 代码：a href=# onclick=toRandomPost(); return false;随机阅读一篇文章/a 在下一节还有应用示例，请往下看—— 超链接样式调整#文章内链接：加粗并下移下划线。显示效果： ![超链接样式](Hexo-Stellar主题装修二CleanShot 2024-04-17 at 22.18.12@2x-1749438579839-1056.webp)超链接样式 在自定义 css 文件里加入： /* 文章内链接 */li:not([class]) a:not([class]),p:not([class]) a:not([class]),table a:not([class]) /*color: var(--theme-link);*/ padding-bottom: 3px; /* 增加底部padding */ padding-right: 1px; margin-right: 2px; background: linear-gradient(0, var(--theme-link), var(--theme-link)) no-repeat center bottom / 100% 2px; 测试链接：关于 新样式！为链接使用荧光笔下划线效果，这个和上面的样式二选一就好。显示效果： ![img](Hexo-Stellar主题装修二CleanShot 2024-04-20 at 19.32.04@2x-1749438579839-1058.webp) /* 文章内链接：为链接使用荧光笔下划线效果 */li:not([class]) a:not([class]),p:not([class]) a:not([class]),table a:not([class]) padding-bottom: 0.1rem; background: linear-gradient(0, var(--theme-link-opa), var(--theme-link-opa)) no-repeat center bottom / 100% 40%; 选中文本：使用超链接高亮的背景色#在自定义 css 文件里加入： /* 选中文本：使用超链接高亮的背景色 */::selection background: var(--theme-link-opa); Twikoo 评论样式优化#Title 样式优化需要改主题文件，但下面的给评论输入框加入提示是纯 css 实现的不需要改 显示效果： ![img](Hexo-Stellar主题装修二CleanShot 2024-04-17 at 02.13.48@2x-1749438579839-1060.webp) 只截了部分，整体效果可在评论区查看。代码全部抄自星日语大佬的这条 commit。评论区表情显示优化可参考这条 commit。 给评论输入框加入提示#显示效果： ![img](Hexo-Stellar主题装修二CleanShot 2024-04-17 at 02.17.46@2x-1749438579839-1062.webp) 原始代码忘记在哪里抄的了，我就修改了最后 3 行……在自定义 css 文件中加入以下内容： /* 设置文字内容 :nth-child(1)的作用是选择第几个 */.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(1):before content: 输入QQ号会自动获取昵称和头像🐧;.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(2):before content: 收到回复将会发送到您的邮箱📧;.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(3):before content: 填写后可以点击昵称访问您的网站🔗;/* 当用户点击输入框时显示 */.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::before,.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::after display: block;/* 主内容区 */.el-input.el-input--small.el-input-group.el-input-group--prepend::before /* 先隐藏起来 */ display: none; /* 绝对定位 */ position: absolute; /* 向上移动60像素 */ top: -60px; /* 文字强制不换行，防止left:50%导致的文字换行 */ white-space: nowrap; /* 圆角 */ border-radius: 10px; /* 距离左边50% */ left: 50%; /* 然后再向左边挪动自身的一半，即可实现居中 */ transform: translate(-50%); /* 填充 */ padding: 14px 18px; background: #444; color: #fff;/* 小角标 */.el-input.el-input--small.el-input-group.el-input-group--prepend::after display: none; content: ; position: absolute; /* 内容大小（宽高）为0且边框大小不为0的情况下，每一条边（4个边）都是一个三角形，组成一个正方形。 我们先将所有边框透明，再给其中的一条边添加颜色就可以实现小三角图标 */ border: 12px solid transparent; border-top-color: #444; left: 50%; transform: translate(-50%, -48px);.el-input.el-input--small.el-input-group.el-input-group--prepend::before, .el-input.el-input--small.el-input-group.el-input-group--prepend::after z-index: 9999; /* 提高层级，确保内容显示在最前 */ Stellar Twikoo 表情包补全计划#blobcat#这个系列表情真的不要太可爱，一眼爱上 光在博客正文里用怎么够，当然还要在评论区里也安排上 blobcat 表情主要来自星日语佬。本人在学会自定义后收集癖大发，一口气制作了几个系列的表情，往现有的 blobcat里也加了几个比较好看的 Stellar 引入：blobcatplus:https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/Blob/name.png Twikoo 使用链接： https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/blobcatplus.json 表情 索引 表情 索引 表情 索引 ablobcatheart ablobcatheartbroken blobcatheart blobcatheartpride blobcatlove blobcatkissheart blobcatsnuggle comfyuee comfyslep blobcatcomfysweat blobcatcomftears blobcatfacepalm blobcat0_0 blobcatangry blobbanhammerr blobcatt blobcatblush blobcatcoffee blobcatcry blobcatdead blobcatdied blobcatdisturbed blobcatfearful blobcatfingerguns blobcatflip blobcatflower blobcatgay blobcatgooglycry blobcatneutral blobcatopenmouth blobcatsadreach blobcatscared blobcatnomblobcat blobcatpresentred blobcatread blobcatsipsweat blobcatsnapped blobcatthink blobcattriumph blobcatumm blobcatverified blobcatbox blobcatcaged blobcatgooglytrash blobcatheadphones blobcathighfive blobcatmelt blobcatmeltthumb blobcatnotlikethis blobcatsaitama blobcatyandere blobcatpeek2 blobcatpeekaboo blobcatphoto ablobcatattentionreverse ablobcatreachrev ablobcatwave blobcatalt blobcatpolice blobcatshocked ablobcatrainbow A_BlobCat_REEEE A_BlobCat_Code ablobcatknitsweats A_BlobCat_Nervous blobcat-aww ablobcatcry ablobcatdead azuki# Stellar 引入：azuki: https://cdn.jsdelivr.net/gh/Saidosi/azuki-emoji-for-waline@1.0/azukisan/name.png Twikoo 使用链接： https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/xiaodouni.json 表情 索引 表情 索引 表情 索引 001 015 029 002 016 030 003 017 031 004 018 032 005 019 033 006 020 034 007 021 035 008 022 036 009 023 037 010 024 038 011 025 039 012 026 040 013 027 014 028 neko# Stellar 引入：neko: https://cdn.jsdelivr.net/gh/2x-ercha/twikoo-magic@master/image/Yurui-Neko/name.png Twikoo 使用链接： https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/neko.json 表情 索引 表情 索引 表情 索引 001 015 028 002 016 029 003 017 030 004 018 031 005 019 032 006 020 033 007 021 034 008 022 035 009 023 036 010 024 037 011 025 038 012 026 039 013 027 014 dokomo#Stellar 引入: dokomo: https://cdn.jsdelivr.net/gh/infinitesum/Twikoo-emoji@master/dokomo/name.png Twikoo 使用链接: https://raw.githubusercontent.com/infinitesum/Twikoo-emoji/main/dokomo/dokomo.json 表情 索引 表情 索引 表情 索引 dokomo-1 dokomo-18 dokomo-35 dokomo-2 dokomo-19 dokomo-36 dokomo-3 dokomo-20 dokomo-37 dokomo-4 dokomo-21 dokomo-38 dokomo-5 dokomo-22 dokomo-39 dokomo-6 dokomo-23 dokomo-40 dokomo-7 dokomo-24 dokomo-41 dokomo-8 dokomo-25 dokomo-42 dokomo-9 dokomo-26 dokomo-43 dokomo-10 dokomo-27 dokomo-44 dokomo-11 dokomo-28 dokomo-45 dokomo-12 dokomo-29 dokomo-46 dokomo-13 dokomo-30 dokomo-47 dokomo-14 dokomo-31 dokomo-48 dokomo-15 dokomo-32 dokomo-49 dokomo-16 dokomo-33 dokomo-17 dokomo-34 总字数统计：“发表了x篇文章，共计x字”#需要修改主题文件 // 3.left.top: 面包屑导航 el += `div class=flex-row id=breadcrumb` // 首页 el += `a class=cap breadcrumb href=$url_for(config.root)$__(btn.home)/a` if (theme.wiki.tree[page.wiki]) el += partial(breadcrumb/wiki) else if (page.layout == post) el += partial(breadcrumb/blog) else el += partial(breadcrumb/page) // end 3.left.top el += `/div` 并在后面添加： // 在这里添加标签代码 if (page.layout == post page.tags page.tags.length 0) el += div id=tag; // 将标签容器的创建移动到条件内部 el += spannbsp标签：/span; el += list_categories(page.tags, class: cap breadcrumb, show_count: false, separator: nbsp; , style: none ); el += nbsp/div; toc 字体大小调整#需要修改主题文件 就是把文章目录字体调小了一点点。 在themes/stellar/source/css/_layout/widgets/toc.styl 文件中，找到 // 各级缩进样式.widget-wrapper.toc .toc .toc-item font-weight: 500 --fsp: $fsp1 .toc-item .toc-item font-weight: 400 --fsp: $fsp2 把--fsp: $fsp1一行注释掉： // 各级缩进样式.widget-wrapper.toc .toc .toc-item font-weight: 500 /*--fsp: $fsp1*/ .toc-item .toc-item font-weight: 400 --fsp: $fsp2","tags":["主题装修"],"categories":["装修日记"]},{"path":"/friends/index.html","content":"网址导航"},{"title":"SQL 简介","path":"/wiki/sql/brief.html","content":"SQL（结构化查询语言）是用于访问和操作数据库中的数据的标准数据库编程语言。 SQL是关系数据库系统的标准语言。所有关系数据库管理系统(RDMS)，如MySQL、MS Access、Oracle、Sybase、Informix、Postgres和SQL Server都使用SQL作为它们的标准数据库语言。 为了处理数据库和数据库相关的编程，程序员需要有一些介质，或者可以说接口来详细说明一组命令或代码来处理数据库或访问数据库的数据。在本章中，将简要介绍在学习SQL的过程中您将学习的术语。 你会从SQL中学到什么？SQL为结构化查询语言提供了独特的学习和数据库处理技术，并将帮助您更好地控制SQL查询并有效处理这些代码。由于SQL帮助您包括数据库创建，数据库或表删除，获取行数据和修改这些数据等，并行SQL使得事情自动和平滑，最终用户可以轻松访问和处理该应用程序的数据。 SQL 是什么？ SQL 发音为”sequel”。 SQL 指结构化查询语言，全称是 Structured Query Language（是最初由IBM开发）。 SQL 是关系数据库系统的标准语言。 SQL 是一种 ANSI（American National Standards Institute 美国国家标准化组织）标准的计算机语言。 SQL 能做什么？ SQL可以创建新的数据库及其对象（表，索引，视图，存储过程，函数和触发器）。 SQL可以修改现有数据库的结构。 SQL可以从数据库中删除（删除）对象。 SQL可以TRUNCATE（截取）表中的所有记录。 SQL可以对数据字典进行COMMENT。 SQL可以RENAME一个对象。 SQL可以从数据库中选择（检索）数据。 SQL可以将数据插入到表中。 SQL可以更新表中的现有数据。 SQL可以从数据库表中删除记录。 SQL可以在数据库中设置用户的GRANT和REVOKE权限。 SQL 的历史 1970年，SQL由IBM的Donald D. Chamberlin和Raymond F. Boyce开发。 1974年，开发版本最初被称为SEQUEL（结构化英语查询语言）。 1979年，关系软件发布了第一个叫做System R的商业产品。 由于商标冲突问题，SEQUEL首字母缩略词后来更改为SQL。 后来IBM基于System R的原型开始在SQL上开发商业产品。 第一个关系数据库由RelationalSoftware发布，后来被称为Oracle。 SQL 是一种标准 - 但是…虽然 SQL 是一门 ANSI（American National Standards Institute 美国国家标准化组织）标准的计算机语言，但是仍然存在着多种不同版本的 SQL 语言。 然而，为了与 ANSI 标准相兼容，它们必须以相似的方式共同地来支持一些主要的命令（比如 SELECT、UPDATE、DELETE、INSERT、WHERE 等等）。 **注释：**除SQL标准之外，大多数SQL数据库程序还具有自己的专有扩展名！ 在您的网站中使用 SQL要创建一个显示数据库中数据的网站，您需要： 一个RDBMS数据库程序（即MS Access，SQL Server，MySQL）。 使用服务器端脚本语言，如PHP或ASP。 使用SQL来获取所需的数据。 使用HTML CSS来设置页面的样式 RDBMSRDBMS 指关系型数据库管理系统，全称 Relational Database Management System。 RDBMS 是 SQL 的基础，同样也是所有现代数据库系统的基础，比如 MS SQL Server、IBM DB2、Oracle、MySQL 以及 Microsoft Access。 RDBMS 中的数据存储在被称为表的数据库对象中。 表是相关的数据项的集合，它由列和行组成。 代码示例： sql SELECT * FROM Customers; 每个表都被分解成称为字段的更小的实体。Customers表中的字段由CustomerID，CustomerName，ContactName，Address，City，PostalCode和Country组成。字段是表中的一列，用于维护表中每条记录的特定信息。 记录（也称为行）是表中存在的每个单独条目。例如，在上面的Customers表中有91条记录。记录是表中的横向实体。 列是表中的垂直实体，其包含与表中的特定字段相关联的所有信息。 SQL进程当您对任何RDBMS执行SQL命令时，系统将确定执行请求的最佳方式，并由SQL引擎确定如何解释该任务。 在此过程中包含了各种组件。 查询调度器优化引擎经典查询引擎SQL查询引擎 典型的查询引擎处理所有非SQL查询，但SQL查询引擎不会处理逻辑文件。 SQL标准命令与关系数据库交互的标准SQL命令是CREATE，SELECT，INSERT，UPDATE，DELETE和DROP，简单分为以下几组： DDL（数据定义语言）数据定义语言用于改变数据库结构，包括创建、更改和删除数据库对象。用于操纵表结构的数据定义语言命令有： CREATE TABLE– 创建（在数据库中创建新表、表视图或其他对象） ALTER TABLE– 更改 （修改现有的数据库对象，如表） DROP TABLE– 删除 （删除数据库中的整个表、表或其他对象的视图） DML（数据操纵语言）数据操纵语言用于检索、插入和修改数据，数据操纵语言是最常见的SQL命令。 数据操纵语言命令包括： INSERT– 插入 （创建记录） DELETE– 删除 （删除记录） UPDATE– 修改（修改记录） SELECT – 检索 （从一个或多个表检索某些记录） DCL（数据控制语言）数据控制语言为用户提供权限控制命令。 用于权限控制的命令有： GRANT– 授予权限 REVOKE– 撤销已授予的权限 SQL格式化使用SQL的缩进规范要求： 使用空格来缩进 每个缩进层次使用2个空格 每行最多使用80个字符 每个子句应该独占一行 每个子句的参数应该缩进一个层次。 可以比较直观的看到您想要的操作 章节小测现在，相信您已经了解了SQL的基础知识，那么，测验一下吧！"},{"title":"SQL 教程","path":"/wiki/sql/index.html","content":"SQL 是用于访问和处理数据库的标准的计算机语言。　在本教程中，您将学到如何使用 SQL 访问和处理数据系统中的数据，这类数据库包括：MySQL、SQL Server、Access、Oracle、Sybase、DB2和其他数据库系统。 每一章实例 每章节都提供了简单的 SQL 简单实例。 实例SELECT * FROM Customers; SQL查询从用户表中选择所有记录： sql SELECT * FROM users; SQL查询通过使用where子句从用户表中删除单个记录： sql DELETE FROM users WHERE user_id=299; 适用人群 本参考的目的在于帮助初学者深入浅出地学习 SQL 语言。 SQL测验测试 在ngrok测试你的SQL技能！ SQL快速参考 一个SQL快速参考。打印并放在口袋里。 SQL数据类型 Microsoft Access，MySQL和SQL Server的数据类型和范围。 ngrok实战认证 实践出真知，通过获得证书是编程实例最好的证明 该记录了你的HTML5CSS知识。 该记录了您的高级JavaScript知识。 在记录了你的Bootstrap的知识。 在记录了您的jQuery的知识。 在记录了你的视觉设计应用的知识。 该记录了你的初级脚本算法的知识。 该记录了你正则表达式的知识。 学习前提 本参考准备了各种各样的示例，在正式开始练习之前，我假定你对什么是数据库——尤其是关系型数据库管理系统（RDBMS）——已经有所了解，同时也知道什么是计算机编程语言。"},{"title":"SQL RBDMS概念","path":"/wiki/sql/rdbms.html","content":"SQL RDBMS 概念 RDBMS是关系数据库管理系统(Relational Database Management System)的缩写。 RDBMS是SQL的基础，也是所有现代数据库系统(如MS SQL Server、IBMDB2、Oracle、MySQL和MicrosoftAccess)的基础。 关系数据库管理系统(Relational Database Management System，RDBMS)是一种基于E.F.Codd提出的关系模型的数据库管理系统。 什么是表？ RDBMS中的数据存储在称为表的数据库对象中。这个表基本上是一个相关数据条目的集合，它由许多列和行组成。请记住，表是关系数据库中最常见和最简单的数据存储形式。 下面的程序是Customers表的一个示例 +----+----------+-----+-----------+----------+| ID | NAME | AGE | ADDRESS | SALARY |+----+----------+-----+-----------+----------+| 1 | Ramesh | 32 | Ahmedabad | 2000.00 || 2 | Khilan | 25 | Delhi | 1500.00 || 3 | kaushik | 23 | Kota | 2000.00 || 4 | Chaitali | 25 | Mumbai | 6500.00 || 5 | Hardik | 27 | Bhopal | 8500.00 || 6 | Komal | 22 | MP | 4500.00 || 7 | Muffy | 24 | Indore | 10000.00 |+----+----------+-----+-----------+----------+ 什么是字段？ 每个表都被分解成更小的实体，称为字段。Customers表中的字段由ID、姓名、年龄、地址和薪资组成。 字段是表中的列，用于维护有关表中每条记录的特定信息。 什么是记录或者行数据？ 记录也称为数据行，即表中存在的每个单独的条目。例如，上面的Customers表中有7条记录。下面是Customers表中的单行数据或记录。 +----+----------+-----+-----------+----------+| 1 | Ramesh | 32 | Ahmedabad | 2000.00 |+----+----------+-----+-----------+----------+ 记录是表中的水平实体。 什么是列？ 列是表中的垂直实体，其中包含与表中特定字段关联的所有信息。 例如，Customers表中的一列是Address，它表示位置描述，如下所示： +-----------+| ADDRESS |+-----------+| Ahmedabad || Delhi || Kota || Mumbai || Bhopal || MP || Indore |+----+------+ 什么是空值？ 表中的空值是显示为空的字段中的值，这意味着具有空值的字段是没有值的字段。 非常重要的一点是空值不同于零值或包含空格的字段。具有空值的字段是在创建记录时留空的字段。 SQL约束 约束是在表上的数据列上强制执行的规则。它们用于限制可以进入表中的数据类型。 这确保了数据库中数据的准确性和可靠性。 约束可以是列级别，也可以是表级别。列级约束仅应用于一列，而表级约束则应用于整个表。 以下是sql−中可用的一些最常用的约束 ：保证列中数据不能有 NULL 值 ：提供该列数据未指定时所采用的默认值 ：保证列中的所有数据各不相同 ：唯一标识数据表中的行记录 ：唯一标识其他表中的一条行记录 ：此约束保证列中的所有值满足某一条件 ：用于在数据库中快速创建或检索数据 约束可以在创建表时规定（通过 CREATE TABLE 语句），或者在表创建之后规定（通过 ALTER TABLE 语句）。 数据完整性 每个关系数据库管理系统都存在以下类型的数据完整性： 实体完整性−表中没有重复行。域完整性−通过限制值的类型、格式或范围来强制执行给定列的有效条目。引用完整性−不能删除其他记录使用的行。用户定义的完整性−强制执行一些不属于实体、域或引用完整性的特定业务规则。 数据库规范化 数据库规范化是在数据库中有效地组织数据的过程。这个规范化过程有两个原因： 消除冗余数据，例如，将相同的数据存储在多个表中。 确保数据依赖关系是有意义的。 这两个原因都是值得追求的目标，因为它们减少了数据库消耗的空间量，并确保了数据的逻辑存储。 规范化由一系列指导原则组成，有助于指导您创建良好的数据库结构。 规范化指导原则称为范式，范式的目的是组织数据库结构，使其符合第一范式、第二范式和第三范式的规则。 你可以更长远的去选择第四范式，第五范式，等等，但一般来说，第三范式已经足够了。 第一范式(1NF)第二范式(2NF)第三范式(3NF)"},{"title":"SQL 语法","path":"/wiki/sql/yufa.html","content":"SQL 语法规则 SQL语句总是以关键字开始，如SELECT、INSERT、UPDATE、DELETE、DROP、CREATE。 SQL语句以分号结尾。 SQL不区分大小写，意味着update与UPDATE相同。 数据库表 数据库通常包含一个或多个表。每个表都用一个名称标识（例如，”Customers”或”Orders”）。该表包含带有数据（行）的记录。　在本教程中，我们将使用著名的Northwind示例数据库（包括MSAccess和MSSQLServer）。 下面是选自 “Customers” 表的数据： CustomerID CustomerName ContactName Address City PostalCode Country 1 Alfreds Futterkiste Maria Anders Obere Str. 57 Berlin 12209 Germany 2 Ana Trujillo Emparedados y helados Ana Trujillo Avda. de la Constitución 2222 México D.F. 05021 Mexico 3 Antonio Moreno Taquería Antonio Moreno Mataderos 2312 México D.F. 05023 Mexico 4 Around the Horn Thomas Hardy 120 Hanover Sq. London WA1 1DP UK 5 Berglunds snabbköp Christina Berglund Berguvsvägen 8 Luleå S-958 22 Sweden 上面的表包含五条记录（每一条对应一个客户）和七个列（CustomerID、CustomerName、ContactName、Address、City、PostalCode 和 Country）。 SQL 语句 您需要在数据库上执行的大部分操作都是使用SQL语句完成的。 以下SQL语句选择”Customers”表中的所有记录： 实例SELECT * FROM Customers; 在本教程中，我们将向您解释各种不同的SQL语句。 请记住… SQL 对大小写不敏感：SELECT 与 select 是相同的。 在本教程中，我们将以大写形式编写所有SQL关键字。 SQL 语句后面的分号？ 一些数据库系统需要在每个SQL语句的末尾使用分号。 分号是分离数据库系统中每个SQL语句的标准方法，这样您就可以在对服务器的同一请求中执行多个SQL语句。 在本教程中，我们将在每个SQL语句的末尾使用分号。 一些最重要的 SQL 命令 SELECT - 从数据库中提取数据 UPDATE - 更新数据库中的数据 DELETE - 从数据库中删除数据 INSERT INTO - 向数据库中插入新数据 CREATE DATABASE - 创建新数据库 ALTER DATABASE - 修改数据库 CREATE TABLE - 创建新表 ALTER TABLE - 变更（改变）数据库表 DROP TABLE - 删除表 CREATE INDEX - 创建索引（搜索键） DROP INDEX - 删除索引 SELECT语句句法： SELECT column_name(s) FROM table_name SELECT语句和WHERE子句句法： SELECT [*] FROM [TableName] WHERE [condition1] SELECT语句与WHERE和或子句[句法： SELECT [*] FROM [TableName] WHERE [condition1] [AND [OR]] [condition2]... SELECT语句与ORDER BY句法： SELECT column_name()FROM table_nameORDER BY column_name() ASC or DESC SELECT DISTINCT(区分)子句句法： SELECT DISTINCT column1, column2....columnNFROM table_name; SELECT IN子句句法： SELECT column1, column2....columnNFROM table_nameWHERE column_name IN (val-1, val-2,...val-N); SELECT LIKE (类)子句句法： SELECT column1, column2....columnNFROM table_nameWHERE column_name LIKE PATTERN ; SELECT COUNT(计数)子句句法： SELECT COUNT(column_name)FROM table_nameWHERE CONDITION; SELECT与HAVING子句句法： SELECT SUM(column_name)FROM table_nameWHERE CONDITIONGROUP BY column_nameHAVING (arithematic function condition); INSERT INTO语句句法： INSERT INTO table_name (column, column1, column2, column3, ...)VALUES (value, value1, value2, value3 ...) UPDATE语句句法： UPDATE table_nameSET column=value, column1=value1,...WHERE someColumn=someValue DELETE语句句法： DELETE FROM tableNameWHERE someColumn = someValue CREATE 语句句法： CREATE TABLE table_name(column1 datatype,column2 datatype,column3 datatype,.....columnN datatype,PRIMARY KEY( one or more columns )); DROP 语句句法： DROP TABLE table_name; CREATE INDEX语句句法： CREATE UNIQUE INDEX index_nameON table_name ( column1, column2,...columnN); DROP INDEX语句句法： ALTER TABLE table_nameDROP INDEX index_name; DESC语句句法： DESC table_name; TRUNCATE 截断表语句句法： TRUNCATE TABLE table_name; ALTER TABLE语句句法： sql ALTER TABLE table_name ADD|DROP|MODIFY column_name data_ype; ALTER TABLE语句(对表名重命名)句法： ALTER TABLE table_name RENAME TO new_table_name; Use语句句法： USE database_name; COMMIT语句句法： COMMIT; ROLLBACK语句句法： ROLLBACK;"},{"title":"SQL 选择","path":"/wiki/sql/xuanze.html","content":"SQL SELECT 语法 SELECT 语法用于从数据库中选择数据。 返回的数据存储在结果表中，称为结果集。 基本语法：SELECT和FROM在任何SQL查询语句中都：SELECT和FROM他们必须按顺序排列。SELECT指示要查看哪些列，FROM标识它们所在的表。 SQL SELECT 语法如下所示： SELECT column1, column2, ...FROM table_name; 这里，column1，column2，…是要从中选择数据的表的字段名称。如果要选择表中可用的所有字段，请使用以下语法： SELECT * FROM table_name; 演示数据库 在本教程中，我们将使用众所周知的 Northwind 样本数据库。 下面是罗斯文示例数据库中”Customers”表的一个选择： CustomerID CustomerName ContactName Address City PostalCode Country 1 Alfreds Futterkiste Maria Anders Obere Str. 57 Berlin 12209 Germany 2 Ana Trujillo Emparedados y helados Ana Trujillo Avda. de la Constitución 2222 México D.F. 05021 Mexico 3 Antonio Moreno Taquería Antonio Moreno Mataderos 2312 México D.F. 05023 Mexico 4 Around the Horn Thomas Hardy 120 Hanover Sq. London WA1 1DP UK 5 Berglunds snabbköp Christina Berglund Berguvsvägen 8 Luleå S-958 22 Sweden SELECT Column 实例 我们将为以下三种用例提供实例 1、检索一列2、检索多列3、检索所有列 我们将用上述的”Customers”表来说明三种用例的使用。 SELECT 检索一列下面的 SQL 语句从 “Customers” 表中选取 “City” 列： 实例SELECT City FROM Customers; SELECT 检索多列下面的 SQL 语句从 “Customers” 表中选取 “CustomerName” 和 “City” 列： 实例SELECT CustomerName, City FROM Customers; **注意：**这两个列名在查询中用逗号分隔。每当您选择多个列时，它们必须用逗号分隔，但最后一列名称之后不能添加逗号。 SELECT * 实例 - 检索所有列下面的 SQL 语句从 “Customers” 表中选取所有列： 实例SELECT * FROM Customers; 如果要选择表中的所有列，则可以使用 * 而不需要把所有列名罗列查询。 结果集中的导航 大多数数据库软件系统都允许使用编程函数在结果集中进行导航，例如：Move-To-First-Record、Get-Record-Content、Move-To-Next-Record 等等。 本教程中不包括与这些编程函数类似的功能。要了解如何通过函数调用访问数据，请访问我们的 或者 。"},{"title":"SQL 与/或运算符","path":"/wiki/sql/andor.html","content":"SQL AND OR 运算符 ANDOR运算符用于根据一个以上的条件过滤记录，即用于组合多个条件以缩小SQL语句中的数据。 WHERE子句可以与AND，OR和NOT运算符结合使用。 AND和OR运算符用于根据多个条件筛选记录： 如果由AND分隔的所有条件为TRUE，则AND运算符显示记录。 如果使用AND运算符组合N个条件。对于SQL语句执行的操作(无论是事务还是查询)，所有由AND分隔的条件都必须为TRUE。 如果由OR分隔的任何条件为真，则OR运算符显示记录。 如果使用OR运算符组合N个条件。对于SQL语句执行的操作(无论是事务还是查询)，OR分隔的任何一个条件都必须为TRUE。 如果条件不为TRUE，则NOT运算符显示记录。 AND语法SELECT column1, column2, ...FROM table_nameWHERE condition1 AND condition2 AND condition3 ...; OR语法SELECT column1, column2, ...FROM table_nameWHERE condition1 OR condition2 OR condition3 ...; NOT语法SELECT column1, column2, ...FROM table_nameWHERE NOT condition; 演示数据库 在本教程中，我们将使用著名的Northwind示例数据库。 以下是”Customers”表中的数据： CustomerID CustomerName ContactName Address City PostalCode Country 1 Alfreds Futterkiste Maria Anders Obere Str. 57 Berlin 12209 Germany 2 Ana Trujillo Emparedados y helados Ana Trujillo Avda. de la Constitución 2222 México D.F. 05021 Mexico 3 Antonio Moreno Taquería Antonio Moreno Mataderos 2312 México D.F. 05023 Mexico 4 Around the Horn Thomas Hardy 120 Hanover Sq. London WA1 1DP UK 5 Berglunds snabbköp Christina Berglund Berguvsvägen 8 Luleå S-958 22 Sweden AND 运算符实例 以下SQL语句从 “Customers” 表中选择其国家为 “Germany” 、其城市为”Berlin” 的所有客户： 示例： SELECT * FROM CustomersWHERE Country=GermanyAND City=Berlin; OR 运算符实例 以下SQL语句选择城市为”Berlin”或”München”的”Customers”的所有字段： 示例： SELECT * FROM CustomersWHERE City=Berlin OR City=München; NOT 运算符实例 以下SQL语句选择国家不是 “Germany”的”Customers”的所有字段： SELECT * FROM CustomersWHERE NOT Country=Germany; 结合 AND OR 您还可以组合AND和OR（使用括号来组成成复杂的表达式）。 以下SQL语句从国家 “Germany” 且城市为”Berlin” 或”München”的”Customers” 表中选择所有客户： 示例： SELECT * FROM CustomersWHERE Country=GermanyAND (City=Berlin OR City=München); 结合AND，OR和NOT 你也可以结合AND，OR和NOT运算符。 以下SQL语句选择国家是”德国”的”客户”的所有字段，城市必须是”柏林”或”慕尼黑”（用括号形成复杂表达式）： **　代码示例：** SELECT * FROM CustomersWHERE Country=Germany AND (City=Berlin OR City=München); 以下SQL语句选择来自”Customers” 的国家不是 “Germany” 且不是 “USA”的所有字段： **　代码示例：** SELECT * FROM CustomersWHERE NOT Country=Germany AND NOT Country=USA;"},{"title":"SQL 选择不同","path":"/wiki/sql/distinct.html","content":"SQL SELECT DISTINCT 语法 SELECT DISTINCT语法用于仅返回不同的（different）值。 在一张表内，一列通常包含许多重复的值; 有时你只想列出不同的（different）值。 SELECT DISTINCT语句用于仅返回不同的（different）值。 SQL SELECT DISTINCT语法如下所示： SELECT DISTINCT column1, column2, ...FROM table_name; 演示数据库 在本教程中，我们将使用著名的 Northwind 样本数据库。 下面是罗斯文示例数据库中 “Customers” 表的数据： CustomerID CustomerName ContactName Address City PostalCode Country 1 Alfreds Futterkiste Maria Anders Obere Str. 57 Berlin 12209 Germany 2 Ana Trujillo Emparedados y helados Ana Trujillo Avda. de la Constitución 2222 México D.F. 05021 Mexico 3 Antonio Moreno Taquería Antonio Moreno Mataderos 2312 México D.F. 05023 Mexico 4 Around the Horn Thomas Hardy 120 Hanover Sq. London WA1 1DP UK 5 Berglunds snabbköp Christina Berglund Berguvsvägen 8 Luleå S-958 22 Sweden SELECT实例 以下SQL语句从”Customers”表中的”Country”列中选择所有（包括重复）值：**　代码示例：** SELECT Country FROM Customers; 以上查询的结果： CountryGermanyMexicoMexicoUKSweden 现在，让我们在上面的SELECT语法中使用DISTINCT关键字并查看结果。 SELECT DISTINCT 实例 以下SQL语句仅从”Customers” 表中的 “Country” 列中选择DISTINCT值： 实例1SELECT DISTINCT Country FROM Customers; 查询结果： CountryGermanyMexicoUKSweden 以下SQL语句列出了不同（distinct）客户国家的数量： 实例2SELECT COUNT(DISTINCT Country) FROM Customers; **注意：**上述示例在Firefox和Microsoft Edge中不起作用！ 由于在Microsoft Access数据库中不支持COUNT(DISTINCT column_name)。在我们的示例中Firefox和Microsoft Edge使用Microsoft Access。"},{"title":"SQL 查询子句","path":"/wiki/sql/ziju.html","content":"SQL WHERE 子句 WHERE 子句用于过滤记录。 WHERE 子句用于提取满足指定标准的记录。 SQL WHERE 语法SELECT column1, column2, ...FROM table_nameWHERE condition; 注意： WHERE子句不仅用于SELECT语法，还用于UPDATE，DELETE语法等！ WHERE子句可以与以下类型的SQL语句一起使用： UPDATE DELETE UPDATE语句： UPDATE table_nameSET column_1 = [new value]WHERE condition; DELETE语句： DELETE FROM table_name WHERE condition; 演示数据库 在本教程中，我们将使用著名的Northwind示例数据库。　以下是 “Customers” 表中的数据： CustomerID CustomerName ContactName Address City PostalCode Country 1 Alfreds Futterkiste Maria Anders Obere Str. 57 Berlin 12209 Germany 2 Ana Trujillo Emparedados y helados Ana Trujillo Avda. de la Constitución 2222 México D.F. 05021 Mexico 3 Antonio Moreno Taquería Antonio Moreno Mataderos 2312 México D.F. 05023 Mexico 4 Around the Horn Thomas Hardy 120 Hanover Sq. London WA1 1DP UK 5 Berglunds snabbköp Christina Berglund Berguvsvägen 8 Luleå S-958 22 Sweden WHERE 子句实例 以下SQL语句从”Customers”表中选择其国家为”Mexico”的所有客户： 示例: SELECT * FROM Customers WHERE Country=Mexico; 你也可以使用OR运算符的查询子句： 示例: SELECT * FROM Customers WHERE Country=Mexico OR PostalCode=05021; 文本字段与数值字段 SQL在文本值周围使用单引号（大多数数据库系统也接受双引号）。 如果是数值字段，则不要使用引号。 示例: SELECT * FROM Customers WHERE CustomerID=1; WHERE 子句中的运算符 WHERE子句中可以使用以下运算符： 运算符 描述 等于 不等于。 注意 ：在某些版本的SQL中，这个操作符可能写成! 大于 小于 大于等于 小于等于 BETWEEN 在某个范围内 LIKE 搜索某种模式 IN 为列指定多个可能的值"},{"title":"SQL 按关键字排序","path":"/wiki/sql/order.html","content":"SQL ORDER BY 关键字 ORDER BY 关键字用于按升序或降序对结果集进行排序。 ORDER BY 关键字默认情况下按升序排序记录。 如果需要按降序对记录进行排序，可以使用DESC关键字。 SQL ORDER BY 语法SELECT column1, column2, ...FROM table_nameORDER BY column1, column2, ... ASC|DESC; 您可以在ORDER BY子句中使用多个列，但要确保用于对该列进行排序的列应该在列表中。 演示数据库 在本教程中，我们将使用著名的Northwind示例数据库。 以下是 “Customers” 表中的数据： CustomerID CustomerName ContactName Address City PostalCode Country 1 Alfreds Futterkiste Maria Anders Obere Str. 57 Berlin 12209 Germany 2 Ana Trujillo Emparedados y helados Ana Trujillo Avda. de la Constitución 2222 México D.F. 05021 Mexico 3 Antonio Moreno Taquería Antonio Moreno Mataderos 2312 México D.F. 05023 Mexico 4 Around the Horn Thomas Hardy 120 Hanover Sq. London WA1 1DP UK 5 Berglunds snabbköp Christina Berglund Berguvsvägen 8 Luleå S-958 22 Sweden ORDER BY 实例 下面的 SQL 语句从 “Customers” 表中选取所有客户，并按照 “Country” 列排序： 示例： SELECT * FROM CustomersORDER BY Country; ORDER BY DESC 实例 下面的 SQL 语句从 “Customers” 表中选取所有客户，并按照 “Country” 列降序排序： 实例SELECT * FROM CustomersORDER BY Country DESC; ORDER BY 多列 实例1 下面的 SQL 语句从 “Customers” 表中选取所有客户，并按照 “Country” 和 “CustomerName” 列排序： 示例： SELECT * FROM CustomersORDER BY Country, CustomerName; ORDER BY 多列 实例2 以下SQL语句从”Customers” 表中选择所有客户，按 “Country” 升序排列，并按 “CustomerName” 列降序排列： SELECT * FROM CustomersORDER BY Country ASC, CustomerName DESC;"},{"title":"SQL 在表中插入","path":"/wiki/sql/insert.html","content":"SQL INSERT INTO 语句 INSERT INTO 语句用于向表中插入新的数据行。 SQL INSERT INTO 语法INSERT INTO 语句可以用两种形式编写。　第一个表单没有指定要插入数据的列的名称，只提供要插入的值，即可添加一行新的数据： sql INSERT INTO table_name (column1, column2, column3, ...)VALUES (value1, value2, value3, ...); 第二种，如果要为表中的所有列添加值，则不需要在SQL查询中指定列名称。但是，请确保值的顺序与表中的列顺序相同。INSERT INTO语法如下所示： sql INSERT INTO table_nameVALUES (value1, value2, value3, ...); 演示数据库 在本教程中，我们将使用著名的 Northwind 示例数据库。 以下是”Customers” 表中的数据： CustomerID CustomerName ContactName Address City PostalCode Country 87 Wartian Herkku Pirkko Koskitalo Torikatu 38 Oulu 90110 Finland 88 Wellington Importadora Paula Parente Rua do Mercado, 12 Resende 08737-363 Brazil 89 White Clover Markets Karl Jablonski 305 - 14th Ave. S. Suite 3B Seattle 98128 USA 90 Wilman Kala Matti Karttunen Keskuskatu 45 Helsinki 21240 Finland 91 Wolski Zbyszek ul. Filtrowa 68 Walla 01-012 Poland INSERT INTO 实例 假设我们想在”Customers”表中插入一个新行。 我们可以使用以下SQL语句： 实例INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)VALUES (‘Cardinal’,’Tom B. Erichsen’,’Skagen 21’,’Stavanger’,’4006’,’Norway’); 现在，选自 “Customers” 表的数据如下所示： CustomerID CustomerName ContactName Address City PostalCode Country 87 Wartian Herkku Pirkko Koskitalo Torikatu 38 Oulu 90110 Finland 88 Wellington Importadora Paula Parente Rua do Mercado, 12 Resende 08737-363 Brazil 89 White Clover Markets Karl Jablonski 305 - 14th Ave. S. Suite 3B Seattle 98128 USA 90 Wilman Kala Matti Karttunen Keskuskatu 45 Helsinki 21240 Finland 91 Wolski Zbyszek ul. Filtrowa 68 Walla 01-012 Poland 92 Cardinal Tom B. Erichsen Skagen 21 Stavanger 4006 Norway 注意到了吗？ 我们没有将任何号码插入 CustomerID 字段。 CustomerID列是一个字段，在将新记录插入到表中时自动生成。 仅在指定的列中插入数据 我们还可以只在指定的列中插入数据。 以下SQL语句插入一个新行，但只在”CustomerName”、”City”和”Country”列中插入数据（CustomerID字段将自动更新）： 示例： INSERT INTO Customers (CustomerName, City, Country)VALUES (Cardinal, Stavanger, Norway); 现在，选自 “Customers” 表的数据如下所示： CustomerID CustomerName ContactName Address City PostalCode Country 87 Wartian Herkku Pirkko Koskitalo Torikatu 38 Oulu 90110 Finland 88 Wellington Importadora Paula Parente Rua do Mercado, 12 Resende 08737-363 Brazil 89 White Clover Markets Karl Jablonski 305 - 14th Ave. S. Suite 3B Seattle 98128 USA 90 Wilman Kala Matti Karttunen Keskuskatu 45 Helsinki 21240 Finland 91 Wolski Zbyszek ul. Filtrowa 68 Walla 01-012 Poland 92 Cardinal null null Stavanger null Norway 使用另一个表填充一个表 您可以通过另一个表上的SELECT语句查询出来的字段值，然后将数据填充到本表中，条件是另一个表所查询的字段与本表要插入数据的字段是一一对应的。 INSERT INTO first_table_name [(column1, column2, ... columnN)] SELECT column1, column2, ...columnN FROM second_table_name[WHERE condition];"},{"title":"SQL 空值","path":"/wiki/sql/null.html","content":"什么是SQL NULL值？ SQL 中，NULL 用于表示缺失的值。数据表中的 NULL 值表示该值所处的字段为空。 具有NULL值的字段是没有值的字段。 如果表中的字段是可选的，则可以插入新记录或更新记录而不向该字段添加值。然后，该字段将被保存为NULL值。 值为 NULL 的字段没有值。尤其要明白的是，NULL 值与 0 或者包含空白（spaces）的字段是不同的。 注意：理解NULL值与零值或包含空格的字段不同是非常重要的。具有NULL值的字段是在记录创建期间留空的字段！ 如何测试NULL值？ 使用比较运算符（例如，或）来测试NULL值是不可行的。 我们将不得不使用IS NULL和IS NOT NULL运算符。 IS NULL语法SELECT column_namesFROM table_nameWHERE column_name IS NULL; IS NOT NULL语法SELECT column_namesFROM table_nameWHERE column_name IS NOT NULL; 演示数据库 假设我们有以下的”人员”表： ID LastName FirstName Address City 1 Doe John 542 W. 27th Street New York 2 Bloggs Joe London 3 Roe Jane New York 4 Smith John 110 Bishopsgate London 假设”人员”表中的”Address”列是可选的。如果插入的记录没有”Address”值，则”Address”列将以空值保存。 IS NULL运算符 以下SQL语句使用IS NULL运算符来列出所有没有地址的人员： SELECT LastName, FirstName, Address FROM PersonsWHERE Address IS NULL; 结果集将如下所示： LastName FirstName Address Bloggs Joe Roe Jane 提示：始终使用IS NULL来查找空值。 IS NOT NULL运算符 以下SQL语句使用IS NOT NULL运算符来列出所有具有地址的人员： SELECT LastName, FirstName, Address FROM PersonsWHERE Address IS NOT NULL; 结果集将如下所示： LastName FirstName Address Doe John 542 W. 27th Street Smith John 110 Bishopsgate 语法： 创建表的时候，NULL 的基本语法如下： SQL CREATE TABLE CUSTOMERS( ID INT NOT NULL, NAME VARCHAR (20) NOT NULL, AGE INT NOT NULL, ADDRESS CHAR (25) , SALARY DECIMAL (18, 2), PRIMARY KEY (ID)); 这里，NOT NULL表示对于给定列，必须按照其数据类型明确赋值。有两列并没有使用 NOT NULL 来限定，也就是说这些列可以为 NULL。 值为 NULL 的字段是在记录创建的过程中留空的字段。 示例： NULL 值会给选取数据带来麻烦。不过，因为 NULL 和其他任何值作比较，其结果总是未知的，所以含有 NULL 的记录不会包含在最终结果里面。 必须使用 IS NULL 或者 IS NOT NULL 来检测某个字段是否为 NULL。 考虑下面的 CUSTOMERS 数据表，里面包含的记录如下所示： +----+----------+-----+-----------+----------+| ID | NAME | AGE | ADDRESS | SALARY |+----+----------+-----+-----------+----------+| 1 | Ramesh | 32 | Ahmedabad | 2000.00 || 2 | Khilan | 25 | Delhi | 1500.00 || 3 | kaushik | 23 | Kota | 2000.00 || 4 | Chaitali | 25 | Mumbai | 6500.00 || 5 | Hardik | 27 | Bhopal | 8500.00 || 6 | Komal | 22 | MP | || 7 | Muffy | 24 | Indore | |+----+----------+-----+-----------+----------+ 下面是 IS NOT NULL 运算符的用法： SQL SELECT ID, NAME, AGE, ADDRESS, SALARY FROM CUSTOMERS WHERE SALARY IS NOT NULL; 上面语句的运行结果如下： +----+----------+-----+-----------+----------+| ID | NAME | AGE | ADDRESS | SALARY |+----+----------+-----+-----------+----------+| 1 | Ramesh | 32 | Ahmedabad | 2000.00 || 2 | Khilan | 25 | Delhi | 1500.00 || 3 | kaushik | 23 | Kota | 2000.00 || 4 | Chaitali | 25 | Mumbai | 6500.00 || 5 | Hardik | 27 | Bhopal | 8500.00 |+----+----------+-----+-----------+----------+ 下面是 IS NULL 运算符的用法： SQL SELECT ID, NAME, AGE, ADDRESS, SALARY FROM CUSTOMERS WHERE SALARY IS NULL; 其运行结果如下： +----+----------+-----+-----------+----------+| ID | NAME | AGE | ADDRESS | SALARY |+----+----------+-----+-----------+----------+| 6 | Komal | 22 | MP | || 7 | Muffy | 24 | Indore | |+----+----------+-----+-----------+----------+"},{"title":"SQL 更新","path":"/wiki/sql/update.html","content":"SQL UPDATE 语句 UPDATE 语句用于更新表中已存在的记录。 还可以使用AND或OR运算符组合多个条件。 SQL UPDATE 语法具有WHERE子句的UPDATE查询的基本语法如下所示： UPDATE table_nameSET column1 = value1, column2 = value2, ...WHERE condition; 请注意 更新表中的记录时要小心！ 要注意SQL UPDATE 语句中的 WHERE 子句！ WHERE子句指定哪些记录需要更新。如果省略WHERE子句，所有记录都将更新！ 演示数据库 在本教程中，我们将使用著名的Northwind示例数据库。 以下是 “Customers” 表中的数据： CustomerID CustomerName ContactName Address City PostalCode Country 1 Alfreds Futterkiste Maria Anders Obere Str. 57 Berlin 12209 Germany 2 Ana Trujillo Emparedados y helados Ana Trujillo Avda. de la Constitución 2222 México D.F. 05021 Mexico 3 Antonio Moreno Taquería Antonio Moreno Mataderos 2312 México D.F. 05023 Mexico 4 Around the Horn Thomas Hardy 120 Hanover Sq. London WA1 1DP UK 5 Berglunds snabbköp Christina Berglund Berguvsvägen 8 Luleå S-958 22 Sweden SQL UPDATE 实例 以下SQL语句为第一个客户（CustomerID 1）更新了”ContactName”和”City”： 示例： UPDATE CustomersSET ContactName = Alfred Schmidt, City= FrankfurtWHERE CustomerID = 1; 现在，选自 “Customers” 表的数据如下所示： CustomerID CustomerName ContactName Address City PostalCode Country 1 Alfreds Futterkiste Alfred Schmidt Obere Str. 57 Frankfurt 12209 Germany 2 Ana Trujillo Emparedados y helados Ana Trujillo Avda. de la Constitución 2222 México D.F. 05021 Mexico 3 Antonio Moreno Taquería Antonio Moreno Mataderos 2312 México D.F. 05023 Mexico 4 Around the Horn Thomas Hardy 120 Hanover Sq. London WA1 1DP UK 5 Berglunds snabbköp Christina Berglund Berguvsvägen 8 Luleå S-958 22 Sweden 更新多个记录 WHERE子句决定了将要更新的记录数量。 以下SQL语句将把国家地区为”Mexico”的所有记录的联系人姓名更新为”Juan”： UPDATE CustomersSET ContactName=JuanWHERE Country=Mexico; “Customers”表中的选择现在看起来像这样： CustomerID CustomerName ContactName Address City PostalCode Country 1 Alfreds Futterkiste Alfred Schmidt Obere Str. 57 Frankfurt 12209 Germany 2 Ana Trujillo Emparedados y helados Juan Avda. de la Constitución 2222 México D.F. 05021 Mexico 3 Antonio Moreno Taquería Juan Mataderos 2312 México D.F. 05023 Mexico 4 Around the Horn Thomas Hardy 120 Hanover Sq. London WA1 1DP UK 5 Berglunds snabbköp Christina Berglund Berguvsvägen 8 Luleå S-958 22 Sweden Update 警告！ 更新记录时要小心。如果您省略WHERE子句，所有记录将被更新！ UPDATE CustomersSET ContactName=Juan; “Customers” 表将如下所示： CustomerID CustomerName ContactName Address City PostalCode Country 1 Alfreds Futterkiste Juan Obere Str. 57 Frankfurt 12209 Germany 2 Ana Trujillo Emparedados y helados Juan Avda. de la Constitución 2222 México D.F. 05021 Mexico 3 Antonio Moreno Taquería Juan Mataderos 2312 México D.F. 05023 Mexico 4 Around the Horn Juan 120 Hanover Sq. London WA1 1DP UK 5 Berglunds snabbköp Juan Berguvsvägen 8 Luleå S-958 22"},{"title":"SQL 删除","path":"/wiki/sql/delete.html","content":"SQL DELETE 语句 DELETE语句用于删除表中现有记录。 SQL DELETE 语法DELETE FROM table_nameWHERE condition; 请注意 删除表格中的记录时要小心！ 注意SQL DELETE 语句中的 WHERE 子句！ WHERE子句指定需要删除哪些记录。如果省略了WHERE子句，表中所有记录都将被删除！ 演示数据库 在本教程中，我们将使用著名的Northwind示例数据库。 以下是 “Customers” 表中的数据： CustomerID CustomerName ContactName Address City PostalCode Country 1 Alfreds Futterkiste Maria Anders Obere Str. 57 Berlin 12209 Germany 2 Ana Trujillo Emparedados y helados Ana Trujillo Avda. de la Constitución 2222 México D.F. 05021 Mexico 3 Antonio Moreno Taquería Antonio Moreno Mataderos 2312 México D.F. 05023 Mexico 4 Around the Horn Thomas Hardy 120 Hanover Sq. London WA1 1DP UK 5 Berglunds snabbköp Christina Berglund Berguvsvägen 8 Luleå S-958 22 Sweden SQL DELETE 实例 假设我们想从”Customers” 表中删除客户”Alfreds Futterkiste”。 我们使用以下SQL语句： 示例： DELETE FROM CustomersWHERE CustomerName=Alfreds Futterkiste; 现在，”Customers” 表如下所示： CustomerID CustomerName ContactName Address City PostalCode Country 2 Ana Trujillo Emparedados y helados Ana Trujillo Avda. de la Constitución 2222 México D.F. 05021 Mexico 3 Antonio Moreno Taquería Antonio Moreno Mataderos 2312 México D.F. 05023 Mexico 4 Around the Horn Thomas Hardy 120 Hanover Sq. London WA1 1DP UK 5 Berglunds snabbköp Christina Berglund Berguvsvägen 8 Luleå S-958 22 Sweden 删除所有数据 您可以删除表中的所有行，而不需要删除该表。这意味着表的结构、属性和索引将保持不变： DELETE FROM table_name; **　或者** DELETE * FROM table_name; **注意：**在没有备份的情况下，删除记录要格外小心！因为你删除了不能恢复！"},{"title":"SQL 表达式","path":"/wiki/sql/express.html","content":"SQL 表达式 表达式是计算值的一个或多个值、运算符和SQL函数的组合。这些SQL表达式类似于公式，它们是用查询语言编写的。 您还可以使用它们查询数据库中的特定数据集。 句法考虑SELECT语句的基本语法，如下所示： SELECT column1, column2, columnN FROM table_name WHERE [CONDITION|EXPRESSION]; 有不同类型的sql表达式，如下所示： 布尔型 数值型 日期 现在让我们详细讨论每一个问题。 布尔表达式 SQL布尔表达式基于匹配单个值获取数据。 句法： SELECT column1, column2, columnN FROM table_name WHERE SINGLE VALUE MATCHING EXPRESSION; 使用具有以下记录的Customers表： SQL SELECT * FROM CUSTOMERS;+----+----------+-----+-----------+----------+| ID | NAME | AGE | ADDRESS | SALARY |+----+----------+-----+-----------+----------+| 1 | Ramesh | 32 | Ahmedabad | 2000.00 || 2 | Khilan | 25 | Delhi | 1500.00 || 3 | kaushik | 23 | Kota | 2000.00 || 4 | Chaitali | 25 | Mumbai | 6500.00 || 5 | Hardik | 27 | Bhopal | 8500.00 || 6 | Komal | 22 | MP | 4500.00 || 7 | Muffy | 24 | Indore | 10000.00 |+----+----------+-----+-----------+----------+7 rows in set (0.00 sec) 下表是一个简单的示例，展示了各种sql布尔表达式的用法。 SQL SELECT * FROM CUSTOMERS WHERE SALARY = 10000;+----+-------+-----+---------+----------+| ID | NAME | AGE | ADDRESS | SALARY |+----+-------+-----+---------+----------+| 7 | Muffy | 24 | Indore | 10000.00 |+----+-------+-----+---------+----------+1 row in set (0.00 sec) 数值表达式 数值表达式用于在任何查询中执行任何数学运算。 句法： SELECT numerical_expression as OPERATION_NAME[FROM table_nameWHERE CONDITION] ; 这里，数值表达式用于数学表达式或任何公式。下面是一个简单的示例，展示了SQLNDigitic表达式的用法： SQL SELECT (15 + 6) AS ADDITION+----------+| ADDITION |+----------+| 21 |+----------+1 row in set (0.00 sec) 有几个内置函数，如avg()、sum()、count()等，用于对表或特定表列执行所谓的聚合数据计算。 SQL SELECT COUNT(*) AS RECORDS FROM CUSTOMERS; +---------+| RECORDS |+---------+| 7 |+---------+1 row in set (0.00 sec) 日期表达式日期表达式返回当前系统日期和时间值： SQL SELECT CURRENT_TIMESTAMP;+---------------------+| Current_Timestamp |+---------------------+| 2009-11-12 06:40:23 |+---------------------+1 row in set (0.00 sec) 另一个日期表达式如下所示： SQL SELECT GETDATE();;+-------------------------+| GETDATE |+-------------------------+| 2009-10-22 12:07:18.140 |+-------------------------+1 row in set (0.00 sec)"},{"title":"SQL 运算符","path":"/wiki/sql/yunsf.html","content":"SQL 运算符 运算符是保留字或主要用于 SQL 语句的 中的字符，用于执行操作，例如：比较和算术运算。 这些运算符用于指定 SQL 语句中的条件，并用作语句中多个条件的连词。 常见运算符有以下几种： 算术运算符 比较运算符 逻辑运算符 否定条件运算符 SQL 算术运算符 假设变量 a 的值是：10，变量 b 的值是：20，以下为各运算符执行结果： 运算符 描述 例子 + 加法，执行加法运算。 a + b 得到 30 - 减法，执行减法运算。 a - b 得到 -10 * 乘法，执行乘法运算。 a * b 得到 200 用左操作数除以右操作数。 b a 得到 2 % 用左操作数除以右操作数并返回余数。 b % a 得到 0 SQL 比较运算符 假设变量 a 的值是：10，变量 b 的值是：20，以下为各运算符执行结果： 运算符 描述 例子 检查两个操作数的值是否相等，如果是，则条件为真(true)。 (a b) is false. ! 检查两个操作数的值是否相等，如果值不相等则条件为真(true)。 (a ! b) is true. 检查两个操作数的值是否相等，如果值不相等则条件为真(true)。 (a b) is true. 检查左操作数的值是否大于右操作数的值，如果是，则条件为真(true)。 (a b) is false. 检查左操作数的值是否小于右操作数的值，如果是，则条件为真(true)。 (a b) is true. 检查左操作数的值是否大于或等于右操作数的值，如果是，则条件为真(true)。 (a b) is false 检查左操作数的值是否小于或等于右操作数的值，如果是，则条件为真(true)。 (a b) is true. ! 检查左操作数的值是否不小于右操作数的值，如果是，则条件变为真(true)。 (a ! b) is false. ! 检查左操作数的值是否不大于右操作数的值，如果是，则条件变为真(true)。 (a ! b) is true. SQL 逻辑运算符： 这是在 SQL 所有的逻辑运算符的列表。 运算符 描述 ALL ALL运算符用于将值与另一个值集中的所有值进行比较。 AND AND运算符允许在SQL语句的WHERE子句中指定多个条件。 ANY ANY运算符用于根据条件将值与列表中的任何适用值进行比较。 BETWEEN BETWEEN运算符用于搜索在给定最小值和最大值内的值。 EXISTS EXISTS运算符用于搜索指定表中是否存在满足特定条件的行。 IN运算符用于将值与已指定的文字值列表进行比较。 LIKE LIKE运算符用于使用通配符运算符将值与类似值进行比较。 NOT NOT运算符反转使用它的逻辑运算符的含义。 例如：NOT EXISTS, NOT BETWEEN, NOT IN等等，这是一个否定运算符。 OR OR运算符用于组合SQL语句的WHERE子句中的多个条件。 IS NULL IS NULL运算符用于将值与NULL值进行比较。 UNIQUE UNIQUE运算符搜索指定表的每一行的唯一性(无重复项)。"},{"title":"SQL USE语句","path":"/wiki/sql/use.html","content":"SQL 选择数据库 USE语句 当SQL Schema中有多个数据库时，在开始操作之前，需要选择一个执行所有操作的数据库。 SQL USE语句用于选择SQL架构中的任何现有数据库。 句法USE语句的基本语法如下所示 : USE DatabaseName; 数据库名称在RDBMS中必须是唯一的。 实例 您可以查看可用的数据库，如下所示： SQL SHOW DATABASES;+--------------------+| Database |+--------------------+| information_schema || AMROOD || TUTORIALSPOINT || mysql || orig || test |+--------------------+6 rows in set (0.00 sec) 现在，如果您想使用AMROOD数据库，那么您可以执行以下SQL命令并开始使用AMROOD数据库。 SQL USE AMROOD;"},{"title":"SQL TOP/LIMIT语句","path":"/wiki/sql/limit.html","content":"SQL SELECT TOP 子句 SELECT TOP 子句用于指定要返回的记录数量。 SELECT TOP子句在包含数千条记录的大型表上很有用。返回大量记录会影响性能。 **注：**并不是所有的数据库系统都支持SELECT TOP子句。MySQL支持LIMIT子句来选择有限数量的记录，而Oracle使用ROWNUM。 SQL Server MS Access 语法SELECT TOP number|percent column_name(s)FROM table_nameWHERE condition; MySQL 和 Oracle 中的 SQL SELECT TOP 是等价的 MySQL语法：SELECT column_name(s)FROM table_nameWHERE conditionLIMIT number; 实例SELECT *FROM PersonsLIMIT 5; Oracle 语法SELECT column_name(s)FROM table_nameWHERE ROWNUM = number; 示例： SELECT *FROM PersonsWHERE ROWNUM =5; 演示数据库 在本教程中，我们将使用著名的Northwind示例数据库。 以下是”Customers” 表中的数据： CustomerID CustomerName ContactName Address City PostalCode Country 1 Alfreds Futterkiste Maria Anders Obere Str. 57 Berlin 12209 Germany 2 Ana Trujillo Emparedados y helados Ana Trujillo Avda. de la Constitución 2222 México D.F. 05021 Mexico 3 Antonio Moreno Taquería Antonio Moreno Mataderos 2312 México D.F. 05023 Mexico 4 Around the Horn Thomas Hardy 120 Hanover Sq. London WA1 1DP UK 5 Berglunds snabbköp Christina Berglund Berguvsvägen 8 Luleå S-958 22 Sweden SQL SELECT TOP 实例 以下SQL语句从”Customers” 表中选择前两条记录： 示例： SELECT TOP 2 * FROM Customers; SQL SELECT TOP PERCENT 实例 以下SQL语句从 “Customers” 表中选择前50%的记录： 示例： SELECT TOP 50 PERCENT * FROM Customers; SQL TOP，LIMIT和ROWNUM示例以下SQL语句从”Customers”表中选择前三个记录： SELECT TOP 3 * FROM Customers; 以下SQL语句显示了使用LIMIT子句的等效示例： SELECT * FROM CustomersLIMIT 3; 以下SQL语句显示了使用ROWNUM的等效示例： SELECT * FROM CustomersWHERE ROWNUM = 3; SQL TOP PERCENT示例以下SQL语句从”Customers”表中选择记录的前50％：SELECT TOP 50 PERCENT * FROM Customers; 添加一个条件 以下SQL语句从”Customers”表中选择国家为”Germany”的前三条记录： SELECT TOP 3 * FROM CustomersWHERE Country=Germany; 以下SQL语句显示了使用LIMIT子句的等效示例： SELECT * FROM CustomersWHERE Country=GermanyLIMIT 3; 以下SQL语句显示了使用ROWNUM的等效示例： SELECT * FROM CustomersWHERE Country=Germany AND ROWNUM = 3; 为什么要LIMIT你的查询结果 LIMIT作为一种简单的分页方法，主要是为了减少数据返回的时间，如果您查询一个非常大的表(例如一个有数十万或数百万行的表)而不使用限制，那么您可能会等待很长时间才能显示所有的结果，所以使用LIMIT可以减少查询数据返回的时间，提高效率。"},{"title":"SQL BETWEEN运算符","path":"/wiki/sql/between.html","content":"SQL BETWEEN 运算符 BETWEEN运算符用于选取介于两个值之间的数据范围内的值。 BETWEEN运算符选择给定范围内的值。值可以是数字，文本或日期。 BETWEEN运算符是包含性的：包括开始和结束值，且开始值需小于结束值。 SQL BETWEEN 语法SELECT column_name(s)FROM table_nameWHERE column_name BETWEEN value1 AND value2; 要否定BETWEEN运算符的结果，可以添加NOT运算符： SELECT column_name(s)FROM table_nameWHERE column_name NOT BETWEEN value1 AND value2; 演示数据库 在本教程中，我们将使用著名的Northwind示例数据库。 以下是”Products”表中的数据： ProductID ProductName SupplierID CategoryID Unit Price 1 Chais 1 1 10 boxes x 20 bags 18 2 Chang 1 1 24 - 12 oz bottles 19 3 Aniseed Syrup 1 2 12 - 550 ml bottles 10 4 Chef Anton’s Cajun Seasoning 1 2 48 - 6 oz jars 22 5 Chef Anton’s Gumbo Mix 1 2 36 boxes 21.35 BETWEEN 运算符实例 以下SQL语句选择价格在10到20之间的所有产品： 示例： SELECT * FROM ProductsWHERE Price BETWEEN 10 AND 20; NOT BETWEEN 操作符实例要显示前面示例范围之外的产品，请使用NOT BETWEEN： 示例： SELECT * FROM ProductsWHERE Price NOT BETWEEN 10 AND 20; 带有 IN 的 BETWEEN 操作符实例 以下SQL语句选择价格在10到20之间但CategoryID不是1、2或3的所有产品： 示例： SELECT * FROM ProductsWHERE (Price BETWEEN 10 AND 20)AND NOT CategoryID IN (1,2,3); 带有文本值的 BETWEEN 操作符实例 以下SQL语句选择所有带有ProductName BETWEEN’Carnarvon Tigers’和’Mozzarella di Giovanni’的产品： 示例： SELECT * FROM ProductsWHERE ProductName BETWEEN Carnarvon Tigers AND Mozzarella di GiovanniORDER BY ProductName; 带有文本值的 NOT BETWEEN 操作符实例 以下SQL语句选择ProductName不是BETWEEN’Carnarvon Tigers’和’Mozzarella di Giovanni’的所有产品： 示例： SELECT * FROM ProductsWHERE ProductName NOT BETWEEN Carnarvon Tigers AND Mozzarella di GiovanniORDER BY ProductName; 示例表 下面是选自 “Orders” 表的数据： OrderID CustomerID EmployeeID OrderDate ShipperID 10248 90 5 741996 3 10249 81 6 751996 1 10250 34 4 781996 2 10251 84 3 791996 1 10252 76 4 7101996 2 带有日期值的 BETWEEN 操作符实例 以下 SQL 语句选取 OrderDate 介于 ‘04-July-1996’ 和 ‘09-July-1996’ 之间的所有订单： 示例： SELECT * FROM OrdersWHERE OrderDate BETWEEN #07/04/1996# AND #07/09/1996#; 请注意，在不同的数据库中，BETWEEN 操作符会产生不同的结果！ 在一些数据库中，BETWEEN 选取介于两个值之间但不包括两个测试值的字段。 在一些数据库中，BETWEEN 选取介于两个值之间且包括两个测试值的字段。 在一些数据库中，BETWEEN 选取介于两个值之间且包括第一个测试值但不包括最后一个测试值的字段。 因此，请检查您的数据库是如何处理 BETWEEN 操作符！"},{"title":"SQL IN运算符","path":"/wiki/sql/in.html","content":"SQL IN 运算符 IN 运算符允许您在 WHERE 子句中指定多个值。 IN 运算符是多个 OR 条件的简写。 SQL IN 语法SELECT column_name(s)FROM table_nameWHERE column_name IN (value1, value2, ...); 或者SELECT column_name(s)FROM table_nameWHERE column_name IN (SELECT STATEMENT); 演示数据库 在本教程中，我们将使用著名的 Northwind 示例数据库。 以下数据选取自”Customers” 表： CustomerID CustomerName ContactName Address City PostalCode Country 1 Alfreds Futterkiste Maria Anders Obere Str. 57 Berlin 12209 Germany 2 Ana Trujillo Emparedados y helados Ana Trujillo Avda. de la Constitución 2222 México D.F. 05021 Mexico 3 Antonio Moreno Taquería Antonio Moreno Mataderos 2312 México D.F. 05023 Mexico 4 Around the Horn Thomas Hardy 120 Hanover Sq. London WA1 1DP UK 5 Berglunds snabbköp Christina Berglund Berguvsvägen 8 Luleå S-958 22 Sweden IN 操作符实例 以下 SQL 语句选取位于”Germany”，”France”和”UK”的所有客户： 代码示例：SELECT * FROM CustomersWHERE Country IN (Germany, France, UK); 以下 SQL 语句选取不在”Germany”，”France”或”UK”中的所有客户： 代码示例：SELECT * FROM CustomersWHERE Country NOT IN (Germany, France, UK); 以下 SQL 语句选取来自同一国家的所有客户作为供应商： 代码示例：SELECT * FROM CustomersWHERE Country IN (SELECT Country FROM Suppliers);"},{"title":"SQL LIKE运算符","path":"/wiki/sql/like.html","content":"SQL LIKE 运算符 在WHERE子句中使用LIKE运算符来搜索列中的指定模式。 有两个通配符与LIKE运算符一起使用： ％ - 百分号表示零个，一个或多个字符 _ - 下划线表示单个字符 **　注意：** MS Access使用问号（?）而不是下划线（_）。 百分号和下划线也可以组合使用！ SQL LIKE 语法SELECT column1, column2, ...FROM table_nameWHERE columnN LIKE pattern; **　提示** ：您还可以使用AND或OR运算符组合任意数量的条件。 下面是一些使用’％’和’_’通配符显示不同LIKE运算符的例子： LIKE 运算符 描述 WHERE CustomerName LIKE ‘a%’ 查找以”a”开头的任何值 WHERE CustomerName LIKE ‘%a’ 查找以”a”结尾的任何值 WHERE CustomerName LIKE ‘%or%’ 在任何位置查找任何具有”or”的值 WHERE CustomerName LIKE ‘_r%’ 在第二个位置查找任何具有”r”的值 WHERE CustomerName LIKE ‘a_%_%’ 查找以”a”开头且长度至少为3个字符的值 WHERE ContactName LIKE ‘a%o’ 找到以”a”开头，以”o”结尾的值 演示数据库在本教程中，我们将使用著名的Northwind示例数据库。 以下是”Customers”表中的数据： CustomerID CustomerName ContactName Address City PostalCode Country 1 Alfreds Futterkiste Maria Anders Obere Str. 57 Berlin 12209 Germany 2 Ana Trujillo Emparedados y helados Ana Trujillo Avda. de la Constitución 2222 México D.F. 05021 Mexico 3 Antonio Moreno Taquería Antonio Moreno Mataderos 2312 México D.F. 05023 Mexico 4 Around the Horn Thomas Hardy 120 Hanover Sq. London WA1 1DP UK 5 Berglunds snabbköp Christina Berglund Berguvsvägen 8 Luleå S-958 22 Sweden SQL LIKE 运算符实例 以下SQL语句选择以”a”开头的CustomerName的所有客户： **　代码示例：** SELECT * FROM CustomersWHERE CustomerName LIKE a%; 以下SQL语句选择客户名称以”a”结尾的所有客户： **　代码示例：** SELECT * FROM CustomersWHERE CustomerName LIKE %a; 以下SQL语句选择客户名称在任何位置都具有”or”的所有客户： **　代码示例：** SELECT * FROM CustomersWHERE CustomerName LIKE %or%; 以下SQL语句选择客户名称在第二位具有”r”的所有客户： **　代码示例：** SELECT * FROM CustomersWHERE CustomerName LIKE _r%; 以下SQL语句选择客户名称以”a”开头且长度至少为3个字符的所有客户： **　代码示例：** SELECT * FROM CustomersWHERE CustomerName LIKE a_%_%; 以下SQL语句选择联系人名称以”a”开头并以”o”结尾的所有客户： **　代码示例：** SELECT * FROM CustomersWHERE ContactName LIKE a%o; 以下SQL语句选择客户名称不以”a”开头的所有客户： **　代码示例：** SELECT * FROM CustomersWHERE CustomerName NOT LIKE a%; 以下SQL语句选择客户名称以”a”开头，以”s”结尾的5位字符的所有客户： **　代码示例：** SELECT * FROM CustomersWHERE CustomerName LIKE a___s;"},{"title":"SQL Wildcards通配符","path":"/wiki/sql/wildcards.html","content":"SQL Wildcards 通配符 通配符用于替换字符串中的任何其他字符。 通配符与 运算符一起使用。在 WHERE 子句中使用LIKE运算符来搜索列中的指定模式。 有两个通配符与 LIKE 运算符一起使用： ％ - 百分号表示零个，一个或多个字符 _ - 下划线表示单个字符 **　注意：** MS Access 使用星号(*）通配符而不是百分比符号(%)通配符。 MS Access 使用问号（?）而不是下划线（_）。 在MS Access和SQL Server中，你也可以使用： [ charlist ] - 定义要匹配的字符的集合和范围 [^ charlist ]或[！charlist ] - 定义不匹配字符的集合和范围 通配符也可以组合使用！ 下面是一些使用’％‘和’_‘通配符显示不同LIKE运算符的例子： LIKE运算符 描述 WHERE CustomerName LIKE ‘a%’ 查找以”a”开头的任何值 WHERE CustomerName LIKE ‘%a’ 查找以”a”结尾的任何值 WHERE CustomerName LIKE ‘%or%’ 在任何位置查找任何具有”or”的值 WHERE CustomerName LIKE ‘_r%’ 在第二个位置查找任何具有”r”的值 WHERE CustomerName LIKE ‘a_%_%’ 查找以”a”开头并且长度至少为3个字符的值 WHERE ContactName LIKE ‘a%o’ 查找以”a”开始并以”o”结尾的任何值 演示数据库 在本教程中，我们将使用著名的 Northwind 示例数据库。 以下是 “Customers” 表中的数据： CustomerID CustomerName ContactName Address City PostalCode Country 1 Alfreds Futterkiste Maria Anders Obere Str. 57 Berlin 12209 Germany 2 Ana Trujillo Emparedados y helados Ana Trujillo Avda. de la Constitución 2222 México D.F. 05021 Mexico 3 Antonio Moreno Taquería Antonio Moreno Mataderos 2312 México D.F. 05023 Mexico 4 Around the Horn Thomas Hardy 120 Hanover Sq. London WA1 1DP UK 5 Berglunds snabbköp Christina Berglund Berguvsvägen 8 Luleå S-958 22 Sweden 使用 SQL % 通配符 以下 SQL 语句选择所有客户 City 以字母”ber”开头： 示例： SELECT * FROM CustomersWHERE City LIKE ber%; 以下 SQL 语句选择 City 中包含”es”模式的所有客户： 示例： SELECT * FROM CustomersWHERE City LIKE %es%; 使用 SQL _ 通配符 以下 SQL 语句选择 City 以任意字符开头，然后是”erlin”的所有客户： 示例： SELECT * FROM CustomersWHERE City LIKE _erlin; 以下 SQL 语句选择 City 开头为”L”，后面是任意字符，后面是”n”，后面是任意字符，加”on”的所有客户： 示例： SELECT * FROM CustomersWHERE City LIKE L_n_on; 使用 SQL [charlist] 通配符 以下 SQL 语句选择所有客户 City 以”b”、”s”或”p”开头： 示例： SELECT * FROM CustomersWHERE City LIKE [bsp]%; 以下 SQL 语句选择”City”以”a”、”b”或”c”开头的所有客户： 示例： SELECT * FROM CustomersWHERE City LIKE [a-c]%; 以下 SQL 语句选择所有客户 City 不以”b”、”s”或”p”开头： 示例： SELECT * FROM CustomersWHERE City LIKE [!bsp]%; 使用[！charlist]通配符 以下两个 SQL 语句选择所有客户的城市不以”b”，”s”或”p”开头： 代码示例： SELECT * FROM CustomersWHERE City LIKE [!bsp]%; 要么： 代码示例： SELECT * FROM CustomersWHERE City NOT LIKE [bsp]%;"}]